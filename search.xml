<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(转)doTween插件使用介绍</title>
      <link href="2021/doTween/"/>
      <url>2021/doTween/</url>
      
        <content type="html"><![CDATA[<p>今天我们一起来研究一下DOTween动画插件。</p><p>对于该插件官网上的介绍是：“DOtween是一种快速，高效，完全类型安全的面向对象的动画引擎。”</p><p>将它导入Unity中，可以很方便快速地帮我们完成许多动画效果。本篇文章主要将通过一些小案例来介绍DOTween的使用方法和主要功能。</p><a id="more"></a><p>DOTween导入：</p><p>打开Unity创建一个新工程,将下载好的DOTween插件直接拖入Project面板：</p><p><img src="https://image.xiaomo.info//blog/v2-ec2fe2032ac2aa4468a7b022c1300638_1440w.jpg" alt="img"></p><p>基本用法</p><p>一.移动动画</p><p>创建一个小球，位置设为世界坐标原点（0，0，0），挂上此脚本：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> DG.Tweening; <span class="comment">//引入命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DOTWeenTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        transform.DOMove(<span class="keyword">new</span> Vector3(<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>), <span class="number">3</span>); <span class="comment">//脚本物体3秒从当前位置移动到世界坐标(4,3,0)位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-dae4d8ac280b237d210afd5e1892094d_b.webp" alt="img"></p><p>我们发现，使用的DOTween插件后，transform居然能够点出DOMove方法，这是因为C#的拓展性，使其和Unity的一些类能产生链接，是不是感觉很神奇。因为这些特性，使我们在使用起来非常简单易懂，想让哪个物体动，就让它的transform组件来调用DOTWeen的方法就可以了。</p><p>DOMove相关方法：</p><p>世界坐标上移动：transform.DOMove</p><p>本地坐标上移动：transform.DOLocalMove</p><p>世界坐标的X轴上移动：transform.DOMoveX</p><p>本地坐标的X轴上移动：transform.DOLocalMoveX</p><p>通过以上的方法，我们学会了制作移动动画，但这个动画会自动播放，并且，播放完了就销毁了，不能重复使用，后面我们会通过一些设置来避免。</p><p>二.From()方法的使用</p><p>2秒时间从世界坐标（2，2，0）处回到自身当前位置：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">transform.DOMove(<span class="keyword">new</span> Vector3(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>), <span class="number">1</span>).From();</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-b1a6447ae7f03ece15e5fae60d762a93_b.jpg" alt="img"></p><p>从以自身为原点的坐标系（2，2，0）处回到自身当前位置：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">transform.DOMove(<span class="keyword">new</span> Vector3(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>), <span class="number">2</span>).From(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-85f3326935bd2d39e3aa41abbef6a6bd_b.jpg" alt="img"></p><p>三.动画正放与倒放</p><p>1.场景中创建两个按钮，来控制动画的播放顺序：</p><p><img src="https://image.xiaomo.info//blog/v2-c61bba776ce7b06fb00e2e946be72f48_1440w.jpg" alt="img"></p><p>2.为小球挂上脚本：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> DG.Tweening; <span class="comment">//引入命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DOTWeenTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Tweener twe; <span class="comment">//声明一个Tweener对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123; </span><br><span class="line">        twe = transform.DOMove(<span class="keyword">new</span> Vector3(<span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>), <span class="number">2</span>);<span class="comment">//将动画保存在Tweener对象中 </span></span><br><span class="line">        twe.Pause();<span class="comment">//暂停,防止自动播放  </span></span><br><span class="line">        twe.SetAutoKill(<span class="literal">false</span>);<span class="comment">//关闭动画自动销毁  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建两个方法事件,控制前放后倒放</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Forward</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        twe.PlayForward(); <span class="comment">//该动画正放</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Back</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        twe.PlayBackwards(); <span class="comment">//该动画倒放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.将两个方法分别挂在各自按钮上，运行程序：</p><p><img src="https://image.xiaomo.info//blog/v2-2a421966fb003d5b1f2a4fdc981870bc_b.jpg" alt="img"></p><p>当点击了前放后才能倒放，也就是说不能一上来就倒放。</p><p>其它方法：</p><p>Pause()： 暂停动画</p><p>SetLoops(3)： 循环3次</p><p>四.设置动画曲线</p><p>在以上我们展示的动画效果中我们，我们通过观察可以看到，物体在播放移动动画时速度是由快到慢（倒放除外），这种现象是由动画播放时的动画曲线决定的，我们是可以通过修改动画曲线来改变物体动画效果的，比如我们可以将运动效果改成由慢到快：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tweener twe = transform.DOMoveX(<span class="number">5</span>, <span class="number">2</span>); <span class="comment">//3秒时间在世界坐标中,让X轴移动到5的位置</span></span><br><span class="line">    twe.SetEase(Ease.InCubic); <span class="comment">//由慢到快</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-609f4ad9472c8aab950592b5dc423c7e_b.jpg" alt="img"></p><p>而动画曲线的种类非常多，可以自己去试试看：</p><p><img src="https://image.xiaomo.info//blog/v2-7e488251807f877746c20a269a2fc3b9_1440w.jpg" alt="img"></p><p>五.使用动画改变颜色</p><p>既然让物体移动是通过使用transform来点出DOTWeen的方法，那改变颜色就是让材质组件来调用DOTWeen的方法即可：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Material material = GetComponent&lt;MeshRenderer&gt;().material;</span><br><span class="line">    material.DOColor(Color.red, <span class="number">3</span>); <span class="comment">//3秒变红</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-c34a01a037c3b15e0c78eaadf54d717e_b.jpg" alt="img"></p><p>六.动画事件</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Material material;</span><br><span class="line">Tweener twe;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    material = GetComponent&lt;MeshRenderer&gt;().material;</span><br><span class="line">    twe = material.DOColor(Color.red, <span class="number">3</span>); <span class="comment">//3秒变红</span></span><br><span class="line">    twe.OnComplete(ChangeColour); <span class="comment">//动画播放结束时调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeColour</span>(<span class="params"></span>) <span class="comment">//变色</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    twe = material.DOColor(Color.blue, <span class="number">2</span>); <span class="comment">//2秒变蓝</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-fe8c6a34eb64115d058b65e8fd71e957_b.jpg" alt="img"></p><p>先变红，再变蓝</p><p>动画事件相关方法:</p><p>OnStart： 动画第一次播放时调用</p><p>OnPlay： 动画每次从暂停状态解除时调用(包括初次播放)</p><p>Pause： 动画暂停时调用一次</p><p>OnUpdate： 动画播放过程中每帧调用</p><p>OnStepComplete： 每次动画播放结束时调用(受循环次数影响)</p><p>OnComplete： 每次动画播放结束时调用(不受循环次数影响,且倒放时不适用)</p><p>七.文本动画</p><p>1.让文本逐字显示：</p><p>使用UGUI创建一个Text，挂上该脚本:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Text text = GetComponent&lt;Text&gt;();</span><br><span class="line">    text.DOText(<span class="string">"最心爱的情人,却伤害我最深,为什么你背着我爱别人"</span>, <span class="number">5</span>); <span class="comment">//5秒时间将这段文字逐字显示</span></span><br><span class="line">    text.DOColor(Color.green, <span class="number">5</span>); <span class="comment">//颜色逐渐变绿</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-414bac494ef22b9b6c520714239cd8f8_b.jpg" alt="img"></p><p>我们可以结合刚才讲到的动画事件，来组一个连续的文字显示：</p><p><img src="https://image.xiaomo.info//blog/v2-a63a2d5059d4f567b54a65dab3903fde_b.jpg" alt="img"></p><p>代码如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Text text = GetComponent&lt;Text&gt;();</span><br><span class="line">    Tweener twe = text.DOText(<span class="string">"下面是有奖竞猜:"</span>, <span class="number">2</span>);</span><br><span class="line">    twe.OnComplete(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        text.text = <span class="string">""</span>;</span><br><span class="line">        text.DOText(<span class="string">"富奸老贼是怎么死的?"</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.让文本逐渐显示：</p><p>首先要让文字调成完全透明状态：</p><p><img src="https://image.xiaomo.info//blog/v2-97bb44cd44daa3d50a236660cc7127d9_1440w.jpg" alt="img"></p><p>挂上脚本运行程序：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Text text = GetComponent&lt;Text&gt;();</span><br><span class="line">    text.DOFade(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//2秒时间让A值变为1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-10393f948f84af85dcc87431b9e7ff3d_b-20210104105723116.jpg" alt="img"></p><p>八.屏幕抖动动画：</p><p>很多游戏中经常会用到的效果，比如在战斗的时候，主角被攻击会伴随着一阵屏幕抖动,然后</p><p><img src="https://image.xiaomo.info//blog/v2-f84649b539d618fda7bd7dcc9ab606bd_1440w.jpg" alt="img"></p><p>以此来提高游戏打击感，其实所谓的屏幕抖动其实就是摄像机位置的抖动，还是离不开Transform动画：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//transform.DOShakePosition(2); //在随机方向震动2秒,幅度默认为1</span></span><br><span class="line">    transform.DOShakePosition(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">//在随机方向震动3秒,振幅为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个脚本挂摄像机上，运行程序：</p><p><img src="https://pic3.zhimg.com/v2-885127801a1f9db0b3c40f3b2ca9aa66_b.jpg" alt="img"></p><p>或者：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">     <span class="comment">//transform.DOShakePosition(2); //在随机方向震动2秒,幅度默认为1</span></span><br><span class="line">     <span class="comment">//transform.DOShakePosition(2, 3); //在随机方向震动2秒,振幅为3</span></span><br><span class="line">     transform.DOShakePosition(<span class="number">3</span>, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>));<span class="comment">//只在世界坐标Y轴上震动3秒,振幅为2</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/v2-ae7d330e8e9a8987da852d94d818d08e_b.jpg" alt="img"></p><p>右下角的摄像机视角可看到，在X轴上并没有发生位移。</p><p>抖动动画不仅有位置上的抖动，还有选择上的抖动和缩放上的抖动：</p><p>旋转抖动： transform.DOShakeRotation</p><p>缩放抖动： transform.DOShakeScale</p><p>我们来看下缩放抖动是什么效果：</p><p>创建一个脚本挂在一个Cube上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Start()</span><br><span class="line">&#123;</span><br><span class="line">    transform.DOShakeScale(2, new Vector3(3, 2, 0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-ddca81162ba212ec744335bc454e230a_b.jpg" alt="img"></p><p>九.可视化编辑</p><p>除了使用脚本来播放DOTween动画外，该插件还拥有可视化编辑的功能。</p><p>动画编辑器</p><p>1.为需要做动画的物体添加DoTweenAnimation组件：</p><p><img src="https://image.xiaomo.info//blog/v2-b8e29b6a592b4ad8d84bf2edf2fd0d03_1440w.jpg" alt="img">直接点击可以进行打开或关闭</p><p>2.选择要做动画的组件：</p><p><img src="https://image.xiaomo.info//blog/v2-06c4a1e711d1e99c7466f1839e249f08_1440w.jpg" alt="img">这里面就包括了我们之前介绍的移动，变色，抖动，文字显示等功能。</p><p>3.当要做动画的组件不存在时则报错，非常方便：</p><p><img src="https://image.xiaomo.info//blog/v2-5cc60445746e3c0bd015e816ca834d0d_1440w.jpg" alt="img"></p><p>该物体上没有Text组件。</p><p>4.各种参数：</p><p><img src="https://image.xiaomo.info//blog/v2-e00bc0a466f6ece74ee996653348592b_1440w.jpg" alt="img"></p><p>5.当在编辑器关闭了自动播放后，使用代码播放:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DOTweenAnimation a; <span class="comment">//在编辑器界面将挂有该组件的物体拖进来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a.DOPlayForward(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.如果不使用代码，使用点击按钮播放,在按钮的事件窗口将物体拖进去,找到DoTweenAnimation组件,调用播放方法:</p><p><img src="https://image.xiaomo.info//blog/v2-f1a9c6b4386c70632f63562cfd2dc546_1440w.jpg" alt="img"></p><p>路径编辑器</p><p>使用该组件可以做一些寻路的效果：</p><p>1.场景中创建一个Cube，添加DoTweenPath组件：</p><p><img src="https://image.xiaomo.info//blog/v2-a006823259d0da671a540e4e93e10bfe_1440w.jpg" alt="img"></p><p>2.运行程序：</p><p><img src="https://image.xiaomo.info//blog/v2-3c36483c346e11b211fc213b42c00318_b.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doTween </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二个5年人生计划（2020~2024[(29岁~34岁]）</title>
      <link href="2021/mySecondFiveYearsLifePlan/"/>
      <url>2021/mySecondFiveYearsLifePlan/</url>
      
        <content type="html"><![CDATA[<p>2021年了，离制定<a href="https://blog.xiaomo.info/2016/2016StudyPlan/">第一个5年计划</a>己经过去了将近5年， 回头再看这些内容发现有些现在己经被更好用的工具替代了, 或者被吞并了， 不禁感叹技术的发展让人眼花缭乱， gulp被webpack取代， atom被vscode收购，github被巨硬重金买下， angular2都特么混到V11了， 当时觉得牛逼的jquery纷纷被各大厂抛弃。 国民老公被记在小本本上， 国民老婆从林志玲也变成了黑泽志玲。 时间真是把杀猪刀， 被生活无情的按在地上摩擦了5年， 从一个刚入社会的小萌新变成一个大叔。 我秃了但我感觉我也变强了， 感觉是时候制定一个新的5年计划了， 合计合计下一个五年继续折磨我的头发的会是哪些东西。 最后敢问各位道友， 日本植发哪家强？</p><a id="more"></a><h1 id="第一个五年学习计划回顾"><a href="#第一个五年学习计划回顾" class="headerlink" title="第一个五年学习计划回顾"></a>第一个五年学习计划回顾</h1><h2 id="2016年"><a href="#2016年" class="headerlink" title="2016年"></a>2016年</h2><p>​    刚毕业的时候作为一个小萌新，对什么都充满了好奇，但什么都不懂。最开始使用FTP存代码也没有觉得有什么不对，至到后来毕业设计项目的代码再也找不到了痛苦了好一阵子。后来知道了SVN这个神奇的东西之后感概技术改变人生，如果早点知道这个代码管理工具就不至于丢失具有纪念意义的代码了。</p><p>​    由于大学不是计算机专业的关系，毕业之后从事技术相关岗位的同学屈指可数。或者说只有我一个人，不知道当时怎么有那么大的勇气自己一个人踏入陌生的领域。也许是因为毕业的压力吧，不得不感慨人的潜力是巨大的。大四的时候到处参加宣讲会，腾讯、百度、360、YY、九城等至今还记得的一些公司，然而都被无情的摩擦。最终进入了一家游戏研发（CP）的公司开发游戏。这一年来主要维护着一款线上的游戏，添加一些新的功能和新的活动，正常的版本更新维护等等。</p><p>​    这一年接触了新的开发工具SVN，新的IDE JetBrains IDEA，新的同性交友网站 <a href="https://github.com/houko" target="_blank" rel="noopener">gayhub</a> ，新的游戏框架 netty,mina等，新的Java测试框架Junit。学习了html/css/js的基本页面布局开发技术，linux系统的基本操作等。算是基本上入了编程的门槛。</p><p>技术上来说：</p><ol><li> 了解了游戏开发的游戏程</li><li> 开始使用github保存自己的代码</li><li> 使用hexo搭建了自己的<a href="https://blog.xiaomo.info/">博客</a></li><li> 使用vue构建了自己的<a href="https://xiaomomo.info/" target="_blank" rel="noopener">主站</a></li><li> 学习了web开发的基本知识</li><li> 能够使用java开发游戏后端的功能</li><li> 学会了使用linux环境进行运行环境的搭建和版本的更新维护</li><li> 能够熟练的使用jetbrains家族的产品</li><li> 学会了vim编辑器的功能</li><li> 使用oh-my-zsh对我的终端进行了各种折腾</li></ol><h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><p>​    人生的20多年来，如果说到玩游戏我还是非常有信心的，从小学时的掌机、小霸王、街机，到初中时的电脑游戏CS、红警、流星蝴蝶结、仙剑、侠盗飞车，再到后来的网络游戏传奇、问道、诛仙、QQ飞车、QQ炫舞等比较主流的游戏都玩了个遍。但是从来没有想过自己能够开发出一款人尽皆知的游戏。但是就在这一年我开始参与开发公司的一款flash pc游戏，学到了游戏开发的各种技术。曾经神秘的游戏背后的逻辑原来都不是魔法，就像普通人观看魔术表演一样只会感叹多么神奇，而进入了游戏开发行业才发现原来游戏的制作也是那么的普通且~有趣。</p><p>​    这一年我解开了游戏开发神秘的面纱，让游戏制作不再遥远。像以前玩游戏的的使用道具不知道什么原理，原来逻辑是将玩家背包数据中要使用的道具删掉，再执行对应道具的功能的操作最后将道具使用通知和使用效果的通知发送给客户端，客户端收到消息后播放对应的动画刷新UI等等。再比如说原来游戏中的金币/元宝等看起来都是一样的，但是背后还分了很多种类比如充值的元宝、系统送的元宝、交易道具获得的元宝等等。虽然玩家看到的是这些种类的总数，并无感知，但是它们有各种不同的itemId，实际上是不同的东西。只不过购买道具时允许扣除多个名字都是元宝的itemId而已。这些我之前都是不了解的，进入游戏行业之前玩游戏就是单纯的玩游戏，为了快乐时光也好为了打发时间也好，目的都是很单纯的。但是入了游戏行业之后玩游戏的时候会不自觉的思考某个功能是怎么实现的，如果是我的话我会怎么设计，怎么实现这样的功能等等。这样的变化在其他行业也能体验，我有一个要好的朋友做了UI设计之后打开APP的第一件事就是研究App的设计、交互是否合理，有什么值得借鉴的地方，有什么地方有待改进等等。不自觉的会进行思考。</p><p>​    技术上来说：</p><ol><li> 将自己的个人网站全面切换到https</li><li> 使用宝塔管理我的linux运行环境</li><li> 掌握了spring boot 连接mysql进行CURD的各种操作</li><li> 掌握了markdown的语法，能够使用marndown写各种分享</li><li> 购买了属于自己的ecs服务器和域名，尝试从0到上线一款新项目的整个流程</li><li> 学会了nginx服务器的基本配置和使用</li><li> 学习了angualr2的开发使用方法</li><li> 学习了webpack的各种配置</li><li> 学习了node开发相关的技术,koa/express连接mysql/mongdo开发API和网站</li><li> 接触到了lombok开发插件，从此便离不开</li><li> 在各种api文档同步问题了深受折磨后接触到了swagger UI，从此经手的所有项目的API都会被我集成swaggerUI</li><li> 使用Java的jsonp和node的爬虫框架进行数据爬取收集技术的学习和开发</li><li> 学习了maven构建工具的使用和多模块项目的配置。</li><li> 深入学习了spring boot/spring data jpa等后端开发框架的技术</li><li> 系统的学习了vim这个编辑器之神，能够较为熟练的使用vim进行文件编辑</li><li> 折腾了黑苹果，搭建了mac上ios开发的环境。</li><li> 学习了android/ios的移动端开发技术，做了直播软件和汇率换算的软件的demo。</li><li> 学习了shell脚本的开发。</li><li> 狠心买了mac book air丐版，不用在黑苹果系统下委屈求全了，主开发环境切换到mac os。</li><li> 买了hhkb这款只有60个键位的信仰键盘，曾经很长一段时间CTO在我电脑上调试代码都无法找到快捷键。</li><li> 经过了边工作边学车的半年煎熬时光（半年无休，单休+1天学车）终于拿到了驾照。</li></ol><h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><p>​    在经历了2016年近半年的无休工作，感觉到单休的工作模式己经失去了生活的意义，因此有了换一份双休工作的念头。但是在CTO的挽留下选择继续开发游戏，因为这也是我热爱的工作内容。在2017年过完年之后买了心心念念的神车思域，还做了很多攻略加装了各种配件，对它待遇相当不错。计划着2018年结婚，所以2017年计划到日本旅行，正好当时有一个小伙伴也想到日本旅行。所以便一起做攻略在10月长假进行了为期半个月的旅行并生产了一篇 <a href="https://blog.xiaomo.info/2017/JapanTravel/">日本游戏攻略</a></p><p>​    开始作为主程开发新的h5游戏，工作状态也发生了非常大的变化，原来单休的工作时间己经是不堪重负了再加上作为主程进行新项目的研发加班、通宵成了家常便饭。由于制作人(93年生)经验欠缺，技术能力不足等各种原因有着做不完的需求，乱作一团的版本规划，在原本规划好的版本里强行强入新需求等等。现在回头想想也感觉自己作为主程逆来顺受，没有据理力争为组员争取到合理的开发时间导致大家工作内容十分繁重。</p><p>技术上来说</p><ol><li> 考取了oracle的java gold的认证。</li><li> 独立带项目，不再是做好项目功能开发就能算工作完成的状态。</li><li> 协调部门之间的工作，工作内容的分配，项目进度的评估，代码的review，线上版本的更新，开发环境的维护等等工作都需要自己来作。所以对于学习工作所需之外新东西的时间就变得非常有限。 <a href="https://blog.xiaomo.info/2018/mainProjectJobs/">主程职责总结和反思</a></li><li> 从之前的纯业务逻辑开发开始转向性能相关问题关注点，jvm优化等内容。</li><li> 开始有计划性的阅读和学习JDK源码 <a href="https://blog.xiaomo.info/tags/JDK%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/">JDK源码系列</a></li><li> 开始学习docker的基本使用</li><li> 学习unity3d游戏客户端开发技术，做了<a href="https://github.com/houko/Tank" target="_blank" rel="noopener">坦克大战</a>，<a href="https://github.com/houko/FlappyBird" target="_blank" rel="noopener">愤怒的小鸟</a>，<a href="https://github.com/houko/game2048" target="_blank" rel="noopener">2048</a>等小游戏和<a href="https://github.com/houko/ARPGGame" target="_blank" rel="noopener">RPG游戏Demo</a></li><li> 学习了c#游戏服务端开发框架 photonServer的使用 <a href="https://github.com/houko/PhotonEngineServer" target="_blank" rel="noopener">PhotonServer</a></li><li> 开源了<a href="https://github.com/houko/SpringBootUnity" target="_blank" rel="noopener">SpringBootUnity</a>的template类型的项目，获得开源中国首页推荐和精品项目 <a href="https://gitee.com/hupeng_admin/SpringBootUnity" target="_blank" rel="noopener">gitee</a></li></ol><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><p>如果说2018年是工作之后的人生转折点的话，那么2019年这一年就是转折之后的习惯过程。从大学远离故乡，到毕业到沿海城市就业，再到去年来到东京,这一个个的决定无不是对自我挑战的过程，这期间伴随着阵痛，同时也伴随着成长。有的人习惯了熟悉的生活非常害怕改变，怕换工作，怕搬家，怕交新朋友。各种各样的改变都会对生活带来冲击，但也带来了新鲜感，还是要看自己怎么样来看待这种改变。</p><h4 id="进入华人派遣"><a href="#进入华人派遣" class="headerlink" title="进入华人派遣"></a>进入华人派遣</h4><p>来日本之前也算是搜集了不少的信息，经过了各种考量觉得进华人派遣公司是当前的最优选择。一般来说到日本做IT相关工作，如果没有日本留学经验，都会经历<code>华人派遣公司——&gt;日本大手派遣公司——&gt;个人事业主(可能跳过)——&gt;日本自社开发（在日外企）</code>这个过程，而我正处在这个初级阶段但不想长期处于这个阶段，所以为此也做了一些准备。</p><ul><li>  2017年年底通过了Oracle java认证</li><li>  2019年7月考取了日语能力测试N2证书</li><li>  2019年8月获取日本自动车驾照</li><li>  2019年11月参加了中国国家软件考试(软件设计师)，但不幸没有通过，以后有机会再考吧</li><li>  2019年12月参加了日语能力测试N1测试（同样没过）</li><li>  学习Angular/Vue前端开发框架(Javascript/Typescript)</li><li>  学习Unity3D</li></ul><p>但是，如果按照这个计划的话在日本转职至少要2次。日本是一个对跳槽容忍度比较低的国家，一份工作干不到2年就辞职会觉得不稳定，对找下份工作和申请永住签证都有一定的影响，所以打算直接进入游戏公司工作。</p><p>技术上来说</p><ol><li><p> 学习了sass/less/postcss等一些css增强框架</p></li><li><p> 学习了bootstrapUI框架的使用</p></li><li><p> 看完了 javascript 高级编程和javascript高级程序设计</p></li><li><p> 看完了何品翻译的netty in action的书</p></li><li><p> 初步学了一下 深入jvm原理的书</p></li><li><p> 学习了代码重构、effective java等提交代码质量的内容</p></li><li><p> 学习了restful风格的API开发</p></li><li><p> 学习了 git flow开发工作流</p></li><li><p> 折腾了zsh+iTerms的终端环境</p></li></ol><p>生活上来说</p><ol><li> 女儿出生了，变正了真正的一家3口</li><li> 拿到了日本的驾照</li><li> 拿到了N2的日语证书</li><li> 给家人办理了家族签证</li><li> 面试了几家游戏开发公司，对游戏开发有的新的理解和思考。</li><li> 拿到了游戏开发公司的offer，但由于被所在的华人派遣公司摆了一道没能及时入职。</li><li> 这一年时间到刚到日本，工作习惯发生了不少了变化，所有新的知识学习都记录了onenote导致博客更新频率非常感人</li></ol><h2 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2><p>2020年整体来说，是一个非常魔幻的一年，至今都还是像做梦一样。打乱了很多既定计划，遇到非常多困难的时刻，不过这些困难并不是我一个人碰到，全世界都笼罩在魔幻当中至今没有出来。因为2019年过年没有回老家，所以2020年决定回家过年。于是在1月20日东京飞杭州再从杭州自驾回湖北十堰。回国之前己经听说了一些相关コロナ相关的消息，当时的同事也告诫我要注意安全，所以当时回家时刻意绕过武汉从襄阳回家。当时武汉发布消息的人被抓，央视出来背书说不要危言耸听，我竟然就这么相信了，只买了一袋5个装的口罩就回去了。导致之后的好几个月被关在家里不能出门，口罩几十块一个而且还买不到。买菜不能出门，在微信群发消息订购志愿者去采购，结果送的米发霉严重每次做饭整个家里都有很大一股霉味。说实话，那段时间真怀疑有没有轻度抑郁，莫名的非常暴躁，电脑也没带回家，什么事都做不了。一直到5月份才能回到杭州找了一份临时的工作，为了还房贷车子也卖掉了；半年没有收入，房子没交房也住不了，杭州的房租还要交，日本的房租还也得交，还有孩子要养，感觉每个月都是焦头烂额，现在想想挺过2020真的是太难太难了。一直到8月份日本才允许工作商务签证的入境，算算时间整整半年时间的计划全部打乱，家庭支付严重不足，定的学习目标全部耽搁，我和这个世界一起停摆了半年，终于在8月底回日本渡过了居家14天的隔离之后在9月份开始正式回归工作岗位，截至到11月份生活才慢慢回归正轨。虽然到现在为止整个世界依然被コロナ折磨着，但是经过了将近一年的共处，说麻木也好，习惯也好，这个世界的人们也接受了コロナ存在的事实，虽然每天还是做着正常的工作，过着正常的生活，但是心中依旧在担忧，在忍耐这场灾难什么时候能过去。</p><p>技术中来说</p><ol><li> 学习了新的开发语言Dart</li><li> 学习了新的移动端开发框架Flutter</li><li> 学习了新的游戏引擎Unreal Engine</li><li> 使用unreal engine 的蓝图做了一款小游戏</li><li> 制作了一款跨平台的电商app己上线到apple store和google play</li><li> 对spring boot及相关技术的使用更加熟练了</li><li> 系统了学习了mybatis-plus框架的用法</li><li> 学会了oauth2.0相关协议及开发的内容</li><li> 学会了jwt的相关技术和使用方式</li><li> 开发了google sign in和google one tap signin 的新功能</li><li> 开发了<a href="https://blog.xiaomo.info/2020/webAppleSignIn/">apple sign in</a> 的新功能</li><li> 学习了vue相关的技术（包括vue2.x,vue3.x,<a href="https://blog.xiaomo.info/2020/vueFrameworkVuex/">vuex</a>,element-ui,<a href>nuxt.js</a>等）</li><li> 学习了react相关的技术</li><li> 学习了<a href="https://blog.xiaomo.info/2020/awsCommandLineUse/">aws cli</a>的基本命令用法</li><li> 学习了node项目性能监控工具pm2的用法</li><li> 学习了<a href="https://blog.xiaomo.info/2020/AwsSqsUse/">aws sns/sqs</a>和spring boot集成的用法</li><li> 学习了redis的<a href="https://blog.xiaomo.info/2020/AwsSqsUse/">pub/sub模式</a>用法</li><li> 学习了<a href="https://blog.xiaomo.info/2020/dynamoDB/">aws dynamoDB</a>的集成和CRUD相关的操作</li><li> 开了一篇长期向的博客<a href="https://blog.xiaomo.info/2020/npmPackageCollection/">分享npm常用库的用法</a></li><li> 学习了前端项目/后端项目集成datadog进行数据上报的用法</li><li> 学习了http请求框架fetch/axios/redaxios等</li></ol><p>生活上来说</p><ol><li> 决定长期在日本居住</li><li> 更新了3年的新签证</li><li> 本来打算软考的计划被耽误</li><li> 为了还贷失去了小车</li><li> 杭州的房子交房了，买了些家具出租出去</li><li> 和老婆孩子在日本团聚了</li><li> 报名了12月份的N1考试，但是没有花太多时间学日语大概率通不过</li><li> 给孩子申请了明年的保育园</li></ol><h1 id="第二个五年学习计划"><a href="#第二个五年学习计划" class="headerlink" title="第二个五年学习计划"></a>第二个五年学习计划</h1><h2 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h2><h3 id="※-C"><a href="#※-C" class="headerlink" title="※ C#"></a>※ C#</h3><p>主要是针对unity3d需要用到c#语言，大概语法己经了解，和java类似使用起来没有难度。后续如果想要提升的话就需要通过项目实践来提升熟练度，打算仔细想想做一个什么样的游戏项目来提高自己的技能熟练度。</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>Unreal engine劝退的大分部人感觉应该是c++这个开发语言，c/c++这门语言古老而稳重，学习曲线较高。从入门到放弃至少有5次以上了，但是虚幻5是真的香啊，所以必须要学习。不过因为工作上用不到，而且时间比较有限暂时还不会花费较多时间在上面。</p><h3 id="※-Typescript"><a href="#※-Typescript" class="headerlink" title="※ Typescript"></a>※ Typescript</h3><p>最开始接触ts是在angular2的beta版本的时候，当时还同步推出了一个Dart分支的angular，但是基本上没什么人使用。我当时就很好奇dart是个什么东西，但是却没有深究。平时的工作中后端主要使用java，前端主要使用ts，所以ts的学习一直在进行中。目来来说公司的项目基本上都在往ts上转，所以现在对ts的掌握程度是能够应对正常的开发，但是还需要进一步的提高。</p><h3 id="※-Java"><a href="#※-Java" class="headerlink" title="※ Java"></a>※ Java</h3><p>java是我进入编程行业的入门语言，虽然它没有js和python简单，但是它是面向对象的语言，结构严谨，比较贴近自然语言，学习难度不大。截至到2020年底使用java己经有近10年时间，从jdk6到现在主要使用的版本jdk11，总体感觉java的生态比较稳定，就算不升级到java11,使用java7或者java8也完全能够胜任日常的工作。刚开始接触的ssh框架+jsp和servelet现在也不怎么听得到了。springboot/spring cloud成了后端开发的标配，后续的计划是围绕着spring boot/spring cloud深入学习。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>最开始接触python语言是作为游戏主程的2018年，当时需要维护一些组内的开发工具的脚本。bash的语言实在是用不习惯，所以将老的工具都用python重写了，后续的工具开发也是python开发的。虽说如此，也是对python的语法仅仅是能使用，时间久不用的话语法又忘的差不了。如果想要深入学习的话还是需要以项目为基础进行锻炼，后续的打算是自己如果再写api的话可以用python的flask来写，而不是java。</p><h3 id="※-Dart"><a href="#※-Dart" class="headerlink" title="※ Dart"></a>※ Dart</h3><p>无意间接触了跨平台开发框架flutter，再次看到了熟悉的开发语言dart。这一次不会只混个脸熟了，为学习flutter为契机顺便学会了dart。这个开发言语是到目前为止所有学习的开发语言中最省力的一个，语法像是java+typescirpt的组合。所以学习flutter的时候主要精力放在框架上，语言顺带看了下语法基本上就会使用了。dart语法目前来说感觉没有太大的提升空间，移动端开发的业务也不会因为dart的语法有障碍，所以暂时没有深入研究dart的必要性。</p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><h3 id="※-日语"><a href="#※-日语" class="headerlink" title="※ 日语"></a>※ 日语</h3><p>算起来接触日语也有5年时间了，但是这5年来断断续续的记了些单词学了些语法，自学基本上就是这个样子。有空的时候就学学，没有系统性，所以日语的能力一直是基本能用的样子。虽然也考到了N2证书，但是感觉和日本的小学生语言能力应该差不多，所以后续的主要精力会花费在学习日语上，争取早日考过N1。不论是因为N1证书高级人才加分也好，还是在这个国家生活也好，没有理由不好好学日语。</p><h3 id="※-英语"><a href="#※-英语" class="headerlink" title="※ 英语"></a>※ 英语</h3><p>作为一个技术者，华人还是挺悲哀的。基本上所有的技术都是外国的，活在大陆还有高墙，想学个东西经常会因为网络环境异常的麻烦。所以培养自己的外语能力还是非常重要的，作为一个技术者只要还在这个圈子就要不断的学习。而中文圈子里的内容要么是无脑复制粘贴没有验证就随便往网上发的，要么搜到的资料是老的，基本上用不了。很多工具/框架的官网都只提供了英文的文档，所以英语能力的提升也是极为的重要。但是学习语言是一个非常耗费时间和精力的事情，同时学习多门语法还要兼顾工作和生活是非常困难的。所以目前主要的精力还是日语，平时工作的时候刻意多看一些英文的官方文档。不要用翻译，遇到不认识的词查了记一记提升也是很明显的。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>从正式开发工作时就开始使用IDEA作为开发的主要的编辑器，无论是对快捷键的熟悉程度还是对工具的使用熟练度都足以应付日常的工作，所以之后我还是会继续以jetbrains系列的开发工具使用为主。</p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>折服于vscode的轻量和颜值，我不断的在对vscode的尝试和放弃中挣扎。被jetbrains系列工具惯坏了感觉其他开发工具都不好用，于是尝试了多次都放弃了。但是随着这么多次尝试也是有收获的，也慢慢的习惯了用vscode开发，虽然感觉有很多不顺手的地方，但是配合着IDEA使用也没什么问题。后续的计划是java开发使用IDEA，前端开发使用vscode然后以IDEA为辅助。多学习一些vscode的用法，找一找vscode好用的插件。</p><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>开发flutter的时候用android studio不仅能构建android应用也能够开发ios应用，这也是我我喜欢jetbrains家族的IDE的重要原因，生态非常的好，想要用到的东西基本上都有对应的功能。但是jetbrains也有不好的地方，非常的吃配置，价格昂贵等等(划掉，反正白嫖)。所以平时写flutter也可以使用vscode安装flutter插件来工具，如果需要构建android环境的话可以使用android studio打开构建。</p><h3 id="Rider"><a href="#Rider" class="headerlink" title="Rider"></a>Rider</h3><p>它同样是jetbrains家族的IDE，是c#语法开发的IDE。网上都说visual studio是宇宙第一IDE。但是和rider相比，我没有觉得它有任何一点能够胜过rider，而且还是跨平台的IDE。所以我写c#的时候首选会用rider。</p><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><p>这同样是jetbrains公司的IDE，是针对python开发的IDE。从我学习python开始，大一统推荐的都是pycharm，如果你问我如果写python不用pycharm的话…我应该会用vim吧。</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>vim作为linux系统的默认编辑器，想当初打开vim编辑内容后却不知道怎么退出的萌新状态现在虽然是找不回来了。但是对vim的使用也仅仅是停留了能够对文件进行编辑，并没有达到使用vim进行项目开发的熟练程序。后续可能会考虑在写前端的时候用vim练一练熟练度。</p><h3 id="emacs"><a href="#emacs" class="headerlink" title="emacs"></a>emacs</h3><p>emacs作为神之编辑器，还是挺神秘的。emacs的学习曲线比vim要难上很多，还要使用Lisp编程语言配置环境，适合想折腾的极客。我想我还是愿意折腾一下的。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>git是在我短暂的使用svn后切换过来的，使用体验和当初从eclipse转到IDEA的感觉是一样的，感觉真的是太得劲了。分支系统，多任务并行 ，git flow开发模式，逻辑清晰合理，团队协作必备良方。现在对git的使用算是基本上没什么问题，但是能再深入学学当然是更好的。</p><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>tmux作为分屏最终解决方案，听到了太多关于它美好的描述，但是一直是停留在传说上。据说它能够提高工作效率，保存工作环境后一键恢复，听起来还是有点小激动，也列在我的学习计划中。</p><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h3><p>用flutter也算是做了一个完整的线上项目了，google play和apple store都己经上线且版本更新己超过10个。算是一个商业级的项目经验了，flutter是一个非常年轻的框架，而且野心不了。对web的支持还没有完全成熟，而且google的funsia系统也还没有发布。还算是在蛰伏期，我还是非常看好flutter的前景的。以后有什么好的想法需要做app的话我肯定会首选flutter。</p><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p>现在公司的项目前端技术栈还是挺多的，三大框架轮番上阵，自然vue也少不了。vue是唯一一个华人的非大公司背景的和另外另个巨头同一地位的前端框架，其工具链生态，学习成本，文档等各方面都是非常的值得学习。经过了3个后台的开发，现在基本上是对vue的使用没太大问题，但是感觉需要深入学习的东西还有很多。vue3也出来了，vue+typescript的组合肯定会更好。</p><h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h3><p>偏后端的全栈开发者应该都对css比较头疼，它不像编程语言那样不是1就是2。它像一层层形状不同的网叠在一起，最终呈现出来的样子是什么样的得在浏览器里实际查看才知道，而且它没有变量，没有条件判断，没有函数。 scss是一个css的增强框架，如果你对scss不熟，也完全可以在scss文件里写css语法。如果你很擅长scss，那也可以写变量，函数，判断各种和编程语言一样的控制css，是不是觉得很酷。。</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>学习最终是要付诸实践的，没有应用于项目的学习在一定程度上来说是无用的学习。所以学习新技术当然除了兴趣使然，更重要的是以公司的实际需求出发。react是目前全世界使用最为广泛的前端开发框架，公司项目也在使用，有什么理由不学呢。</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>前5年的学习规划中webpack还处在版本1，还是一个非常稚嫩的框架。当时的学习目标还是browerify、grant、gulp等等构建工具，短短几年时间webapck己经实现了大一统。当时学习webpack的时候各种配置学的迷迷糊糊，现在各大框架都将webpack封装到自己的框架内部，给开发者发提供了简单友好的API配置。新入行的小萌新甚至感受不到webpack的存在，但是没有感知并不代表它不存在。在实际的项目开发中很多的配置需要根据实际情况定制，所以手动配置webpack还算是一个刚需。</p><h3 id="nutx-js"><a href="#nutx-js" class="headerlink" title="nutx.js"></a>nutx.js</h3><p>nuxt.js是vue SSR（服务端渲染）的解决方案，它集成了vue,vue-router,vuex等各种工具。按照约定的结构开发项目，便能够自动生成路由渲染出html，是一个非常值得学习的框架。</p><h2 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h2><h3 id="Spring-boot"><a href="#Spring-boot" class="headerlink" title="Spring boot"></a>Spring boot</h3><p>springboot这个框架的出现可以算是java开发者的福音，当初学习spring的时候各种xml的配置把人折腾的欲仙欲死。有了springboot，不需要下载tomcat，不需要配置xml，创建项目就可以写业务，怎么会有这么完美的框架存在。它的功能和spring全家桶大而全，基本上涵盖了所有业务所需的技术，所以学习难度也还是非常大的。现在的业务开发中虽然使用没有问题，也开源一个将近千星的springboot相关的项目，依然不敢说对springboot精通，还有很多需要学习的地方。</p><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>hibernate和myatis是对db的不同实现，它是基于ORM的实现，可以通过实体类生成sql表。也可以在整合了spring data jpa的情况下使用自然语言代替sql进行查询，感觉非常的极客，如果自己做一些小项目用它可以提高效率。但是灵活程度比mybatis要差，至至怎么选择得看项目实际情况。既然能做选择，前提是得会用，所以学习它是必要的。</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p>mybatis从入行到现在乃至以后，这个框架一直是绕不过的。灵活方便，使用简单。关于mybatis自动生成xml和条件查询的使用还需要查询示例。</p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>个人感觉像是python版的express,大而全的一个web框架，个人更喜欢flask这种轻而小的框架。</p><h3 id="express-js"><a href="#express-js" class="headerlink" title="express.js"></a>express.js</h3><p>node版本的spring，大而全，用起来比较省心。</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><p>pythonp写api的首选框架</p><h3 id="koa2"><a href="#koa2" class="headerlink" title="koa2"></a>koa2</h3><p>node写api的首选框架</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>从业以来使用最久也是业界使用最普遍的数据库，免费强大，使用方便。</p><h3 id="graphql"><a href="#graphql" class="headerlink" title="graphql"></a>graphql</h3><p>比较新兴的数据库，个人很喜欢，以后有机会可以在项目中使用一下。</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>缓存数据库的一只独秀，想在项目上加个缓存数据库的话基本上就是redis了。</p><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><h3 id="Unity3D"><a href="#Unity3D" class="headerlink" title="Unity3D"></a>Unity3D</h3><p>之前调查过很长一段时间，不管是在中国还是在日本市场，unity的工作岗位和使用都较unreal多出很多，资料也相对较全，学习容易。所以陆陆续续用unity做了好几个小游戏，后续打算进一步的深化相关技能。</p><h3 id="Unreal-Engine"><a href="#Unreal-Engine" class="headerlink" title="Unreal Engine"></a>Unreal Engine</h3><p>一直对unreal抱有极大的兴趣，但是因为c++不熟悉所以一直是从入门到放弃的循环。看到虚幻5发布的视频之后坚定了入了循环的阵营，又重新开始学习虚幻。发现学习blueprint入门比较简单，也使用了unreal的blueprint做了一款游戏。但是因为精力有限，有很长一段时间没有继续学习unreal了。虽然ue功能强大，但是因为学习难度大，个人开发者很少有人驾驭得了，所以后续打算还是以unity为切入点，如果有机会进入游戏开发公司再学ue吧。</p><h2 id="高级人才"><a href="#高级人才" class="headerlink" title="高级人才"></a>高级人才</h2><h3 id="N1证书"><a href="#N1证书" class="headerlink" title="N1证书"></a>N1证书</h3><p>虽然报了2020年12月6的N1考试，但是因为2020年耽误了太多时间导致学习日语的时间极为有限。对于考试合格己不报希望，来年6月再战N1。</p><h3 id="软件设计师"><a href="#软件设计师" class="headerlink" title="软件设计师"></a>软件设计师</h3><p>本来计划2020年6月考软件设计师证书的，但是被取消了之后所以计划也被打乱，看2021年有没有机会考吧。</p><h3 id="基本情报技术者"><a href="#基本情报技术者" class="headerlink" title="基本情报技术者"></a>基本情报技术者</h3><p>目前日语能力太差导致不太能看懂相关试题的内容，所以暂时不打算考试基本情报。计划排在N1通过之后再考吧。</p><h3 id="工作相关"><a href="#工作相关" class="headerlink" title="工作相关"></a>工作相关</h3><p>随着公司项目的需要学习新的技术并进行总结，并发布博客。</p><p>坚持每年进行一个总的复盘，总结一年来学到的东西，之后还需要加强的地方。</p><h3 id="前程相关"><a href="#前程相关" class="headerlink" title="前程相关"></a>前程相关</h3><p>坚持学习新的知识</p><h3 id="生活质量相关"><a href="#生活质量相关" class="headerlink" title="生活质量相关"></a>生活质量相关</h3><p>尽快考过N1，为了更好的和别人进行沟通交流。</p><p>申请高级人才签证，因为目前证书都没有考分数达不到80，所以2021年年初就以70分为基准申请吧。</p><h3 id="家人有关"><a href="#家人有关" class="headerlink" title="家人有关"></a>家人有关</h3><p>已经申请了2021年4月孩子的保育园，2021年2月份能够得到结果能否入园，如果能够入园就送老婆去日语培训班学习日语。</p>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转)tailwindcss介绍</title>
      <link href="2020/tailwindcss/"/>
      <url>2020/tailwindcss/</url>
      
        <content type="html"><![CDATA[<p>这篇文章我会介绍TailwindCSS的一些基础概念和用法，以及用它可以做什么。我们还将尝试使用TailwindCSS制作一些组件，以在我们在其他框架（例如Bootstrap，Bulma等）上使用预先设计的组件时感受到不同。</p><a id="more"></a><p>在学习TailwindCSS之前，我们将讨论CSS的基础知识，以便我们了解CSS的概念和术语。如果您已经对CSS有很好的理解，则可以跳过CSS部分。</p><h4 id="先学习CSS"><a href="#先学习CSS" class="headerlink" title="先学习CSS"></a>先学习CSS</h4><p>在进一步了解TailwindCSS之前，我将邀请您返回学习CSS。目的是能够理解CSS本身的术语和概念。</p><p>通过重新研究CSS，我们将对基本CSS有了很好的了解。这样我们就可以轻松学习CSS框架。</p><p><strong>CSS</strong></p><p>CSS（级联样式表）是一种提供以标记（例如HTML）编写的样式文档的语言。 CSS还向浏览器指示HTML的显示方式。简而言之，CSS允许您设置字体类型，字体大小，背景色以及设置Web文档中包含的其他元素的样式。</p><p>例如，您具有如下的HTML代码，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt; Hi, my name is Muhamad Nauval Azhar &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>上面的代码可在HTML中创建段落。当然，您应该完整地编写它，从doctype到&lt;/ html&gt;。</p><p>CSS控制段落的样式，第一个示例我们将文本颜色更改为红色。然后代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#123; </span><br><span class="line">  color: red; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是CSS中的样式规则，用于设置在Web文档中使用tag </p><p>的HTML元素中文本的颜色。</p><p>请记住，上面的CSS代码不会只更改一个段落，而是将标记</p><p>上的整个文本颜色更改为红色。</p><p><strong>只是文字的颜色？</strong></p><p>CSS不仅可以调整文本的颜色，而且CSS可以做很多事情。您可以更改字体，背景颜色，设置背景图像，创建网格系统，创建菜单以及其他与Web界面相关的内容。</p><p><strong>我们不会在这里完整讨论基本CSS</strong></p><p>我们将不再完整讨论CSS的基础知识。因为，我假设您已经了解CSS中的概念和术语，例如选择器，CSS规则，CSS声明，属性，值，供应商前缀和其他内容。但是，作为开头和提醒，我将仅简要讨论刚才提到的CSS的基本概念。即使您不太了解CSS，您也</p><p>可以读完这篇文章，但是，这种风险通常会导致愚蠢的问题，邀请人们在公开讨论中欺负您。当然，您不想，对吗？</p><h4 id="编写CSS"><a href="#编写CSS" class="headerlink" title="编写CSS"></a>编写CSS</h4><p>编写CSS代码并将其插入HTML中，有几种方法。基本上有3种方法可以提及，包括：内部样式，外部样式和内联样式。</p><p><strong>1.内部风格</strong></p><p>使用HTML中的tags <style>以这种方式插入CSS代码。假设我们有一个如下的HTML结构，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;title&gt; Learn CSS &lt;/title&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">    &lt;p&gt; 30分钟学习TailwindCSS &lt;/p&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后，我们要在HTML中设置样式或将CSS代码插入HTML，然后编写要在标签<style>之间使用的CSS规则，并在关闭标签&lt;/ head&gt;之前将其粘贴。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;title&gt; &lt;/title&gt;   </span><br><span class="line">    &lt;style&gt; </span><br><span class="line">      p &#123; </span><br><span class="line">        color: red; </span><br><span class="line">      &#125; </span><br><span class="line">    &lt;/style&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">    &lt;p&gt; 30分钟学习TailwindCSS &lt;/p&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>2.外部风格</strong></p><p>与以前的方法不同，我们将所有CSS规则记录在与HTML文件不同的文件中。创建一个扩展名为.css的新文件，在此我给出一个示例，其名称为style.css，文件内容如下，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#123; </span><br><span class="line">  color: red; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要将文件插入HTML，然后使用<link>标记，如下所示，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;title&gt; &lt;/title&gt; </span><br><span class="line">    &lt;link rel = &quot;stylesheet&quot; href = &quot;style.css&quot;&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">    &lt;p&gt; 30分钟学习TailwindCSS &lt;/p&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>属性href旨在识别我们在HTML中使用的CSS文件。尽管attributerel旨在指定两个文件之间的关系，但在此上下文中，HTML和CSS由于CSS是样式表，因此为属性指定样式表的值为value。</p><p><strong>3.内联样式</strong></p><p>此方法与内部样式之间存在相似之处，因为它们都不在其他文件中编写CSS规则。此方法非常简单，因为您无需在CSS代码中编写选择器。您将立即编写CSS声明，因为此方法会将CSS代码直接插入所需的tag中。举个例子，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;title&gt; &lt;/title&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">    &lt;p style = &quot;color: red;&quot;&gt; 30分钟学习TailwindCSS &lt;/p&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>乍一看，此方法是如此简单且易于实现，但是，请花点时间想象一下，如果您有1000个标签<p>，并且要求它们具有相同的样式。当然，您只需要复制它，对吗？但是，当您需要更改CSS声明中的属性值时，该怎么办？那么，如果CSS声明具有10个以上的属性，怎么办？当然，这会打扰您。</p><p>除了这三种方法，您还可以使用JavaScript在HTML中插入CSS样式。简单来说，JavaScript有一个DOM（文档对象模型），DOM将HTML视为对象，并允许您通过JavaScript提供的API来处理样式，内容，属性等。</p><p>您也可以根据条件申请上述三种方式。要记住的事情是编写可重用，可以重用，可维护或可以维护的CSS规则，尽管在编写CSS代码时还需要应用其他一些方面，但是至少要结合这两点刚才您可以编写代码CSS是人类可读的。</p><h4 id="CSS很简单"><a href="#CSS很简单" class="headerlink" title="CSS很简单"></a>CSS很简单</h4><p>CSS是一种简单的语言，具有简单易懂的语法或书写风格。正如您之前所做的，更改文本的颜色仅需要3行代码，对吗？</p><p>让我们从此CSS语法开始进行基本的手术。 CSS很简单，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123; </span><br><span class="line">  // CSS 声明 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先不要惊慌，因为您听到了一个从未听过的术语，有时这个术语听起来很酷，即使它可能很容易理解。</p><p>让我们检查一下上面的CSS代码，将其分为几个要点，以使其更易于理解，</p><p><strong>1. CSS规则</strong></p><p>上面的代码是CSS规则。一段代码，将使HTML中的一个或多个元素生效。根据CSS声明，将赋予每个CSS规则不同的效果。 CSS声明写在左括号和右括号之间，如下所示：。{CSS declarartion}</p><p><strong>2. CSS选择器</strong></p><p>如前所述，CSS规则可以影响一个或多个元素，这取决于选择器。简而言之，选择器是CSS中允许我们选择要设置样式的元素的一种方式。在一个Web文档中，当然有多个HTML标记，因此，通过选择器，我们可以一次选择一个或多个HTML元素以赋予相同的样式。</p><p>选择器可以是HTML标记名称，类名称，ID，属性标记，伪选择器等。</p><p>选择器标签：您只需要写下标签的名称，即其课程，例如：p，div，表格，视频，跨度等等。</p><p>选择器ID：您需要在名称ID的开头添加井号（＃），例如＃header，＃footer，＃main等。</p><p>选择器类：您需要在类名称的开头添加一个点，例如：.name，.box，.widget，.menu等。</p><p><strong>3. CSS声明</strong></p><p>这是使用CSS进行“愉悦”的重点。因为，您可以在此处为之前选择的元素设置所需的样式。 CSS声明是一种设置CSS规则样式的方法。 CSS声明由属性，冒号，值和分号组成。之前，我们已经做了一行CSS声明，即：color：red;。该代码是单行CSS声明。为</p><p>什么叫CSS声明？因为在代码中有一个属性，即颜色“ acolon”，即：。一个值，即红色。最后是一个分号，即；。</p><p>属性是给出样式类型的指令。用小写或小写字母和符号“-”作为分隔符写的属性（如果名称peroperty由2个以上的音节组成）。每个属性名称都有其自己的作用。给定的效果还取决于给定的值，给定的值也必须与属性名称有关。在前面的示例中，我们使用pr</p><p>opertycolor更改了文本的颜色，使其变为红色，因为我们将valuesred分配给了property。因此，属性的值和名称必须相关。</p><p>给属性赋值，即在冒号或冒号之后：。一行CSS声明以分号或分号;结尾。最后一个位置的CSS声明不需要用分号关闭，但是使用时更好。</p><p>当然，我们可以在一个CSS规则上编写多个CSS声明。我们需要多少CSS声明取决于我们要为元素创建哪种样式。例如，我们要更改类别为name的元素的文本颜色，背景和字体。因此，代码如下</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">name</span> &#123; </span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'arial'</span>; </span><br><span class="line">  <span class="attribute">color</span>: red; </span><br><span class="line">  <span class="attribute">background-color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是CSS规则，它将文本的颜色更改为红色，背景更改为蓝色，并将字体更改为arial。</p><p>我们已经在本节中了解了CSS。在下一节中，我们将讨论TailwindCSS，并且假定您已经了解CSS的基本知识和术语。如果您听不懂，可以重复阅读直到您理解为止。</p><h4 id="TailwindCSS"><a href="#TailwindCSS" class="headerlink" title="TailwindCSS"></a>TailwindCSS</h4><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWVZEB.png" alt="xxx"></p><p>如果您遇到的通用框架由许多组件预先设计组成，则在此TailwindCSS中，您将找不到诸如按钮，卡片，警报，轮播等其他预先设计的组件。因为TailwindCSS不是UI工具包，而是实用程序优先的框架，用于快速构建自定义界面。</p><p>简而言之，在TailwindCSS中，有许多小类代表CSS声明。因此，当您要创建组件时，则需要使用其中的一些小类来创建您要引用的组件。</p><p>例如，您要制作一个按钮组件。在Bootstrap框架或其他具有预先设计的组件的框架中，您或多或少会这样做：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，在TailwindCSS中，您需要这样做：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"bg-blue-500 text-white font-bold py-2 px-4 rounded"</span> &gt;</span> </span><br><span class="line">  Button </span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的类表示它们自己的属性和值。</p><ul><li>  bg-blue-500代表propertybackground-color：＃4299e1;</li><li>  text-white代表属性颜色：#fff;</li><li>  font-bold代表属性font-weight：700;</li><li>  py-2，即padding-y或padding-vertical表示属性padding-top：0.5rem;底部填充：0.5rem；</li><li>  px-4表示padding-x或padding-horizontal表示属性padding-left：1rem; andpadding-right：1rem；</li><li>  四舍五入代表边界半径：.25rem；</li></ul><p><strong>看起来很复杂吧？</strong></p><p>但是，像这样，即使您使用相同的框架，您与其他人创建的UI也会有所不同。与使用UI套件的情况不同，创建的UI趋于相同，因为在UI套件中可以使用预先设计的组件，尽管可以覆盖样式，但是结果可能不会有太大差别。</p><p>无法将TailwindCSS与UI工具包框架（例如Bootstrap，Bulma或Spectre）相提并论，因为它们基本上具有不同的概念。</p><p>如果在UI工具包框架中需要创建一些自定义类来自定义所使用的预先设计的组件，而在TailwindCSS中则可以减少自定义类的使用。因为，要制造组件，您需要通过编译实用程序类从头开始。</p><h4 id="TailwindCSS不是唯一的实用程序优先框架"><a href="#TailwindCSS不是唯一的实用程序优先框架" class="headerlink" title="TailwindCSS不是唯一的实用程序优先框架"></a>TailwindCSS不是唯一的实用程序优先框架</h4><p>TailwindCSS于2017年11月2日首次发布。在此之前，有许多框架具有类似TailwindCSS的概念，包括：</p><ul><li>  <a href="https://github.com/tedconf/shed-css">Shed.CSS</a></li><li>  <a href="https://tachyons.io/">TACHYONS</a></li><li>  <a href="https://github.com/monarkee/beard">Beard</a></li><li>  <a href="https://turretcss.com/">TurretCSS</a></li><li>  等等</li></ul><p>上述框架大约落后4-5年。因此，在TailwindCSS之前，实用程序优先框架的概念已经被应用。换句话说，TailwindCSS并不是唯一的实用程序优先框架。</p><p>除了上述框架之外，Bootstrap还具有仅在版本4中添加的实用程序类。以前，它们也已添加，但是当版本3被命名为帮助程序类时。</p><p>尽管时间不长，但TailwindCSS一直吸引着人们的注意，因为在不到2年的时间里，它已在GitHub上获得了10,000多个星级。尽管TailwindCSS本身最近已踩到1.0.0-beta.4版本。</p><p>但是，我们不能断定TailwindCSS比其他效用优先框架要好，因为要得出结论，我们需要测试其中一些框架。不一定也适用于所有情况的框架。</p><p>因此，如果您正在寻找一个由一组预先设计的组件组成的框架，也许TailwindCSS不适合您。但是，如果您想构建一个具有标识的接口，则TailwindCSS可能适合您。</p><p>您不会驾驶跑车越野</p><p><strong>可定做</strong></p><p>尾风也非常可定制。您可以更改默认颜色，添加断点屏幕尺寸，添加系列字体以及添加其他实用程序类。为什么可以如此自定义？ Tailwind有一个旨在保存所有配置的配置文件，在此配置中，您还可以指定要使用的实用程序类。另外，更酷的是，您可以设</p><p>置前缀，以便通过提供前缀可以最大程度地减少类名冲突。</p><p>示例文件tailwind.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">  important: <span class="literal">true</span>, </span><br><span class="line">  theme: &#123; </span><br><span class="line">    fontFamily: &#123; </span><br><span class="line">      display: [<span class="string">'Gilroy'</span>, <span class="string">'sans-serif'</span>], </span><br><span class="line">      body: [<span class="string">'Graphical'</span>, <span class="string">'sans-serif'</span>], </span><br><span class="line">    &#125;, </span><br><span class="line">    extend: &#123; </span><br><span class="line">      colors: &#123; </span><br><span class="line">        cyan: <span class="string">'# 9cdbff'</span>, </span><br><span class="line">      &#125;, </span><br><span class="line">      margin: &#123; </span><br><span class="line">        <span class="string">'96'</span>: <span class="string">'24rem'</span>, </span><br><span class="line">        <span class="string">'128'</span>: <span class="string">'32rem'</span>, </span><br><span class="line">      &#125;, </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">  variants: &#123; </span><br><span class="line">    opacity: [<span class="string">'responsive'</span>, <span class="string">'hover'</span>] </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置文件是可选的-不需要。 TailwindCSS将在项目的根文件夹中查找配置文件。如果没有，它将使用默认的config。</p><h4 id="TailwindCSS有多大"><a href="#TailwindCSS有多大" class="headerlink" title="TailwindCSS有多大"></a>TailwindCSS有多大</h4><p>与其他流行的框架相比，Tailwind具有相当大的文件大小。</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWVZJR.png" alt="xxx"></p><p>考虑到Tailwind由实用程序类的集合组成，这是合理的。当然，可能的解决方案是删除我们不使用的实用程序类。但是如何？要解决此问题，可以使用<a href="https://www.purgecss.com/">PurgeCSS</a>。它是一个可以帮助您删除未使用的CSS的工具。酷吧？</p><p>这样，您的CSS文件大小可以只有13kb。与Firefox Send一样，他们使用TailwindCSS并仅以13.1kb（在di-Minify之后）和4.7kb（在di-gzip之后）的大小归档CSS。</p><h4 id="开始使用TailwindCSS"><a href="#开始使用TailwindCSS" class="headerlink" title="开始使用TailwindCSS"></a>开始使用TailwindCSS</h4><p>从这里开始，我将TailwindCSS称为Tailwind。</p><p>从安装到开发，Tailwind都有不错的文档。</p><p><img src="https://image.xiaomo.info//blog/9VYYXMLHRYZH6BF2QY6875.png" alt="xxx"></p><p>特别是添加了Algolia搜索引擎。这样在学习Tailwind时会更加自在。</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWVZP7.png" alt="xxx"></p><p>要安装Tailwind，您可以通过NPM或Yarn，而且要确保已安装Node.js。</p><h4 id="安装Tailwind"><a href="#安装Tailwind" class="headerlink" title="安装Tailwind"></a>安装Tailwind</h4><p>您可以通过运行以下命令从创建新文件夹开始：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir mytailwind</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> mytailwind</span><br></pre></td></tr></table></figure><p>那么您需要通过包管理器之一Yarn或NPM将Tailwind添加为依赖项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NPM </span></span><br><span class="line">npm install tailwindcss --save-dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># Yarn </span></span><br><span class="line">yarn add tailwindcss --dev</span><br></pre></td></tr></table></figure><p>上面的命令会将Tailwind作为devdependencies添加到package.json中。</p><h4 id="将Tailwind添加到CSS文件"><a href="#将Tailwind添加到CSS文件" class="headerlink" title="将Tailwind添加到CSS文件"></a>将Tailwind添加到CSS文件</h4><p>Tailwind的指令旨在使您更轻松地将Tailwind代码与CSS代码一起添加。将以下代码添加到CSS代码的第一行：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@tailwind</span> components; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@tailwind</span> utilities; </span><br><span class="line"></span><br><span class="line">/ ** 你的 CSS 代码 ** /</span><br></pre></td></tr></table></figure><p>该指令将不能被浏览器直接读取，因此该指令将由Tailwind CLI转换为CSS代码。</p><p>假设您的CSS文件名为style.css，然后使用Tailwind CLI使用以下命令来转换或处理CSS代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx tailwind build styles.css -o output.css</span><br></pre></td></tr></table></figure><p>使用上述方法，每次更改CSS文件时都需要运行命令。为避免这种情况，您可以采取其他方法将Tailwind处理为CSS。您可以使用PostCSS，Webpack，Gulp或Laravel Mix。</p><p>Tailwind❤CDN</p><p>事实证明，可以通过CDN安装Tailwind！像一般的大多数库或框架一样，它必须具有CDN，以便可以轻松安装。</p><p>但是，不幸的是，使用CDN时有些事情您无法做，包括：</p><ul><li>  您无法自定义默认的Tailwind主题</li><li>  您不能使用指令tailwind</li><li>  您不能启用已禁用的功能</li><li>  您无法安装第三方插件</li></ul><p><strong>开始前</strong></p><p>HTML对每个元素都有默认样式。例如div，此元素具有固有的CSS声明，即display: block;。</p><p>有关具有默认样式的元素的完整列表，请在此处查看。</p><p>每个浏览器都有其默认样式，包括：</p><ul><li>  IE浏览器</li><li>  火狐浏览器</li><li>  Opera</li><li>  Chrome / Webkit</li></ul><p>您可以想象，当您建立一个网站并在其他浏览器中访问它时，您赋予先前样式的某些元素的外观会稍有不同，因为它与默认浏览器样式“混合”了。这样，您网站的外观就会不一致-尽管不会太多。</p><p>为了克服此问题，CSS框架或库通常具有基本样式，该样式旨在覆盖每个浏览器中的默认样式。这样，HTML中的元素在每个浏览器中将具有相同的默认样式。</p><p>Tailwind有其自己的基本样式，称为“<strong>preflight</strong>”或以前称为“ <strong>base</strong>”。 Tailwind使用<a href="https://github.com/necolas/normalize.css/">Normalize.css</a>第三方库来执行此操作。您可以在<a href="https://tailwindcss.com/docs/preflight/">此处</a>查看Tailwind为哪些元素提供了默认样式。</p><h4 id="Tailwind上的颜色"><a href="#Tailwind上的颜色" class="headerlink" title="Tailwind上的颜色"></a>Tailwind上的颜色</h4><p>Tailwind提供了许多调色板。甚至每个级别的透明度都可以调整。每种颜色都有9种透明度。</p><p>例如蓝色：</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFIL.png" alt="xxx"></p><p>这样，您就可以不受限制地使用颜色。因此，您将更加自由地制作组件。</p><h4 id="尝试Tailwind"><a href="#尝试Tailwind" class="headerlink" title="尝试Tailwind"></a>尝试Tailwind</h4><p>在知道如何设置Tailwind之后，该尝试使用Tailwind构建一些组件了。</p><p>Tailwind将其实用工具类分为11类。在这11个类别中，下面有几个实用工具类，我将不在下面讨论所有实用工具类，仅讨论一些需要解释的实用工具类。因为其他实用工具类通常具有与CSS相同的功能。</p><p>11个类别包括：</p><h4 id="A-布局"><a href="#A-布局" class="headerlink" title="A. 布局"></a><strong>A. 布局</strong></h4><p>在此类别中，当然有几个与布局相关的属性，包括：container, display, float, object-fit, object position, overflow, position, visibility 和 z-index.</p><p><strong>A.1 容器</strong></p><p>与Bootstrap相似，Tailwind也具有容器，它们的功能相同，即将元素包装在内部并在当前断点处设置min-width和max-width。不同之处在于，Tailwind中的容器不会自动位于中间；要使其处于中间位置，它必须调节margin-left和margin-right成为auto。在Tailwind中，可以通过提供实用工具类mx-auto来解决，该工具表示margin-x或margin-x水平，更精确地提供CSS声明。margin-left: auto; 和 margin-right: auto;</p><p><strong>A2 显示</strong></p><p>作为CSS，Tailwind还允许您调整显示属性，例如block，inline，inline-block，flex和其他。要使用flexbox，Tailwind有更多关于flexbox的特定文档。</p><p><strong>A.3 上/右/下/左</strong></p><p>我在上面没有提到这一部分，因为写下来相当复杂。该实用工具类与位置一起使用-无论是绝对位置，相对位置还是固定位置。用于设置属性left，right，top和bottom的实用工具类。以下是一些类名称，包括：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWVZUN.png" alt="xxx"></p><p><strong>A.4 Z-index</strong></p><p>当然，您已经了解了该实用工具类的功能。基本上像CSS一样，该实用工具类用于管理堆栈顺序-例如PhotoShop设计软件中的图层面板或其他。使用该类会减少自定义类的使用。</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFK9.png" alt="xxx"></p><h4 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h4><p>此类别中的所有类都可以设置排版，例如<code>font-size</code>, <code>font-family</code>, <code>color</code>,<code>font-weight</code>, <code>word-break</code>, <code>letter-spacing</code>等等。</p><p><strong>B.1 颜色</strong></p><p>如前所述，Tailwind提供了一个调色板，每种颜色都有一定的透明度。就像设置背景颜色一样，要设置文本颜色，Tailwind也具有类似的类名。</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW003.png" alt="xxx"></p><p><strong>B.2 字体家族</strong></p><p>对于字体，默认的Tailwind有3个选择，即font-sans，font-serif和font-mono。如前所述，Tailwind是非常可定制的，因此您可以添加另一个类名称来设置字体。</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFLX.png" alt="xxx"></p><p><strong>B.3 字体大小</strong></p><p>您不能任意调整字体大小。但是，Tailwind通过提供几个类名来进行设置，例如：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW05J.png" alt="xxx"></p><h4 id="C-背景"><a href="#C-背景" class="headerlink" title="C. 背景"></a>C. 背景</h4><p>Tailwind还提供了一个实用工具类来设置背景。但是，在所有可用于设置背景的实用工具类中，您仍然需要创建一个自定义类或嵌入式样式来设置背景图像。因为要设置背景图像，所以需要指定要使用的图像。</p><p>背景类别中可用的一些实用工具类是背景附件，背景颜色，背景位置，背景重复和背景大小。与背景相关的所有实用工具类均以名称bg- *开头，例如：bg-cover将背景大小设置为Cover。</p><h4 id="D-边框"><a href="#D-边框" class="headerlink" title="D. 边框"></a>D. 边框</h4><p>在此类别中，有4种不同的实用工具类，包括：<strong>边框颜色，边框样式，边框宽度和边框半径。</strong></p><p><strong>D.1 边框颜色</strong></p><p>调整边框的颜色，类似于“Tailwind”中的其他颜色。区别在于，设置边框颜色的前缀是名称border- *，例如：border-blue-600，将边框颜色设置为蓝色，级别为600。</p><p><strong>D.2 边框半径</strong></p><p>与背景不同，并非与边框相关的所有类名都以border- *开头。要设置Tailwind的边界半径，我们需要使用以<strong>rounded</strong>的单词开头的类名称，其中一些是：</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFNL.png" alt="xxx"></p><h4 id="E-Flexbox"><a href="#E-Flexbox" class="headerlink" title="E. Flexbox"></a>E. Flexbox</h4><p>正如我之前提到的，Tailwind有自己的类别来讨论flexbox。该类别包括几个实用工具类，包括：*flex direction, flex wrapping, align items, align content, align self, justify content, flex, flex grow 和 flex shrink.*。</p><h4 id="F-间距"><a href="#F-间距" class="headerlink" title="F. 间距"></a>F. 间距</h4><p>在此类别中，基本上仅由 <strong>padding</strong> 和 <strong>margin</strong> 组成。但是，要在页边空白处设置负值，Tailwind通常用 - 分隔类的名称。因此，此类别包括填充，边距和负边距。要设置padding，<strong>请在类的名称前添加p，然后再添加side和size</strong>，因此格式如下：p {side？}-{size}。就像padding一样，使用相同的方法来调整边距。</p><p>区别是，边距以m开头。与边距类似，要以相同的方式设置负边距，负边距的差异以**-m**开头，例如：-m-5以提供CSS声明边距：-1.25rem; 。</p><h4 id="G-尺寸"><a href="#G-尺寸" class="headerlink" title="G. 尺寸"></a>G. 尺寸</h4><p>此类中的所有实用工具类基本上仅用于设置高度和宽度。但是，众所周知，CSS具有min 和 max属性。因此，此类别包括宽度，最小宽度，最大宽度，高度，最小高度和最大高度。要调整宽度，您需要使用此类的格式：<strong>w- {number}。</strong></p><p>例如：w-10提供CSS声明宽度：2.5rem; 。设置高度，请使用相同的格式，需要把w更改为h。如果要设置min和max，需要添加min-或max-。</p><h4 id="H-表格"><a href="#H-表格" class="headerlink" title="H. 表格"></a>H. 表格</h4><p>该类别仅包括2个实用工具类，即border collapse 和 table layout。</p><p><strong>I. 效果</strong></p><p>与表格一样，此类别有2个实用工具类，即阴影和不透明度。 Tailwind至少有8个用于管理阴影的类，包括：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW0AZ.png" alt="xxx"></p><p>其中一些还将具有以下外观：</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFP9.png" alt="xxx"></p><p>至于不透明度，Tailwind提供了至少5种实用工具类，其中包括：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW0GF.png" alt="xxx"></p><p>并显示以下内容，</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFQX.png" alt="xxx"></p><h4 id="J-互动性"><a href="#J-互动性" class="headerlink" title="J. 互动性"></a>J. 互动性</h4><p>此类别包括与交互性相关的实用工具类，包括appearance, cursor, outline, pointer events, resize 和 user select。使用其中一些实用工具类，您可以设置光标类型，设置元素对指针事件的响应，设置用户是否可以在元素内选择文本以及管理其他交互性。</p><h4 id="K-SVG"><a href="#K-SVG" class="headerlink" title="K. SVG"></a>K. SVG</h4><p>最后一个类别是SVG。该类别仅包括<strong>填充Fill</strong>和<strong>笔触Stroke</strong>。他们每个只有一个class。Fill填充只有fill-current，将SVG颜色字段设置为“当前”文本颜色。例如：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW0LV.png" alt="xxx"></p><p>上面的SVG填充颜色遵循text-teal-500的颜色。而Stroke笔触，只有stroke-current。与fill-current功能相同，区别在于调整笔触颜色。例：</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFSL.png" alt="xxx"></p><p>当然，我们不会一一尝试，我们将学习使用Tailwind的概念。因此，我们将尝试为该练习制作一些组件，来帮助了解如何构建自己的组件。</p><h4 id="制作按钮组件"><a href="#制作按钮组件" class="headerlink" title="制作按钮组件"></a>制作按钮组件</h4><p>从一个按钮开始。我们将制作3种类型的按钮，包括：primary, secondary 和 tertiary。</p><p>首先，我们将创建主按钮。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;bg-blue-600 text-white px-4 py-2 rounded&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>那么结果如下：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW0RB.png" alt="xxx"></p><p>然后，我们将创建一个辅助按钮。此按钮与主要按钮相反，它具有透明的背景并带有边框。像这样，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;text-blue-600 border border-blue-600 px-4 py-2 rounded&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFU9.png" alt="xxx"></p><p>在上面的代码中，您找到了一个新类，即border 和 border-blue-600。这两个类都与border CSS有关。</p><ul><li>  border 代表边框宽度：1px；</li><li>  border-blue-600 表示边框颜色：#3182ce;</li></ul><p>接下来，我们将创建一个第三类按钮。与次要按钮很像，只有边框被删除了。</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW0WR.png" alt="xxx"></p><p>到目前为止，我们已经制作了3种类型的按钮，即主要，次要和第三种。</p><p>要以相同方式制作新组件，只需要将相关的实用工具类合并到元素中，即可创建您创建的组件。</p><h4 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h4><p>一切完成后，问题就出现了。处于某个状态时如何设置属性？例如，<strong>当悬停时</strong>。因此，我们想在悬停按钮时更改背景颜色。</p><p>为了克服这个问题，Tailwind提供了一个解决方案。 <strong>Tailwind具有“ State Variants”</strong>，因此您可以将实用工具类设置为某个状态，例如在悬停，聚焦等期间。</p><p>在Tailwind中使用状态变化非常简单。我们只需要添加所需状态的前缀名称，然后添加实用工具类即可。例如：悬停：{utility-class}。</p><p>例如，我们要在结束时将背景色更改为有点暗。然后代码是这样的，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hover</span>: <span class="selector-tag">bg-blue-800</span></span><br></pre></td></tr></table></figure><p>或者我们想要更改文本的颜色，像这样，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hover</span>: <span class="selector-tag">text-white</span></span><br></pre></td></tr></table></figure><p>或者我们想要将两个或两个以上结合起来，像这样，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hover</span>: <span class="selector-tag">bg-blue-800</span> <span class="selector-tag">hover</span>: <span class="selector-tag">text-white</span> <span class="selector-tag">hover</span>: ...</span><br></pre></td></tr></table></figure><p>回到我们的代码；接下来，我们将在创建的主按钮上悬停状态。当切换颜色变深时，我们将更改主要按键上的背景颜色。换句话说，我们将为主键状态悬停提供实用工具类 bg-blue-700。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;bg-blue-600 text-white px-4 py-2 rounded hover: bg-blue-700&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>悬停时，二级和三级按钮将具有蓝色背景色。您应该能脑补出来效果。</p><h4 id="制作卡组件"><a href="#制作卡组件" class="headerlink" title="制作卡组件"></a>制作卡组件</h4><p>在按钮之后，卡片是经常使用的组件。不管是设计仪表板还是登陆页面。</p><p>假设我们将为博客文章制作卡片组件。因此，在卡片的组件中，有许多衍生自卡片的元素，例如图像卡片，卡片主体，卡片标题等。</p><p>在此之前，我将首先使用Figma制作线框。</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZFVX.png" alt="xxx"></p><p>类似于我们将要制作的卡片组件。</p><p>让我们动手吧！</p><p>首先，我们将首先编写标记结构。基于上面的线框，我们需要几个元素，包括：</p><ul><li>  div 包装整个组件</li><li>  img 显示图像</li><li>  div 包裹卡片</li><li>  h4 卡片标题</li><li>  p 卡片说明</li><li>  用作号召性用语的按钮</li></ul><p>HTML结构如下，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt; </span><br><span class="line">  &lt;img src = &quot;...&quot;&gt; </span><br><span class="line">  &lt;div&gt; </span><br><span class="line">    &lt;h4&gt; ... &lt;/h4&gt; </span><br><span class="line">    &lt;p&gt; ... &lt;/p&gt; </span><br><span class="line">    &lt;div&gt; </span><br><span class="line">      &lt;button&gt; ... &lt;/button&gt; </span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">  &lt;/div&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在提供实用工具类之前，让我们搜索要应用于上述img元素的图像。您可以在Unsplash，Pexels，Pixel等上搜索免费图像。</p><p>这是我将要使用的图片，</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW17N.png" alt="xxx"></p><p>现在是时候将实用工具类分配给我们之前创建的标记了。</p><p>我们将需要的图像应用于img，而且我们将给出白色背景色并给出阴影。因此，我们需要的实用工具类是bg-white，shadow-lg 和 w-64来设置卡组件的宽度。</p><p>HTML结构如下，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;bg-white shadow-lg w-64&quot;&gt; </span><br><span class="line">    &lt;img src=&quot;https://images.unsplash.com/photo-1504575958497-ccdd586c2997?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;autc==754&amp;q=80&quot; alt=&quot;koala&quot;&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们使用的实用工具类如下：</p><ul><li>  <strong>bg-white</strong> 提供白色背景并表示CSS声明背景颜色：#fff;</li><li>  <strong>shadow-lg</strong> 为元素提供阴影效果并表示CSS声明box-shadow: 0 10px 15px -3px rgba(0, 0, 0，.1), 0 4px 6px -2px rgba(0, 0, 0，.05);</li></ul><p>到目前为止，我们的外观如下：</p><p><img src="http://api.zhaima.tech/public/uploads/2020-01-29/5676V76OE9O5UEMF6QZFZ9.png" alt="xxx"></p><p>我们还将实用工具类添加到用作卡体的元素中。</p><p>HTML结构如下，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;p-6&quot;&gt; </span><br><span class="line">  &lt;h4 class=&quot;font-bold&quot;&gt; Hello, my name is Koala! &lt;/h4&gt; </span><br><span class="line">  &lt;p class=&quot;text-sm mt-2&quot;&gt; I am a person who lives in the house and I work as a programmer. &lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的HTML结构中，我们找到了几个刚刚使用的实用工具类，包括：</p><ul><li>  <strong>p-6</strong> 表示尺寸为6的填充，表示CSS声明填充：1.5rem;</li><li>  <strong>font-bold</strong> 表示具有粗体值的font-weight并表示CSS声明font-weight: 700;</li><li>  <strong>text-sm</strong> 表示文本尺寸小（小），代表CSS声明字体大小：.875rem;</li><li>  <strong>mt-2</strong> 的意思是margin-top，距离为4，代表CSS声明margin-top: 0.5rem;</li></ul><p>到目前为止，我们已经具有以下外观：</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW1D3.png" alt="xxx"></p><p>接下来，我们需要在该段落下的卡片上添加一个号召性用语按钮。</p><p>尝试制作按钮组件时，我们可以复制先前制作的HTML代码。</p><p>HTML结构如下，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;text-right mt-4&quot;&gt; </span><br><span class="line">  &lt;button class=&quot;bg-blue-600 text-sm text-white py-1 px-3 rounded&quot;&gt; </span><br><span class="line">    Read More </span><br><span class="line">  &lt;/button&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果您当前使用的是Bootstrap 4，则可能对我们之前使用过的一些实用工具类有所了解，例如text-right，mt-*，p-*，rounded等。该实用工具类具有与Bootstrap 4上的工具类相同的优点。</p><p>至此，我们已经有一个卡组件。</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZG0X.png" alt="xxx"></p><p>现在，我们将复制1个组件块代码以制作3个组件卡。然后，我们将用div和工具类div 包装这三个卡片组件。卡片组件还可以变成网格，使用工具类flex div。</p><p><img src="https://image.xiaomo.info//blog/GAEIS16OFM6KDPN9NWW1IJ.png" alt="xxx"></p><h4 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h4><p>到目前为止，我们已经尝试制作两个组件，即卡片和按钮。而且我们还熟悉几种实用工具类以及Tailwind的功能之一，即状态变体。除状态变量外，Tailwind还提供了响应式设计功能。您可以为每个断点设置实用工具类。至少Tailwind提供4个断点，<strong>即sm，md，lg 和 xl</strong>。</p><ul><li>  <strong>sm</strong> 适用于最小宽度为640px的设备</li><li>  <strong>md</strong> 适用于最小宽度为768px的设备</li><li>  <strong>lg</strong> 适用于最小宽度为1024px的设备</li><li>  <strong>xl</strong> 适用于最小宽度为1280px的设备</li></ul><p>要将其与实用工具类结合使用，那么我们需要将其添加到实用工具类之前，将其格式化为：sm：{utility-class}，md：{utility-class}，lg：{utility-class}， xl：{utility-class}。</p><p>我们之前使用的实用程序类适用于所有断点，或者换句话说，适用于所有设备-包括移动设备。</p><p>以上所有断点都是Tailwind的默认值，您可以添加或删除现有断点。同样，这些断点将转换为CSS媒体查询代码。</p><p><img src="https://image.xiaomo.info//blog/5676V76OE9O5UEMF6QZG2L.png" alt="xxx"></p><p>同时，如果我们希望将实用工具类设置为仅在几种设备尺寸上应用，那么我们需要指定目标设备的尺寸。假设我们要在除平板电脑设备上的所有设备上使文本变为蓝色。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;text-blue-900&quot;&gt; Hello, bro! &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>上面的代码将使文本变为蓝色，而如果我们想在设备的宽度至少为640px时更改文本，则在所需的实用工具类名称之前添加前缀sm：。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;text-blue-900 sm: text-red-900&quot;&gt; Hello, bro! &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>使用上面的代码，我们将在所有设备上显示蓝色文字，而在宽度最小为640px的设备上，该文字将变为红色。</p><p>您还可以同时为多个设备指定实用工具类。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;text-blue-900 sm: text-red-900 md: text-green-900 lg: text-yellow-900 xl: text-black&quot;&gt; </span><br><span class="line">  Hello, bro! </span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>如果仅适用于手机怎么办？</strong></p><p>如前所述，如果您没有在使用的实用工具类上指定断点，则该实用工具类<strong>适用于所有设备</strong>-包括宽度小于640px的移动设备。</p><h4 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h4><p>Tailwind是实用程序优先的框架，因此创建的组件将包含实用工具类的集合。这意味着当您要创建相同的组件时，您还将编写相同的实用工具类集。这样，当您想为该组件更改一个实用工具类时，就需要更改所有具有相同“意图”的组件。</p><p>例如，您有一个按钮组件，其结构如下所示，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;bg-blue-600 text-white px-4 py-2 rounded&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在其他地方，您需要一个button组件，因此您需要将结构复制到20个位置；当您想将按钮的填充大小（例如更改为px-1 py-2）时，也需要在20个不同的位置进行更改。这将花费大量时间，并且肯定很累。</p><p><strong>为了克服这个问题，Tailwind提供了一种解决方案，即“提取组件”</strong>。 Tailwind提供了伪指令**@apply<strong>，</strong>它允许您一次组合多个实用工具类**。</p><p>例如，在创建按钮组件时，不是创建这样的结构，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;bg-blue-600 text-white px-4 py-2 rounded&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>更好的是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;button&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><strong>这也太像Bootstrap了！</strong></p><p>冷静！即使这样，您仍然可以像以前一样使用指令**@apply<strong>控制实用工具类。因此，</strong>您将可以在Tailwind中的实用工具类中自由发挥创造力。**</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;button&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">.button &#123; </span><br><span class="line">  @apply bg-blue-600 text-white px-4 py-2 rounded; </span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>太酷了！</p><p>请记住，<strong>要使用指令@apply和Tailwind中提供的其他指令功能，您需要使用PostCSS或其他Task Runner。</strong>当然，您不能使用CDN做到这一点。因为，该代码将转换为浏览器可以理解的CSS代码。</p><p>通过使用此方法，还可以为每个组件制作<strong>修饰符</strong>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;button&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt; </span><br><span class="line"></span><br><span class="line">&lt;button class=&quot;button button-red&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">.button &#123; </span><br><span class="line">  @apply bg-blue-600 text-white px-4 py-2 rounded; </span><br><span class="line">&#125; </span><br><span class="line">.button.button-red &#123; </span><br><span class="line">  @apply bg-red-900; </span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>要将其与状态结合起来，通常需要像CSS那样进行。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;button&quot;&gt; </span><br><span class="line">  Button </span><br><span class="line">&lt;/button&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">.button &#123; </span><br><span class="line">  @apply bg-blue-600 text-white px-4 py-2 rounded; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.button:hover &#123; </span><br><span class="line">  @apply bg-blue-700; </span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="指令-screen-variants-amp-responsive"><a href="#指令-screen-variants-amp-responsive" class="headerlink" title="指令: @screen, @variants &amp; @responsive"></a>指令: @screen, @variants &amp; @responsive</h4><p>除了@apply和@tailwind外，Tailwind还具有可以更轻松地帮助我们工作的指令，包括@screen，@variants 和 @responsive。</p><p>@screen指令允许您创建媒体查询，该媒体查询引用我们在响应式设计部分中先前讨论的断点名称之一。</p><p>如果您要进行以下媒体查询，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) &#123; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后您可以使用指令 @screen进行更改：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@screen</span> sm &#123; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@variants指令使您可以针对自己创建的实用工具类，针对版本生成鼠标悬停，焦点悬停，活动悬停和组悬停。假设您自己这样制作其他实用工具类，</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@variants</span> focus, hover &#123; </span><br><span class="line">  <span class="selector-class">.rotate-0</span> &#123; </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="selector-class">.rotate-90</span> &#123; </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将生成您创建的实用工具类的悬浮和集中版本。编译后，您的代码将具有以下输出：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotate-0</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.rotate-90</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>); </span><br><span class="line">&#125;. </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">focus</span>\<span class="selector-pseudo">:rotate-0</span><span class="selector-pseudo">:focus</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: rotate (<span class="number">0deg</span>); </span><br><span class="line">&#125;. </span><br><span class="line"><span class="selector-tag">focus</span>\<span class="selector-pseudo">:rotate-90</span><span class="selector-pseudo">:focus</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>); </span><br><span class="line">&#125;. </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hover</span>\<span class="selector-pseudo">:rotate-0</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); </span><br><span class="line">&#125;. </span><br><span class="line"><span class="selector-tag">hover</span>\<span class="selector-pseudo">:rotate-90</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;rotate-0 hover:rotate-90&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>@responsive指令允许您生成所创建的实用工具类的响应版本，其工作方式类似于指令 @variants。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@responsive</span> &#123; </span><br><span class="line">  <span class="selector-class">.bg-gradient-brand</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将产生以下输出：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg-gradient-brand</span> &#123; </span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">/ * ... * / </span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) &#123; </span><br><span class="line">  <span class="selector-class">.sm</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">  &#125; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123; </span><br><span class="line">  <span class="selector-class">.md</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">  &#125; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1024px</span>) &#123; </span><br><span class="line">  <span class="selector-class">.lg</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">  &#125; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1280px</span>) &#123; </span><br><span class="line">  <span class="selector-class">.xl</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green); </span><br><span class="line">  &#125; </span><br><span class="line">  / * ... * / </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，以上结果取决于先前在Tailwind配置文件中定义的断点。</p><p>需要重申的是，Tailwind中可用的所有指令功能都需要转换为浏览器可以理解的标准CSS代码。因此，我们需要任务运行器或使用Tailwind CLI来执行此操作。</p><h4 id="与预处理器一起使用"><a href="#与预处理器一起使用" class="headerlink" title="与预处理器一起使用"></a>与预处理器一起使用</h4><p>由于Tailwind是PostCSS插件，因此没有什么可以阻止您将其与Sass，Less，Stylus或其他预处理器一起使用的，就像您与其他PostCSS插件（如Autoprefixer）一样。</p><p>重要的是要注意，您不需要在Tailwind中使用预处理器-无论如何，您通常在Tailwind项目上编写很少的CSS，因此使用预处理器并不像在编写大量代码的项目中那样有益自定义CSS。</p><p><strong>使用PostCSS作为预处理器</strong></p><p>如果您将Tailwind用于一个全新的项目，并且不需要将其与任何现有的Sass / Less / Stylus样式表集成，则应高度考虑依赖其他PostCSS插件来添加您使用的预处理器功能，而不是单独使用预处理器。</p><p>这有一些好处：</p><p>您的构建将更快。由于不必通过多种工具来解析和处理CSS，因此仅使用PostCSS即可更快地编译CSS。</p><p>因为Tailwind向CSS添加了一些新的非标准关键字（例如@tailwind，@apply，theme()等），所以常常不得不以烦人，不直观的方式编写CSS，以获取预处理器以提供期望的输出。使用PostCSS可以避免这种情况。</p><p>用于使用PostCSS进行处理的规范插件是postcss-import。</p><p>要使用它，请通过npm安装插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃npm</span><br><span class="line">npm install postcss-import</span><br><span class="line"></span><br><span class="line">＃yarn </span><br><span class="line">yarn add postcss-import</span><br></pre></td></tr></table></figure><p>然后将其添加为PostCSS配置中的第一个插件：</p><p>postcss.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins：[</span><br><span class="line">    <span class="built_in">require</span>（<span class="string">'postcss-import'</span>），</span><br><span class="line">    <span class="built_in">require</span>（<span class="string">'tailwindcss'</span>），</span><br><span class="line">    <span class="built_in">require</span>（<span class="string">'autoprefixer'</span>），</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\1. 关于postcss-import需要注意的重要一件事是，它严格遵守CSS规范，并且不允许在文件的最顶部（除了文件的最顶部）使用@import语句。例如：</p><p>下边用法无效，<strong>必须先使用@import语句</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* components.css */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @apply px-4 py-2 rounded font-semibold bg-gray-200 text-black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 无效 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./components/card"</span>;</span><br></pre></td></tr></table></figure><p>解决此问题的最简单方法是，不要将常规CSS和导入文件混在同一文件中。而是为您的导入创建一个主入口文件，专门用来导入组件CSS文件，并将所有实际CSS放在单独的组件文件中。如下：</p><p>使用单独的文件导入和实际CSS</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* components.css */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./components/buttons.css"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./components/card.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* components/buttons.css */</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @apply px-4 py-2 rounded font-semibold bg-gray-200 text-black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* components/card.css */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  @apply p-4 bg-white shadow rounded；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\2. 在主CSS文件中包含@tailwind声明。</p><p>下边的写法无效，<strong>必须先使用@import语句</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-base-styles.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-components.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-utilities.css"</span>;</span><br></pre></td></tr></table></figure><p>您可以通过将@tailwind声明放在各自的文件中来解决此问题。为了简化此操作，我们为每个@tailwind声明提供了单独的文件，其中包含框架本身，您可以直接从node_modules导入。</p><p>导入我们提供的CSS文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/base"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-base-styles.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/components"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-components.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/utilities"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"./custom-utilities.css"</span>;</span><br></pre></td></tr></table></figure><p>postcss-import很聪明，可以自动在node_modules文件夹中查找文件，因此您无需提供完整路径-例如，”tailwindcss/base”就足够了。</p><h4 id="与Sass-Less-Stylus一起使用Tailwind"><a href="#与Sass-Less-Stylus一起使用Tailwind" class="headerlink" title="与Sass / Less / Stylus一起使用Tailwind"></a>与Sass / Less / Stylus一起使用Tailwind</h4><p>如果Tailwind可以与Sass，Less，Stylus或其他类似的CSS预处理器一起使用，这似乎更酷。这样我们就可以使用诸如嵌套，mixin，变量，函数等功能。</p><p>更多具体的用法和说明，请参考文档<a href="https://tailwindcss.com/docs/using-with-preprocessors/#app">https://tailwindcss.com/docs/using-with-preprocessors/#app</a></p><h4 id="恭喜您刚刚学习了TailwindCSS！"><a href="#恭喜您刚刚学习了TailwindCSS！" class="headerlink" title="恭喜您刚刚学习了TailwindCSS！"></a>恭喜您刚刚学习了TailwindCSS！</h4><p>学习新事物有时会令人恐惧，因为我们过多地听取了其他人对较早事物的假设。为了克服这样的问题，我们只需要自己尝试一下，这样我们就会对自己的期望做出评估。</p><p>这次我们学到了一些新东西，而框架仍然是新的。尽管此Tailwind仍存在一些缺点，例如没有用于过渡，伪选择器，转换等的实用程序类。</p><p>希望与此有关，您可以将Tailwind用于下一个要使用的项目。</p></style></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman和commandline tools（newman）用法介绍</title>
      <link href="2020/newmanCommandLine/"/>
      <url>2020/newmanCommandLine/</url>
      
        <content type="html"><![CDATA[<p>不知道大家对大批量重复性的工作内容的第一反应是怎样的，我的第一反应肯定是写脚本，还得是python的。但是发现postman对批量api调用也有了较好的支持，所以便省去了写脚本的过程，直接使用命令行就可以了。</p><a id="more"></a><h1 id="postman介绍"><a href="#postman介绍" class="headerlink" title="postman介绍"></a>postman介绍</h1><p> postMan是一款功能强大的网页调试与发送网页HTTP请求的工具。<strong>postMan</strong>能够发送任何类型的HTTP请求(GET, HEAD, POST,PUT..)，附带任何数量的参数和HTTP headers。支持不同的认证机制（basic, digest,OAuth），接收到的响应语法高亮（HTML，JSON或XML）。</p><p>postMan既可以以chrome浏览器插件的形式存在，也可以是独立的应用程序存在。可以到<a href="https://www.getpostman.com/%E4%B8%8B%E8%BD%BD%E3%80%82" target="_blank" rel="noopener">https://www.getpostman.com/下载。</a></p><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p>postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。</p><p><strong>Postman重要提示：</strong></p><p>由于2018年初chrome停止对chrome应用程序的支持，你的<strong>postman插件可能无法正常</strong>使用了。目前chrome应用商店能使用的就是chrome扩展程序和主题背景，在这里建议大家直接下载它的应用程序进行使用。</p><h1 id="postman界面介绍"><a href="#postman界面介绍" class="headerlink" title="postman界面介绍"></a>postman界面介绍</h1><p><img src="https://image.xiaomo.info//blog/webp" alt="img"></p><h1 id="postman工作机制"><a href="#postman工作机制" class="headerlink" title="postman工作机制"></a>postman工作机制</h1><ol><li> 像项目开发一样可以工程化管理</li><li> 可以邀请团队成员进行协作，一次配置，多人使用</li><li> postman有工作工间和collections，workspace就是我们的工作区，collections就是我们的项目。</li></ol><h1 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h1><img src="https://image.xiaomo.info//blog/image-20201217144614875.png" alt="image-20201217144614875" style="zoom:50%;"><p>可以直接在postman里跑runner,但是在这之前我们需要配置要跑的API</p><p>举例：</p><p>我们这里用twitter的api为例，它需要传auth1.0的参数和user_id来获取twitter用户的详细信息。</p><ol><li> URL</li></ol><p>我们需要请求的API地址，这里以<a href="https://api.twitter.com/1.1/users/show.json%E4%B8%BA%E4%BE%8B" target="_blank" rel="noopener">https://api.twitter.com/1.1/users/show.json为例</a></p><ol start="2"><li> 参数</li></ol><p>因为我们是要跑runner，所以参数肯定不是固定的，所以我们定义一个参数，用双花括号包里来</p><p><img src="https://image.xiaomo.info//blog/image-20201217145048523.png" alt="image-20201217145048523"></p><ol start="3"><li>环境</li></ol><p>我们直接这么定义的参数名肯定会找不到，所以我们需要创建一个对应的环境</p><img src="https://image.xiaomo.info//blog/image-20201217145242607.png" alt="image-20201217145242607" style="zoom:50%;"><ol start="4"><li> Auth(不是必须)</li></ol><p>twitter的接口访问需要我们提供对应的auth1.0的权限，所以我们要做相关配置，如果请求的是不需要auth的api则不需要配置</p><img src="https://image.xiaomo.info//blog/image-20201217145526421.png" alt="image-20201217145526421" style="zoom:50%;"><ol start="5"><li> 测试用例</li></ol><p>完全的js语法，具体使用参考<a href="https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#getting-started-with-tests" target="_blank" rel="noopener">官方示例</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">"get user info"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pm.response.to.have.status(<span class="number">200</span>))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(pm.response.json()[<span class="string">'id'</span>] +<span class="string">','</span>+ pm.response.json()[<span class="string">'name'</span>] +<span class="string">','</span>+ pm.response.json()[<span class="string">'screen_name'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.provider_id + <span class="string">',404'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/image-20201217145602484.png" alt="image-20201217145602484"></p><p>这样我们的准备工作就做好了，然后打开上一步的runner，就可以跑测试了。</p><p>twitter1.json文件示例，数组中有多少数据iterations会自动修改。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">"user_id"</span>:<span class="string">"G008YIJ"</span>,<span class="attr">"item_amount"</span>:<span class="string">"28648410.0"</span>,<span class="attr">"provider_id"</span>:<span class="string">"383809082"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"user_id"</span>:<span class="string">"GWZ4NZ9"</span>,<span class="attr">"item_amount"</span>:<span class="string">"25058540.0"</span>,<span class="attr">"provider_id"</span>:<span class="string">"1159208855684800512"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"user_id"</span>:<span class="string">"G2CAS475"</span>,<span class="attr">"item_amount"</span>:<span class="string">"8921590.0"</span>,<span class="attr">"provider_id"</span>:<span class="string">"179396017"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"user_id"</span>:<span class="string">"GS24XV0"</span>,<span class="attr">"item_amount"</span>:<span class="string">"8860000.0"</span>,<span class="attr">"provider_id"</span>:<span class="string">"1160002494639955968"</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>也可以用csv文件的格式，但是有一个文件是provider_id是数字字符串，postman会把当成数字丢失精度，比如<code>1159208855684800512</code>会变成<code>1159208855684800000</code>,所以我将csv转成了json。<a href="https://www.aconvert.com/cn/document/csv-to-json/" target="_blank" rel="noopener">在线转换工具</a></p><p>twitter1.csv</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_id,item_amount,provider_id</span><br><span class="line">G008YIJ,28648410.0,383809082</span><br><span class="line">GWZ4NZ9,25058540.0,1159208855684800512</span><br><span class="line">G2CAS475,8921590.0,179396017</span><br><span class="line">GS24XV0,8860000.0,1160002494639955968</span><br><span class="line">GSKNUYF,8379710.0,1163803851612254208</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/image-20201217150118155.png" alt="image-20201217150118155"></p><img src="https://image.xiaomo.info//blog/image-20201217150220910.png" alt="image-20201217150220910" style="zoom:50%;"><img src="https://image.xiaomo.info//blog/image-20201217150308422.png" alt="image-20201217150308422" style="zoom:50%;"><p>这里控制台打印了接口调用的详细信息和我们刚才测试用例中打印的内容</p><p>一般来说到这里就结束了，但是我们跑runner的话有可能是自己观察一下数据就好了，也有可能是需要将跑出来的结果保存下来交给市场部做分析，所以我们需要导出相关的数据，这时我们就需要postman的command line工具了。</p><h1 id="newman"><a href="#newman" class="headerlink" title="newman"></a>newman</h1><p>postman提供了npm的包，我们可以在node环境下调用，也可以全局安装后使用命令行调用。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn global add newman</span><br><span class="line">yarn global add newman-reporter-htmlextra</span><br><span class="line">yarn global add newman-reporter-html</span><br></pre></td></tr></table></figure><p><code>newman</code>提供了基本的运行环境，<code>newman-reporter-html</code>可以导出一个html的报告，但是很简单也很丑，我们可以安装一个<code>newman-reporter-htmlextra</code>来导出文件</p><p>基本的html报告</p><img src="https://image.xiaomo.info//blog/image-20201217150947515.png" alt="image-20201217150947515" style="zoom:50%;"><p>使用<code>newman-reporter-htmlextra</code>跑出来的报告，有很详细的内容报告</p><img src="https://image.xiaomo.info//blog/image-20201217151130164.png" alt="image-20201217151130164" style="zoom:50%;"><p>可以查看每个api调用的请求地址，请求头，返回头，返回体等各种信息</p><img src="https://image.xiaomo.info//blog/image-20201217151416847.png" alt="image-20201217151416847" style="zoom:50%;"><img src="https://image.xiaomo.info//blog/image-20201217151404750.png" alt="image-20201217151404750" style="zoom:50%;"><p><strong>命令格式</strong> <code>newman run collections.json -d data.json</code>,  collections.json可以是一个url也可以是一个json文件</p><p>例如 </p><p>基本的html报告</p><p><code>newman run https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv 21 -r html </code></p><p>详细的html报告</p><p> <code>newman run https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv 21 -r htmlextra </code></p><p>文件获取方式</p><img src="https://image.xiaomo.info//blog/image-20201217151835934.png" alt="image-20201217151835934" style="zoom: 50%;"><p>作为一个精益求精的人，怎么会就这么结束。postman导出的基础报告只有简单的多少个通过了测试，多少个失败。加强版的报告虽然内容够全，但是想看数据一个一个点开麻烦的一批，所以只能这么结束吗？当然不是</p><h1 id="newman批量API调用结果导出到文件"><a href="#newman批量API调用结果导出到文件" class="headerlink" title="newman批量API调用结果导出到文件"></a>newman批量API调用结果导出到文件</h1><p><code>newman run collections.json -d data/twitter.json &gt;result/twitter.log</code></p><p>twitter.log内容，包含了每次调用详细的数据和最后的总结，简直完美</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">newman</span><br><span class="line"></span><br><span class="line">Twitter API V1</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">1</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=383809082 [200 OK, 2.36KB, 314ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">383809082</span>,naota♪,naaaota'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">2</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1159208855684800512 [200 OK, 2.05KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1159208855684800500</span>,おず♪,vivid_oz148'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">3</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=179396017 [200 OK, 2.08KB, 169ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">179396017</span>,NEO_Taka,neo_takagi'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">4</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1160002494639955968 [200 OK, 1.91KB, 173ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1160002494639956000</span>,ういオピオイド<span class="number">11119999</span>,rZ4lGzT9BQrXUPI'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">5</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1163803851612254208 [200 OK, 1.3KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1163803851612254200</span>,みる,M9zYkNdcbCurkT9'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">6</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=556712852 [200 OK, 1.33KB, 178ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">556712852</span>,はっす,yawning222'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">7</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1164170510185332736 [404 Not Found, 871B, 133ms]</span></span><br><span class="line">  <span class="number">1</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">8</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=87479134 [200 OK, 2.2KB, 180ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">87479134</span>,はふ,hafucco'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">9</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=352056956 [200 OK, 1.3KB, 141ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">352056956</span>,Akanishi Kakita,noah_joad'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">10</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=941532328593039360 [200 OK, 1.64KB, 174ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">941532328593039400</span>,Mikogami,Mikogami0704'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">11</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=335813584 [200 OK, 2.13KB, 169ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">335813584</span>,カイラス,kai_rasu'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">12</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1236573645314461697 [403 Forbidden, 880B, 186ms]</span></span><br><span class="line">  <span class="number">2</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">13</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1151103522865201153 [200 OK, 1.28KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1151103522865201200</span>,Oyoneko,Oyoneko1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">14</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1186010624037277696 [200 OK, 1.3KB, 140ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1186010624037277700</span>,ウェル,bv43vMgRlTeoxnQ'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">15</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1270185036902305792 [200 OK, 2.06KB, 181ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1270185036902305800</span>,def961,def9611'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">16</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=117064779 [200 OK, 2.05KB, 174ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">117064779</span>,Ranpuutan@ゆかりさん,Ranpuutan'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">17</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=860714567478804480 [200 OK, 2.03KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">860714567478804500</span>,ﾆｹﾀﾏ,mike21fire'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">18</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=975259709341970432 [200 OK, 1.86KB, 179ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">975259709341970400</span>,miki,ibajosoko'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">19</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1171681195639234560 [404 Not Found, 871B, 134ms]</span></span><br><span class="line">  <span class="number">3</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">20</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=991118408891551744 [200 OK, 1.86KB, 160ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">991118408891551700</span>,KYOUWA,KYOUWA10'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">21</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3193700828 [200 OK, 1.75KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3193700828</span>,ししし,fullflatseet'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">22</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=790132781745451009 [200 OK, 1.89KB, 165ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">790132781745451000</span>,みずな,Mizuna_Project'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">23</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1186900048589647872 [200 OK, 1.29KB, 149ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1186900048589648000</span>,TestName,TestNam34718353'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">24</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=114497638 [200 OK, 1.32KB, 300ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">114497638</span>,nirubanana,nirubanana'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">25</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2766198625 [200 OK, 1.74KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2766198625</span>,Schwarzschild radius,Celty3q'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">26</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1199362683419545600 [404 Not Found, 871B, 135ms]</span></span><br><span class="line">  <span class="number">4</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">27</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1179476029963784192 [200 OK, 1.32KB, 174ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1179476029963784200</span>,ムツリアン,JahmTyWWocb9qCL'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">28</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3180572988 [200 OK, 2.12KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3180572988</span>,せんべろ,senbero_gamer'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">29</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=4458826284 [200 OK, 1.88KB, 151ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">4458826284</span>,goro,HapenTz'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">30</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1173473727452868613 [200 OK, 2.22KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1173473727452868600</span>,じーだす,oymjciVHYixxsZ6'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">31</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1184806356236136449 [200 OK, 2.03KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1184806356236136400</span>,Posarosa,Posarosa1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">32</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2615061966 [200 OK, 2.14KB, 185ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2615061966</span>,Banana Fish,nananafish'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">33</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=509682027 [200 OK, 1.43KB, 216ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">509682027</span>,kichiy∧,nonnativeJap'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">34</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=14485361 [200 OK, 1.29KB, 139ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">14485361</span>,teldon,teruit'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">35</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1177481153260875776 [200 OK, 2.13KB, 155ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1177481153260875800</span>,トリスたん,Tristram1192'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">36</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=818066125531426817 [200 OK, 2.21KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">818066125531426800</span>,IV号ねこ,Pz_Katze_IV_Q'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">37</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1172717140807303169 [200 OK, 1.92KB, 152ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1172717140807303200</span>,終電マスター,vAE2cL5iWsxiIgf'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">38</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=927875285684330496 [200 OK, 1.29KB, 243ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">927875285684330500</span>,AoS,AoSsmo'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">39</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2881377380 [200 OK, 2.06KB, 151ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2881377380</span>,あきもと,anikiandaneki'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">40</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=911916999810281472 [200 OK, 1.85KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">911916999810281500</span>,misaya,misaya48436608'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">41</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=784037479317774337 [200 OK, 1.96KB, 152ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">784037479317774300</span>,岩田,ccr67280'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">42</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1218420162883284993 [200 OK, 1.29KB, 137ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1218420162883285000</span>,mai,mai72271145'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">43</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1173835954110386176 [200 OK, 2.12KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1173835954110386200</span>,ハゲっちん,<span class="number">7</span>wG87Oh5G1QVCts'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">44</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2605063004 [200 OK, 1.7KB, 148ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2605063004</span>,GamersWagon,GamersWagon'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">45</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2538078667 [200 OK, 1.65KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2538078667</span>,matsu,matsu090'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">46</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2156812442 [200 OK, 2.09KB, 176ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2156812442</span>,manabu,manabukakinoni'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">47</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1186018216964845568 [200 OK, 2.14KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1186018216964845600</span>,木村卓実,sCP1xA8gTvlwXnG'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">48</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1127369632187240448 [200 OK, 2.08KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1127369632187240400</span>,つなみ,okoge0273'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">49</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=262535868 [200 OK, 1.89KB, 152ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">262535868</span>,Puun,puun2'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">50</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1245943054155935745 [200 OK, 1.98KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1245943054155935700</span>,おず♬,vivid_oz2nd'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">51</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1226802448678838272 [200 OK, 1.29KB, 151ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1226802448678838300</span>,akiaki,akiaki66305129'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">52</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=956960701 [200 OK, 1.5KB, 282ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">956960701</span>,ｄｂ,joyce02_02'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">53</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1167051043542167553 [200 OK, 2.12KB, 160ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1167051043542167600</span>,どらくえ,NMJEVO9v3RwuilQ'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">54</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1167337087365873664 [200 OK, 2.07KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1167337087365873700</span>,nappa,nappa41224809'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">55</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1150292004456112128 [200 OK, 1.92KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1150292004456112100</span>,ムム,FomHtfuksJ9XVeZ'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">56</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1194148741013360640 [403 Forbidden, 880B, 136ms]</span></span><br><span class="line">  <span class="number">5</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">57</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1227563147428384769 [200 OK, 2.08KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1227563147428384800</span>,牧野,JvOLq4t8FtllMAR'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">58</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1127305241492217856 [200 OK, 2.18KB, 151ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1127305241492217900</span>,ゲーム専用Satoshi,Shinya_ima194'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">59</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=828982769250246657 [200 OK, 2.04KB, 166ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">828982769250246700</span>,モトアキ,fiKKf0cgwLOXsCX'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">60</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=106433160 [200 OK, 2.09KB, 393ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">106433160</span>,Satoshi Tsuji,satoshi902'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">61</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=422274276 [200 OK, 2.14KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">422274276</span>,AC,AC_YN'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">62</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1176675356641615872 [403 Forbidden, 880B, 130ms]</span></span><br><span class="line">  <span class="number">6</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">63</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1195927672037076992 [200 OK, 1.95KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1195927672037077000</span>,EMMA,N1KvBK4eQNADWWn'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">64</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1158431053234626560 [200 OK, 2.11KB, 167ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1158431053234626600</span>,ラムちゃん（フレンチぶる♀）,duhys7lK307gmVQ'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">65</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1923549487 [200 OK, 1.3KB, 165ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1923549487</span>,stampede,Stampede_S2000'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">66</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1190809781591691265 [200 OK, 1.89KB, 153ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1190809781591691300</span>,かとゆう,MpiSGqrD3dNZ703'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">67</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=314544319 [200 OK, 2.05KB, 160ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">314544319</span>,轟 音々(旧 いてさん),todoroki_exe'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">68</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1113741309607436288 [200 OK, 2.08KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1113741309607436300</span>,イソD,isnaodd'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">69</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=186787348 [200 OK, 1.84KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">186787348</span>,over0078♪,over0078'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">70</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1200922702711681024 [200 OK, 2.1KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1200922702711681000</span>,Lucio＠<span class="number">1234</span>,yani32321'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">71</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1163813572394176514 [200 OK, 2.15KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1163813572394176500</span>,椿,wRNSJRz9pRHKhmv'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">72</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1135187807071219713 [200 OK, 2.06KB, 177ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1135187807071219700</span>,さら,K7O2hzfSNrOkZuJ'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">73</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1031751970564886528 [200 OK, 1.45KB, 356ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1031751970564886500</span>,あの,haounosiro'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">74</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1258998916864868352 [200 OK, 2.1KB, 169ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1258998916864868400</span>,kuuro,kuro999996'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">75</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1187247723533066240 [200 OK, 1.96KB, 170ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1187247723533066200</span>,<span class="number">_</span>はるぽん<span class="number">_</span>,<span class="number">_</span>harupon_kouya'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">76</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1128220521705791488 [200 OK, 1.3KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1128220521705791500</span>,Lynx＠ネコ,Lynx34894293'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">77</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1199861845575647232 [200 OK, 1.29KB, 149ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1199861845575647200</span>,Akifumi Hada,AkifumiHada'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">78</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2793484524 [200 OK, 2.08KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2793484524</span>,hiro提督,hiroteitoku'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">79</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2352469440 [200 OK, 2KB, 200ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2352469440</span>,近藤廣行,VThiroyukikondo'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">80</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1180409321496010753 [200 OK, 2.21KB, 160ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1180409321496010800</span>,暇人,N1hJce13Gmho75K'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">81</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=579945167 [200 OK, 2.22KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">579945167</span>,Digimortal (でじも),Digimortal2001'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">82</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1282197904094969856 [200 OK, 1.32KB, 137ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1282197904094969900</span>,将建,ZnZTUfFzpHnZrZE'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">83</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2869864442 [200 OK, 2.09KB, 188ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2869864442</span>,momu,subaka0000001'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">84</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=93534630 [200 OK, 2.08KB, 177ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">93534630</span>,つるりん♪,tsururinnn'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">85</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1119604247237025793 [200 OK, 1.29KB, 135ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1119604247237025800</span>,Alpha,Alpha57102127'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">86</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=988960826613612544 [200 OK, 2.12KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">988960826613612500</span>,truth,truth86833142'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">87</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2900033480 [200 OK, 2.01KB, 146ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2900033480</span>,ZENLAがんばらない,L_of_ZENLA'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">88</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1186696371992055808 [200 OK, 2.03KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1186696371992055800</span>,蛙san,san85217859'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">89</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1226406259928158208 [403 Forbidden, 880B, 137ms]</span></span><br><span class="line">  <span class="number">7</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">90</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=811963896118398976 [200 OK, 1.98KB, 153ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">811963896118399000</span>,Maple,moe_popopopon'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">91</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1033293484877213697 [200 OK, 1.64KB, 166ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1033293484877213700</span>,ムーミン谷のナウシカ,talesfromMoomin'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">92</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2793176136 [200 OK, 1.66KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2793176136</span>,祥平,matsuba_280820'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">93</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1030545664369876992 [200 OK, 1.31KB, 131ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1030545664369877000</span>,みゅう,rzV5hlxZjDSFSIv'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">94</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1155592675980009472 [200 OK, 1.81KB, 165ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1155592675980009500</span>,Hiro,Hiro24987674'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">95</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=162073408 [200 OK, 1.99KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">162073408</span>,taka,tkhrysmr'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">96</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1083045815369707520 [200 OK, 2.14KB, 164ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1083045815369707500</span>,LEX,LEX31542948'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">97</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1644434066 [200 OK, 1.74KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1644434066</span>,tanaka yoshinori,tanakayo1219'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">98</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1230489845652307970 [200 OK, 1.31KB, 137ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1230489845652308000</span>,うまい棒,<span class="number">7</span>WPLZfkaesgSBch'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">99</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1162363771576131587 [200 OK, 1.31KB, 182ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1162363771576131600</span>,ザッハーク,FKU65HDVv88bzXk'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">100</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1169999703460601857 [200 OK, 1.58KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1169999703460601900</span>,寝顔,ZtONUcn3bTsiu5k'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">101</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=911620768361889792 [200 OK, 1.89KB, 191ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">911620768361889800</span>,ティルフィ,QrnVwf'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">102</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=705815480376758272 [200 OK, 2.17KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">705815480376758300</span>,RR,rariver220'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">103</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1204256721939517441 [200 OK, 1.31KB, 134ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1204256721939517400</span>,内田雅夫,C0ANaGUAJSjhVgh'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">104</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1112200902910214144 [200 OK, 2.19KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1112200902910214100</span>,さんや,RLHghGnqdYor64h'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">105</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1108082368810610688 [200 OK, 2.09KB, 154ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1108082368810610700</span>,ゆきみん,E7url8MIA9QTiuC'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">106</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1144330044 [200 OK, 2.23KB, 153ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1144330044</span>,STAN,stan_3210'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">107</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3271871107 [200 OK, 1.69KB, 152ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3271871107</span>,ペッツィ,DakaraKouichi'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">108</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1168073169745219585 [200 OK, 2.04KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1168073169745219600</span>,tamusansan,tamusansan1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">109</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1250045897213276160 [200 OK, 1.32KB, 136ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1250045897213276200</span>,スガワラユウイチ,w9DfMw822DUtCYN'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">110</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1016730721921069056 [200 OK, 1.43KB, 138ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1016730721921069000</span>,うな,IxOgbJGgfyeUcuP'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">111</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=773396898480852992 [200 OK, 2.03KB, 164ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">773396898480853000</span>,noanoa0511,noanoa0511_0310'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">112</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3022641198 [200 OK, 1.32KB, 196ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3022641198</span>,pokopen,pokopenpokopen8'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">113</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=873425051072081921 [200 OK, 1.81KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">873425051072081900</span>,G55,joke_888'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">114</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1169236669767118848 [200 OK, 1.34KB, 136ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1169236669767118800</span>,小川健太郎,<span class="number">8</span>AoZ3alAd6jc07S'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">115</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1209399275127394307 [200 OK, 1.56KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1209399275127394300</span>,ビビッド用,ahUXJyTy6Plko38'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">116</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1318048442 [200 OK, 1.77KB, 153ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1318048442</span>,mono,<span class="number">11</span>monosann'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">117</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1029531498880294912 [200 OK, 2.43KB, 166ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1029531498880294900</span>,chorita,chorita7'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">118</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=742890983872856064 [200 OK, 1.47KB, 292ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">742890983872856000</span>,中西,o0pA0O30Qb6lN1L'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">119</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3747318378 [200 OK, 2.03KB, 153ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3747318378</span>,Shinji Rikimaru,rikimaru_shinji'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">120</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=267226633 [200 OK, 2.18KB, 145ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">267226633</span>,武風@面白いゲーム探してます,takeru25254546'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">121</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1191625812362969088 [200 OK, 2.13KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1191625812362969000</span>,ゆ～き,Id9mnSNoVwg1GwO'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">122</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=876956774225420288 [200 OK, 1.79KB, 171ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">876956774225420300</span>,ADONA,ADONA76848656'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">123</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=399518422 [200 OK, 2.27KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">399518422</span>,かずい,kazui2011'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">124</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3825169272 [200 OK, 2.01KB, 177ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3825169272</span>,エイギル,<span class="number">04</span>edf'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">125</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1173594475676848128 [200 OK, 2.07KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1173594475676848000</span>,めめ,<span class="number">6</span>wRiR1UfyDQuNz3'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">126</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=215934363 [200 OK, 1.32KB, 277ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">215934363</span>,わんちゃん＠趣味,wanchan_shumi'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">127</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=940195156069777408 [200 OK, 1.98KB, 179ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">940195156069777400</span>,Config,Game_config'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">128</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1146752414113886208 [200 OK, 2.11KB, 196ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1146752414113886200</span>,今日は餃子,OBFBbMfnBO9rWOI'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">129</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=428873715 [200 OK, 1.75KB, 210ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">428873715</span>,相原栄治,eizi_a'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">130</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1202688552590401536 [200 OK, 1.72KB, 484ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1202688552590401500</span>,gyakuhineri972,gyakuhineri972'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">131</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1123737372968083457 [200 OK, 1.31KB, 174ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1123737372968083500</span>,きやっか,<span class="number">9</span>L6mDmVCIjUbMKC'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">132</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=924948705970548736 [200 OK, 2.03KB, 317ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">924948705970548700</span>,kyou,kyoukyou439'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">133</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1124508044669308928 [200 OK, 1.31KB, 198ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1124508044669308900</span>,トク,L2V8u1uNFRfkJMo'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">134</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3599805614 [200 OK, 2.26KB, 164ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3599805614</span>,けーな,quena_k_1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">135</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1028634319021989889 [200 OK, 2.05KB, 157ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1028634319021989900</span>,KO-G,KOG23273306'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">136</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=112220922 [200 OK, 2.04KB, 186ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">112220922</span>,燐鴬　七威　月詠,nanai_tsukuyo'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">137</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=463779133 [200 OK, 2.09KB, 568ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">463779133</span>,Aion(Yuuki),Aion373'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">138</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1164196808010059780 [200 OK, 1.84KB, 178ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1164196808010059800</span>,wea,wea16553776'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">139</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=4318771453 [200 OK, 2.29KB, 162ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">4318771453</span>,浅沼寿幸,URFxp75udMUyTP1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">140</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=771283722859520001 [200 OK, 2.01KB, 182ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">771283722859520000</span>,もずい,mozui88'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">141</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=886412135814778882 [200 OK, 1.93KB, 176ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">886412135814778900</span>,LILIUM@みがわりMiner,LILIUM_Serval'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">142</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1251803295787544576 [200 OK, 2.08KB, 171ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1251803295787544600</span>,ぼっち猫,<span class="number">6</span>XFsv7rRCSHR7i9'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">143</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1114794534645329921 [200 OK, 1.82KB, 158ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1114794534645329900</span>,💩,encondify'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">144</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=4836191232 [200 OK, 2.08KB, 206ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">4836191232</span>,shimada,shimada_jngr'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">145</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=921842226186948609 [200 OK, 1.87KB, 155ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">921842226186948600</span>,tariki,tariki_99'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">146</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1140951313741565952 [200 OK, 1.85KB, 161ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1140951313741566000</span>,shall,l2QkEG5lvjp97Bv'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">147</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2198575950 [200 OK, 1.92KB, 225ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2198575950</span>,アキヒロ,O_akihiro02'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">148</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2822230333 [200 OK, 1.91KB, 169ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2822230333</span>,Naota,naota_naota7286'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">149</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1137811586167451648 [200 OK, 1.36KB, 213ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1137811586167451600</span>,浅井夢幻,MNQCkmHDW95qpj5'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">150</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1244470688032776192 [200 OK, 2.14KB, 175ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1244470688032776200</span>,lamf_zep,LamfZep'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">151</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3776687893 [200 OK, 2.46KB, 196ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3776687893</span>,華衣@ベネットP,kai_0527_'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">152</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1168877635323060226 [200 OK, 1.94KB, 174ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1168877635323060200</span>,hatatnotosiyasu,hatatnotosiyasu'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">153</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2989548769 [200 OK, 1.69KB, 167ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2989548769</span>,源三郎,gentheblow'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">154</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1125399463252512768 [200 OK, 1.31KB, 146ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1125399463252512800</span>,zx9r9087,zx9r9087'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">155</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=113076773 [200 OK, 2.17KB, 189ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">113076773</span>,ともぞう,hero1000_'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">156</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1001139157467516929 [200 OK, 1.81KB, 160ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1001139157467516900</span>,fujisan,FuujiSaAAN'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">157</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1081524759181942784 [404 Not Found, 871B, 170ms]</span></span><br><span class="line">  <span class="number">8</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">158</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=843709525 [200 OK, 1.65KB, 170ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">843709525</span>,ユユシィ,yuyusy21'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">159</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1113409711850762243 [200 OK, 1.69KB, 182ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1113409711850762200</span>,はと,sgzk14'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">160</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2821507159 [200 OK, 1.92KB, 179ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2821507159</span>,ジマール,jimarukizuna'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">161</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3787106653 [200 OK, 1.32KB, 180ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3787106653</span>,ジェット,RzyCtPqTclAd3SF'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">162</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1207602203113836544 [200 OK, 1.87KB, 295ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1207602203113836500</span>,とんぱち,KTcr2diW2Ja3CGc'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">163</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1145314636620652544 [200 OK, 1.3KB, 251ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1145314636620652500</span>,Shoy,l7urSDKFmB8HFOU'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">164</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1125685325982867458 [200 OK, 2.16KB, 168ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1125685325982867500</span>,†墓石†,FsLgTwEs'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">165</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1187760468275781632 [200 OK, 2.23KB, 171ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1187760468275781600</span>,胡太師,Rh4ehbLzmdKKB6m'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">166</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1159550163435708417 [200 OK, 1.89KB, 299ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1159550163435708400</span>,ぽんこつ,U8CPlKCnWY3Ww1e'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">167</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=705783507394494464 [200 OK, 2.04KB, 184ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">705783507394494500</span>,丁稚,jiji82163071'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">168</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=945647903262961664 [200 OK, 1.6KB, 166ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">945647903262961700</span>,ありんこ,arinko385'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">169</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=2199121057 [200 OK, 1.35KB, 190ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">2199121057</span>,価値が無いもの,ikimono_0000'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">170</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1115698728931713024 [200 OK, 1.74KB, 155ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1115698728931713000</span>,ごきげんよう,Gokigenyoh23'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">171</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=384210102 [200 OK, 1.83KB, 281ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">384210102</span>,白純@生きてはいる,srzm_0606'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">172</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=894882792865054722 [200 OK, 1.68KB, 473ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">894882792865054700</span>,かっとん,<span class="number">3</span>uwuDeREIVnabZx'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">173</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1270551300233498624 [403 Forbidden, 880B, 130ms]</span></span><br><span class="line">  <span class="number">9</span>. get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">174</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1046369338540736519 [200 OK, 1.39KB, 141ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1046369338540736500</span>,マヨネーズサラダ,NT0j0jZRUQMF4Th'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">175</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1116415349446942720 [200 OK, 2.08KB, 151ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1116415349446942700</span>,(´･ω･<span class="meta">`)しょぼんぬ,Ld9I10nUkJTS43g'</span></span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">176</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=996258785290158081 [200 OK, 2.08KB, 159ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">996258785290158100</span>,ねこるすきー,Necoru_cat'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">177</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3005839968 [200 OK, 1.81KB, 156ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3005839968</span>,トロロ・テン,tororoTHEten'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">178</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=371826755 [200 OK, 1.32KB, 143ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">371826755</span>,山岡,yamaokadesuyo'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">179</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=1208066347705331712 [200 OK, 2.1KB, 163ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">1208066347705331700</span>,アレオ,areo_No1'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">Iteration <span class="number">180</span>/<span class="number">180</span></span><br><span class="line"></span><br><span class="line">→ users/show</span><br><span class="line">  GET https:<span class="comment">//api.twitter.com/1.1/users/show.json?user_id=3278435672 [200 OK, 1.86KB, 179ms]</span></span><br><span class="line">  ┌</span><br><span class="line">  │ '<span class="number">3278435672</span>,pot,pot86333242'</span><br><span class="line">  └</span><br><span class="line">  ✓  get user info</span><br><span class="line"></span><br><span class="line">┌─────────────────────────┬────────────────────┬────────────────────┐</span><br><span class="line">│                         │           executed │             failed │</span><br><span class="line">├─────────────────────────┼────────────────────┼────────────────────┤</span><br><span class="line">│              iterations │                <span class="number">180</span> │                  <span class="number">0</span> │</span><br><span class="line">├─────────────────────────┼────────────────────┼────────────────────┤</span><br><span class="line">│                requests │                <span class="number">180</span> │                  <span class="number">0</span> │</span><br><span class="line">├─────────────────────────┼────────────────────┼────────────────────┤</span><br><span class="line">│            test-scripts │                <span class="number">360</span> │                  <span class="number">0</span> │</span><br><span class="line">├─────────────────────────┼────────────────────┼────────────────────┤</span><br><span class="line">│      prerequest-scripts │                <span class="number">360</span> │                  <span class="number">0</span> │</span><br><span class="line">├─────────────────────────┼────────────────────┼────────────────────┤</span><br><span class="line">│              assertions │                <span class="number">180</span> │                  <span class="number">9</span> │</span><br><span class="line">├─────────────────────────┴────────────────────┴────────────────────┤</span><br><span class="line">│ total run duration: <span class="number">37</span><span class="variable">.2s</span>                                         │</span><br><span class="line">├───────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ total data received: <span class="number">180</span><span class="variable">.71KB</span> (approx)                            │</span><br><span class="line">├───────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ average response <span class="keyword">time</span>: <span class="number">178</span>ms [min: <span class="number">130</span>ms, max: <span class="number">568</span>ms, s<span class="variable">.d</span>.: <span class="number">59</span>ms] │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line">  #  failure         detail                                                </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">1</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">7</span>    expected response to have status code <span class="number">200</span> but got <span class="number">404</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">2</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">12</span>   expected response to have status code <span class="number">200</span> but got <span class="number">403</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">3</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">19</span>   expected response to have status code <span class="number">200</span> but got <span class="number">404</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">4</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">26</span>   expected response to have status code <span class="number">200</span> but got <span class="number">404</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">5</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">56</span>   expected response to have status code <span class="number">200</span> but got <span class="number">403</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">6</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">62</span>   expected response to have status code <span class="number">200</span> but got <span class="number">403</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">7</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">89</span>   expected response to have status code <span class="number">200</span> but got <span class="number">403</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">8</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">157</span>  expected response to have status code <span class="number">200</span> but got <span class="number">404</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span>                                   </span><br><span class="line">                                                                           </span><br><span class="line"> <span class="number">9</span>.  AssertionError  get user info                                         </span><br><span class="line">     iteration: <span class="number">173</span>  expected response to have status code <span class="number">200</span> but got <span class="number">403</span> </span><br><span class="line">                     at assertion:<span class="number">0</span> in test-script                         </span><br><span class="line">                     <span class="keyword">inside</span> <span class="string">"users/show"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日本东京六本木】【CTW株式会社】招聘Node全栈/Java后端/SRE/大数据工程师/UI设计师</title>
      <link href="2020/ctwJobs/"/>
      <url>2020/ctwJobs/</url>
      
        <content type="html"><![CDATA[<p><strong>公司介绍CTW株式会社是一家快速成长中的创业公司，致力于在日本提供优质的游戏和便捷的互联网产品服务，坐标在东京六本木地标建筑之一ARK Hills Sengokuyama Mori Tower，这里汇集了Facebook，软银，adidas，麦肯锡等知名企业。</strong></p><a id="more"></a><img src="https://i.imgur.com/r4TNsG9.jpg" alt="从公司内拍摄的景色" style="zoom: 25%;"><p><em>从公司内拍摄的景色</em><br>公司创立于2013年，公司业务涵盖游戏的本地化・运营・宣发等多个领域。2017年中旬开始全面转型，投入到HTML5游戏市场，发布了 G123.jp — H5游戏互动平台。便捷快速的体验方式以及较高质量的内容，使得G123游戏平台得到了迅速成长，现在平台会员数已突破5000万人次。『ビビッドアーミー』Vivid Army等多款游戏产品持续引爆热点，请到刚力彩芽、后藤真希等著名日本女星做代言，广告登陆日本民放电视台黄金时段。</p><p><img src="https://i.imgur.com/LqHKVh2.jpg" alt="后藤真希"><em>后藤真希参演的G123游戏平台主推游戏《Vivid Army》电视广告</em>可以在<a href="https://www.youtube.com/channel/UCfNkMgwQS2e5v1AuF3ALf0w" target="_blank" rel="noopener">Youtube G123 Channel</a>观看</p><p>​    公司现有60余人，主要分为技术部、市场部、美术部、游戏运营部、以及综合管理部门，职员以20代后半~30代前半为主，没有冗杂的组织架构和严苛的上下级观念，工作氛围较为轻松融洽。技术部门全员华人，市场和美术部门主要由日本人员工组成，游戏运营部门华人和日本人各占一半。公司整体华人和日本人人数比例大概2:8。</p><p>​    技术团队成员均为华人，团队内部基本用中文沟通。现有10名成员，大部分出身于北大、武大、中科院、大工、国立中山大学、NYU等知名学府以及腾讯、网易、LINE、Rakuten、CyberAgent、OYO等国内外知名互联网企业。技术团队成员都有很强的责任心和归属感、具有较强的独立工作能力和解决问题的能力，技术部内部基本中文沟通，效率很高，关系简单，团队氛围比较好。</p><p>​    目前G123游戏平台已经积累了一定量的忠实用户，业绩也在稳步上涨。但跟绝大部分小公司的一样，变化快仍然是CTW的重要特性。公司从成立以来上线过数百款App游戏，尝试过数十种游戏以外的服务，绝大多数服务很难生存满一年，甚至有过上线一天后就开始准备下架的服务。公司需要不断地尝试，不断地从失败中吸取经验，循环往复来适应社会和市场的变化…G123平台就是其中存活下来的产品。目前仍然有在尝试，游戏周边EC，漫画平台，法律名师讲堂等新产品。如果你喜欢挑战，拥抱变化，希望可以不断提高自我价值，相信这里是个不错的选择。<br><img src="https://i.imgur.com/ON3BJVX.jpg" alt="工作中"></p><p>​    技术团队充当的主要作用是提升效率和提供决策数据。效率方面主要包含，游戏研发到接入平台的效率，保证玩家的体验、市场营销和游戏运营效率等。游戏平台主要价值在于连接玩家和游戏。平台系统主要围绕游戏，认证，支付三个系统展开。数据方面，主要负责收集处理分析、平台数据，游戏内数据和广告等第三方系统的数据。</p><p>​    平台infra主要基于AWS做IaC管理、服务器配置容器化、主业务基本实现了serverless。另外对部分IP游戏提供了基于阿里云和AWS的两套系统解决方案。随着业务复杂度提升、平台部分系统（如数据方面的用户画像系统）正在向AWS的Elastic Kubernetes Service迁移、未来视业务需要与人才储备、主业务系统以及后续游戏托管平台会逐步实现完全K8S集群化。由于在特殊时间段内的流水会出现很高的情况（平台1分钟流水最高记录达到过1M+日币），所以对整个系统的SLA要求非常高。</p><p>​    客户端基于浏览器平台，使用近年热门的Service Worker、Web Payment、Web Push、Web Notification等技术构建PWA应用，以达到接近原生App的游戏体验，短期内不会涉足原生App的研发。前端主要使用TypeScript语言，以ReactJS框架为主，同时也有部分服务使用VueJS和Angular2.0构建。后端主要采用SpringBoot 和 NodeJS框架，开发语言主要是Java和TypeScript。</p><p>​    目前，数据相关产品的研发是主要投入点。除了打通各个数据链路，BI展示各类业务数据以外，还需要依据平台大数据，利用统计分析和机器学习来解决实际业务场景中遇到的挑战。例如目前月广告推广费用已达到几亿日币，如何选择效果计算模型(Customized Attribution Model)来评定和衡量广告效果，从而提高市场投放效率也是遇到的不小挑战。公司以数据智能化驱动业务作为主要的发力方向，利用数据科学技术赋能游戏平台业务，比如开发游戏内商品个性化推荐产品(in-app purchase recommendation)，构建数据可视化产品和工具实现运营自动化，减少游戏运营的人力成本和优化决策促进业务增长。</p><p><img src="https://i.imgur.com/w8UyMk4.jpg" alt="技术组开会中"><em>技术开会中</em></p><h3 id="薪资福利"><a href="#薪资福利" class="headerlink" title="薪资福利"></a>薪资福利</h3><h5 id="职级薪资"><a href="#职级薪资" class="headerlink" title="职级薪资"></a>职级薪资</h5><ul><li>  薪资结构: 基础工资 + 一年两次奖金，基础工资里包含加班费</li><li>  基础薪资范围(不含奖金): 600万 ~ 1500万日元</li><li>  日本标配: 交通补助，各类保险齐全* 少量的租房补贴: 住得离公司近才有</li><li>  对与中国区直接招聘，公司负责解决签证，报销来日本的机票，协助办理来日本后的各种手续等（我们在准备提供宿舍和日语课程的方案、后续更新）</li></ul><h5 id="加班我们不鼓励加班。每个人的精力是有限的，比起熬夜加班，更注重效率的提升和长期可持续性地努力。上班时间为10：00-19：00、通常20点以后就基本没人在公司了。"><a href="#加班我们不鼓励加班。每个人的精力是有限的，比起熬夜加班，更注重效率的提升和长期可持续性地努力。上班时间为10：00-19：00、通常20点以后就基本没人在公司了。" class="headerlink" title="加班我们不鼓励加班。每个人的精力是有限的，比起熬夜加班，更注重效率的提升和长期可持续性地努力。上班时间为10：00 ~ 19：00、通常20点以后就基本没人在公司了。"></a>加班我们不鼓励加班。每个人的精力是有限的，比起熬夜加班，更注重效率的提升和长期可持续性地努力。上班时间为10：00 ~ 19：00、通常20点以后就基本没人在公司了。</h5><h5 id="假期"><a href="#假期" class="headerlink" title="假期"></a>假期</h5><ul><li>全年 120+(去年125天)</li><li>完全双休日（周六，周日）、祝日（日本节日）、GW（黄金周）、夏季休暇、年末年始休暇（元旦）</li><li>带薪休假（入职6个月以上10天、之后每1年增加1~2天）</li></ul><h5 id="餐补公司目前没有食堂，但提供了各类餐饮福利。"><a href="#餐补公司目前没有食堂，但提供了各类餐饮福利。" class="headerlink" title="餐补公司目前没有食堂，但提供了各类餐饮福利。"></a>餐补公司目前没有食堂，但提供了各类餐饮福利。</h5><ul><li>  早上：免费早餐（各式早餐每天不重样，数量有限，先到先得）</li><li>  下午：有免费水果(切好包装好了的，每人一小盒)</li><li>  下雨天中午：免费午餐便当</li><li>  咖啡、饮料、零食无限供应</li></ul><h5 id="团建"><a href="#团建" class="headerlink" title="团建"></a>团建</h5><ul><li>  对于入职1年以上的员工，每年会有去海外和日本国内各地社员旅行的机会（过去组织去过关岛、夏威夷、冲绳、北海道等地）</li><li>   团建一般都选在平日。包船赏花，滑雪，狮子王剧场，运动会，篮球、羽毛球比赛等等。</li></ul><p><img src="https://i.imgur.com/pCDdabj.png" alt="进击的巨人"><img src="https://i.imgur.com/Jrv3q7e.jpg" alt="约定的梦幻岛"><em>Vivid Army和《进击的巨人》、《约定的梦幻岛》等大热IP都有过联动活动</em></p><p><img src="https://i.imgur.com/Iqj6sLh.jpg" alt="10月搬家后新办公室入口"></p><p><strong>办公室入口</strong></p><p><img src="https://i.imgur.com/hVdwb2g.jpg" alt="早餐福利の神户牛派"></p><p><em>早餐福利の神户牛派</em><br><img src="https://i.imgur.com/RamFexY.jpg" alt="早餐福利の鳗鱼寿司"><em>早餐福利の鳗鱼</em></p><p><em>寿司</em><br><img src="https://i.imgur.com/2puXKpR.jpg" alt="独立包装水果福利"></p><p><em>独立包装水果福利</em><br><img src="https://i.imgur.com/cqbg99K.jpg" alt="饮料自助"></p><p><em>饮料自助</em><br><img src="https://i.imgur.com/4WjQnPE.jpg" alt="团建篮球"><em>团建打篮球</em></p><h2 id="加入我们"><a href="#加入我们" class="headerlink" title="加入我们"></a>加入我们</h2><p>工程师职位基本无日语要求，英文需要达到可以看懂技术文档的水平。</p><ul><li><p>Java后端工程师</p></li><li><p>前端应用工程师/Node全栈工程师</p></li><li><p>站点可靠性工程师(SRE)</p></li><li><p>大数据工程师</p></li><li><p>UX/UI设计师</p></li></ul><h4 id="具体JD请移步公司主页-http-ctw-inc-net-recruitments"><a href="#具体JD请移步公司主页-http-ctw-inc-net-recruitments" class="headerlink" title="[具体JD请移步公司主页] (http://ctw-inc.net/recruitments)"></a>[具体JD请移步公司主页] (<a href="http://ctw-inc.net/recruitments" target="_blank" rel="noopener">http://ctw-inc.net/recruitments</a>)</h4><h4 id="简历发送至-请备注是v2ex-：-x68-x72-x40-99-116-x77-x2d-105-x6e-99-46-x6e-101-x74"><a href="#简历发送至-请备注是v2ex-：-x68-x72-x40-99-116-x77-x2d-105-x6e-99-46-x6e-101-x74" class="headerlink" title="简历发送至(请备注是v2ex)：&#x68;&#x72;&#x40;&#99;&#116;&#x77;&#x2d;&#105;&#x6e;&#99;&#46;&#x6e;&#101;&#x74;"></a>简历发送至(请备注是v2ex)：<a href="mailto:&#x68;&#x72;&#x40;&#99;&#116;&#x77;&#x2d;&#105;&#x6e;&#99;&#46;&#x6e;&#101;&#x74;" target="_blank" rel="noopener">&#x68;&#x72;&#x40;&#99;&#116;&#x77;&#x2d;&#105;&#x6e;&#99;&#46;&#x6e;&#101;&#x74;</a></h4><p>如果您对我们感兴趣，但是上述没有符合您的职位，也欢迎与我们联系，我们会在开放相应职位时第一时间与您联系。或者您的能力远超于此，也欢迎与我们联系，我们会全力寻找共事的机会并提供满意的薪资水平。有任何疑问:</p><ul><li>  可以在此贴下留言 邮件: <strong><a href="mailto:&#x68;&#x72;&#64;&#99;&#116;&#119;&#45;&#105;&#110;&#99;&#46;&#110;&#101;&#x74;" target="_blank" rel="noopener">&#x68;&#x72;&#64;&#99;&#116;&#119;&#45;&#105;&#110;&#99;&#46;&#110;&#101;&#x74;</a></strong></li></ul><h3 id="中国地区直接招聘流程："><a href="#中国地区直接招聘流程：" class="headerlink" title="中国地区直接招聘流程："></a>中国地区直接招聘流程：</h3><ul><li>  提交简历: 请将中文简历发送至, 我们会在7个工作日内联系您。如果您有英文和日文的简历，也欢迎一并发送给我们。</li><li>  第一轮技术面: 远程视频，30~90分钟</li><li>  第二轮技术面: 远程视频，30~90分钟</li><li>  终面: 通常由CEO或CTO进行面试，30~60分钟</li><li>  接收书面Offer: 终面结果确认下来后，我们会在2个工作日内发送书面的Offer。需要您在14天内做出回复。</li></ul><h4 id="签证申请"><a href="#签证申请" class="headerlink" title="签证申请"></a>签证申请</h4><p>确认接收offer后就可以进行签证申请了。从准备材料到签证申请下来大概需要2-3个月，整个申请签证的过程公司会有专门的律师和行政书士，人事同学会全程跟进。我们申请的是日本公司的正社员工作签证, 签证类型（技术・人文知识・国际业务签）。工作地点就是文章开头的楼里。通常可以申请到3年的工作签证。</p><ul><li>  准备材料: 通常需要您提供最高学历的学位证，护照，证件照等材料，当然律师和签证官可能额外要求其他材料。其他材料由公司直接提供。</li><li>  申请在留资格: 所有材料准备齐之后由公司递交到东京入国管理局，进行签证申请。审查通常需要1~2个月。</li><li>  申请签证: 申请到在留资格认定后，公司把资料寄送给您中国的地址，需要您去拿着留资格认定去日本驻中国大使馆申请赴日签证。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm优秀库使用收集整理(长期向)</title>
      <link href="2020/npmPackageCollection/"/>
      <url>2020/npmPackageCollection/</url>
      
        <content type="html"><![CDATA[<p>虽然自栩全沾工程师，但是对于前端圈的了解还是相对缺乏的，尤其是大量的npm包。java的maven/gradle， node的npm， swift的pod,，python的pip，php的Composer，c++的<a href="https://github.com/conan-io/conan" target="_blank" rel="noopener">Conan</a>等等。基本上每一种开发语言都有自己的包管理器。开源三方库汇集了全世界的智慧结晶，有了这些优秀的三方库能够让我们很容易的完成复杂的功能。所以打算开一个长期向的优秀库的使用收集博客。大部分内容是搜索到的优秀博文整理而来。</p><a id="more"></a><p>注： 本篇文章开始于2020年11月20，每次修改或新增时都会将时间更新时最新的时间，每个库的使用也会标注版本和来源。</p><h1 id="ajv-v6-12-6"><a href="#ajv-v6-12-6" class="headerlink" title="ajv(v6.12.6)"></a>ajv(v6.12.6)</h1><p>作用 </p><p>ajv 是一个非常流行的JSON Schema验证工具，并且拥有非常出众的性能表现。下方的例子中，我们使用ajv来验证用户输入的表单数据是否合法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Ajv = <span class="built_in">require</span>(<span class="string">'ajv'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> schema = &#123;</span><br><span class="line">  type: <span class="string">'object'</span>,</span><br><span class="line">  required: [<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>],</span><br><span class="line">  properties: &#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      minLength: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      format: <span class="string">'email'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      minLength: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="string">'integer'</span>,</span><br><span class="line">      minimum: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sex: &#123;</span><br><span class="line">      enum: [<span class="string">'boy'</span>, <span class="string">'girl'</span>, <span class="string">'secret'</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'secret'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ajv = <span class="keyword">new</span> Ajv();</span><br><span class="line"><span class="keyword">let</span> validate = ajv.compile(schema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> valid = validate(data);</span><br><span class="line"><span class="keyword">if</span> (!valid) <span class="built_in">console</span>.log(validate.errors);</span><br></pre></td></tr></table></figure><p>在上述代码中，我们声明了一个数据模式<code>schema</code> ，这个模式要求目标数据为一个对象，对象可以有五个字段 <code>username</code>、<code>email</code>、<code>password</code>、<code>age</code>、<code>sex</code>，并分别定义了五个字段的类型和数据格式要求，并且其中 <code>username</code>、<code>email</code>、<code>password</code> 必填。然后我们使用这个模式去验证用户输入的数据 <code>data</code> 是否满足我们的需求。</p><p>注意：</p><ol><li><p>JSON Schema 是一个声明模式描述对象的标准，并非一个库</p></li><li><p>ajv 是一个JSON Schema标准验证器的实现，除了ajv还有很多其他的库</p></li><li><p>代码中的 <code>schema</code> 是使用 JSON Schema 生成的模式描述对象</p></li><li><p> 代码中 <code>data</code> 是我们要进行检查的数据</p></li></ol><p>参考资料</p><p>JSON Schema <a href="http://json-schema.org/" target="_blank" rel="noopener">http://json-schema.org</a></p><p>AJV <a href="https://github.com/epoberezkin/ajv" target="_blank" rel="noopener">https://github.com/epoberezkin/ajv</a>    </p><p>来源: <a href="https://segmentfault.com/a/1190000013265287" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013265287</a>    </p><h1 id="accounting-0-4-2"><a href="#accounting-0-4-2" class="headerlink" title="accounting(0.4.2)"></a>accounting(0.4.2)</h1><p>作用</p><p>accounting是用来格式化数字的库， 主要提供的方法有 <code>formatMoney()</code> <code>formatColumn()</code> <code>formatNumber()</code> <code>toFixed()</code> <code>unformat()</code></p><p>接下来我们一一介绍：</p><p>formatMoney() 格式化货币</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认货币格式：货币符号$，保留两位小数，每千位加逗号</span></span><br><span class="line">accounting.formatMoney(<span class="number">12345678</span>); <span class="comment">// $12,345,678.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定货币符号、保留小数位、千位间隔符</span></span><br><span class="line">accounting.formatMoney(<span class="number">12345678</span>, <span class="string">'￥'</span>, <span class="number">2</span>, <span class="string">''</span>); <span class="comment">// ￥12345678.00</span></span><br></pre></td></tr></table></figure><p>formatColumn() 格式化并按列对齐</p><p>在制表时，<code>formatColumn()</code> 方法方便我们按照表格列对齐数字和货币符号：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">accounting.formatColumn([<span class="number">123.5</span>, <span class="number">3456.615</span>, <span class="number">777888.99</span>, <span class="number">-5432</span>, <span class="number">-1234567</span>, <span class="number">0</span>], <span class="string">"$ "</span>);</span><br></pre></td></tr></table></figure><p>格式化后的效果：</p><p><img src="https://image.xiaomo.info//blog/bV3yyE.png" alt="图片描述"></p><p>formatNumber() 格式化数字</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">accounting.formatNumber(<span class="number">5318008</span>); <span class="comment">// 5,318,008</span></span><br><span class="line">accounting.formatNumber(<span class="number">9876543.21</span>, <span class="number">3</span>, <span class="string">" "</span>); <span class="comment">// 9 876 543.210</span></span><br></pre></td></tr></table></figure><p>toFixed() 保留小数位</p><p>和JavaScript内置 <code>Number.prototype.toFixed()</code> 不同的是，<code>accounting.toFixed()</code> 有四舍五入的效果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">0.615</span>).toFixed(<span class="number">2</span>); <span class="comment">// "0.61"</span></span><br><span class="line">accounting.toFixed(<span class="number">0.615</span>, <span class="number">2</span>); <span class="comment">// "0.62"</span></span><br></pre></td></tr></table></figure><p>unformat() 解析数字</p><p><code>unformat()</code> 方法能够从任何格式的字符串中解析出原始数字：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">accounting.unformat(<span class="string">"£ 12,345,678.90 GBP"</span>); <span class="comment">// 12345678.9</span></span><br></pre></td></tr></table></figure><p>参考资料</p><p><a href="http://openexchangerates.github.io/accounting.js/" target="_blank" rel="noopener">http://openexchangerates.github.io/accounting.js/</a></p><p><a href="https://github.com/openexchangerates/accounting.js" target="_blank" rel="noopener">https://github.com/openexchangerates/accounting.js</a>    </p><p>来源: <a href="https://segmentfault.com/a/1190000013201803" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013201803</a></p><h1 id="async-retry-1-3-1"><a href="#async-retry-1-3-1" class="headerlink" title="async-retry(1.3.1)"></a>async-retry(1.3.1)</h1><p>作用</p><p>异步的执行对某个操作的重试，可以设置重试次数。</p><p>使用demo</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Packages</span></span><br><span class="line"><span class="keyword">const</span> retry = <span class="built_in">require</span>(<span class="string">'async-retry'</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">await</span> retry(<span class="keyword">async</span> bail =&gt; &#123;</span><br><span class="line">  <span class="comment">// if anything throws, we retry</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'https://google.com'</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (<span class="number">403</span> === res.status) &#123;</span><br><span class="line">    <span class="comment">// don't retry upon 403</span></span><br><span class="line">    bail(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unauthorized'</span>))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.text()</span><br><span class="line">  <span class="keyword">return</span> data.substr(<span class="number">0</span>, <span class="number">500</span>)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  retries: <span class="number">5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p> 提供的功能可以是async或不是。换句话说，它可以是返回Promise或值的函数。</p></li><li><p>提供的函数接收两个参数</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function您可以调用A以中止重试（保释）</span><br><span class="line"></span><br><span class="line">Number识别尝试。绝对的首次尝试（在重试之前）为<span class="number">1</span>。</span><br></pre></td></tr></table></figure><ol start="3"><li><p>将opts被传递到node-retry。阅读<a href="https://github.com/tim-kos/node-retry" target="_blank" rel="noopener">其文档</a></p></li><li><p> retries：重试该操作的最大次数。默认值为10。</p></li><li><p> factor：要使用的指数因子。默认值为2。</p></li><li><p> minTimeout：开始第一次重试之前的毫秒数。默认值为1000。</p></li><li><p> maxTimeout：两次重试之间的最大毫秒数。默认值为Infinity。</p></li><li><p> randomize：通过乘以介于之间的因数1来随机化超时2。默认值为true。</p></li><li><p> onRetry：可选Function，在执行新的重试后调用。它传递了Error触发它的参数。</p></li></ol><h1 id="chalk-4-1-0"><a href="#chalk-4-1-0" class="headerlink" title="chalk(4.1.0)"></a>chalk(4.1.0)</h1><p>将在终端中输出蓝色带下划线的MCC。</p><p><img src="https://image.xiaomo.info//blog/chalk.png" alt="chalk"></p><p><code>echo -e &quot;\e[34;4mMCC\e[0m&quot; </code></p><p>虽然我们已经学会了，在终端中控制字符颜色的原理和方法，但是这种操作太过于繁琐，每一次都需要查颜色样式手册，然后写出一堆无法阅读的火星文，抓狂！</p><p>今天介绍的NPM库chalk就是用来优雅地输出带颜色的文本，<strong>不需要记忆、查阅样式手册</strong>。</p><p>安装</p><p><code>npm install chalk </code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ctx = <span class="keyword">new</span> chalk.Instance(&#123;<span class="attr">level</span>: <span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Level</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><code>0</code></td><td align="left">All colors disabled</td></tr><tr><td align="center"><code>1</code></td><td align="left">Basic color support (16 colors)</td></tr><tr><td align="center"><code>2</code></td><td align="left">256 color support</td></tr><tr><td align="center"><code>3</code></td><td align="left">Truecolor support (16 million colors)</td></tr></tbody></table><p>使用</p><p>chalk 将各种颜色和样式修饰符实现为各个函数，并且支持链式调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);          </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出蓝色的MCC     </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.blue(<span class="string">'MCC'</span>));         </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 输出蓝色带下划线的MCC     </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.blue.underline(<span class="string">'MCC'</span>));    </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用RGB颜色输出  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.rgb(<span class="number">4</span>,  <span class="number">156</span>, <span class="number">219</span>).underline(<span class="string">'MCC'</span>));     </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.hex(<span class="string">'#049CDB'</span>).bold(<span class="string">'MCC'</span>));     </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.bgHex(<span class="string">'#049CDB'</span>).bold(<span class="string">'MCC'</span>));</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://image.xiaomo.info//blog/image-20201204181923326.png" alt="image-20201204181923326"></p><p>文本样式修饰符函数</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">reset 重置样式    </span><br><span class="line"></span><br><span class="line">bold 加粗    </span><br><span class="line"></span><br><span class="line">dim 昏暗    </span><br><span class="line"></span><br><span class="line">italic 斜体    </span><br><span class="line"></span><br><span class="line">underline 下划线    </span><br><span class="line"></span><br><span class="line">inverse 反色    </span><br><span class="line"></span><br><span class="line">hidden 隐藏    </span><br><span class="line"></span><br><span class="line">strikethrough 删除线    </span><br><span class="line"></span><br><span class="line">visible 可见</span><br></pre></td></tr></table></figure><p>​    </p><p>颜色函数</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">black </span>   </span><br><span class="line"></span><br><span class="line"><span class="symbol">red</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">green</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">yellow</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">blue </span>   </span><br><span class="line"></span><br><span class="line"><span class="symbol">magenta</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">cyan</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">white</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">gray</span> (<span class="string">"bright black"</span>)    </span><br><span class="line"></span><br><span class="line"><span class="symbol">redBright</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">greenBright</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">yellowBright</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">blueBright </span>   </span><br><span class="line"></span><br><span class="line"><span class="symbol">magentaBright</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">cyanBright</span>    </span><br><span class="line"></span><br><span class="line"><span class="symbol">whiteBright</span></span><br></pre></td></tr></table></figure><p>​       </p><p>背景色函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bgBlack    </span><br><span class="line"></span><br><span class="line">bgRed    </span><br><span class="line"></span><br><span class="line">bgGreen    </span><br><span class="line"></span><br><span class="line">bgYellow    </span><br><span class="line"></span><br><span class="line">bgBlue    </span><br><span class="line"></span><br><span class="line">bgMagenta    </span><br><span class="line"></span><br><span class="line">bgCyan    </span><br><span class="line"></span><br><span class="line">bgWhite    </span><br><span class="line"></span><br><span class="line">bgBlackBright    </span><br><span class="line"></span><br><span class="line">bgRedBright    </span><br><span class="line"></span><br><span class="line">bgGreenBright    </span><br><span class="line"></span><br><span class="line">bgYellowBright    </span><br><span class="line"></span><br><span class="line">bgBlueBright    </span><br><span class="line"></span><br><span class="line">bgMagentaBright    </span><br><span class="line"></span><br><span class="line">bgCyanBright    </span><br><span class="line"></span><br><span class="line">bgWhiteBright</span><br></pre></td></tr></table></figure><p>​      </p><p>源码</p><p><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a></p><h1 id="ora-5-1-0"><a href="#ora-5-1-0" class="headerlink" title="ora(5.1.0)"></a>ora(5.1.0)</h1><p>优雅的转圈圈,让你的等待不再煎熬～</p><p><img src="https://image.xiaomo.info//blog/ora.gif" alt="ora"></p><p><code>yarn add ora</code></p><p>使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'Loading unicorns'</span>).start();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    spinner.color = <span class="string">'yellow'</span>;</span><br><span class="line">    spinner.text = <span class="string">'Loading rainbows'</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">https://github.com/sindresorhus/ora</a></p><h1 id="figlet-1-5-0"><a href="#figlet-1-5-0" class="headerlink" title="figlet(1.5.0)"></a>figlet(1.5.0)</h1><p><code>yarn add figlet</code></p><p>使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">figlet(<span class="string">'Hello World!!'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Something went wrong...'</span>);</span><br><span class="line">        <span class="built_in">console</span>.dir(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://image.xiaomo.info//blog/image-20201204182909081.png" alt="image-20201204182909081"></p><h1 id="boxen-4-2-0"><a href="#boxen-4-2-0" class="headerlink" title="boxen(4.2.0)"></a>boxen(4.2.0)</h1><p>给你的代码画上界限,守护自己的地盘～</p><p><code>yarn add boxen</code></p><p>使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boxen = <span class="built_in">require</span>(<span class="string">'boxen'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boxen(<span class="string">'unicorn'</span>, &#123;<span class="attr">padding</span>: <span class="number">1</span>&#125;));</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://image.xiaomo.info//blog/image-20201204183307440.png" alt="image-20201204183307440"></p><p><a href="https://github.com/sindresorhus/boxen" target="_blank" rel="noopener">https://github.com/sindresorhus/boxen</a></p><h1 id="classnames（2-2-6）"><a href="#classnames（2-2-6）" class="headerlink" title="classnames（2.2.6）"></a>classnames（2.2.6）</h1><p>快速的组合class name</p><p>在前端开发中，我们经常需要JS来判断生成DOM节点CSS类，比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> className=<span class="string">'btn-primary'</span>;</span><br><span class="line"><span class="keyword">if</span>(active)&#123;</span><br><span class="line">  className+=<span class="string">' active'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们需要判断active变量来控制生成的按钮的CSS样式是否是激活状态，在实际开发中，可能会有更多的类似这样的样式控制逻辑，从而干扰阅读业务逻辑代码，使得代码变得很“脏”。<br>classnames<br>classnames 库对CSS样式类操作进行了封装，方便我们快速使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">'classnames'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classNames(</span>'<span class="attr">btn-primary</span>',&#123; <span class="attr">active</span> &#125;)&#125;&gt;</span>Save<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>更多调用方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">classNames(<span class="string">'foo'</span>, <span class="string">'bar'</span>); <span class="comment">// =&gt; 'foo bar' </span></span><br><span class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar' </span></span><br><span class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo-bar' </span></span><br><span class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">false</span> &#125;); <span class="comment">// =&gt; '' </span></span><br><span class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar' </span></span><br><span class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar'</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">https://github.com/JedWatson/classnames</a></p><h1 id="concurrently（5-3-0）"><a href="#concurrently（5-3-0）" class="headerlink" title="concurrently（5.3.0）"></a>concurrently（5.3.0）</h1><p>主要是方便我们写前端工程化的时候，我们可以同时启动多个命令用。<br>比如我的前端代码运行起来，既要有一个web工程，同时又要启动一个mock进程。这时候我们就可以使用这个并行解决方案。<br>文档地址：<a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener">https://www.npmjs.com/package/concurrently</a><br>github地址：<a href="https://github.com/kimmobrunfeldt/concurrently" target="_blank" rel="noopener">https://github.com/kimmobrunfeldt/concurrently</a></p><p>全局安装<br><code>npm install concurrently -g</code></p><p>项目安装<br><code>npm install concurrently -D</code></p><p>以上果是开发阶段写工具用的时候的安装方法。<br>如果比如node项目在生产环境使用则用以下安装方法：<br><code>npm install concurrently -s</code></p><p>三、使用方法<br>3.1 命令行使用方式<br>语法:<br><code>concurrently &quot;command1 arg&quot; &quot;command2 arg&quot;</code></p><p>比如我要启动两个node程序:</p><p>然后当我们ctrl + c后，他就会把两个进程都停止了。</p><p>方式1：<br>如果我们在package.json里面则要注意引号的问题:<br><code>&quot;start&quot;: &quot;concurrently \&quot;command1 arg\&quot; \&quot;command2 arg\&quot;&quot;</code><br>就是将”变成&quot;.<br>方式2：</p><p>然后我们要让这个进行并行有两个方式，在命令行执行:</p><p>或者:</p><p>这块-n之后的两个单词，只能用,间隔，不能加空格。<br>方式三：<br>如果我们的package.json里面有以下三个watch类型的</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">"watch-js"</span>: <span class="string">"..."</span>,</span><br><span class="line">        <span class="attr">"watch-css"</span>: <span class="string">"..."</span>,</span><br><span class="line">        <span class="attr">"watch-node"</span>: <span class="string">"..."</span>,</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那可以批量执行的方式:<br><code>concurrently &quot;npm:watch-*&quot;</code></p><p>我们可以书写一个node程序来调用concurrently。<br>我们写一个main.js的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> concurrently = <span class="built_in">require</span>(<span class="string">'concurrently'</span>);</span><br><span class="line"></span><br><span class="line">concurrently([<span class="string">'npm:index'</span>, <span class="string">"npm:hello"</span>]).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">&#125;, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fail"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后它的效果，就是<code>concurrently &quot;npm:index&quot; &quot;npm:hello&quot;</code></p><p>然后当我们按了ctrl + c之后，他会打出success.</p><p>上面的index和hello对应的代码是:<br>index:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">    ctx.body = (<span class="keyword">await</span> axios.get(<span class="string">"http://127.0.0.1:8001/hello"</span>)).data;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>)</span><br><span class="line">hello:</span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body = <span class="string">'hello world2'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8001</span>)</span><br></pre></td></tr></table></figure><p>3.2.2 构建失败场景<br>我们修改上面的hello的代码:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello:</span></span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">    ctx.body = <span class="string">'hello world2'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.exit(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>然后我们在运行”node ./main.js”<br>我们会看到报错，但是程序不会退出。</p><p>然后当我们再按ctrl + c后，效果如下：</p><p>所以得出一个结论：当我们有一个进程返回失败的话，总体会进入fail的callback中。</p><p>应用场景</p><p>开发工具<br>比如当我们跑npm run start的时候，我们同时需要让sass编译，同时webpack也要跑hot 模式，则这个使用可以使用concurrently运行这两个command。<br>这块我们可以查看grafana里面的前端代码中，关于工具这块代码查看一下就可以看到这块的使用。<br>grafana地址: <a href="https://github.com/grafana/grafana" target="_blank" rel="noopener">https://github.com/grafana/grafana</a></p><p>常见需求</p><p>当一个进程起来失败，整体concurrently失败?</p><p>我们可以通过killOthers这个参数来解决。<br>这样当我们有一个程序失败，则直接进入fail callback。也就把所有进程关闭了。<br>6.2 当一个进程起来失败，但是有可能是跟另外进程有关，这时候需要尝试几次？</p><p>这种情况，如上比如npm:index能启动的，npm:hello不能启动，虽然试了三次npm:hello，一直失败，但整体最终不会退出，只有我们按ctrl + c才有用，相当于killOthers就失效了。</p><h1 id="cors-2-8-5"><a href="#cors-2-8-5" class="headerlink" title="cors(2.8.5)"></a>cors(2.8.5)</h1><p>CORS是一个node.js软件包，用于提供可用于通过各种选项启用<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">CORS</a>的<a href="http://www.senchalabs.org/connect/" target="_blank" rel="noopener">Connect</a> / <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a>中间件。</p><p>安装</p><p><code>yarn add cors</code></p><p>开启所有的CORS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line">app.use(cors())</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for all origins!'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开启单路由的CORS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, cors(), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for a Single Route'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置CORS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> corsOptions = &#123;</span><br><span class="line">  origin: <span class="string">'http://example.com'</span>,</span><br><span class="line">  optionsSuccessStatus: <span class="number">200</span> <span class="comment">// some legacy browsers (IE11, various SmartTVs) choke on 204</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, cors(corsOptions), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for only example.com.'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置多个跨域白名单</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> whitelist = [<span class="string">'http://example1.com'</span>, <span class="string">'http://example2.com'</span>]</span><br><span class="line"><span class="keyword">var</span> corsOptions = &#123;</span><br><span class="line">  origin: <span class="function"><span class="keyword">function</span> (<span class="params">origin, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (whitelist.indexOf(origin) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not allowed by CORS'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, cors(corsOptions), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for a whitelisted domain.'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果您不想阻止REST工具或服务器到服务器的请求，<code>!origin</code>请在源函数中添加一个检查，如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> corsOptions = &#123;</span><br><span class="line">  origin: <span class="function"><span class="keyword">function</span> (<span class="params">origin, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (whitelist.indexOf(origin) !== <span class="number">-1</span> || !origin) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not allowed by CORS'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步CORS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> whitelist = [<span class="string">'http://example1.com'</span>, <span class="string">'http://example2.com'</span>]</span><br><span class="line"><span class="keyword">var</span> corsOptionsDelegate = <span class="function"><span class="keyword">function</span> (<span class="params">req, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> corsOptions;</span><br><span class="line">  <span class="keyword">if</span> (whitelist.indexOf(req.header(<span class="string">'Origin'</span>)) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    corsOptions = &#123; <span class="attr">origin</span>: <span class="literal">true</span> &#125; <span class="comment">// reflect (enable) the requested origin in the CORS response</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    corsOptions = &#123; <span class="attr">origin</span>: <span class="literal">false</span> &#125; <span class="comment">// disable CORS for this request</span></span><br><span class="line">  &#125;</span><br><span class="line">  callback(<span class="literal">null</span>, corsOptions) <span class="comment">// callback expects two parameters: error and options</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, cors(corsOptionsDelegate), <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for a whitelisted domain.'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/expressjs/cors#readme" target="_blank" rel="noopener">https://github.com/expressjs/cors#readme</a></p><h1 id="cross-env（7-0-3）"><a href="#cross-env（7-0-3）" class="headerlink" title="cross-env（7.0.3）"></a>cross-env（7.0.3）</h1><p><code>NODE_ENV=production</code>像这样设置环境变量时，大多数Windows命令提示符找不到命令，我们使用跨平台环境时能够抹平这个不同。</p><p>安装</p><p><code>yarn add corss-env</code></p><p>使用</p><p>直接在原来的脚本前加上<code>corss-env</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cssnao-4-1-10"><a href="#cssnao-4-1-10" class="headerlink" title="cssnao(4.1.10)"></a>cssnao(4.1.10)</h1><p>什么是缩减（minification）？<a href="https://www.cssnano.cn/docs/introduction#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%A9%E5%87%8F%EF%BC%88minification%EF%BC%89%EF%BC%9F" target="_blank" rel="noopener">#</a></p><p>缩减（minification）是指利用各种方法来 减少代码体积的过程。和 gzip 之类的保留 CSS 文件的原始语义（即无损失）的技术不同，缩减（minification） 天生是一个有损失的过程，例如，其中某些值可能会被替换为更简化的 等价语法，或者选择器被合并。</p><p>缩减（minification）步骤的最终结果是生成的代码将与 原始代码行为相同，但是某些部分被修改以 尽可能减少代码体积。</p><p>将 gzip 压缩和缩减（minification）相结合，可以最大限度的减少 文件体积，但是不要耳听为虚、眼见为实，为什么不去试试 <a href="https://npmjs.org/package/css-size" target="_blank" rel="noopener">css-size</a> ？ css-size 是一个专门对比缩减（minification）前后文件体积大小变化的模块。</p><p>cssnano 是什么？<a href="https://www.cssnano.cn/docs/introduction#cssnano-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" target="_blank" rel="noopener">#</a></p><p>cssnano 就是这样的一个缩减器，它使基于 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 开发的。cssnano 是一个 <a href="http://postcss.org/" target="_blank" rel="noopener">PostCSS</a> 插件，可以添加到你的构建流程中，用于确保最终生成的 用于生产环境的 CSS 样式表文件尽可能的小。</p><p>如果你不了解什么是构建流程，没关系，我们在 <a href="https://www.cssnano.cn/guides/getting-started" target="_blank" rel="noopener">入门指南</a> 中做了讲解。</p><p>这对我有什么好处？<a href="https://www.cssnano.cn/docs/introduction#%E8%BF%99%E5%AF%B9%E6%88%91%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F" target="_blank" rel="noopener">#</a></p><p>大量的代码优化<a href="https://www.cssnano.cn/docs/introduction#%E5%A4%A7%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">#</a></p><p>我们提供了众多不同的优化，从简单的 清除空白符到复杂的不同名称的同一 keyframes 的合并等。 更多信息请参考 <a href="https://www.cssnano.cn/guides/presets" target="_blank" rel="noopener">预设指南</a>。</p><p>统一的 CSS 处理<a href="https://www.cssnano.cn/docs/introduction#%E7%BB%9F%E4%B8%80%E7%9A%84-css-%E5%A4%84%E7%90%86" target="_blank" rel="noopener">#</a></p><p>cssnano 基于 <a href="http://postcss.org/" target="_blank" rel="noopener">PostCSS</a> 来处理 CSS 代码。因为很多 现代化的 CSS 工具都是基于 <a href="http://postcss.org/" target="_blank" rel="noopener">PostCSS</a> 开发的，因此你可以把这些工具组合起来 并生成一棵单一的抽象语法树（AST）。这就意味着总的处理时间 减少了，因为 CSS 不再需要进行多次解析了。</p><p>现代化的架构以及模块化<a href="https://www.cssnano.cn/docs/introduction#%E7%8E%B0%E4%BB%A3%E5%8C%96%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%8C%96" target="_blank" rel="noopener">#</a></p><p>因为 cssnano 是基于 <a href="http://postcss.org/" target="_blank" rel="noopener">PostCSS</a> 的，因此我们可以将 cssnano 的功能拆解为多个 插件，每个插件只需负责执行一项小的优化即可。并且许多优化可以限定 到某一组特定的 CSS 属性上，这就比利用正则表达式对 CSS 做全局处理更加安全。</p><h1 id="dotenv-8-2-0"><a href="#dotenv-8-2-0" class="headerlink" title="dotenv(8.2.0)"></a>dotenv(8.2.0)</h1><p>我们经常需要Node.js程序运行时加载不同的配置，比如开发环境和生产环境的数据数据库配置就可能不一样，使process.env.DB_HOST 环境变量，可以在Node.js程序内部方便获取参数信息。但是，程序启动时，怎样将环境变量传递给程序，这可能会是一个相对麻烦的事情，因为这关系到操作系统层的配置问题。</p><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with npm </span></span><br><span class="line">npm install dotenv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># or with Yarn </span></span><br><span class="line">yarn add dotenv</span><br></pre></td></tr></table></figure><p>配置文件</p><p>在项目根路径下新建<code>.env</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASS=s1mpl3</span><br></pre></td></tr></table></figure><p>然后，在Node.js程序启动时运行：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br></pre></td></tr></table></figure><p>接着，我们就可以在接下来的程序中方便地使用环境变量了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'db'</span>)</span><br><span class="line">db.connect(&#123;</span><br><span class="line">  host: process.env.DB_HOST,</span><br><span class="line">  username: process.env.DB_USER,</span><br><span class="line">  password: process.env.DB_PASS</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因此，我们可以创建不同的配置文件并提并git，然后在开发的时候copy一份<code>local.env</code>到根路径重命名为<code>.env</code>就可以做本地开发了，线上部署同理。</p><p><img src="https://image.xiaomo.info//blog/image-20201204190948866.png" alt="image-20201204190948866"></p><p><a href="https://github.com/motdotla/dotenv#readme" target="_blank" rel="noopener">https://github.com/motdotla/dotenv#readme</a></p><h1 id="ini-1-3-5"><a href="#ini-1-3-5" class="headerlink" title="ini(1.3.5)"></a>ini(1.3.5)</h1><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">; this comment is being ignored</span></span><br><span class="line"><span class="attr">scope</span> = global</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">user</span> = dbuser</span><br><span class="line"><span class="attr">password</span> = dbpassword</span><br><span class="line"><span class="attr">database</span> = use_this_database</span><br><span class="line"></span><br><span class="line"><span class="section">[paths.default]</span></span><br><span class="line"><span class="attr">datadir</span> = /var/lib/data</span><br><span class="line"><span class="attr">array[]</span> = first value</span><br><span class="line"><span class="attr">array[]</span> = second value</span><br><span class="line"><span class="attr">array[]</span> = third value</span><br></pre></td></tr></table></figure><p>读取ini文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ini = <span class="built_in">require</span>(<span class="string">'ini'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = ini.parse(fs.readFileSync(<span class="string">'config.ini'</span>, <span class="string">'utf-8'</span>));</span><br></pre></td></tr></table></figure><p>写入ini文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">  , ini = <span class="built_in">require</span>(<span class="string">'ini'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = ini.parse(fs.readFileSync(<span class="string">'./config.ini'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">config.scope = <span class="string">'local'</span></span><br><span class="line">config.database.database = <span class="string">'use_another_database'</span></span><br><span class="line">config.paths.default.tmpdir = <span class="string">'/tmp'</span></span><br><span class="line"><span class="keyword">delete</span> config.paths.default.datadir</span><br><span class="line">config.paths.default.array.push(<span class="string">'fourth value'</span>)</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(<span class="string">'./config_modified.ini'</span>, ini.stringify(config, &#123; <span class="attr">section</span>: <span class="string">'section'</span> &#125;))</span><br></pre></td></tr></table></figure><p><a href="https://github.com/npm/ini" target="_blank" rel="noopener">https://github.com/npm/ini</a></p><h1 id="ip-1-1-5"><a href="#ip-1-1-5" class="headerlink" title="ip(1.1.5)"></a>ip(1.1.5)</h1><p>ip库能够获取本机IP地址、比较、转换、掩码/子网计算等各种和网络IP相关的操作：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ip = <span class="built_in">require</span>(<span class="string">'ip'</span>);</span><br><span class="line"><span class="comment">// 获取本机网卡IP</span></span><br><span class="line">ip.address();</span><br><span class="line"><span class="comment">// 比较两个IP是否相同</span></span><br><span class="line">ip.isEqual(<span class="string">'::1'</span>, <span class="string">'::0:1'</span>); <span class="comment">// true </span></span><br><span class="line"><span class="comment">// IP 表示格式互转</span></span><br><span class="line">ip.toBuffer(<span class="string">'127.0.0.1'</span>) <span class="comment">// Buffer([127, 0, 0, 1]) </span></span><br><span class="line">ip.toString(<span class="keyword">new</span> Buffer([<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])) <span class="comment">// 127.0.0.1 </span></span><br><span class="line">ip.toLong(<span class="string">'127.0.0.1'</span>); <span class="comment">// 2130706433 </span></span><br><span class="line">ip.fromLong(<span class="number">2130706433</span>); <span class="comment">// '127.0.0.1' </span></span><br><span class="line"><span class="comment">// 判断是否是内网IP</span></span><br><span class="line">ip.isPrivate(<span class="string">'127.0.0.1'</span>) <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 判断IP版本</span></span><br><span class="line">ip.isV4Format(<span class="string">'127.0.0.1'</span>); <span class="comment">// true </span></span><br><span class="line">ip.isV6Format(<span class="string">'::ffff:127.0.0.1'</span>); <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 掩码计算</span></span><br><span class="line">ip.fromPrefixLen(<span class="number">24</span>) <span class="comment">// 255.255.255.0 </span></span><br><span class="line">ip.mask(<span class="string">'192.168.1.134'</span>, <span class="string">'255.255.255.0'</span>) <span class="comment">// 192.168.1.0 </span></span><br><span class="line">ip.cidr(<span class="string">'192.168.1.134/26'</span>) <span class="comment">// 192.168.1.128 </span></span><br><span class="line">ip.not(<span class="string">'255.255.255.0'</span>) <span class="comment">// 0.0.0.255 </span></span><br><span class="line">ip.or(<span class="string">'192.168.1.134'</span>, <span class="string">'0.0.0.255'</span>) <span class="comment">// 192.168.1.255 </span></span><br><span class="line"><span class="comment">// 子网计算</span></span><br><span class="line">ip.subnet(<span class="string">'192.168.1.134'</span>, <span class="string">'255.255.255.192'</span>);</span><br><span class="line"><span class="comment">// &#123; networkAddress: '192.168.1.128', </span></span><br><span class="line"><span class="comment">// firstAddress: '192.168.1.129', </span></span><br><span class="line"><span class="comment">// lastAddress: '192.168.1.190', </span></span><br><span class="line"><span class="comment">// broadcastAddress: '192.168.1.191', </span></span><br><span class="line"><span class="comment">// subnetMask: '255.255.255.192', </span></span><br><span class="line"><span class="comment">// subnetMaskLength: 26, </span></span><br><span class="line"><span class="comment">// numHosts: 62, </span></span><br><span class="line"><span class="comment">// length: 64, </span></span><br><span class="line"><span class="comment">// contains: function(addr)&#123;...&#125; &#125; </span></span><br><span class="line"><span class="comment">// 子网范围判断</span></span><br><span class="line">ip.cidrSubnet(<span class="string">'192.168.1.134/26'</span>).contains(<span class="string">'192.168.1.190'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>参考资料</p><p><a href="https://github.com/indutny/node-ip" target="_blank" rel="noopener">https://github.com/indutny/node-ip</a></p><h1 id="jschardet（2-2-1）"><a href="#jschardet（2-2-1）" class="headerlink" title="jschardet（2.2.1）"></a>jschardet（2.2.1）</h1><p>识别字符编码</p><p><code>yarn add jschardet</code></p><p>jschardet 可以识别出一个Buffer数据所使用的编码格式，具体支持的格式包括：</p><ul><li>  Big5, GB2312/GB18030,     EUC-TW, HZ-GB-2312, and ISO-2022-CN (Traditional and Simplified Chinese)</li><li>  EUC-JP, SHIFT_JIS, and     ISO-2022-JP (Japanese)</li><li>  EUC-KR and ISO-2022-KR     (Korean)</li><li>  KOI8-R, MacCyrillic,     IBM855, IBM866, ISO-8859-5, and windows-1251 (Russian)</li><li>  ISO-8859-2 and     windows-1250 (Hungarian)</li><li>  ISO-8859-5 and     windows-1251 (Bulgarian)</li><li>  windows-1252</li><li>  ISO-8859-7 and     windows-1253 (Greek)</li><li>  ISO-8859-8 and     windows-1255 (Visual and Logical Hebrew)</li><li>  TIS-620 (Thai)</li><li>  UTF-32 BE, LE,     3412-ordered, or 2143-ordered (with a BOM)</li><li>  UTF-16 BE or LE (with a     BOM)</li><li>  UTF-8 (with or without a     BOM)</li><li>  ASCII</li></ul><p>我们能方便地使用 jschardet 库：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jschardet = <span class="built_in">require</span>(<span class="string">"jschardet"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// "次常用國字標準字體表" in Big5</span></span><br><span class="line"> jschardet.detect(<span class="string">"\xa6\xb8\xb1\x60\xa5\xce\xb0\xea\xa6\x72\xbc\xd0\xb7\xc7\xa6\x72\xc5\xe9\xaa\xed"</span>);</span><br><span class="line"> <span class="comment">// &#123; encoding: "Big5", confidence: 0.99 &#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/aadsm/jschardet" target="_blank" rel="noopener">https://github.com/aadsm/jschardet</a></p><h1 id="iconv-lite-0-6-2"><a href="#iconv-lite-0-6-2" class="headerlink" title="iconv-lite(0.6.2)"></a>iconv-lite(0.6.2)</h1><p>将转换任意的字符编码到JavaScript内置的Unicode编码，以便于我们的程序和外部系统友好对接。</p><ul><li>  所有node.js本机编码：utf8，ucs2 / utf16-le，ASCII，二进制，base64，十六进制。</li><li>  其他Unicode编码：utf16，utf16-be，utf-7，utf-7-imap，utf32，utf32-le和utf32-be。</li><li>  所有广泛的单字节编码：Windows 125x家族，ISO-8859家族，IBM / DOS代码页，Macintosh家族，KOI8家族，以及iconv库支持的所有其他字符。还支持“ latin1”，“ us-ascii”之类的别名。</li><li>  所有广泛使用的多字节编码：CP932，CP936，CP949，CP950，GB2312，GBK，GB18030，Big5，Shift_JIS，EUC-JP。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Convert from an encoded buffer to a js string.</span></span><br><span class="line">str = iconv.decode(Buffer.from([<span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>]), <span class="string">'win1251'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Convert from a js string to an encoded buffer.</span></span><br><span class="line">buf = iconv.encode(<span class="string">"Sample input string"</span>, <span class="string">'win1251'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Check if encoding is supported</span></span><br><span class="line">iconv.encodingExists(<span class="string">"us-ascii"</span>)</span><br></pre></td></tr></table></figure><p>流API</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> converterStream = iconv.decodeStream(<span class="string">'win1251'</span>);</span><br><span class="line">    req.pipe(converterStream);</span><br><span class="line"> </span><br><span class="line">    converterStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(str); <span class="comment">// Do something with decoded strings, chunk-by-chunk.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Convert encoding streaming example</span></span><br><span class="line">fs.createReadStream(<span class="string">'file-in-win1251.txt'</span>)</span><br><span class="line">    .pipe(iconv.decodeStream(<span class="string">'win1251'</span>))</span><br><span class="line">    .pipe(iconv.encodeStream(<span class="string">'ucs2'</span>))</span><br><span class="line">    .pipe(fs.createWriteStream(<span class="string">'file-in-ucs2.txt'</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    req.pipe(iconv.decodeStream(<span class="string">'win1251'</span>)).collect(<span class="function"><span class="keyword">function</span>(<span class="params">err, body</span>) </span>&#123;</span><br><span class="line">        assert(<span class="keyword">typeof</span> body == <span class="string">'string'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(body); <span class="comment">// full request body string</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="js-cookie-2-2"><a href="#js-cookie-2-2" class="headerlink" title="js-cookie(2.2)"></a>js-cookie(2.2)</h1><p>一个简单，轻巧的JavaScript API，用于处理Cookie</p><p><code>yarn add js-cookie</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line">Cookies.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>) </span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;) <span class="comment">//Create a cookie that expires 7 days from now, valid across the entire site:</span></span><br><span class="line">Cookies.get(<span class="string">'name'</span>) <span class="comment">// =&gt; 'value'</span></span><br><span class="line">Cookies.get(<span class="string">'nothing'</span>) <span class="comment">// =&gt; undefined</span></span><br><span class="line">Cookies.get() <span class="comment">// =&gt; &#123; name: 'value' &#125;  //Cookies.get() // =&gt; &#123; name: 'value' &#125;</span></span><br><span class="line">Cookies.get(<span class="string">'foo'</span>, &#123; <span class="attr">domain</span>: <span class="string">'sub.example.com'</span> &#125;) <span class="comment">// `domain` won't have any effect...!</span></span><br><span class="line">Cookies.remove(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cookies.ts 使用示例，给的api己经很精简了，没有再封装的必要，如果想要隔离原则的话也可以封一下</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// App</span></span><br><span class="line"><span class="keyword">const</span> sidebarStatusKey = <span class="string">'sidebar_status'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSidebarStatus = <span class="function"><span class="params">()</span> =&gt;</span> Cookies.get(sidebarStatusKey)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setSidebarStatus = <span class="function">(<span class="params">sidebarStatus: <span class="built_in">string</span></span>) =&gt;</span> Cookies.set(sidebarStatusKey, sidebarStatus)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User</span></span><br><span class="line"><span class="keyword">const</span> tokenKey = <span class="string">'pinpinle_token'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> Cookies.get(tokenKey)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setToken = <span class="function">(<span class="params">token: <span class="built_in">string</span></span>) =&gt;</span> Cookies.set(tokenKey, token)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeToken = <span class="function"><span class="params">()</span> =&gt;</span> Cookies.remove(tokenKey)</span><br></pre></td></tr></table></figure><h1 id="js-yaml-3-14-1"><a href="#js-yaml-3-14-1" class="headerlink" title="js-yaml(3.14.1)"></a>js-yaml(3.14.1)</h1><p>js-yaml 是一个专门用来读写YAML格式数据的库，他可以将JS对象转换成YAML字符串，也可以将YAML字符串转换为JS对象。</p><p>example.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">receipt:</span>     <span class="string">Oz-Ware</span> <span class="string">Purchase</span> <span class="string">Invoice</span></span><br><span class="line"><span class="attr">date:</span>        <span class="number">2012</span><span class="number">-08</span><span class="number">-06</span></span><br><span class="line"><span class="attr">customer:</span>  <span class="comment">#对象</span></span><br><span class="line">    <span class="attr">given:</span>   <span class="string">Dorothy</span></span><br><span class="line">    <span class="attr">family:</span>  <span class="string">Gale</span></span><br><span class="line"></span><br><span class="line"><span class="attr">items:</span>  <span class="comment"># 对象数组</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">part_no:</span>   <span class="string">A4786</span></span><br><span class="line">      <span class="attr">descrip:</span>   <span class="string">Water</span> <span class="string">Bucket</span> <span class="string">(Filled)</span></span><br><span class="line">      <span class="attr">price:</span>     <span class="number">1.47</span></span><br><span class="line">      <span class="attr">quantity:</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">part_no:</span>   <span class="string">E1628</span></span><br><span class="line">      <span class="attr">descrip:</span>   <span class="string">High</span> <span class="string">Heeled</span> <span class="string">"Ruby"</span> <span class="string">Slippers</span></span><br><span class="line">      <span class="attr">size:</span>      <span class="number">8</span></span><br><span class="line">      <span class="attr">price:</span>     <span class="number">133.7</span></span><br><span class="line">      <span class="attr">quantity:</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bill-to:</span>  <span class="string">&amp;id001</span> <span class="comment"># 锚点标记 id001</span></span><br><span class="line">    <span class="attr">street:</span> <span class="string">|</span>  <span class="comment"># 多行字符串</span></span><br><span class="line">            <span class="number">123</span> <span class="string">Tornado</span> <span class="string">Alley</span></span><br><span class="line">            <span class="string">Suite</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">city:</span>   <span class="string">East</span> <span class="string">Centerville</span></span><br><span class="line">    <span class="attr">state:</span>  <span class="string">KS</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ship-to:</span>  <span class="string">*id001</span> <span class="comment"># 引用锚点标记id001的数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">specialDelivery:</span>  <span class="string">&gt;</span> <span class="comment"># 多行字符串</span></span><br><span class="line">    <span class="string">Follow</span> <span class="string">the</span> <span class="string">Yellow</span> <span class="string">Brick</span></span><br><span class="line">    <span class="string">Road</span> <span class="string">to</span> <span class="string">the</span> <span class="string">Emerald</span> <span class="string">City.</span></span><br><span class="line">    <span class="string">Pay</span> <span class="literal">no</span> <span class="string">attention</span> <span class="string">to</span> <span class="string">the</span></span><br><span class="line">    <span class="string">man</span> <span class="string">behind</span> <span class="string">the</span> <span class="string">curtain.</span></span><br></pre></td></tr></table></figure><p>读取yaml</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">'js-yaml'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = yaml.safeLoad(fs.readFileSync(<span class="string">'example.yml'</span>, <span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = yaml.safeDump(obj);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener">https://github.com/nodeca/js-yaml</a></p><h1 id="log4jsdd-1-0-2"><a href="#log4jsdd-1-0-2" class="headerlink" title="log4jsdd(1.0.2)"></a>log4jsdd(1.0.2)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> log4js = <span class="built_in">require</span>(<span class="string">'log4js'</span>);</span><br><span class="line">log4js.configure(&#123;</span><br><span class="line">    appenders: &#123;</span><br><span class="line">        out: &#123; <span class="attr">type</span>: <span class="string">'stdout'</span>&#125;,</span><br><span class="line">        dingding: &#123;</span><br><span class="line">            type: <span class="string">'log4jsdd'</span>,</span><br><span class="line">            hookUrl: <span class="string">'填写获取钉钉里面设置的 webhook 地址'</span>,</span><br><span class="line">            title: <span class="string">'Node 消息'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    categories: &#123; <span class="attr">default</span>: &#123; <span class="attr">appenders</span>: [<span class="string">'out'</span>, <span class="string">'dingding'</span>], <span class="attr">level</span>: <span class="string">'debug'</span> &#125;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = log4js.getLogger();</span><br><span class="line">app.info(<span class="string">'测试发送到钉钉'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/1.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/2.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/2-20201208145544618.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/3.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/4.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/5.jpg" alt="图片"></p><p><img src="https://image.xiaomo.info//blog/6.jpg" alt="图片"></p><h1 id="material-ui-4-11-1"><a href="#material-ui-4-11-1" class="headerlink" title="material-ui(4.11.1)"></a>material-ui(4.11.1)</h1><p> 安装material-ui<br> <code>npm install @material-ui/core</code></p><p>安装material icons<br><code>npm install @material-ui/icons</code></p><p>Material-UI组件是相互独立的，自支持的，工作时仅注入当前组件所需要的样式。这些Material-UI组件并依赖于任何全局的样式表，尽管Material-UI提供了可选的CssBaseline组件。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'@material-ui/core/Button'</span>;  <span class="comment">// 导入Button组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Button variant=<span class="string">'contained'</span> color=<span class="string">'primary'</span>&gt;按钮&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>));</span><br></pre></td></tr></table></figure><p><a href="https://material-ui.com/getting-started/supported-components/" target="_blank" rel="noopener">对组件的支持</a></p><p>Materail-UI在努力遵循实际的指导规范时，却并不期望支持每一个组件或者组件的每一个特征。Materail-UI更希望能提供一套能帮助开发者创建引人注目的用户界面所需要的构建模块和经验。</p><p><a href="https://material-ui.com/getting-started/supported-platforms/" target="_blank" rel="noopener">Material-UI 支持哪些平台？</a></p><p>Material-UI支持所有主流的稳定的浏览器，支持IE11以上。Material-UI还支持node.js v6.x以上的服务端渲染。</p><p><a href="https://material-ui.com/getting-started/example-projects/" target="_blank" rel="noopener">在哪里可以获取到demo资源？</a></p><p>参见 <a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">Material-UI 的GitHub仓库</a></p><p><a href="https://material-ui.com/getting-started/faq/" target="_blank" rel="noopener">Material-UI常见的问题列表</a></p><ol><li> 类名冲突时怎么处理？</li><li> 当打开Modal时，为什么fixed定位的元素会移动？</li><li> 如何禁用掉app中的波浪效果？</li><li> 必须使用JSS来控制样式？</li><li> 什么时候使用行内样式？什么时候使用类名？</li><li> 在Material项目中如何使用React-Router？</li><li> 如何合并withStyles() 和     withTheme() ？</li><li> 如何获取DOM元素？</li><li> 为什么项目中的色彩和官方效果有差异？</li><li> Material-UI令人疯狂，我该如何支持这个项目？</li></ol><p><a href="https://material-ui.com/getting-started/comparison/" target="_blank" rel="noopener">与其它UI库进行优势劣势对比</a></p><ol><li> Material-UI</li><li> Material Design Lite     (MDL)</li><li> Material Components Web</li><li> Materialize</li><li>React Toolbox</li></ol><p><strong>二、</strong>样式</p><p><a href="https://material-ui.com/style/css-baseline/" target="_blank" rel="noopener">什么是 CssBaseline ？</a></p><p>Material-UI提供了一个CssBaseline组件以建立统一的简单的样式基准。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CssBaseline <span class="keyword">from</span> <span class="string">'@material-ui/core/CssBaseline'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;CssBaseline&gt;</span><br><span class="line">      &#123;<span class="comment">/* 页面元素 */</span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/CssBaseline&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>有关Material-UI默认样式的详细说明：</p><ol><li> 元素的margin为零。</li><li> 在标准设备上，使用默认的背景色。在打印时，使用白色作为背景色。</li><li> 所有元素的box-sizing都被默认设置为”border-box”。所有元素都包含     ::before 和 ::after 样式，以保证元素的width 和 height     包含padding 和 border。</li><li> 使用Roboto字体，以避免了打印时的字体堆叠。</li><li> 打印时，不会为<html>标签声明基准字号，但会使用浏览器支持的默认字号16px。</html></li></ol><p><a href="https://material-ui.com/style/color/" target="_blank" rel="noopener">认识Material-UI中的色彩系统</a></p><p>在Material-UI中，色彩系统是非常强大的。它支持粗色调、深阴影和鲜亮的强调色彩。</p><p>色彩系统中的重要组成：</p><ol><li> Palette，主色调。</li><li> Hue / Shade 色调、色度。</li></ol><p><a href="https://material-ui.com/style/icons/" target="_blank" rel="noopener">Icon系统</a></p><p>Material-UI提供了两个组件用于icon系统。Icon组件用于渲染icons，SvgIcon用于渲染SVG路径。推荐使用<strong>SVG Material icons</strong>。</p><p>// 安装@material-ui/icons<br><code>npm install -S @material-ui/icons</code></p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> DeleteIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Delete'</span>;</span><br></pre></td></tr></table></figure><p> <strong>三、布局</strong></p><p><a href="https://material-ui.com/layout/basics/" target="_blank" rel="noopener">Material-UI的布局设计基础</a></p><p>Material-UI布局，使用统一的组件和间距，实现了多平台、多环境和屏幕尺寸的统一性。</p><p>1、使用 <strong>Grid / Hidden / Breakpoints</strong> 这三类组件，实现响应式UI，适配各种尺寸的屏幕。</p><p>2、组件使用 z-index属性，实现 Z 轴上的空间层次排布。</p><p><a href="https://material-ui.com/layout/grid/" target="_blank" rel="noopener">Grid 组件</a></p><p>Material-UI的响应式UI，是基于12列的栅格布局。Material-UI的栅格系统是由 Grid 组件实现的，它使用了 CSS 弹性盒模型，它有两种类型的布局，分别是 containers 和 items。item的宽度被设置为百分比，因此它们总是基于父元素而流动、动态地变换大小。items使用内边距padding生成元素之间的间距空间。Material-UI栅格系统支持五种断点模式，分别是 xs / sm / md / lg / xl 。</p><p><a href="https://material-ui.com/layout/hidden/" target="_blank" rel="noopener">Hidden 组件</a></p><p>Hidden组件用于隐藏任何内容，它可以结合Grid / Breakpoints组件一起使用。它的实现原理是，基于breakpoints进行显示与隐藏。</p><p><a href="https://material-ui.com/layout/breakpoints/" target="_blank" rel="noopener">Breakpoints 组件</a></p><p>一个 breakpoint 就是一组预定义的屏幕尺寸范围，它决定了特定了布局需求。为了最适宜的用户体验，material design要实现多屏幕适配。Material-UI对material design规范进行了简化实现。每一个breakpoint都会匹配一定范围的屏幕尺寸。</p><ol><li> xs,     特别小的屏幕，0px or larger</li><li> sm, 小屏幕，600px or larger</li><li> md, 中等屏幕，960px or larger</li><li> lg, 大屏幕， 1280px or larger</li><li> xl, 超大屏幕， 1920px or     larger</li></ol><p>以上这些取值，在Material-UI中，还支持自定义。Material-UI支持媒体查询，根据屏幕尺寸变化动态地变化元素样式。有时候，仅使用 CSS 是不够的，你或许还需要在屏幕尺寸发生变化时改变DOM内容。这个时候，可以使用 Material-UI 提供的 withWidth() 来实现。</p><p><strong>四、工具</strong></p><p><a href="https://material-ui.com/utils/modals/" target="_blank" rel="noopener">Modal 组件</a></p><p>用于创建对话框、lightbox 和 popover。</p><p><a href="https://material-ui.com/utils/popovers/" target="_blank" rel="noopener">Popover 组件</a></p><p>用于给元素提供额外的展示/提示信息，类似于html元素的title属性。</p><p><a href="https://material-ui.com/utils/portal/" target="_blank" rel="noopener">Portal 组件</a></p><p>The portal component renders its children into a new “subtree” outside of current component hierarchy.</p><p><a href="https://material-ui.com/utils/transitions/" target="_blank" rel="noopener">Transitions 过渡效果</a></p><p>Transition提供了一系列的动画效果。如折叠效果、渐显渐现、Grow效果、Slide效果、Zoom效果等。</p><p><a href="https://material-ui.com/utils/click-away-listener/" target="_blank" rel="noopener">Click away listener</a></p><p>监听DOM页面上的所有事件，元素之内、元素之外。比如，在元素之外点击页面时，应该让弹框消失等。</p><p><strong>五、Component Demos / Api</strong></p><p>如何使用Material-UI组件？</p><p>代码演示如下：</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">'@material-ui/core/styles'</span>;</span><br><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> AppBar <span class="keyword">from</span> <span class="string">'@material-ui/core/AppBar'</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123; <span class="comment">/* 使用组件 */</span>&#125;</span><br><span class="line">            &lt;AppBar position=<span class="string">'static'</span> color=<span class="string">'default'</span>&gt;title&lt;<span class="regexp">/AppBar&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p>在使用 Material-UI 组件时，常需要参考<a href="https://material-ui.com/api/app-bar/" target="_blank" rel="noopener">组件的api文档</a>，可查看相关属性的使用。</p><p><strong>六、定制化</strong></p><p><a href="https://material-ui.com/customization/overrides/" target="_blank" rel="noopener">概览</a></p><p>由于组件会被用于各种不同的环境中，Material-UI支持不同类型的定制化需求，从最特殊的到最普通的场景。</p><ol><li>定制一次性样式<pre><code>       在一些特别的场景下，你或许需要改变一个组件的样式。定制方案有：覆盖组件的类名，重写组件样式，使用内联样式等。</code></pre></li><li>定制动态样式<pre><code>       在一些场景下，你需要使用动态的样式。可选的方案有：使用withStyles，类名切换，CSS变量，行内样式，主题嵌套等。</code></pre></li><li> 为某个组件定制样式</li><li> Material Design 样式</li><li>全局的主题样式</li></ol><p><a href="https://material-ui.com/customization/themes/" target="_blank" rel="noopener">主题</a></p><p>主题特指组件的主体颜色、组件表面的墨色、阴影的级别和元素适合的透明度等。主题使得你的应用具有统一的色调。它允许你定制所有的设计方面，以满足你的商业或品牌需求。为了促进应用更高的统一性，Material-UI提供了 light 和 dark 两种主题类型。默认情况下，组件使用 light 主题类型。</p><p>什么时候使用 MuiThemeProvider 组件？</p><p>如果你想定制主题样式，你需要使用 MuiThemeProvider 组件来包裹那些需要定制样式的组件，用以把主题注入到你的应用中。然而这是可选的，当不使用 MuiThemeProvider 组件时，Material-UI 会使用默认主题。</p><p>如何使用主题配置变量？</p><p>改变主题配置变量，是匹配Material-UI定制样式最高效的方式。如下几个配置变量是非常重要的：</p><ol><li> Palette</li><li> Type ( light / dark )</li><li> Typography</li><li> Other varialbles</li><li> Custom variables</li></ol><p><a href="https://material-ui.com/customization/default-theme/" target="_blank" rel="noopener">查看 Material-UI 的默认主题样式</a></p><p><a href="https://material-ui.com/customization/css-in-js/" target="_blank" rel="noopener">CSS in JS</a></p><p><a href="https://material-ui.com/zh/getting-started/installation/" target="_blank" rel="noopener">https://material-ui.com/zh/getting-started/installation/</a></p><h1 id="nodemon（2-0-6）"><a href="#nodemon（2-0-6）" class="headerlink" title="nodemon（2.0.6）"></a>nodemon（2.0.6）</h1><p>nodemon用来监视node.js应用程序中的任何更改并自动重启服务,非常适合用在开发环境中。nodemon将监视启动目录中的文件，如果有任何文件更改，nodemon将自动重新启动node应用程序。</p><p>nodemon不需要对代码或开发方式进行任何更改。 nodemon只是简单的包装你的node应用程序，并监控任何已经改变的文件。nodemon只是node的替换包，只是在运行脚本时将其替换命令行上的node。</p><p>在项目目录下创建 nodemon.json 文件</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"restartable"</span>: <span class="string">"rs"</span>,</span><br><span class="line">    <span class="attr">"ignore"</span>: [</span><br><span class="line">        <span class="string">".git"</span>,</span><br><span class="line">        <span class="string">".svn"</span>,</span><br><span class="line">        <span class="string">"node_modules/**/node_modules"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"verbose"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"execMap"</span>: &#123;</span><br><span class="line">        <span class="attr">"js"</span>: <span class="string">"node --harmony"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"watch"</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"NODE_ENV"</span>: <span class="string">"development"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ext"</span>: <span class="string">"js json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">restartable-设置重启模式 </span><br><span class="line">ignore-设置忽略文件 </span><br><span class="line"><span class="built_in">verbose</span>-设置日志输出模式，<span class="literal">true</span> 详细模式 </span><br><span class="line">execMap-设置运行服务的后缀名与对应的命令</span><br></pre></td></tr></table></figure><p>修改app.js文件<br> 记得注释最后一行的：module.exports = app;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'my-application'</span>); <span class="comment">// debug模块</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>); <span class="comment">// 设定监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动监听</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  debug(<span class="string">'Express server listening on port '</span> + server.address().port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//module.exports = app;//这是 4.x 默认的配置，分离了 app 模块,将它注释即可，上线时可以重新改回来</span></span><br></pre></td></tr></table></figure><p>在package.json中添加脚本</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"start": "nodemon app.js"</span><br></pre></td></tr></table></figure><h1 id="pkg-dir-5-0-0"><a href="#pkg-dir-5-0-0" class="headerlink" title="pkg-dir(5.0.0)"></a>pkg-dir(5.0.0)</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">└── Users</span><br><span class="line">    └── xiaomo</span><br><span class="line">        └── foo</span><br><span class="line">            ├── package.json</span><br><span class="line">            └── bar</span><br><span class="line">                ├── baz</span><br><span class="line">                └── example.js</span><br></pre></td></tr></table></figure><p><code>npm install pkg-dir</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">const</span> pkgDir = <span class="built_in">require</span>(<span class="string">'pkg-dir'</span>);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> rootDir = <span class="keyword">await</span> pkgDir(__dirname);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(rootDir);</span><br><span class="line">    <span class="comment">//=&gt; '/Users/xiaomo/foo'</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>返回Promise项目根路径或undefined找不到的根路径。</p><p>返回项目的根路径，或者undefined找不到它。</p><p>类型：string<br> 默认值：process.cwd()</p><p>起始目录。</p><ul><li>  <a href="https://github.com/sindresorhus/pkg-dir-cli" target="_blank" rel="noopener">pkg-dir-cli-</a>此模块的CLI</li><li>  <a href="https://github.com/sindresorhus/pkg-up" target="_blank" rel="noopener">pkg-</a> up-查找最近的package.json文件</li><li>  <a href="https://github.com/sindresorhus/find-up" target="_blank" rel="noopener">查找</a>-通过上级父目录查找文件</li></ul><h1 id="qs-6-9-4"><a href="#qs-6-9-4" class="headerlink" title="qs(6.9.4)"></a>qs(6.9.4)</h1><p>Node.js 标准库中有一个库叫querystring，这个库用来处理URL查询字符串：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"> </span><br><span class="line"> querystring.parse(<span class="string">'foo=bar&amp;baz=1'</span>);</span><br><span class="line"> <span class="comment">// &#123; foo:'bar', baz: '1' &#125;</span></span><br></pre></td></tr></table></figure><p>但是很遗憾，querystring 不支持内嵌对象和数组：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"> </span><br><span class="line"> querystring.parse(<span class="string">'foo[bar]=1&amp;baz[]=2'</span>);</span><br><span class="line"> <span class="comment">// &#123; 'foo[bar]': '1', 'baz[]': '2' &#125;</span></span><br></pre></td></tr></table></figure><p>如果我们程序的前端界面form表单中存在数组，标准库的querystring就无法满足我们的需求了。</p><p>qs 是querystring的增强版本，最重要的特性就是支持内嵌对象和数组：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = qs.parse(<span class="string">'a=c'</span>);</span><br><span class="line">assert.deepEqual(obj, &#123; <span class="attr">a</span>: <span class="string">'c'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = qs.stringify(obj);</span><br><span class="line">assert.equal(str, <span class="string">'a=c'</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ljharb/qs" target="_blank" rel="noopener">https://github.com/ljharb/qs</a></p><h1 id="redux-toolkit-1-5-0"><a href="#redux-toolkit-1-5-0" class="headerlink" title="redux-toolkit(1.5.0)"></a><strong>redux-toolkit</strong>(1.5.0)</h1><p>如果你的React项目中使用react hook、redux、redux-thunk，可能你需要用 redux-toolkit （以下简称RTK）优化你的项目结构，它看起来可以这么清爽</p><p>Redux 使用常见问题</p><ul><li>  配置复杂，devtool…</li><li>  模板代码太多，创建constant，action，reducer…</li><li>  需要添加很多依赖包，如redux-thunk、immer…</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 优化前</span><br><span class="line"> /counter</span><br><span class="line">    constants.ts</span><br><span class="line">    actions.ts</span><br><span class="line">    reducer.ts</span><br><span class="line">    saga.ts</span><br><span class="line">    index.tsxÏ</span><br><span class="line"># 优化后</span><br><span class="line">/counter</span><br><span class="line">    slice.ts</span><br><span class="line">    index.tsx</span><br></pre></td></tr></table></figure><p><strong>RTK干了哪些事？</strong></p><ul><li>  configureStore() 包裹createStore，并集成了redux-thunk、Redux     DevTools Extension，默认开启</li><li>  createReducer() 创建一个reducer，action     type 映射到 case reducer 函数中，不用写switch-case，并集成immer</li><li>  createAction() 创建一个action，传入动作类型字符串，返回动作函数</li><li>  createSlice() 创建一个slice，包含     createReducer、createAction的所有功能</li><li>  createAsyncThunk() 创建一个thunk，接受一个动作类型字符串和一个Promise的函数</li></ul><p>新的项目</p><p>create-react-app 初始化项目，最受欢迎的脚手架之一</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 redux-typescript 模板，推荐使用typescript</span></span><br><span class="line">npx create-react-app react-rtk-ts --template redux-typescript</span><br><span class="line"><span class="comment"># 使用redux 模板</span></span><br><span class="line"><span class="comment"># npx create-react-app react-rtk-ts --template redux</span></span><br></pre></td></tr></table></figure><p>老的项目</p><ol><li> 安装 @reduxjs/toolkit</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 npm</span></span><br><span class="line">npm install @reduxjs/toolkit</span><br><span class="line"><span class="comment"># 使用 yarn</span></span><br><span class="line">yarn add @reduxjs/toolkit</span><br></pre></td></tr></table></figure><ol start="2"><li> configureStore 替换 createStore</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line">- <span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line">+ <span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">"@reduxjs/toolkit"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./components/App"</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line">- <span class="keyword">const</span> store = createStore(rootReducer);</span><br><span class="line">+ <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">+   reducer: rootReducer,</span><br><span class="line">+&#125;);</span><br></pre></td></tr></table></figure><p>创建action</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 创建 action</span><br><span class="line"><span class="keyword">const</span> increment = createAction(<span class="string">'INCREMENT'</span>)</span><br><span class="line"><span class="keyword">const</span> decrement = createAction(<span class="string">'DECREMENT'</span>)</span><br><span class="line"># 创建reducer</span><br><span class="line"><span class="keyword">const</span> counter = createReducer(<span class="number">0</span>, &#123;</span><br><span class="line">  [increment]: <span class="function"><span class="params">state</span> =&gt;</span> state + <span class="number">1</span>,</span><br><span class="line">  [decrement]: <span class="function"><span class="params">state</span> =&gt;</span> state - <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上看起比原来结构上好一些，创建action、reducer方便了，但是看着还是不爽，action也可以去掉</p><p>创建Slice</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counterSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">'counter'</span>,</span><br><span class="line">  initialState: <span class="number">0</span>,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: <span class="function"><span class="params">state</span> =&gt;</span> state + <span class="number">1</span>,</span><br><span class="line">    decrement: <span class="function"><span class="params">state</span> =&gt;</span> state - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"># action</span><br><span class="line">counterSlice.action;</span><br><span class="line"># reducer</span><br><span class="line">counterSlice.reducer;</span><br></pre></td></tr></table></figure><p>counterSlice 看起起来像</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">"counter"</span>,</span><br><span class="line">  reducer: <span class="function">(<span class="params">state, action</span>) =&gt;</span> newState,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">payload</span>) =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">"counter/increment"</span>, payload&#125;),</span><br><span class="line">    increment: <span class="function">(<span class="params">payload</span>) =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">"counter/increment"</span>, payload&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  caseReducers: &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">state, action</span>) =&gt;</span> newState,</span><br><span class="line">    increment: <span class="function">(<span class="params">state, action</span>) =&gt;</span> newState,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要createSlice，包含着 action，reducer的创建</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 对于一部请求API，可以配合async/await使用</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = (amount: number): <span class="function"><span class="params">AppThunk</span> =&gt;</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(incrementByAmount(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建 selecter</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 配合 react-redux 中 useSelector hook使用</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectCount = <span class="function">(<span class="params">state: RootState</span>) =&gt;</span> state.counter.value;</span><br></pre></td></tr></table></figure><p><strong>完整 slice文件</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, PayloadAction &#125; <span class="keyword">from</span> <span class="string">'@reduxjs/toolkit'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppThunk, RootState &#125; <span class="keyword">from</span> <span class="string">'../../app/store'</span>;</span><br><span class="line">interface CounterState &#123;</span><br><span class="line">  value: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> initialState: CounterState = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">'counter'</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      state.value += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      state.value -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementByAmount: <span class="function">(<span class="params">state, action: PayloadAction&lt;number&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value += action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = (amount: number): <span class="function"><span class="params">AppThunk</span> =&gt;</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(incrementByAmount(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectCount = <span class="function">(<span class="params">state: RootState</span>) =&gt;</span> state.counter.value;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.reducer;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js/ts常用公有方法收集整理(长期向)</title>
      <link href="2020/jsCommonUtilsMethods/"/>
      <url>2020/jsCommonUtilsMethods/</url>
      
        <content type="html"><![CDATA[<p>不管是什么语言，不管是前端还是后端，我们都有一个很重要的模块，那就是utils包。在java界有apache-commons这种出身明门的，也有像hutool这种民间的库。前端界目前还没有发现一个比应用比较频繁的库，那就出一个长期项的自己整理整一下吧。</p><a id="more"></a><p>注： 本篇文章开始于2020年12月8日，每次修改或新增时都会将时间更新时最新的时间。</p><h1 id="动态创建meta的方法"><a href="#动态创建meta的方法" class="headerlink" title="动态创建meta的方法"></a>动态创建meta的方法</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// meta-utils.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createMeta=(name:<span class="built_in">string</span>,content:<span class="built_in">string</span>):<span class="function"><span class="params">void</span>=&gt;</span>&#123;</span><br><span class="line">    consthead=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>);</span><br><span class="line">    constmeta=<span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</span><br><span class="line">    meta.name=name;</span><br><span class="line">    meta.content=content;</span><br><span class="line">    head[<span class="number">0</span>].appendChild(meta);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMeta &#125; <span class="keyword">from</span> <span class="string">'./metaUtil'</span> </span><br><span class="line"></span><br><span class="line">createMeta(<span class="string">'xxx'</span>, <span class="string">'xxxx'</span>)</span><br></pre></td></tr></table></figure><h1 id="对函数只执行一次"><a href="#对函数只执行一次" class="headerlink" title="对函数只执行一次"></a>对函数只执行一次</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/ban-types</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> once = &lt;T <span class="keyword">extends</span> <span class="built_in">Function</span>, U&gt;<span class="function">(<span class="params">fn: (<span class="params">...args: T[]</span>) =&gt; U</span>): <span class="params">typeof</span> <span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result: ReturnType&lt;<span class="keyword">typeof</span> fn&gt;;</span><br><span class="line">    <span class="keyword">let</span> func: <span class="keyword">typeof</span> fn | <span class="literal">undefined</span> = fn;</span><br><span class="line">    <span class="keyword">return</span> (...args: Parameters&lt;<span class="keyword">typeof</span> fn&gt;): ReturnType&lt;<span class="keyword">typeof</span> fn&gt; =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (func) &#123;</span><br><span class="line">        result = func(...args);</span><br><span class="line">        func = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'redaxios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthConfig &#125; <span class="keyword">from</span> <span class="string">'@/client/auth/index'</span>;</span><br><span class="line"><span class="comment">// eslint-disable-next-line no-restricted-imports</span></span><br><span class="line"><span class="keyword">import</span> &#123; once &#125; <span class="keyword">from</span> <span class="string">'../utils/functionUtils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchAuthConfig = once(</span><br><span class="line"><span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;AuthConfig&gt; =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">                url: <span class="string">'/oauth/v1/config'</span>,</span><br><span class="line">                method: <span class="string">'get'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config: AuthConfig = response.data <span class="keyword">as</span> AuthConfig;</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ParmaterUtil.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParameterUtil &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据名字获取url参数的值(不能获取带#的url参数)</span></span><br><span class="line"><span class="comment">*比如 ： https://admin.local.g123.jp/#/operationLog/index</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> getUrlParameter(parameter:<span class="built_in">string</span>): <span class="built_in">string</span>|<span class="literal">null</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href).searchParams.get(parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：不支持 <code>vue-router</code>具有锚点的URL，例如 <code>https://test.xiaomo.info/#?name=xiaomo&amp;age=15</code>。</p><p>只支持直接在url上拼参数的方式<code>https://test.xiaomo.info?name=xiaomo&amp;age=15</code></p><h1 id="动态创建script"><a href="#动态创建script" class="headerlink" title="动态创建script"></a>动态创建script</h1><p>需要安装 loadjs</p><p><code>yarn add loadjs</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> loadjs, &#123; LoadOptions &#125; <span class="keyword">from</span> <span class="string">'loadjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CacheableOptions <span class="keyword">extends</span> LoadOptions &#123;</span><br><span class="line">  cacheable?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadScript = ((): ((</span><br><span class="line">  src: <span class="built_in">string</span>,</span><br><span class="line">  options?: CacheableOptions</span><br><span class="line">) =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache: Record&lt;<span class="built_in">string</span>, <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;&gt; = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (src: <span class="built_in">string</span>, options?: CacheableOptions): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> opt: CacheableOptions = &#123;</span><br><span class="line">      cacheable: <span class="literal">true</span>,</span><br><span class="line">      numRetries: <span class="number">3</span>,</span><br><span class="line">      ...(options || &#123;&#125;),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.cacheable &amp;&amp; cache[src]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[src];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> promise = loadjs([src], &#123;</span><br><span class="line">      ...opt,</span><br><span class="line">      returnPromise: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (opt.cacheable) &#123;</span><br><span class="line">      cache[src] = promise;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="邮箱格式检测"><a href="#邮箱格式检测" class="headerlink" title="邮箱格式检测"></a>邮箱格式检测</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const checkEmail = (v: string): boolean =&gt;</span><br><span class="line">  /[a-z0-9!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\.[a-z0-9!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(</span><br><span class="line">    v</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud集成spring security</title>
      <link href="2020/springBootWithSpringSecurity/"/>
      <url>2020/springBootWithSpringSecurity/</url>
      
        <content type="html"><![CDATA[<p>在spring boot/spring cloud成为java生态中绝对主流的开发框架时，spring家族其他的框架也开始变得越来越流行。对于认证授权的方案也有更多的小伙伴选择从shrio过渡到spring security。但是spring security的难度确实要比shiro高出不少，需要花费较多精力学习。</p><a id="more"></a><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p><img src="https://image.xiaomo.info//blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY3MzIy,size_16,color_FFFFFF,t_70.png" alt="img"></p><p><strong>Spring Security</strong> 内置了一些过滤器，他们各有各的本事。如果你掌握了这些过滤器，很多实际开发中的需求和问题都很容易解决。今天我们来见识一下这些内置的过滤器。</p><h2 id="2-内置过滤器初始化"><a href="#2-内置过滤器初始化" class="headerlink" title="2. 内置过滤器初始化"></a>2. 内置过滤器初始化</h2><p>在 <strong>Spring Security</strong> 初始化核心过滤器时 <code>HttpSecurity</code> 会通过将 <strong>Spring Security</strong> 内置的一些过滤器以 <code>FilterComparator</code> 提供的规则进行比较按照比较结果进行排序注册。</p><h3 id="2-1-排序规则"><a href="#2-1-排序规则" class="headerlink" title="2.1 排序规则"></a>2.1 排序规则</h3><p><code>FilterComparator</code> 维护了一个顺序的注册表 <code>filterToOrder</code> 。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FilterComparator() &#123;</span><br><span class="line">    Step order = <span class="keyword">new</span> Step(INITIAL_ORDER, ORDER_STEP);</span><br><span class="line">    put(ChannelProcessingFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(ConcurrentSessionFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(WebAsyncManagerIntegrationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(SecurityContextPersistenceFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(HeaderWriterFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(CorsFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(CsrfFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(LogoutFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">        <span class="string">"org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">            <span class="string">"org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationRequestFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    put(X509AuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(AbstractPreAuthenticatedProcessingFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    filterToOrder.put(<span class="string">"org.springframework.security.cas.web.CasAuthenticationFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">        <span class="string">"org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">            <span class="string">"org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    put(UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(ConcurrentSessionFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">            <span class="string">"org.springframework.security.openid.OpenIDAuthenticationFilter"</span>, order.next());</span><br><span class="line">    put(DefaultLoginPageGeneratingFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(DefaultLogoutPageGeneratingFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(ConcurrentSessionFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(DigestAuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">            <span class="string">"org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter"</span>, order.next());</span><br><span class="line">    put(BasicAuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(RequestCacheAwareFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(SecurityContextHolderAwareRequestFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(JaasApiIntegrationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(RememberMeAuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(AnonymousAuthenticationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    filterToOrder.put(</span><br><span class="line">        <span class="string">"org.springframework.security.oauth2.client.web.OAuth2AuthorizationCodeGrantFilter"</span>,</span><br><span class="line">            order.next());</span><br><span class="line">    put(SessionManagementFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(ExceptionTranslationFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(FilterSecurityInterceptor<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">    put(SwitchUserFilter<span class="class">.<span class="keyword">class</span>, <span class="title">order</span>.<span class="title">next</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些就是所有内置的过滤器。 他们是通过下面的方法获取自己的序号：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getOrder</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Integer result = filterToOrder.get(clazz.getName());</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过过滤器的类全限定名从注册表 <code>filterToOrder</code> 中获取自己的序号，如果没有直接获取到序号通过递归获取父类在注册表中的序号作为自己的序号，序号越小优先级越高。上面的过滤器并非全部会被初始化。有的需要额外引入一些功能包，有的看 <code>HttpSecurity</code> 的配置情况。</strong> 在上一篇<a href="https://www.felord.cn/spring-security-login.html" target="_blank" rel="noopener">文章</a>中。我们禁用了 <code>CSRF</code> 功能，就意味着 <code>CsrfFilter</code> 不会被注册。</p><h2 id="3-内置过滤器讲解"><a href="#3-内置过滤器讲解" class="headerlink" title="3. 内置过滤器讲解"></a>3. 内置过滤器讲解</h2><p>接下来我们就对这些内置过滤器进行一个系统的认识。<strong>我们将按照默认顺序进行讲解</strong>。</p><h3 id="3-1-ChannelProcessingFilter"><a href="#3-1-ChannelProcessingFilter" class="headerlink" title="3.1 ChannelProcessingFilter"></a>3.1 ChannelProcessingFilter</h3><p><code>ChannelProcessingFilter</code> 通常是用来过滤哪些请求必须用 <code>https</code> 协议， 哪些请求必须用 <code>http</code> 协议， 哪些请求随便用哪个协议都行。它主要有两个属性：</p><ul><li>  <code>ChannelDecisionManager</code> 用来判断请求是否符合既定的协议规则。它维护了一个 <code>ChannelProcessor</code> 列表 这些<code>ChannelProcessor</code> 是具体用来执行 <code>ANY_CHANNEL</code> 策略 （任何通道都可以）, <code>REQUIRES_SECURE_CHANNEL</code> 策略 （只能通过<code>https</code> 通道）, <code>REQUIRES_INSECURE_CHANNEL</code> 策略 （只能通过 <code>http</code> 通道）。</li><li>  <code>FilterInvocationSecurityMetadataSource</code> 用来存储 url 与 对应的<code>ANY_CHANNEL</code>、<code>REQUIRES_SECURE_CHANNEL</code>、<code>REQUIRES_INSECURE_CHANNEL</code> 的映射关系。</li></ul><p><code>ChannelProcessingFilter</code> 通过 <code>HttpScurity#requiresChannel()</code> 等相关方法引入其配置对象 <code>ChannelSecurityConfigurer</code> 来进行配置。</p><h3 id="3-2-ConcurrentSessionFilter"><a href="#3-2-ConcurrentSessionFilter" class="headerlink" title="3.2 ConcurrentSessionFilter"></a>3.2 ConcurrentSessionFilter</h3><p><code>ConcurrentSessionFilter</code> 主要用来判断<code>session</code>是否过期以及更新最新的访问时间。其流程为：</p><ol><li> <code>session</code> 检测，如果不存在直接放行去执行下一个过滤器。存在则进行下一步。</li><li>根据<code>sessionid</code>从<code>SessionRegistry</code>中获取<code>SessionInformation</code>，从<code>SessionInformation</code>中获取<code>session</code>是否过期；没有过期则更新<code>SessionInformation</code>中的访问日期；<br> 如果过期，则执行<code>doLogout()</code>方法，这个方法会将<code>session</code>无效，并将 <code>SecurityContext</code> 中的<code>Authentication</code>中的权限置空，同时在<code>SecurityContenxtHoloder</code>中清除<code>SecurityContext</code>然后查看是否有跳转的 <code>expiredUrl</code>，如果有就跳转，没有就输出提示信息。</li></ol><p><code>ConcurrentSessionFilter</code> 通过<code>SessionManagementConfigurer</code> 来进行配置。</p><h3 id="3-3-WebAsyncManagerIntegrationFilter"><a href="#3-3-WebAsyncManagerIntegrationFilter" class="headerlink" title="3.3 WebAsyncManagerIntegrationFilter"></a>3.3 WebAsyncManagerIntegrationFilter</h3><p><code>WebAsyncManagerIntegrationFilter</code>用于集成SecurityContext到Spring异步执行机制中的WebAsyncManager。用来处理异步请求的安全上下文。具体逻辑为：</p><ol><li> 从请求属性上获取所绑定的<code>WebAsyncManager</code>，如果尚未绑定，先做绑定。</li><li>从<code>asyncManager</code> 中获取 <code>key</code> 为 <code>CALLABLE_INTERCEPTOR_KEY</code> 的安全上下文多线程处理器 <code>SecurityContextCallableProcessingInterceptor</code>, 如果获取到的为 <code>null</code>，<br> 新建一个 <code>SecurityContextCallableProcessingInterceptor</code> 并绑定 <code>CALLABLE_INTERCEPTOR_KEY</code> 注册到 <code>asyncManager</code> 中。</li></ol><p>这里简单说一下 <code>SecurityContextCallableProcessingInterceptor</code> 。它实现了接口 <code>CallableProcessingInterceptor</code>，<br>当它被应用于一次异步执行时，<code>beforeConcurrentHandling()</code> 方法会在调用者线程执行，该方法会相应地从当前线程获取<code>SecurityContext</code>,然后被调用者线程中执行逻辑时，会使用这个 <code>SecurityContext</code>，从而实现安全上下文从调用者线程到被调用者线程的传输。</p><p><code>WebAsyncManagerIntegrationFilter</code> 通过 <code>WebSecurityConfigurerAdapter#getHttp()</code>方法添加到 <code>HttpSecurity</code> 中成为 <code>DefaultSecurityFilterChain</code> 的一个链节。</p><h3 id="3-4-SecurityContextPersistenceFilter"><a href="#3-4-SecurityContextPersistenceFilter" class="headerlink" title="3.4 SecurityContextPersistenceFilter"></a>3.4 SecurityContextPersistenceFilter</h3><p><code>SecurityContextPersistenceFilter</code> 主要控制 <code>SecurityContext</code> 的在一次请求中的生命周期 。 请求来临时，创建<code>SecurityContext</code> 安全上下文信息，请求结束时清空 <code>SecurityContextHolder</code>。</p><p><code>SecurityContextPersistenceFilter</code> 通过 <code>HttpScurity#securityContext()</code> 及相关方法引入其配置对象 <code>SecurityContextConfigurer</code> 来进行配置。</p><h3 id="3-5-HeaderWriterFilter"><a href="#3-5-HeaderWriterFilter" class="headerlink" title="3.5 HeaderWriterFilter"></a>3.5 HeaderWriterFilter</h3><p><code>HeaderWriterFilter</code> 用来给 <code>http</code> 响应添加一些 <code>Header</code>,比如 <code>X-Frame-Options</code>, <code>X-XSS-Protection</code> ，<code>X-Content-Type-Options</code>。</p><p>你可以通过 <code>HttpScurity#headers()</code> 来定制请求<code>Header</code> 。</p><h3 id="3-6-CorsFilter"><a href="#3-6-CorsFilter" class="headerlink" title="3.6 CorsFilter"></a>3.6 CorsFilter</h3><p>跨域相关的过滤器。这是<code>Spring MVC Java</code>配置和<code>XML</code> 命名空间 <code>CORS</code> 配置的替代方法， 仅对依赖于<code>spring-web</code>的应用程序有用（不适用于<code>spring-webmvc</code>）或 要求在<code>javax.servlet.Filter</code> 级别进行CORS检查的安全约束链接。这个是目前官方的一些解读，但是我还是不太清楚实际机制。</p><p>你可以通过 <code>HttpSecurity#cors()</code> 来定制。</p><h3 id="3-7-CsrfFilter"><a href="#3-7-CsrfFilter" class="headerlink" title="3.7 CsrfFilter"></a>3.7 CsrfFilter</h3><p><code>CsrfFilter</code> 用于防止<code>csrf</code>攻击，前后端使用json交互需要注意的一个问题。</p><p>你可以通过 <code>HttpSecurity.csrf()</code> 来开启或者关闭它。在你使用 <code>jwt</code> 等 <code>token</code> 技术时，是不需要这个的。</p><h3 id="3-8-LogoutFilter"><a href="#3-8-LogoutFilter" class="headerlink" title="3.8 LogoutFilter"></a>3.8 LogoutFilter</h3><p><code>LogoutFilter</code> 很明显这是处理注销的过滤器。</p><p>你可以通过 <code>HttpSecurity.logout()</code> 来定制注销逻辑，非常有用。</p><h3 id="3-9-OAuth2AuthorizationRequestRedirectFilter"><a href="#3-9-OAuth2AuthorizationRequestRedirectFilter" class="headerlink" title="3.9 OAuth2AuthorizationRequestRedirectFilter"></a>3.9 OAuth2AuthorizationRequestRedirectFilter</h3><p>和上面的有所不同，这个需要依赖 <code>spring-scurity-oauth2</code> 相关的模块。该过滤器是处理 <code>OAuth2</code> 请求首选重定向相关逻辑的。以后会我会带你们认识它，请多多关注公众号：<code>Felordcn</code> 。</p><h3 id="3-10-Saml2WebSsoAuthenticationRequestFilter"><a href="#3-10-Saml2WebSsoAuthenticationRequestFilter" class="headerlink" title="3.10 Saml2WebSsoAuthenticationRequestFilter"></a>3.10 Saml2WebSsoAuthenticationRequestFilter</h3><p>这个需要用到 <code>Spring Security SAML</code> 模块，这是一个基于 <code>SMAL</code> 的 <code>SSO</code> 单点登录请求认证过滤器。</p><h4 id="关于SAML"><a href="#关于SAML" class="headerlink" title="关于SAML"></a>关于SAML</h4><p><code>SAML</code> 即安全断言标记语言，英文全称是 <code>Security Assertion Markup Language</code>。它是一个基于 <code>XML</code> 的标准，用于在不同的安全域（<code>security domain</code>）之间交换认证和授权数据。在 <code>SAML</code> 标准定义了身份提供者 (<code>identity provider</code>) 和服务提供者 (<code>service provider</code>)，这两者构成了前面所说的不同的安全域。 <code>SAML</code> 是 <code>OASIS</code> 组织安全服务技术委员会(<strong>Security Services Technical Committee</strong>) 的产品。</p><p><code>SAML</code>（<strong>Security Assertion Markup Language</strong>）是一个 <code>XML</code> 框架，也就是一组协议，可以用来传输安全声明。比如，两台远程机器之间要通讯，为了保证安全，我们可以采用加密等措施，也可以采用 <code>SAML</code> 来传输，传输的数据以 <code>XML</code> 形式，符合 <code>SAML</code> 规范，这样我们就可以不要求两台机器采用什么样的系统，只要求能理解 <code>SAML</code> 规范即可，显然比传统的方式更好。<code>SAML</code> 规范是一组 <code>Schema</code> 定义。</p><p>可以这么说，在<code>Web Service</code> 领域，<code>schema</code> 就是规范，在 <code>Java</code> 领域，<code>API</code> 就是规范</p><h3 id="3-11-X509AuthenticationFilter"><a href="#3-11-X509AuthenticationFilter" class="headerlink" title="3.11 X509AuthenticationFilter"></a>3.11 X509AuthenticationFilter</h3><p><code>X509</code> 认证过滤器。你可以通过 <code>HttpSecurity#X509()</code> 来启用和配置相关功能。</p><h3 id="3-12-AbstractPreAuthenticatedProcessingFilter"><a href="#3-12-AbstractPreAuthenticatedProcessingFilter" class="headerlink" title="3.12 AbstractPreAuthenticatedProcessingFilter"></a>3.12 AbstractPreAuthenticatedProcessingFilter</h3><p><code>AbstractPreAuthenticatedProcessingFilter</code> 处理处理经过预先认证的身份验证请求的过滤器的基类，其中认证主体已经由外部系统进行了身份验证。 目的只是从传入请求中提取主体上的必要信息，而不是对它们进行身份验证。</p><p>你可以继承该类进行具体实现并通过 <code>HttpSecurity#addFilter</code> 方法来添加个性化的<code>AbstractPreAuthenticatedProcessingFilter</code> 。</p><h3 id="3-13-CasAuthenticationFilter"><a href="#3-13-CasAuthenticationFilter" class="headerlink" title="3.13 CasAuthenticationFilter"></a>3.13 CasAuthenticationFilter</h3><p><code>CAS</code> 单点登录认证过滤器 。依赖 Spring Security CAS 模块</p><h3 id="3-14-OAuth2LoginAuthenticationFilter"><a href="#3-14-OAuth2LoginAuthenticationFilter" class="headerlink" title="3.14 OAuth2LoginAuthenticationFilter"></a>3.14 OAuth2LoginAuthenticationFilter</h3><p>这个需要依赖 <code>spring-scurity-oauth2</code> 相关的模块。<code>OAuth2</code> 登录认证过滤器。处理通过 <code>OAuth2</code> 进行认证登录的逻辑。</p><h3 id="3-15-Saml2WebSsoAuthenticationFilter"><a href="#3-15-Saml2WebSsoAuthenticationFilter" class="headerlink" title="3.15 Saml2WebSsoAuthenticationFilter"></a>3.15 Saml2WebSsoAuthenticationFilter</h3><p>这个需要用到 <code>Spring Security SAML</code> 模块，这是一个基于 <code>SMAL</code> 的 <code>SSO</code> 单点登录认证过滤器。 <a href="https://www.cnblogs.com/felordcn/p/12142538.html#%E5%85%B3%E4%BA%8ESAML" target="_blank" rel="noopener">关于SAML</a></p><h3 id="3-16-UsernamePasswordAuthenticationFilter"><a href="#3-16-UsernamePasswordAuthenticationFilter" class="headerlink" title="3.16 UsernamePasswordAuthenticationFilter"></a>3.16 UsernamePasswordAuthenticationFilter</h3><p>这个看过我相关文章的应该不陌生了。处理用户以及密码认证的核心过滤器。认证请求提交的<code>username</code>和 <code>password</code>，被封装成<code>token</code>进行一系列的认证，便是主要通过这个过滤器完成的，在表单认证的方法中，这是最最关键的过滤器。</p><p>你可以通过 <code>HttpSecurity#formLogin()</code> 及相关方法引入其配置对象 <code>FormLoginConfigurer</code> 来进行配置。 我们在 <a href="https://www.felord.cn/spring-security-login.html" target="_blank" rel="noopener">Spring Security 实战干货： 玩转自定义登录</a> 已经对其进行过个性化的配置和魔改。</p><h3 id="3-17-ConcurrentSessionFilter"><a href="#3-17-ConcurrentSessionFilter" class="headerlink" title="3.17 ConcurrentSessionFilter"></a>3.17 ConcurrentSessionFilter</h3><p>参见 <a href="https://www.cnblogs.com/felordcn/p/12142538.html#32_ConcurrentSessionFilter_104" target="_blank" rel="noopener">3.2 ConcurrentSessionFilter</a> 。 该过滤器可能会被多次执行。</p><h3 id="3-18-OpenIDAuthenticationFilter"><a href="#3-18-OpenIDAuthenticationFilter" class="headerlink" title="3.18 OpenIDAuthenticationFilter"></a>3.18 OpenIDAuthenticationFilter</h3><p>基于<code>OpenID</code> 认证协议的认证过滤器。 你需要在依赖中依赖额外的相关模块才能启用它。</p><h3 id="3-19-DefaultLoginPageGeneratingFilter"><a href="#3-19-DefaultLoginPageGeneratingFilter" class="headerlink" title="3.19 DefaultLoginPageGeneratingFilter"></a>3.19 DefaultLoginPageGeneratingFilter</h3><p>生成默认的登录页。默认 <code>/login</code> 。</p><h3 id="3-20-DefaultLogoutPageGeneratingFilter"><a href="#3-20-DefaultLogoutPageGeneratingFilter" class="headerlink" title="3.20 DefaultLogoutPageGeneratingFilter"></a>3.20 DefaultLogoutPageGeneratingFilter</h3><p>生成默认的退出页。 默认 <code>/logout</code> 。</p><h3 id="3-21-ConcurrentSessionFilter"><a href="#3-21-ConcurrentSessionFilter" class="headerlink" title="3.21 ConcurrentSessionFilter"></a>3.21 ConcurrentSessionFilter</h3><p>参见 <a href="https://www.cnblogs.com/felordcn/p/12142538.html#32_ConcurrentSessionFilter_104" target="_blank" rel="noopener">3.2 ConcurrentSessionFilter</a> 。 该过滤器可能会被多次执行。</p><h3 id="3-23-DigestAuthenticationFilter"><a href="#3-23-DigestAuthenticationFilter" class="headerlink" title="3.23 DigestAuthenticationFilter"></a>3.23 DigestAuthenticationFilter</h3><p><code>Digest</code>身份验证是 <code>Web</code> 应用程序中流行的可选的身份验证机制 。<code>DigestAuthenticationFilter</code> 能够处理 <code>HTTP</code> 头中显示的摘要式身份验证凭据。你可以通过 <code>HttpSecurity#addFilter()</code> 来启用和配置相关功能。</p><h3 id="3-24-BasicAuthenticationFilter"><a href="#3-24-BasicAuthenticationFilter" class="headerlink" title="3.24 BasicAuthenticationFilter"></a>3.24 BasicAuthenticationFilter</h3><p>和<code>Digest</code>身份验证一样都是<code>Web</code> 应用程序中流行的可选的身份验证机制 。 <code>BasicAuthenticationFilter</code> 负责处理 <code>HTTP</code> 头中显示的基本身份验证凭据。这个 <strong>Spring Security</strong> 的 <strong>Spring Boot</strong> 自动配置默认是启用的 。</p><p><code>BasicAuthenticationFilter</code> 通过 <code>HttpSecurity#httpBasic()</code> 及相关方法引入其配置对象 <code>HttpBasicConfigurer</code> 来进行配置。</p><h3 id="3-25-RequestCacheAwareFilter"><a href="#3-25-RequestCacheAwareFilter" class="headerlink" title="3.25 RequestCacheAwareFilter"></a>3.25 RequestCacheAwareFilter</h3><p>用于用户认证成功后，重新恢复因为登录被打断的请求。当匿名访问一个需要授权的资源时。会跳转到认证处理逻辑，此时请求被缓存。在认证逻辑处理完毕后，从缓存中获取最开始的资源请求进行再次请求。</p><p><code>RequestCacheAwareFilter</code> 通过 <code>HttpScurity#requestCache()</code> 及相关方法引入其配置对象 <code>RequestCacheConfigurer</code> 来进行配置。</p><h3 id="3-26-SecurityContextHolderAwareRequestFilter"><a href="#3-26-SecurityContextHolderAwareRequestFilter" class="headerlink" title="3.26 SecurityContextHolderAwareRequestFilter"></a>3.26 SecurityContextHolderAwareRequestFilter</h3><p>用来 实现<code>j2ee</code>中 <code>Servlet Api</code> 一些接口方法, 比如 <code>getRemoteUser</code> 方法、<code>isUserInRole</code> 方法，在使用 <strong>Spring Security</strong> 时其实就是通过这个过滤器来实现的。</p><p><code>SecurityContextHolderAwareRequestFilter</code> 通过 <code>HttpSecurity.servletApi()</code> 及相关方法引入其配置对象 <code>ServletApiConfigurer</code> 来进行配置。</p><h3 id="3-27-JaasApiIntegrationFilter"><a href="#3-27-JaasApiIntegrationFilter" class="headerlink" title="3.27 JaasApiIntegrationFilter"></a>3.27 JaasApiIntegrationFilter</h3><p>适用于<code>JAAS</code> （<code>Java</code> 认证授权服务）。 如果 <code>SecurityContextHolder</code> 中拥有的 <code>Authentication</code> 是一个 <code>JaasAuthenticationToken</code>，那么该 <code>JaasApiIntegrationFilter</code> 将使用包含在 <code>JaasAuthenticationToken</code> 中的 <code>Subject</code> 继续执行 <code>FilterChain</code>。</p><h3 id="3-28-RememberMeAuthenticationFilter"><a href="#3-28-RememberMeAuthenticationFilter" class="headerlink" title="3.28 RememberMeAuthenticationFilter"></a>3.28 RememberMeAuthenticationFilter</h3><p>处理 <strong><code>记住我</code></strong> 功能的过滤器。</p><p><code>RememberMeAuthenticationFilter</code> 通过 <code>HttpSecurity.rememberMe()</code> 及相关方法引入其配置对象 <code>RememberMeConfigurer</code> 来进行配置。</p><h3 id="3-29-AnonymousAuthenticationFilter"><a href="#3-29-AnonymousAuthenticationFilter" class="headerlink" title="3.29 AnonymousAuthenticationFilter"></a>3.29 AnonymousAuthenticationFilter</h3><p>匿名认证过滤器。<strong>对于 <code>Spring Security</code> 来说，所有对资源的访问都是有 <code>Authentication</code> 的。对于无需登录（<code>UsernamePasswordAuthenticationFilter</code> ）直接可以访问的资源，会授予其匿名用户身份</strong>。</p><p><code>AnonymousAuthenticationFilter</code> 通过 <code>HttpSecurity.anonymous()</code> 及相关方法引入其配置对象 <code>AnonymousConfigurer</code> 来进行配置。</p><h3 id="3-30-SessionManagementFilter"><a href="#3-30-SessionManagementFilter" class="headerlink" title="3.30 SessionManagementFilter"></a>3.30 SessionManagementFilter</h3><p><code>Session</code> 管理器过滤器，内部维护了一个 <code>SessionAuthenticationStrategy</code> 用于管理 <code>Session</code> 。</p><p><code>SessionManagementFilter</code> 通过 <code>HttpScurity#sessionManagement()</code> 及相关方法引入其配置对象 <code>SessionManagementConfigurer</code> 来进行配置。</p><h3 id="3-31-ExceptionTranslationFilter"><a href="#3-31-ExceptionTranslationFilter" class="headerlink" title="3.31 ExceptionTranslationFilter"></a>3.31 ExceptionTranslationFilter</h3><p>主要来传输异常事件，还记得之前我们见过的 <code>DefaultAuthenticationEventPublisher</code> 吗？</p><h3 id="3-32-FilterSecurityInterceptor"><a href="#3-32-FilterSecurityInterceptor" class="headerlink" title="3.32 FilterSecurityInterceptor"></a>3.32 FilterSecurityInterceptor</h3><p>这个过滤器决定了访问特定路径应该具备的权限，访问的用户的角色，权限是什么？访问的路径需要什么样的角色和权限？这些判断和处理都是由该类进行的。<strong>如果你要实现动态权限控制就必须研究该类</strong> 。</p><h3 id="3-33-SwitchUserFilter"><a href="#3-33-SwitchUserFilter" class="headerlink" title="3.33 SwitchUserFilter"></a>3.33 SwitchUserFilter</h3><p><code>SwitchUserFilter</code> 是用来做账户切换的。默认的切换账号的<code>url</code>为<code>/login/impersonate</code>，默认注销切换账号的<code>url</code>为<code>/logout/impersonate</code>，默认的账号参数为<code>username</code> 。</p><p>你可以通过此类实现自定义的账户切换。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用flyway版本控制工具维护数据库表</title>
      <link href="2020/flyway/"/>
      <url>2020/flyway/</url>
      
        <content type="html"><![CDATA[<p>最近的公司项目需求需要在现有的项目中集成spring-security，鉴于对spring security的知识较为零散，虽然之前集中学习了一段时间的spring security，但没有实践还需要多学习。今天在查看spring security资料的时候接触到了flyway这个东西，感觉用起来还是挺方便，打算学习学习也一起集成到项目中。</p><a id="more"></a><h3 id="我们为什么需要数据库迁移管理"><a href="#我们为什么需要数据库迁移管理" class="headerlink" title="我们为什么需要数据库迁移管理"></a>我们为什么需要数据库迁移管理</h3><p>比如第一个版本的产品只包含了最基本的功能，而第二版本就需要增加评论功能，这就涉及到数据结构的修改（包括创建新表，修改旧表的列，增加已有表的列等等）。直接进入产品数据库修改数据库并不适合快速的开发节奏，不仅仅不安全，更多的情况下数据库可能并不对外或者并不适合对外直接暴露连接，比如PAAS平台的数据库以服务的形式直接提供。</p><p>对比代码管理的一些实践，很明显在数据库方面做的还欠缺很多。比如代码管理中我们有</p><ul><li>  版本管理（svn，git等等）</li><li>  持续集成技术</li><li>  良好的发布工具和流程</li></ul><p>而在数据库方面会遇到很多问题</p><ul><li>  某台数据库现在是什么状态</li><li>  修改变更的脚本是否已经应用</li><li>  对于生产环境的紧急修复有没有被应用在测试环境</li><li>  如何创建一个新的数据库实例</li></ul><p>数据库迁移工具可以很好的管理这些问题，并提供了以下特性</p><ul><li>  从迁移脚本中创建新的数据库</li><li>  检查数据库状态</li><li>  从一个版本快速到达另外一个版本</li></ul><h2 id="什么是-Flyway"><a href="#什么是-Flyway" class="headerlink" title="什么是 Flyway"></a>什么是 Flyway</h2><p>我们在做开发时，由于项目需求的变化，或者前期设计缺陷，导致在后期需要修改数据库，这应该是一个比较常见的事情，如果项目还没上线，你可能把表删除了重新创建，但是如果项目已经上线了，就不能这样简单粗暴了，我们需要通过 SQL 脚本在已有数据表的基础上进行升级。</p><p>目前 Java 这块，想要对数据库的版本进行管理主要有两个工具：</p><p>Flyway，Liquibase两个工具各有千秋，但是核心功能都是数据库的版本管理，这里主要来看 Flyway。就像我们使用 Git 来管理代码版本一样，Flyway 可以用来管理数据库版本。</p><h3 id="Flyway-的特点"><a href="#Flyway-的特点" class="headerlink" title="Flyway 的特点"></a>Flyway 的特点</h3><p><strong>Flyway</strong> 大受欢迎是因为它具有以下优点：</p><ul><li>  <strong>简单</strong> 非常容易安装和学习，同时迁移的方式也很容易被开发者接受。</li><li>  <strong>专一</strong> <strong>Flyway</strong> 专注于搞数据库迁移、版本控制而并没有其它副作用。</li><li>  <strong>强大</strong> 专为连续交付而设计。让Flyway在应用程序启动时迁移数据库。</li></ul><h3 id="Flyway-的工作机制"><a href="#Flyway-的工作机制" class="headerlink" title="Flyway 的工作机制"></a>Flyway 的工作机制</h3><p><strong>Flyway</strong> 需要在 <code>DB</code> 中先创建一个 <code>metadata</code> 表 (缺省表名为 <code>flyway_schema_history</code>), 在该表中保存着每次 <code>migration</code> （迁移）的记录, 记录包含 <code>migration</code> 脚本的版本号和 <strong>SQL</strong> 脚本的 <code>checksum</code> 值。下图表示了多个数据库版本。</p><p><img src="https://image.xiaomo.info//blog/1460000020850224.png" alt="img"></p><p>对应的 <code>metadata</code> 表记录：</p><table><thead><tr><th>installed_rank</th><th>version</th><th>description</th><th>type</th><th>script</th><th>checksum</th><th>installed_by</th><th>installed_on</th><th>execution_time</th><th>success</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>Initial Setup</td><td>SQL</td><td>V1__Initial_Setup.sql</td><td>1996767037</td><td>axel</td><td>2016-02-04 22:23:00.0</td><td>546</td><td>true</td></tr><tr><td>2</td><td>2</td><td>First Changes</td><td>SQL</td><td>V2__First_Changes.sql</td><td>1279644856</td><td>axel</td><td>2016-02-06 09:18:00.0</td><td>127</td><td>true</td></tr></tbody></table><h3 id="Flyway-的规则"><a href="#Flyway-的规则" class="headerlink" title="Flyway 的规则"></a>Flyway 的规则</h3><p><strong>Flyway</strong> 是如何比较两个 <strong>SQL</strong> 文件的先后顺序呢？它采用 <strong>采用左对齐原则, 缺位用 0 代替</strong> 。举几个例子：</p><blockquote><p>  1.0.1.1 比 1.0.1 版本高。</p><p>  1.0.10 比 1.0.9.4 版本高。</p><p>  1.0.10 和 1.0.010 版本号一样高, 每个版本号部分的前导 0 会被忽略。</p></blockquote><p><strong>Flyway</strong> 将 <strong>SQL</strong> 文件分为 <strong>Versioned</strong> 、<strong>Repeatable</strong> 和 <strong>Undo</strong> 三种：</p><ul><li>  <strong>Versioned</strong> 用于版本升级, 每个版本有唯一的版本号并只能执行一次.</li><li>  <strong>Repeatable</strong> 可重复执行, 当 <strong>Flyway</strong>检测到 <strong>Repeatable</strong> 类型的 <strong>SQL</strong> 脚本的 <code>checksum</code> 有变动, <strong>Flyway</strong> 就会重新应用该脚本. 它并不用于版本更新, 这类的 <code>migration</code> 总是在 <strong>Versioned</strong> 执行之后才被执行。</li><li>  <strong>Undo</strong> 用于撤销具有相同版本的版本化迁移带来的影响。但是该回滚过于粗暴，过于机械化，一般不推荐使用。一般建议使用 <strong>Versioned</strong> 模式来解决。</li></ul><p>这三种的命名规则如下图：</p><p><img src="https://image.xiaomo.info//blog/1460000020850226.png" alt="naming.png"></p><ul><li>  <strong>Prefix</strong> 可配置，前缀标识，默认值 <code>V</code> 表示 <strong>Versioned</strong>, <code>R</code> 表示 <strong>Repeatable</strong>, <code>U</code> 表示 <strong>Undo</strong></li><li>  <strong>Version</strong> 标识版本号, 由一个或多个数字构成, 数字之间的分隔符可用点 <code>.</code> 或下划线 <code>_</code></li><li>  <strong>Separator</strong> 可配置, 用于分隔版本标识与描述信息, 默认为两个下划线 <code>__</code></li><li>  <strong>Description</strong> 描述信息, 文字之间可以用下划线 <code>_</code> 或空格 ``分隔</li><li>  <strong>Suffix</strong> 可配置, 后续标识, 默认为 <code>.sql</code></li></ul><h3 id="集成到项目中"><a href="#集成到项目中" class="headerlink" title="集成到项目中"></a><strong>集成到项目中</strong></h3><p>如果是在一个全新的项目中使用 Flyway，那么在新建一个 Spring Boot 项目时，就有 Flyway 的选项，如下图：</p><p><img src="https://image.xiaomo.info//blog/63d0f703918fa0ec5564ea32fc8564e83d6ddb03-20201126145549131.jpeg" alt="img"></p><p>项目创建成功后，resources目录下也会多出来一个db/migration目录，这个目录用来存放数据库脚本，如下：</p><p><img src="https://image.xiaomo.info//blog/caef76094b36acaf6a70bc05aacbb01600e99c4b-20201126145410156.jpeg" alt="img"></p><p><strong>注意</strong></p><p><img src="https://image.xiaomo.info//blog/810a19d8bc3eb1355b5f34bbf26d94d4fc1f4494-20201126171130380.png" alt="img"></p><p>这个如果创建项目时就选择了 Flyway 依赖，就会有这个目录。现在我要在已经做好的项目中加入 Flyway，这个目录就需要我手动创建了。 </p><ol><li> 首先在pom中添加 flyway 依赖：</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无需版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>gradle</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">implementation</span> <span class="string">'org.flywaydb:flyway-core'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后在项目的 resources 目录下，手动创建 db/migration 目录</li><li>然后在该目录下创建数据库脚本，数据库脚本的命名方式如下：</li></ol><p>V<version>__<name>.sql首先是大写字母 V，然后是版本号，要是有小版本可以用下划线隔开，例如 2_1，版本号后面是两个下划线，然后是脚本名称，文件后缀是 .sql。</name></version></p><p>例如我这里创建我的第一个数据库脚本，取名为 V1.20.1__gp.sql。</p><p>可以不用添加额外配置，大家只需要在本地 MySQL 中创建一个空的 gp数据库即可，然后直接启动项目，项目启动成功后，我们查看启动日志：</p><p><img src="https://image.xiaomo.info//blog/71cf3bc79f3df8dcf2705fd4b0024f8d4710283b.jpeg" alt="img"></p><p>从这段启动日志中，我们可以看到 Flyway 的执行信息，数据库脚本的执行执行，同时这里还说了，Flyway 还给创建了一个 flyway_schema_history 表，这个表用来记录数据库的更新历史。</p><p>这个时候，打开本地数据库，我们发现 gp库中该有的表都有了。同时还发现了 flyway_schema_history 表，如下：</p><p><img src="https://image.xiaomo.info//blog/58ee3d6d55fbb2fbd7cbe73c94581da24723dcd1.jpeg" alt="img"></p><p>有了这条记录，下次再启动项目，这个sql脚本文件就不会执行了，因为系统知道这个脚本已经执行过了，如果你还想让脚本再执行一遍，需要手动删除 flyway_schema_history 表中的对应记录，那么项目启动时，这个脚本就会被执行了。</p><p><strong>3.执行细节</strong></p><p>我们在定义脚本的时候，除了 V 字开头的脚本之外，还有一种 R 字开头的脚本，V 字开头的脚本只会执行一次，而 R 字开头的脚本，只要脚本内容发生了变化，启动时候就会执行。使用了 Flyway 之后，如果再想进行数据库版本升级，就不用改以前的数据库脚本了，直接创建新的数据库脚本，项目在启动时检测了有新的更高版本的脚本，就会自动执行，这样，在和其他同事配合工作时，也会方便很多。因为正常我们都是从 Git 上拉代码下来，不拉数据库脚本，这样要是有人更新了数据库，其他同事不一定能够收到最新的通知，使用了 Flyway 就可以有效避免这个问题了。所有的脚本，一旦执行了，就会在 flyway_schema_history 表中有记录，如果你不小心搞错了，可以手动从 flyway_schema_history 表中删除记录，然后修改 SQL 脚本后再重新启动（生产环境不建议）。</p><p><strong>4.其他配置</strong></p><p>在 Spring Boot 中，关于 Flyway 也有不少配置，这些配置都在 application.properties 中进行配置，常用的几个来和大家说下：</p><ol><li><p>spring.flyway.enabled：是否开启 flyway，默认就是开启的</p></li><li><p>spring.flyway.encoding：flyway 字符编码</p></li><li><p>spring.flyway.locations：sql 脚本的目录，默认是 classpath:db/migration，如果有多个，用 , 隔开</p></li><li><p>spring.flyway.clean-disabled：这个属性非常关键，它表示是否要清除已有库下的表，如果执行的脚本是 V1__xxx.sql，那么会先清除已有库下的表，然后再执行脚本，这在开发环境下还挺方便，但是在生产环境下就要命了，而且它默认就是要清除，生产环境一定要自己配置设置为 true。</p></li><li><p>spring.flyway.table：配置数据库信息表的名称，默认是 flyway_schema_history。</p></li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">flyway:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 禁止清理数据库表</span></span><br><span class="line">    <span class="attr">clean-disabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果数据库不是空表，需要设置成 true，否则启动报错</span></span><br><span class="line">    <span class="attr">baseline-on-migrate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 与 baseline-on-migrate: true 搭配使用</span></span><br><span class="line">    <span class="attr">baseline-version:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:db/migration</span></span><br><span class="line">    <span class="attr">table:</span> <span class="string">schemas_version</span></span><br><span class="line">    <span class="attr">validate-on-migrate:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Flyway-最佳实践"><a href="#Flyway-最佳实践" class="headerlink" title="Flyway 最佳实践"></a>Flyway 最佳实践</h3><p>通过上面的介绍相信你很快就会使用 <strong>Flyway</strong> 进行数据库版本控制了。这里总结了一些在实际开发中的使用经验：</p><ol><li> 生产务必禁 <code>spring.flyway.cleanDisabled=false</code> 。</li><li> 尽量避免使用 Undo 模式。</li><li> 开发版本号尽量根据团队来进行多层次的命名避免混乱。比如 <code>V1.0.1__ProjectName_{Feature|fix}_Developer_Description.sql</code> ，这种命名同时也可以获取更多脚本的开发者和相关功能的信息。</li><li> <code>spring.flyway.outOfOrder</code> 取值 生产上使用 <code>false</code>，开发中使用 <code>true</code>。</li><li> 多个系统公用一个 数据库 <code>schema</code> 时配置<code>spring.flyway.table</code> 为不同的系统设置不同的 <code>metadata</code> 表名而不使用缺省值 <code>flyway_schema_history</code> 。</li></ol><h2 id="附录-Flyway配置详解"><a href="#附录-Flyway配置详解" class="headerlink" title="附录: Flyway配置详解"></a>附录: Flyway配置详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flyway.baseline-description= # 执行基线时标记已有Schema的描述</span><br><span class="line">flyway.baseline-version=1 # 基线版本默认开始序号 默认为 1. </span><br><span class="line">flyway.baseline-on-migrate=false # 针对非空数据库是否默认调用基线版本 ， 这也是我们上面版本号从 2 开始的原因</span><br><span class="line">flyway.check-location=false # 是否开启脚本检查 检查脚本是否存在 默认false</span><br><span class="line">flyway.clean-on-validation-error=false # 验证错误时 是否自动清除数据库 高危操作！！！</span><br><span class="line">flyway.enabled=true # 是否启用 flyway.</span><br><span class="line">flyway.encoding=UTF-8 # 脚本编码.</span><br><span class="line">flyway.ignore-failed-future-migration=true # 在读元数据表时，是否忽略失败的后续迁移.</span><br><span class="line">flyway.init-sqls= # S获取连接后立即执行初始化的SQL语句</span><br><span class="line">flyway.locations=classpath:db/migration # 脚本位置， 默认为classpath: db/migration.</span><br><span class="line">flyway.out-of-order=false # 是否允许乱序（out of order）迁移</span><br><span class="line">flyway.placeholder-prefix= # 设置每个占位符的前缀。 默认值： $&#123; 。 </span><br><span class="line">flyway.placeholder-replacement=true # 是否要替换占位符。 默认值： true 。 </span><br><span class="line">flyway.placeholder-suffix=&#125; # 设置占位符的后缀。 默认值： &#125; 。 </span><br><span class="line">flyway.placeholders.*= # 设置占位符的值。</span><br><span class="line">flyway.schemas= # Flyway管理的Schema列表，区分大小写。默认连接对应的默认Schema。</span><br><span class="line">flyway.sql-migration-prefix=V # 迁移脚本的文件名前缀。 默认值： V 。 </span><br><span class="line">flyway.sql-migration-separator=__ # 迁移脚本的分割符 默认双下划线</span><br><span class="line">flyway.sql-migration-suffix=.sql # 迁移脚本的后缀 默认 .sql</span><br><span class="line">flyway.table=schema_version # Flyway使用的Schema元数据表名称 默认schema_version</span><br><span class="line">flyway.url= # 待迁移的数据库的JDBC URL。如果没有设置，就使用配置的主数据源。</span><br><span class="line">flyway.user= # 待迁移数据库的登录用户。</span><br><span class="line">flyway.password= # 待迁移数据库的登录用户密码。</span><br><span class="line">flyway.validate-on-migrate=true # 在运行迁移时是否要自动验证。 默认值： true 。</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li> <a href="https://www.cnblogs.com/moonlightL/p/10576844.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/moonlightL/p/10576844.html" target="_blank" rel="noopener">Flyway 简单入门教程</a></a></li><li> <a href="https://segmentfault.com/a/1190000020850220" target="_blank" rel="noopener">Spring Boot 2 实战：使用 Flyway 管理你数据库的版本变更</a></li><li> <a href="https://helloworlde.github.io/2018/01/07/SpringBoot-%E4%BD%BF%E7%94%A8-Flyway/" target="_blank" rel="noopener">Spring Boot 使用 Flyway</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IDEA保存时自动格式化代码配置</title>
      <link href="2020/autoFormatOnSvae/"/>
      <url>2020/autoFormatOnSvae/</url>
      
        <content type="html"><![CDATA[<p>公司的Java项目在提交代码时会自动执行CI。为了统一代码风格，CI中配置了使用google-java-format来检查代码格式，所以IDEA默认的格式化风格会和google的风格不一样，最终提交代码时需要执行 <code>./gradlew :spotlessApply</code>来再次format,经常会遇到在提交代码时会忘记执行脚本会导致CI构建失败。所以研究了一下如何让IDEA应用google的风格自动进行格式化。</p><a id="more"></a><h2 id="安装google-java-format"><a href="#安装google-java-format" class="headerlink" title="安装google-java-format"></a>安装google-java-format</h2><p>preferences -&gt; plugins -&gt; Browse repositories…<br>搜索google-java-format安装插件</p><img src="https://image.xiaomo.info//blog/image-20201126110557847.png" alt="image-20201126110557847" style="zoom: 25%;"><h3 id="启用google-java-format（AOSP）"><a href="#启用google-java-format（AOSP）" class="headerlink" title="启用google-java-format（AOSP）"></a>启用google-java-format（AOSP）</h3><img src="https://image.xiaomo.info//blog/image-20201126110636172.png" alt="image-20201126110636172" style="zoom:25%;"><h2 id="安装save-actions"><a href="#安装save-actions" class="headerlink" title="安装save actions"></a>安装save actions</h2><p>preferences -&gt; plugins -&gt; Browse repositories…<br>安装save actions<br><img src="https://image.xiaomo.info//blog/image-20201126110724471.png" alt="image-20201126110724471" style="zoom:25%;"></p><h3 id="启用save-actions"><a href="#启用save-actions" class="headerlink" title="启用save actions"></a>启用save actions</h3><p>保存时自动格式化</p><p><img src="https://image.xiaomo.info//blog/image-20201126110813221.png" alt="image-20201126110813221"></p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>关于formatting、build action和quick fix的部分根据需要开启</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aws dynamoDB使用总结</title>
      <link href="2020/dynamoDB/"/>
      <url>2020/dynamoDB/</url>
      
        <content type="html"><![CDATA[<p>最近有一个新需求：需要将一部分敏感用户信息存入aws dynamoDB，作为一个长年被高墙圈养的开发者，自然对aws这种高端的东西一无所知，至到如今身处东京才能有幸接触。所以各种查看官网的各种文档和github的demo示例，跟踪源码调查报错等各种手段。从最开始的无从下手，到摸清整个流程花了大概1天半时间。大致感觉是和其他db整合没什么太大区别，尤其是和mongodb这种noSQL的DB用法很像。</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Amazon DynamoDB 是一种完全托管的 NoSQL 数据库服务，提供快速且可预测的性能，同时还能够实现无缝扩展。使用 DynamoDB，您可以免除操作和扩展分布式数据库的管理工作负担，因而无需担心硬件预置、设置和配置、复制、软件修补或集群扩展等问题。DynamoDB 还提供静态加密，这消除了在保护敏感数据时涉及的操作负担和复杂性。</p><p>使用 DynamoDB，您可以创建数据库表来存储和检索任意量级的数据，并提供任意级别的请求流量。您可以扩展或缩减您的表的吞吐容量，而不会导致停机或性能下降。此外，您还可以使用 AWS 管理控制台来监控资源使用情况和各种性能指标。</p><p>DynamoDB 提供了按需备份功能。它允许您创建表的完整备份以进行长期保留和存档，从而满足监管合规性需求。</p><p>您可以为 Amazon DynamoDB 表创建按需备份以及启用时间点恢复。时间点恢复有助于保护表免遭意外写入或删除操作。使用时间点恢复，您可以使该表还原到最近 35 天中的任何时间点。</p><p>DynamoDB 可以从表中自动删除过期的项，从而帮助您降低存储用量，减少用于存储不相关数据的成本。</p><h1 id="Cli安装"><a href="#Cli安装" class="headerlink" title="Cli安装"></a>Cli安装</h1><ol><li>  通过python环境安装</li></ol><p><code>pip install awscli</code></p><ol start="2"><li><p>pkg安装</p><p> <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/install-cliv2-mac.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/install-cliv2-mac.html</a></p></li></ol><h1 id="aws-cli操作dynamoDB"><a href="#aws-cli操作dynamoDB" class="headerlink" title="aws cli操作dynamoDB"></a>aws cli操作dynamoDB</h1><ol><li><p>配置权限</p><p> <code>aws configure</code>  参考<a href="https://blog.xiaomo.info/2020/awsCommandLineUse/">aws command line用法</a></p></li><li><p>查看数据库表</p><p> <code> aws dynamodb describe-table --table-name staging-g123-platform-user-profile</code></p></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Table"</span>: &#123;</span><br><span class="line">        <span class="attr">"AttributeDefinitions"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"AttributeName"</span>: <span class="string">"provider"</span>,</span><br><span class="line">                <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"AttributeName"</span>: <span class="string">"user_id"</span>,</span><br><span class="line">                <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"TableName"</span>: <span class="string">"staging-g123-platform-user-profile"</span>,</span><br><span class="line">         <span class="attr">"TableStatus"</span>: <span class="string">"ACTIVE"</span>,</span><br><span class="line">        <span class="attr">"CreationDateTime"</span>: <span class="string">"2020-11-13T12:26:51.565000+09:00"</span>,</span><br><span class="line">        <span class="attr">"ProvisionedThroughput"</span>: &#123;</span><br><span class="line">            <span class="attr">"NumberOfDecreasesToday"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"ReadCapacityUnits"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"WriteCapacityUnits"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"TableSizeBytes"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"ItemCount"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"TableArn"</span>: <span class="string">"arn:aws:dynamodb:ap-northeast-1:174631816133:table/staging-g123-platform-user-profile"</span>,</span><br><span class="line">        <span class="attr">"TableId"</span>: <span class="string">"a04d71da-4903-421f-baca-2896013509ba"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>帮助命令</p><p> <code>aws dynamodb help</code>  查询出来的内容和<a href="https://docs.aws.amazon.com/cli/latest/reference/dynamodb/" target="_blank" rel="noopener">官网给出的文档</a>一致</p> <img src="https://image.xiaomo.info//blog/image-20201117152352446.png" style="zoom:50%;"></li></ol><h1 id="aws-dynamoDB官方客户端"><a href="#aws-dynamoDB官方客户端" class="headerlink" title="aws dynamoDB官方客户端"></a>aws dynamoDB官方客户端</h1><p>下载地址：<a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/workbench.settingup.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/workbench.settingup.html</a> </p><p><code>NoSql Workbench</code>会读取本地~/.aws/config下的认证信息</p><p><img src="https://image.xiaomo.info//blog/image-20201117152708701.png" alt="image-20201117152708701"></p><p>对应配置文件中的三个连接，当然前提得在<code>~/.aws/credentials</code>有配置对应的<code>aws_access_key_id</code>和<code>aws_secret_access_key</code>, 配置命令： <code>aws configure --profile prod</code>，然后输入对应的key和id和secret，参考<a href="https://blog.xiaomo.info/2020/awsCommandLineUse/">aws command line用法</a></p><img src="https://image.xiaomo.info//blog/image-20201117152756173.png" alt="image-20201117152756173" style="zoom:50%;"><p>可以自动生成python/java/js的示例代码</p><p><img src="https://image.xiaomo.info//blog/image-20201116160046238.png" alt="image-20201116160046238"></p><p> 也可以查看表结构的Metadata，注意KeySchema的KeyType。Hash对应@DynamoDBHashKey(attributeName = “user_id”)，RANGE对应@DynamoDBRangeKey(attributeName = “provider”)</p><p><img src="https://image.xiaomo.info//blog/image-20201117151507038.png" alt="image-20201117151507038"></p><p>查询结果和mysql类似</p><p><img src="https://image.xiaomo.info//blog/image-20201117151645612.png" alt="image-20201117151645612"></p><h1 id="spring-boot整合aws-java-sdk-dynamodb"><a href="#spring-boot整合aws-java-sdk-dynamodb" class="headerlink" title="spring boot整合aws java sdk dynamodb"></a>spring boot整合aws java sdk dynamodb</h1><p>gradle </p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'com.amazonaws:aws-java-sdk-dynamodb:1.11.901'</span></span><br></pre></td></tr></table></figure><p>maven</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazonaws<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aws-java-sdk-dynamodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.901<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application-dev.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dynamodb:</span></span><br><span class="line">  <span class="attr">tableNames:</span></span><br><span class="line">    <span class="attr">userInfoTable:</span> <span class="string">stg-g123-platform-user-profile</span></span><br><span class="line">    <span class="attr">orderTable:</span> <span class="string">stg-g123-platform-order-profile</span></span><br></pre></td></tr></table></figure><p>application-prod.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dynamodb:</span></span><br><span class="line">  <span class="attr">tableNames:</span></span><br><span class="line">    <span class="attr">userInfoTable:</span> <span class="string">production-g123-platform-user-profile</span></span><br><span class="line">    <span class="attr">orderTable:</span> <span class="string">production-g123-platform-order-profile</span></span><br></pre></td></tr></table></figure><p>yaml配置中对应的加载配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.property;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"dynamodb"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamoDBProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span> <span class="keyword">private</span> Map&lt;String, String&gt; tableNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dynamoDB配置类(这里没有写权限的配置项，所以它会默认读取本地aws的配置项【~/.aws文件夹下的权限配置】)</p><p>TableNameResolver会将注入的dbProperties中的表中配置进去，可以做到不同环境下使用不同的数据库表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.AmazonDynamoDB;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.property.DynamoDBProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DynamoDBProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">RequiredArgsConstructor</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DynamoDBConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AmazonDynamoDB <span class="title">getDynamoDBClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use default dynamic db config</span></span><br><span class="line">        <span class="keyword">return</span> AmazonDynamoDBClientBuilder.standard().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamoDBMapper <span class="title">getDynamoDBMapper</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AmazonDynamoDB client, DynamoDBProperties dynamoDBProperties)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NotNull</span> Map&lt;String, String&gt; tableNames = dynamoDBProperties.getTableNames();</span><br><span class="line">        DynamoDBMapperConfig mapperConfig =</span><br><span class="line">                DynamoDBMapperConfig.builder()</span><br><span class="line">                        .withTableNameResolver(</span><br><span class="line">                                (clazz, config) -&gt; &#123;</span><br><span class="line">                                    String tableName =</span><br><span class="line">                                            clazz.getAnnotation(DynamoDBTable<span class="class">.<span class="keyword">class</span>).<span class="title">tableName</span>()</span>;</span><br><span class="line">                                    <span class="keyword">return</span> tableNames.get(tableName);</span><br><span class="line">                                &#125;)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamoDBMapper(client, mapperConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类的基类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BasicItem</span></span><br><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicItem</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>数据库表映射(表名注意不要写错，需要一个常量字符串)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserInfoItem</span></span><br><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.datamodeling.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.base.BasicItem;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@DynamoDBTable</span>(tableName = <span class="string">"userInfoTable"</span>) <span class="comment">//在dbconfig中会根据环境替换成真正的表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoItem</span> <span class="keyword">extends</span> <span class="title">BasicItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String provider;</span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamoDBHashKey</span>(attributeName = <span class="string">"user_id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamoDBRangeKey</span>(attributeName = <span class="string">"provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamoDBTypeConvertedTimestamp</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timeZone = <span class="string">"Japan"</span>)</span><br><span class="line">    <span class="meta">@DynamoDBAttribute</span>(attributeName = <span class="string">"created_at"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamoDBTypeConvertedTimestamp</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timeZone = <span class="string">"Japan"</span>)</span><br><span class="line">    <span class="meta">@DynamoDBAttribute</span>(attributeName = <span class="string">"updated_at"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updatedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao基类(提供了基本的CURD功能)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicOperationDao</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasicItem</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> DynamoDBMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchSave</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(items)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.batchSave(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T keyItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyItem == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.delete(keyItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchDelete</span><span class="params">(List&lt;T&gt; keyItems)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(keyItems)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.batchDelete(keyItems);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdate</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(items)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mapper.batchSave(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">load</span><span class="params">(T keyItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.load(keyItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">batchLoad</span><span class="params">(List&lt;T&gt; keyItems)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.load(keyItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserInfoDao，有了基类dao，没有特殊业务需要就不需要额外写别的内容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.base.BasicOperationDao;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.domain.UserInfoItem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoDao</span> <span class="keyword">extends</span> <span class="title">BasicOperationDao</span>&lt;<span class="title">UserInfoItem</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>业务对应类 UserInfoBo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.bo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.domain.UserInfoItem;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoBo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String provider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updatedAt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfoItem <span class="title">toItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserInfoItem.builder()</span><br><span class="line">                .userId(<span class="keyword">this</span>.userId)</span><br><span class="line">                .provider(<span class="keyword">this</span>.provider)</span><br><span class="line">                .profile(profile)</span><br><span class="line">                .createdAt(createdAt)</span><br><span class="line">                .updatedAt(updatedAt)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfoBo <span class="title">fromItem</span><span class="params">(UserInfoItem userItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userItem == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UserInfoBo.builder()</span><br><span class="line">                .userId(userItem.getUserId())</span><br><span class="line">                .provider(userItem.getProvider())</span><br><span class="line">                .profile(userItem.getProfile())</span><br><span class="line">                .createdAt(userItem.getCreatedAt())</span><br><span class="line">                .updatedAt(userItem.getUpdatedAt())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserInfoService 有了这个类,剩下的就是和其他spring处理业务没有任何区别。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.g123.g123_auth.dynamicdb.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.bo.UserInfoBo;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.dao.UserInfoDao;</span><br><span class="line"><span class="keyword">import</span> jp.g123.g123_auth.dynamicdb.domain.UserInfoItem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> UserInfoDao userInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOrUpdateUserInfo</span><span class="params">(UserInfoBo userBo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userBo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserInfoBo existUser = getUserInfoById(userBo);</span><br><span class="line">        <span class="keyword">if</span> (existUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            existUser.setUpdatedAt(<span class="keyword">new</span> Date());</span><br><span class="line">            updateUserInfo(existUser);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userBo.setCreatedAt(<span class="keyword">new</span> Date());</span><br><span class="line">            userBo.setUpdatedAt(<span class="keyword">new</span> Date());</span><br><span class="line">            insertUserInfo(userBo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserInfoById</span><span class="params">(UserInfoBo userInfoBo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userInfoBo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserInfoItem userInfoItem = userInfoBo.toItem();</span><br><span class="line">        userInfoDao.delete(userInfoItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserInfo</span><span class="params">(UserInfoBo userBo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userBo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserInfoItem item = userBo.toItem();</span><br><span class="line">        userInfoDao.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(UserInfoBo userBo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userBo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserInfoItem item = userBo.toItem();</span><br><span class="line">        userInfoDao.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfoBo <span class="title">getUserInfoById</span><span class="params">(UserInfoBo userInfoBo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userInfoBo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserInfoItem userInfoItem = userInfoBo.toItem();</span><br><span class="line">        UserInfoItem userItem = userInfoDao.load(userInfoItem);</span><br><span class="line">        <span class="keyword">return</span> UserInfoBo.fromItem(userItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查看插入的数据"><a href="#查看插入的数据" class="headerlink" title="查看插入的数据"></a>查看插入的数据</h1><p><img src="https://image.xiaomo.info//blog/image-20201117151645612.png" alt="image-20201117151645612"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/Introduction.html" target="_blank" rel="noopener">aws官方开发文档</a></p></li><li><p> <a href="https://docs.aws.amazon.com/zh_cn/sdk-for-java/v1/developer-guide/examples-dynamodb-items.html#dynamodb-add-item" target="_blank" rel="noopener">java sdk 示例</a></p></li><li><p>  <a href="https://github.com/makai554892700/AWSDemo" target="_blank" rel="noopener">aws demo github(非官方)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt.js使用介绍</title>
      <link href="2020/vueSSRNuxt/"/>
      <url>2020/vueSSRNuxt/</url>
      
        <content type="html"><![CDATA[<p>vue全家桶还算是比较全面的，从构建工具vue-cli、vite，到vue-router、vuex、element-ui，vue-dev-tools，最后服务器渲染方案nuxt.js等等构成了一个完整的开发生态，用着还是比较省心的。总结一下nux.js用法以供参考。</p><a id="more"></a><h1 id="什么是SSR"><a href="#什么是SSR" class="headerlink" title="什么是SSR"></a>什么是SSR</h1><p>服务端渲染（Server Side Render），即：网页是通过服务端渲染生成后输出给客户端。</p><p>在 SPA(Single Page Application，即单页面应用) 之前的时代，我们的Web架构大都是 SSR，如：Wordpress（PHP）、JSP技术、JavaWeb…或者 DEDE CMS、Discuz! 等这些程序都是传统典型的 SSR 架构， 即：服务端取出数据和模板组合生成 html 输出给前端，前端发生请求时，重新向服务端请求 html 资源，路由也由服务端来控制。</p><p>其次，有个概念叫预渲染（Prerendering）。</p><p>如果你只是用服务端渲染来改善一个少数的营销页面（如 首页，关于，联系 等等）的 SEO，那你可以用预渲染来实现。 预渲染不像服务器渲染那样即时编译 HTML，它只在构建时为了特定的路由生成特定的几个静态页面，等于我们可以通过 Webpack 插件将一些特定页面组件 build 时就编译为 html 文件，直接以静态资源的形式输出给搜索引擎。</p><p>但实际的商业应用中，大部分时候我们需要的是即时渲染，这也是我们今天讨论的主题。</p><h1 id="为什么需要SSR"><a href="#为什么需要SSR" class="headerlink" title="为什么需要SSR"></a>为什么需要SSR</h1><ol><li><p>为了兼容性      </p><p> 虽然现在大部分的浏览器对单页面应用支持优化，但还有一少部分浏览器比较古老。对于世界上的一些地区人，可能只能用1998年产的电脑访问互联网的方式使用计算机。 而 Vue 只能运行在 IE9 以上的浏览器，你可能也想为那些老式浏览器提供基础内容 - 或者是在命令行中使用 Lynx 的时髦的黑客。</p></li><li><p>为了SEO     </p><p> SEO是流量是变现的快车道，SEO 是低成本获取流量的最佳方法。</p><p> 目前大部分的搜索引擎仅能抓取URI直接输出的数据资源，对于 Ajax 类的异步请求的数据无法抓取；Google 除外，Google 有自己的<a href="https://developers.google.com/webmasters/ajax-crawling/" target="_blank" rel="noopener">Google’s Webmaster AJAX Crawling Guidelines.</a>技术支持。在大部分的商业应用中，我们有 SEO 的需求，我们需要搜索引擎更多地抓取到我们的内容，更详细地认识到我们的网页结构，而不是仅对首页或特定静态页进行索引，这是 SSR 最重要的意义。</p><p> 简单说就是，我们需要搜素引擎看到这样的代码：</p><p> <img src="https://image.xiaomo.info//blog/image-20201106154440746.png" alt="image-20201106154440746"></p><p> 而不是这样的代码：</p><p> <img src="https://image.xiaomo.info//blog/image-20201106154506477.png" alt="image-20201106154506477"></p><ol start="3"><li><p>为了数据安全      </p><p>现在基本上B/S架构的应用都是前后端分离方式开发的，即前端使用XHR异步获取数据并渲染到页面上，如果我们不使用SSR的话，用户可以直接在调试控制台拿到我们的接口数据。但如果是我们使用的是SSR渲染的话，浏览器收到的就是一个填充好数据的HTML，如果别有用心的人想拿我们的数据。要么人肉复制，要么使用jsonp等技术定位我们的元素。当我们发现有spider在偷我们的数据的时候，稍微换下html的dom结构，偷数据的人就得吭赤吭赤的更新他们的爬虫代码。</p><p>此外，我们还需要在 SSR 的基础上实现 SPA，即：<strong>首屏渲染</strong>。</p></li></ol></li></ol><p>基本流程是：</p><p>在浏览器第一次访问某个 URI 资源的时候（首屏），Web 服务器根据路由拿到对应数据渲染并输出，且输出的数据中包含两部分：</p><p>路由页对应的页面及已渲染好的数据</p><p>完整的SPA程序代码</p><p>在客户端首屏渲染完成之后，此时我们看到的其实已经是一个和之前的 SPA 相差无几的应用程序了，接下来我们进行的任何操作都只是客户端的应用进行交互， 页面/组件由Web端渲染，路由也由浏览器控制，用户只需要和当前浏览器内的应用打交道就可以了。</p><p>之前在各大 SPA 框架还未正式官方支持 SSR 时，有一些第三方的解决方案，如：<a href="https://prerender.io/" target="_blank" rel="noopener">prerender.io</a>， 它们做的事情就是建立HTTP一个中间层，在判断到访问来源是蜘蛛时，输出已缓存好的html数据，此数据若不存在，则调用第三方服务对 html 进行缓存，往复进行。</p><p>另一方法是自行构建蜘蛛渲染逻辑，当识别 UA 为搜索引擎时，拿服务端已准备好的模板和数据进行渲染输出 html 数据，反之，则输出 SPA 应用代码；</p><p>我当时也考虑过此方法，但有很多弊端，如：</p><p>需要针对蜘蛛编写一套独立的渲染模板，因为大部分情况下 SPA 的代码是没法直接在服务端使用的</p><p>搜索引擎若检测到蜘蛛抓取数据和真实访问数据不一致，会做降权惩罚，也就意味着渲染模板还必须和SPA预期输出一模一样</p><p>所以，最好的方法是 SPA 能和服务端使用同一套模板，且使用同一个服务端逻辑分支，再简单说：<strong>最好 Vue、Ng2… 能直接在服务端跑起来</strong>。</p><p>于是，陆续诞生了基于 React 的<a href="https://github.com/zeit/next.js/" target="_blank" rel="noopener">Next.js</a>、基于 Vue 的<a href="https://cn.nuxtjs.org/" target="_blank" rel="noopener">Nuxt.js</a>、Ng2 诞生之日便支持。</p><h1 id="VUE的SSR方案-nuxt"><a href="#VUE的SSR方案-nuxt" class="headerlink" title="VUE的SSR方案(nuxt)"></a>VUE的SSR方案(nuxt)</h1><p>Nuxt.js是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，使用它，你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。之所以叫 Nuxt.js 也是因为受到了 Next.js 的启发。作者是法国的兄弟俩，EvenYou 在微博多次提到，也在欧洲见过哥俩。</p><p>在此之前，国内有一些对 Vue SSR 的整合尝试，但都没有成功，主要在于 Webpack 和 Node 的结合上没有实践出最佳方案， 当我看到 Nuxt.js 以约束文件夹和配置文件<code>nuxt.config.js</code>的方式来管理多个程序组件之间的关系时，就觉得，很酷！</p><p>Nuxt.js 是一个 Node 程序，就像上面说的，我们是要把 Vue 跑在服务端，所以必须使用 Node 环境。我们对 Nuxt.js 应用的访问，实际上是在访问这个 Node.js 程序的路由，程序输出首屏渲染内容 + 用以重新渲染的 SPA 的脚本代码，而路由是由 Nuxt.js 约定好的 pages 文件夹生成的。</p><p>所以，整体上，Nuxt.js 通过各个文件夹和配置文件的约束来管理我们的程序，而又不失扩展性，其有自己的<a href="https://nuxtjs.org/guide/plugins/" target="_blank" rel="noopener">插件机制</a>。</p><h1 id="Nuxt项目的创建"><a href="#Nuxt项目的创建" class="headerlink" title="Nuxt项目的创建"></a>Nuxt项目的创建</h1><ol><li><p>npx</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>yarn</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>npm</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ol><li><p>yarn</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure></li><li><p>npm </p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h1 id="nuxt项目结构介绍"><a href="#nuxt项目结构介绍" class="headerlink" title="nuxt项目结构介绍"></a>nuxt项目结构介绍</h1><p>按照目前的版本，Nuxt.js 的程序的文件结构大概分为以下部分：</p><p><strong>pages</strong>：各页面组件，用于生成对应路由，支持嵌套，支持动态路由</p><p><strong>components</strong>：各组件，用于你自己管理公共组件或非公共组件</p><p><strong>layouts</strong>：宿主布局页面模板组件，用于你可以把不同的页面指定使用不同的布局</p><p><strong>assets</strong>：用于 Webpack 编译的各类资源，通常是一些小的资源，如代替雪碧图之类的图片等东西</p><p><strong>middleware</strong>：中间件，首屏渲染和路由跳转前均执行对应中间件，可以返回promise或直接next（像是一个网关，很实用！）</p><p><strong>plugins</strong>：插件，SPA中用的各类第三方组件和一些node模块都可以在这引入，甚至可以引入自己编写的第三方库</p><p><strong>store</strong>：内置了vuex，可以直接返回数据模块或返回一个自建vuex根对象，具体要翻文档</p><p><strong>其他</strong>：你可以自定义文件夹和别名映射，文档都有提及，这里有<a href="https://github.com/surmon-china/surmon.me/blob/master/nuxt.config.js#L18" target="_blank" rel="noopener">配置代码</a></p><h1 id="nuxt-js-配置文件介绍"><a href="#nuxt-js-配置文件介绍" class="headerlink" title="nuxt.js 配置文件介绍"></a>nuxt.js 配置文件介绍</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// Disable server-side rendering (https://go.nuxtjs.dev/ssr-mode)</span></span><br><span class="line">  ssr: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Global page headers (https://go.nuxtjs.dev/config-head)</span></span><br><span class="line">  head: &#123;</span><br><span class="line">    title: <span class="string">'hello-nuxt'</span>,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">'utf-8'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'viewport'</span>, <span class="attr">content</span>: <span class="string">'width=device-width, initial-scale=1'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">hid</span>: <span class="string">'description'</span>, <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">''</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [&#123; <span class="attr">rel</span>: <span class="string">'icon'</span>, <span class="attr">type</span>: <span class="string">'image/x-icon'</span>, <span class="attr">href</span>: <span class="string">'/favicon.ico'</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Global CSS (https://go.nuxtjs.dev/config-css)</span></span><br><span class="line">  css: [<span class="string">'element-ui/lib/theme-chalk/index.css'</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Plugins to run before rendering page (https://go.nuxtjs.dev/config-plugins)</span></span><br><span class="line">  plugins: [<span class="string">'@/plugins/element-ui'</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Auto import components (https://go.nuxtjs.dev/config-components)</span></span><br><span class="line">  components: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Modules for dev and build (recommended) (https://go.nuxtjs.dev/config-modules)</span></span><br><span class="line">  buildModules: [</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/typescript</span></span><br><span class="line">    <span class="string">'@nuxt/typescript-build'</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Modules (https://go.nuxtjs.dev/config-modules)</span></span><br><span class="line">  modules: [</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/axios</span></span><br><span class="line">    <span class="string">'@nuxtjs/axios'</span>,</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/pwa</span></span><br><span class="line">    <span class="string">'@nuxtjs/pwa'</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Axios module configuration (https://go.nuxtjs.dev/config-axios)</span></span><br><span class="line">  axios: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Build Configuration (https://go.nuxtjs.dev/config-build)</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    transpile: [<span class="regexp">/^element-ui/</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zh.nuxtjs.org/docs/2.x/directory-structure/nuxt-config/" target="_blank" rel="noopener"><code>nuxt.config.js</code></a>对程序的扩展管理可大概分为以下类：</p><p><strong>build</strong>：主要对应 Webpack 中的各配置项，可以对默认的 Webpack 配置进行扩展，如<a href="https://github.com/surmon-china/surmon.me/blob/master/nuxt.config.js#L17" target="_blank" rel="noopener">这里代码</a></p><p><strong>cache</strong>：主要对应内置的组件缓存模块<code>lru-cache</code>的配置对象，有默认值，可选关闭</p><p><strong>css</strong>：对应我们在SPA随处引用样式文件的<code>require</code>语句</p><p><strong>dev</strong>：用于自定义配置环境变量，对应之前<code>webpack.config.js</code>相关文件中的变量语句</p><p><strong>env</strong>：同上息息相关</p><p><strong>generate</strong>：对<code>generate</code>命令执行时的行为做一些定制</p><p><strong>head</strong>：对应<code>vue-meta</code>插件的全局配置，<code>vue-meta</code>用于VUE/SSR程序的文档元信息的管理</p><p><strong>loading</strong>：用于定制化Nuxt.js内置的进度条组件</p><p><strong>performance</strong>：用于配置Node.js服务器性能上的配置</p><p><strong>plugins</strong>：用于管理和应用对应<code>plugins</code>文件夹中的插件</p><p><strong>rootdir</strong>：用于设置 Nuxt.js 应用的根目录（这俩api有很大合并的意义）</p><p><strong>srcdir</strong>：用于设置 Nuxt.js 应用的源码目录（这俩api有很大合并的意义）</p><p><strong>router</strong>：用于对<code>vue-router</code>的扩展和定制，其中还包括了中间件的配置，但并不完美（后面说）</p><p><strong>transition</strong>：用于定制Nuxt.js内置的页面切换过渡效果的默认属性值</p><p><strong>watchers</strong>：用于定制Nuxt.js内置的文件监听模块<code>chokidar</code>和 Webpack 的相关配置项</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>nuxt的没有固定配置路由的文件，它是根据约定自动生成的路由，所有的页面都在pages目录下。</p><ol><li><p>首页 （url:port）</p><p> 对应 pages/index.vue</p></li><li><p>订单列表( url:port/order)</p><p> 对应 pages/order/index.vue</p></li></ol><p>使用时</p><p><code>&lt;nuxt-link to=&quot;/order&quot;&gt;订单&lt;/nuxt-link&gt;</code></p><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a><a href="https://www.nuxtjs.cn/guide/routing" target="_blank" rel="noopener">动态路由</a></h1><p>在 Nuxt.js 里面定义带参数的动态路由，需要创建对应的<strong>以下划线作为前缀</strong>的 Vue 文件 或 目录。</p><p>在 Nuxt.js 里面定义带参数的动态路由，需要创建对应的<strong>以下划线作为前缀</strong>的 Vue 文件 或 目录。</p><p>以下目录结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| _slug/</span><br><span class="line">-----| comments.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users/</span><br><span class="line">-----| _id.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>Nuxt.js 生成对应的路由配置表为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'pages/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'users-id'</span>,</span><br><span class="line">      path: <span class="string">'/users/:id?'</span>,</span><br><span class="line">      component: <span class="string">'pages/users/_id.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'slug'</span>,</span><br><span class="line">      path: <span class="string">'/:slug'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'slug-comments'</span>,</span><br><span class="line">      path: <span class="string">'/:slug/comments'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/comments.vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现名称为 <code>users-id</code> 的路由路径带有 <code>:id?</code> 参数，表示该路由是可选的。如果你想将它设置为必选的路由，需要在 <code>users/_id</code> 目录内创建一个 <code>index.vue</code> 文件。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// layouts/default.vue 配置菜单</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/&quot;&gt;home&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/order&quot;&gt;order&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;Nuxt /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/order/index.vue  对应/order</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;phone in phones&quot; :key=&quot;phone&quot;&gt;</span><br><span class="line">        &lt;nuxt-link :to=&quot;&apos;/detail/&apos; + phone&quot;&gt;&#123;&#123; phone &#125;&#125;&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      phones: [&apos;锤子&apos;, &apos;iphone&apos;, &apos;google&apos;],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/detail/_id.vue   对应 /detail/:id   动态路由</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;详情&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 因为文件名是/detail/_id.vue，所以这里的参数是id --&gt;</span><br><span class="line">    &#123;&#123; $route.params.id &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>创建内嵌子路由，你需要添加一个 Vue 文件，同时添加一个<strong>与该文件同名</strong>的目录用来存放子视图组件。别忘了在父组件(<code>.vue</code>文件) 内增加 <code>&lt;nuxt-child/&gt;</code> 用于显示子视图内容。</p><p>父路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/users.vue 这是父路由，还需要创建一个同名的users文件夹。子路由/users和/users/profile2，别忘了&lt;nuxt-child/&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;parent users&lt;/h2&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/users&quot;&gt;user&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/users/profile&quot;&gt;user detail&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;nuxt-child /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2个子路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/users/index.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;用户列表&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/users/profile.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;用户详情&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h1><p><code>_.vue</code>意思是无限次嵌套，因此在pages下创建如下文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/_.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;404&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>使用中间件做权限认证</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/auth.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.userAgent = process.server</span><br><span class="line">    ? context.req.headers[<span class="string">'user-agent'</span>]</span><br><span class="line">    : navigator.userAgent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nutx.config.js 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line">  router: &#123;</span><br><span class="line">      middleware: <span class="string">'auth'</span>,   <span class="comment">// 对应middleware/auth.js</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-notifications</span><br><span class="line">yarn add mini-toastr</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueNotification <span class="keyword">from</span> <span class="string">'vue-notifications'</span></span><br><span class="line"><span class="keyword">import</span> miniToastr <span class="keyword">from</span> <span class="string">'mini-toastr'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toastTypes = &#123;</span><br><span class="line">  success: <span class="string">'success'</span>,</span><br><span class="line">  error: <span class="string">'error'</span>,</span><br><span class="line">  info: <span class="string">'info'</span>,</span><br><span class="line">  warn: <span class="string">'warn'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">miniToastr.init(&#123; <span class="attr">types</span>: toastTypes &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toast</span>(<span class="params">&#123; title, message, type, timeout, cb &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> miniToastr[type](message, title, timeout, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  success: toast,</span><br><span class="line">  error: toast,</span><br><span class="line">  info: toast,</span><br><span class="line">  warn: toast,</span><br><span class="line">&#125;</span><br><span class="line">Vue.use(VueNotifications, options)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nutx.config.js 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// Build Configuration (https://go.nuxtjs.dev/config-build)</span></span><br><span class="line">  <span class="comment">// 如果插件位于node_modules并导出模块，需要将其添加到transpile构建选项：</span></span><br><span class="line">    build: &#123;</span><br><span class="line">      transpile: [<span class="regexp">/^element-ui/</span>, <span class="string">'vue-notifications'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="comment">// Plugins to run before rendering page (https://go.nuxtjs.dev/config-plugins)</span></span><br><span class="line">  plugins: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/element-ui'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-notifications'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,   <span class="comment">// 对应/plugins/vue-notifications.js</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ts扩展"><a href="#ts扩展" class="headerlink" title="ts扩展"></a>ts扩展</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev @nuxt/typescript-build @nuxt/types</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm install --save-dev @nuxt/typescript-build @nuxt/types</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /vue-shim.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    buildModules: [</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/typescript</span></span><br><span class="line">    <span class="string">'@nuxt/typescript-build'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"ES2018"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"ESNext"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"Node"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"ESNext"</span>,</span><br><span class="line">      <span class="string">"ESNext.AsyncIterable"</span>,</span><br><span class="line">      <span class="string">"DOM"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"~/*"</span>: [</span><br><span class="line">        <span class="string">"./*"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"@/*"</span>: [</span><br><span class="line">        <span class="string">"./*"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"types"</span>: [</span><br><span class="line">      <span class="string">"@types/node"</span>,</span><br><span class="line">      <span class="string">"@nuxt/types"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">".nuxt"</span>,</span><br><span class="line">    <span class="string">"dist"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: <span class="number">3030</span>, <span class="comment">// default: 3000</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// default: localhost</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步加载数据的hook-nuxt自动调用"><a href="#异步加载数据的hook-nuxt自动调用" class="headerlink" title="异步加载数据的hook(nuxt自动调用)"></a>异步加载数据的hook(nuxt自动调用)</h1><p><code>yarn add @nuxt/http</code></p><p>需要添加nuxt的http模块</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    modules: [</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/axios</span></span><br><span class="line">    <span class="string">'@nuxtjs/axios'</span>,</span><br><span class="line">    <span class="comment">// https://go.nuxtjs.dev/pwa</span></span><br><span class="line">    <span class="string">'@nuxtjs/pwa'</span>,</span><br><span class="line">    <span class="string">'@nuxt/http'</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Data fetched using asyncData&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;mountain in mountains&quot; :key=&quot;mountain.title&quot;&gt;</span><br><span class="line">        &#123;&#123; mountain.title &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  async asyncData(&#123; $http &#125;) &#123;</span><br><span class="line">    const mountains = await $http.$get(&apos;https://api.nuxtjs.dev/mountains&apos;)</span><br><span class="line">    return &#123; mountains &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info//blog/image-20201124160222403.png" alt="image-20201124160222403"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web端接入apple Sign in流程</title>
      <link href="2020/webAppleSignIn/"/>
      <url>2020/webAppleSignIn/</url>
      
        <content type="html"><![CDATA[<p>前一段时间接入了google sign in的功能，现在继续接入apple sign in。待apple sign in 正式上线之后，我们的游戏支持 line、Facebook、twitter、google、apple5种三方登陆，基本上涵盖了主流sns。apple和google虽然是不同的平台，但是都是采用上oauth2.0的协议，所以接入流程大同小异。</p><a id="more"></a><h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><ol><li> jwt相关知识（apple采用的是jwt的验证方式）</li><li> js/ts/java基础编程技能</li></ol><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>登陆<a href="https://developer.apple.com/account/resources/identifiers/list" target="_blank" rel="noopener">apple开发者中心</a></p><ol><li> 在identifidr注册一个App ID</li></ol><p><img src="https://image.xiaomo.info//blog/image-20201111175510479.png" alt="image-20201111175510479"></p><p><img src="https://image.xiaomo.info//blog/image-20201111175649365.png" alt="image-20201111175553237"></p><p><img src="https://image.xiaomo.info//blog/image-20201111175741824.png" alt="image-20201111175741824"></p><p>注册之后可以得到3个内容     </p><p><code>Description</code>：对app的描述      </p><p><code>Bundle ID</code>: 注册时第2步填的反向域名（也就是client_id）    </p><p><code>App ID Prefix</code>: 也就是teamId，apple自动生成的随机唯一标识(init的时候不需要)    </p><ol start="2"><li> 注册在identifier中注册service ID, 有几个环境就可以注册几个service ID,绑定同一个App Id就可以了。</li></ol><p><img src="https://image.xiaomo.info//blog/image-20201111180250556.png" alt="image-20201111180250556"></p><p>注册好之后打开apple sign in 并配置</p><p><img src="https://image.xiaomo.info//blog/image-20201111180330148.png" alt="image-20201111180330148"></p><p><img src="https://image.xiaomo.info//blog/image-20201111180600392.png" alt="image-20201111180600392"></p><p><img src="https://image.xiaomo.info//blog/image-20201111180815110.png" alt="image-20201111180815110"></p><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><ol><li> 下载声明</li></ol><p><code>yarn add @types/apple-sign-in-api</code></p><p><code>yarn add loadjs</code></p><ol start="2"><li> 初始化 <code>AppleID</code></li></ol><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'redaxios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppleWebConfig &#125; <span class="keyword">from</span> <span class="string">'@/shared/models/AppleWebConfig'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthConfig &#125; <span class="keyword">from</span> <span class="string">'@/client/auth/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadScript &#125; <span class="keyword">from</span> <span class="string">'@/client/utils/scriptUtils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apple init</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">appleInit</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  $(<span class="string">'#apple-login'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">  $(<span class="string">'#apple-link'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the apple config</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    url: <span class="string">'/oauth/v1/config'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> config: AuthConfig = response.data <span class="keyword">as</span> AuthConfig;</span><br><span class="line">  <span class="keyword">if</span> (!config.apple) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> appleWebConfig: AppleWebConfig = <span class="keyword">new</span> AppleWebConfig();</span><br><span class="line">  <span class="built_in">Object</span>.assign(appleWebConfig, config.apple);</span><br><span class="line">  <span class="built_in">console</span>.log(config.apple);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use the config instance the AppleID</span></span><br><span class="line">  <span class="keyword">await</span> loadScript(appleWebConfig.sdk_url)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      AppleID.auth.init(&#123;</span><br><span class="line">        clientId: appleWebConfig.identifier, <span class="comment">// 对应配置的反向域名</span></span><br><span class="line">        scope: appleWebConfig.scope, <span class="comment">// name email 需要获取的内容，多个用空格分开</span></span><br><span class="line">        redirectURI: appleWebConfig.redirect_url, <span class="comment">// 回调地址</span></span><br><span class="line">        usePopup: <span class="literal">true</span>, <span class="comment">// 是否用弹窗方式</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">'apple environment ready'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.error(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadScript 用于动态加载js</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> loadjs, &#123; LoadOptions &#125; <span class="keyword">from</span> <span class="string">'loadjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CacheableOptions <span class="keyword">extends</span> LoadOptions &#123;</span><br><span class="line">  cacheable?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadScript = ((): ((</span><br><span class="line">  src: <span class="built_in">string</span>,</span><br><span class="line">  options?: CacheableOptions</span><br><span class="line">) =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache: Record&lt;<span class="built_in">string</span>, <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;&gt; = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (src: <span class="built_in">string</span>, options?: CacheableOptions): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'src must be string'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> opt: CacheableOptions = &#123;</span><br><span class="line">      cacheable: <span class="literal">true</span>,</span><br><span class="line">      numRetries: <span class="number">3</span>,</span><br><span class="line">      ...(options || &#123;&#125;),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.cacheable &amp;&amp; cache[src]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[src];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> promise = loadjs([src], &#123;</span><br><span class="line">      ...opt,</span><br><span class="line">      returnPromise: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (opt.cacheable) &#123;</span><br><span class="line">      cache[src] = promise;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="触发登陆"><a href="#触发登陆" class="headerlink" title="触发登陆"></a>触发登陆</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"sns-btn apple sns-btn-apple-link hidden"</span> <span class="attr">id</span>=<span class="string">"apple-login"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听按钮点击事件</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#apple-login'</span>).on(<span class="string">'click'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!AppleID) &#123;</span><br><span class="line">    showLoginLinkTip();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> AppleID.auth.signIn();</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// data是auth相关信息</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>监听成功/失败（可选）</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'AppleIDSignInOnSuccess'</span>, <span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'AppleIDSignInOnFailure'</span>, <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error.detail);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppleWebConfig &#125; <span class="keyword">from</span> <span class="string">'@/shared/models/AppleWebConfig'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AuthConfig,</span><br><span class="line">  reloadSession,</span><br><span class="line">  SNSLoginBindResponse,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@/client/auth/index'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadScript &#125; <span class="keyword">from</span> <span class="string">'@/client/utils/scriptUtils'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'redaxios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PlatformReportType &#125; <span class="keyword">from</span> <span class="string">'@/shared/types/reportTypes/platform'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GameConst &#125; <span class="keyword">from</span> <span class="string">'@/shared/constant/gameConst'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; showLoginLinkTip &#125; <span class="keyword">from</span> <span class="string">'../common/popup'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setCookie &#125; <span class="keyword">from</span> <span class="string">'../common/cookie'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appleWebConfig: AppleWebConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apple signIn handler</span></span><br><span class="line"><span class="comment"> * @param data authInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">appleSignInSuccess</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  data: AppleSignInAPI.SignInResponseI</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> idToken = data.authorization.id_token;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    appId: <span class="built_in">window</span>.option.appId,</span><br><span class="line">    idToken,</span><br><span class="line">    provider_type: <span class="string">'apple'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> loginResponse = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    url: <span class="string">'/oauth/v1/login'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    showLoginLinkTip(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loginResponse) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = loginResponse.data <span class="keyword">as</span> SNSLoginBindResponse;</span><br><span class="line">    showLoginLinkTip(result.code);</span><br><span class="line">    reloadSession(<span class="string">'visibilitychange'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    showLoginLinkTip(<span class="string">'network timeout, please try again later'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apple link success handler</span></span><br><span class="line"><span class="comment"> * @param data authInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">appleLinkSuccess</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  data: AppleSignInAPI.SignInResponseI</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> idToken = data.authorization.id_token;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    appId: <span class="built_in">window</span>.option.appId,</span><br><span class="line">    idToken,</span><br><span class="line">    provider_type: <span class="string">'apple'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> linkResponse = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    url: <span class="string">'/oauth/v1/link'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    showLoginLinkTip(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (linkResponse) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = linkResponse.data <span class="keyword">as</span> SNSLoginBindResponse;</span><br><span class="line">    showLoginLinkTip(result.code);</span><br><span class="line">    reloadSession(<span class="string">'visibilitychange'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    showLoginLinkTip(<span class="string">'network timeout ,please try again later'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/ban-types</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appleSignInFail</span>(<span class="params">error: object</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryVariable</span>(<span class="params">variable: <span class="built_in">string</span></span>): <span class="title">string</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href).searchParams.get(variable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apple init</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">appleInit</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cookie = getQueryVariable(GameConst.appleFeatureSwitchCookie);</span><br><span class="line">  <span class="keyword">if</span> (cookie) &#123;</span><br><span class="line">    setCookie(GameConst.appleFeatureSwitchCookie, cookie, <span class="number">360000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// get the apple config</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    url: <span class="string">'/oauth/v1/config'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> config: AuthConfig = response.data <span class="keyword">as</span> AuthConfig;</span><br><span class="line">  <span class="keyword">if</span> (!config.apple) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"can't get the apple config"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#apple-login'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">  $(<span class="string">'#apple-link'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">  appleWebConfig = <span class="keyword">new</span> AppleWebConfig();</span><br><span class="line">  <span class="built_in">Object</span>.assign(appleWebConfig, config.apple);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use the config instance the AppleID</span></span><br><span class="line">  <span class="keyword">await</span> loadScript(appleWebConfig.sdk_url).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.error(e));</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">'apple environment ready!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * login listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">'#apple-login'</span>).on(<span class="string">'click'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!AppleID) &#123;</span><br><span class="line">    showLoginLinkTip();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    AppleID.auth.init(&#123;</span><br><span class="line">      clientId: appleWebConfig.identifier,</span><br><span class="line">      scope: appleWebConfig.scope,</span><br><span class="line">      redirectURI: appleWebConfig.login_callback,</span><br><span class="line">      usePopup: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!AppleID) &#123;</span><br><span class="line">      showLoginLinkTip();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> data: AppleSignInAPI.SignInResponseI = <span class="keyword">await</span> AppleID.auth.signIn();</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      appleSignInSuccess(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    appleSignInFail(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apple link listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">'#apple-link'</span>).on(<span class="string">'click'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!AppleID) &#123;</span><br><span class="line">    showLoginLinkTip();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    AppleID.auth.init(&#123;</span><br><span class="line">      clientId: appleWebConfig.identifier,</span><br><span class="line">      scope: appleWebConfig.scope,</span><br><span class="line">      redirectURI: appleWebConfig.link_callback,</span><br><span class="line">      usePopup: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!AppleID) &#123;</span><br><span class="line">      showLoginLinkTip();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data: AppleSignInAPI.SignInResponseI = <span class="keyword">await</span> AppleID.auth.signIn();</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      appleLinkSuccess(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    appleSignInFail(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端代码(主要验证idToken的合法性和自己的用户系统关联起来)</p><p>build.gradle</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'com.nimbusds:nimbus-jose-jwt:9.0'</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apple:</span></span><br><span class="line">  <span class="attr">identifier:</span> <span class="string">info.xiaomo.app</span></span><br><span class="line">  <span class="attr">login_callback:</span> <span class="string">https://info.xiaomo.app/oauth/v1/login</span></span><br><span class="line">  <span class="attr">link_callback:</span> <span class="string">https://info.xiaomo.app/oauth/v1/link</span></span><br><span class="line">  <span class="attr">sdk_url:</span> <span class="string">https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/ja_JP/appleid.auth.js</span></span><br><span class="line">  <span class="attr">verify_url:</span> <span class="string">https://appleid.apple.com/auth/token</span></span><br><span class="line">  <span class="attr">team_id:</span> <span class="string">your</span> <span class="string">teamId</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">email</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>配置的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"apple"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String identifier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sdkUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String verifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String teamId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String scope;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String loginCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String linkCallback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件和实体类关联</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(AppleProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">RequiredArgsConstructor</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AppleConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>验证jwt</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@autowird</span></span><br><span class="line"><span class="keyword">private</span> AppleProperties appleProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> AppleJwtPayload <span class="title">verifyAppleJWTAndGetPayload</span><span class="params">(String idToken)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalProviderProfileException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JWSObject jwt = JWSObject.parse(idToken);</span><br><span class="line">            JWSHeader appleJwtHeader = jwt.getHeader();</span><br><span class="line">            AppleJwtPayload appleJwtPayload =</span><br><span class="line">                    JsonUtil.toJsonObject(jwt.getPayload().toString(), AppleJwtPayload<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            jwtVerifyHandler(appleJwtHeader, idToken);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> appleJwtPayload;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * verify jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appleJwtHeader appleJwtHeader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">jwtVerifyHandler</span><span class="params">(JWSHeader appleJwtHeader, String jwt)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalProviderProfileException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Optional&lt;JWKSet&gt; publicKeyCache = findPublicKey();</span><br><span class="line">            <span class="keyword">if</span> (publicKeyCache.isEmpty()) &#123;</span><br><span class="line">                reloadPublicKeyCache();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (publicKeyCache.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RSAKey rsaKey =</span><br><span class="line">                    publicKeyCache.get().getKeyByKeyId(appleJwtHeader.getKeyID()).toRSAKey();</span><br><span class="line">            SignedJWT signedJWT = SignedJWT.parse(jwt);</span><br><span class="line">            JWSVerifier verifier = <span class="keyword">new</span> RSASSAVerifier(rsaKey);</span><br><span class="line">            <span class="keyword">boolean</span> verify = signedJWT.verify(verifier);</span><br><span class="line">            <span class="keyword">if</span> (!verify) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@NotNull</span> List&lt;String&gt; audience = signedJWT.getJWTClaimsSet().getAudience();</span><br><span class="line">            <span class="meta">@Nullable</span> Date expirationTime = signedJWT.getJWTClaimsSet().getExpirationTime();</span><br><span class="line">            <span class="meta">@Nullable</span> String issuer = signedJWT.getJWTClaimsSet().getIssuer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"https://appleid.apple.com"</span>.equals(issuer)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (expirationTime == <span class="keyword">null</span> || expirationTime.before(<span class="keyword">new</span> Date())) &#123;</span><br><span class="line">                log.error(</span><br><span class="line">                        <span class="string">"token expired: &#123;&#125;  &#123;&#125;-&gt;&#123;&#125;"</span>,</span><br><span class="line">                        jwt,</span><br><span class="line">                        expirationTime == <span class="keyword">null</span> ? <span class="keyword">null</span> : expirationTime.getTime(),</span><br><span class="line">                        <span class="keyword">new</span> Date().getTime());</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!audience.contains(appleProperties.getIdentifier())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JOSEException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalProviderProfileException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>) <span class="comment">// auto reload/5 min</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reloadPublicKeyCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL authKeyUrl = <span class="keyword">new</span> URL(<span class="string">"https://appleid.apple.com/auth/keys"</span>);</span><br><span class="line">            JWKSet publicKeys = JWKSet.load(authKeyUrl);</span><br><span class="line">            publicKeysCache.invalidateAll();</span><br><span class="line">            publicKeysCache.put(<span class="string">"key"</span>, publicKeys);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ParseException e) &#123;</span><br><span class="line">            log.error(<span class="string">"get apple auth key error:&#123;&#125;"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;JWKSet&gt; <span class="title">findPublicKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(publicKeysCache.getIfPresent(<span class="string">"key"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://doofox.cn/sign-with-in-apple.html" target="_blank" rel="noopener"> Sign with in Apple，网站配置 Apple 登录</a></li><li><a href="https://segmentfault.com/a/1190000020786994" target="_blank" rel="noopener">Sign in with Apple NODE，web端接入苹果第三方登录</a></li><li><a href="https://bugjia.net/200531/804216.html" target="_blank" rel="noopener">java-如何在Nimbus JOSE JWT中验证令牌签名</a></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>文章中贴的实例代码只是提供一个开发思路，实际业务开发中牵扯的内容比较多。像是一些零散的util方法、css样式、业务耦合较重的内容等等没有一一提及，所以直接拷贝代码的话肯定会有不少的依赖文件找不到。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node项目监控工具之pm2</title>
      <link href="2020/pm2UseApi/"/>
      <url>2020/pm2UseApi/</url>
      
        <content type="html"><![CDATA[<p>用了好几年的宝塔，不知道什么时候出了个pm2管理器，才开始以为它是对node版本切换管理的，直到今天看到有一篇文章才发现理解错了。研究了一下pm2的作用和用法，也顺便玩一玩宝塔中的pm2。</p><a id="more"></a><blockquote><p>  pm2官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/quick-start/</a></p></blockquote><h2 id="简单教程"><a href="#简单教程" class="headerlink" title="简单教程"></a>简单教程</h2><p>首先需要安装pm2：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure><p>开机自动运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --watch</span><br></pre></td></tr></table></figure><p>开机自启:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 startup</span><br><span class="line">pm2 save</span><br></pre></td></tr></table></figure><p>初次安装并运行，会有一个高大上的界面：</p><p><img src="https://image.xiaomo.info//blog/1240.png" alt="img"></p><p>那么pm2与<a href="http://www.jianshu.com/p/82a64aee0710" target="_blank" rel="noopener">forever</a>相比，比较有哪些高大上的功能呢？我们看一下对比表格：</p><table><thead><tr><th align="center">Feature</th><th align="left">Forever</th><th align="left">PM2</th></tr></thead><tbody><tr><td align="center">Keep Alive</td><td align="left">✔</td><td align="left">✔</td></tr><tr><td align="center">Coffeescript</td><td align="left">✔</td><td align="left"></td></tr><tr><td align="center">Log aggregation</td><td align="left"></td><td align="left">✔</td></tr><tr><td align="center">API</td><td align="left"></td><td align="left">✔</td></tr><tr><td align="center">Terminal monitoring</td><td align="left"></td><td align="left">✔</td></tr><tr><td align="center">Clustering</td><td align="left"></td><td align="left">✔</td></tr><tr><td align="center">JSON configuration</td><td align="left"></td><td align="left">✔</td></tr></tbody></table><p>我们可以很直观的看出，pm2相比较Forever，功能更加强大一些。</p><h2 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h2><p>我们可以通过简单的命令查看应用的运行状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://image.xiaomo.info//blog/1240-20201106184135599.png" alt="img"></p><blockquote><p>  ANodeBlog应用正在运行，pid为31480，并且占用内存为89.113 MB。</p></blockquote><h2 id="追踪资源运行情况"><a href="#追踪资源运行情况" class="headerlink" title="追踪资源运行情况"></a>追踪资源运行情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><p>会看到应用资源的实时运行情况</p><p><img src="https://image.xiaomo.info//blog/1240-20201106184139553.png" alt="img"></p><h2 id="查看应用详细部署状态"><a href="#查看应用详细部署状态" class="headerlink" title="查看应用详细部署状态"></a>查看应用详细部署状态</h2><p>如果我们想要查看一个应用详细的运行状态，比如<code>ANodeBlog</code>的状态，可以运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 describe 3</span><br></pre></td></tr></table></figure><blockquote><p>  “3”是指App Id。</p></blockquote><p>结果如下：</p><p><img src="https://image.xiaomo.info//blog/1240-20201106184144285.png" alt="img"></p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure><p>系统会打印出详细的logs。</p><h2 id="重启应用"><a href="#重启应用" class="headerlink" title="重启应用"></a>重启应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 restart appId</span><br></pre></td></tr></table></figure><h2 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h2><p>想要终止应用，只需要运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 stop app.js</span><br></pre></td></tr></table></figure><h2 id="强健的API"><a href="#强健的API" class="headerlink" title="强健的API"></a>强健的API</h2><p>在项目中运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 web</span><br></pre></td></tr></table></figure><p>然后浏览器访问<a href="http://localhost:9615/" target="_blank" rel="noopener">http://localhost:9615</a> 你会有惊喜！</p><h2 id="预定义运行配置文件"><a href="#预定义运行配置文件" class="headerlink" title="预定义运行配置文件"></a>预定义运行配置文件</h2><p>我们可以预定义一个配置文件，然后制定运行这个配置文件，比如我们定义一个文件<code>process.json</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"ANodeBlog"</span>,</span><br><span class="line">      <span class="attr">"script"</span>: <span class="string">"bin/www"</span>,</span><br><span class="line">      <span class="attr">"watch"</span>: <span class="string">"../"</span>,</span><br><span class="line">      <span class="attr">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm Z"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以通过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start process.json</span><br></pre></td></tr></table></figure><p>运行这个App。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>常用命令总结如下：</p><ol><li><p>安装pm2</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure></li><li><p>启动应用</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure></li><li><p>列出所有应用</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure></li><li><p>查看资源消耗</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure></li><li><p>查看某一个应用状态</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 describe [app id]</span><br></pre></td></tr></table></figure></li><li><p>查看所有日志</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure></li><li><p>重启应用</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 restart [app id]</span><br></pre></td></tr></table></figure></li><li><p>停止应用</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 stop [app id]</span><br></pre></td></tr></table></figure></li><li><p>开启api访问</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 web</span><br></pre></td></tr></table></figure></li></ol><p>更多pm2内容请参考官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/quick-start</a></p><h1 id="宝塔中的pm2管理器使用方法"><a href="#宝塔中的pm2管理器使用方法" class="headerlink" title="宝塔中的pm2管理器使用方法"></a>宝塔中的pm2管理器使用方法</h1><p><strong>1、安装版本</strong>   </p><p>windows默认支持3个版本（8.x/9.x/10.x），选择任意一个版本安装即可   安装时间可能会比较久，请耐心等待..   <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/113406f0lvelgqogeq0yop.png" alt="img">  <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/111557qgguiyzy52nnxuuk.png" alt="img">  </p><p><strong>2、添加项目</strong>   </p><p>如果添加项目后无法启动，可能是当前环境变量未生效，需要重启面板或者服务器后，重新添加项目    <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/111735k1cw3t5a1oc5cs85.png" alt="img">   <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/111735jsjqgpqwjwddg0j4.png" alt="img">  </p><p><strong>3、给项目绑定一个域名</strong>   </p><p>如图点击映射，出现绑定域名窗口，绑定完成之后，可在网站管理查看到对应的网站   <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/111912i5o6eb6uabnc89bo.png" alt="img">  </p><p><strong>4、访问网站</strong>   </p><p>浏览器输入刚刚绑定的域名如图：<a href="http://node.ffce.cn/" target="_blank" rel="noopener">http://node.ffce.cn</a>   至此第一个node.js搭建成功     <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/112153ilqp5s11sqy5rsqp.png" alt="img"> </p><p> <strong>5、添加模块</strong>   </p><p>如果项目需要安装其他模块，则通过模块管理安装，如图我需要安装express   <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/112455zgqi8qwzwiy8ky9m.png" alt="img">  <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/112455ny999dz59wq3qf9c.png" alt="img">  </p><p><strong>6、查看日志</strong>   </p><p>  <img src="https://www.bt.cn/bbs/data/attachment/forum/201908/05/112914dbk57ooxx7q3q57k.png" alt="img">      </p><p>测试js <img src="https://www.bt.cn/bbs/static/image/filetype/html.gif" alt="img"> <a href="https://www.bt.cn/bbs/forum.php?mod=attachment&aid=MjgyODB8YTI4NzM0ZDl8MTYwNDY0NzY4OHwwfDM1NjA3" target="_blank" rel="noopener">app.js</a> <em>(423 Bytes, 下载次数: 1191)</em></p><h1 id="在mac上安装bt"><a href="#在mac上安装bt" class="headerlink" title="在mac上安装bt"></a>在mac上安装bt</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><h2 id="在Docker里安装CentOS"><a href="#在Docker里安装CentOS" class="headerlink" title="在Docker里安装CentOS"></a>在Docker里安装CentOS</h2><p>Docker Hub：<a href="https://hub.docker.com/_/centos" target="_blank" rel="noopener">https://hub.docker.com/_/centos</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="映射宝塔端口"><a href="#映射宝塔端口" class="headerlink" title="映射宝塔端口"></a>映射宝塔端口</h2><p>创建一个CentOS容器并映射<code>8888</code>端口，复制返回的<code>容器ID</code></p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d -<span class="keyword">it</span> -p <span class="number">10086</span>:<span class="number">10086</span> centos</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190901231059858.jpg" alt="img"></p><h2 id="进入CentOS安装宝塔"><a href="#进入CentOS安装宝塔" class="headerlink" title="进入CentOS安装宝塔"></a>进入CentOS安装宝塔</h2><p>进入容器终端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [容器ID] bash</span><br></pre></td></tr></table></figure><p>__在CentOS中__执行宝塔安装命令</p><p>在<a href="https://www.bt.cn/bbs/forum-36-1.html" target="_blank" rel="noopener">宝塔论坛</a>中打开安装教程，找到最新的版本安装命令，像以下这样的命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>安装完成后，提示给的外网IP是用不了的，所以这里需要用<code>本地ip</code>访问面板</p><p><img src="https://img-blog.csdnimg.cn/2019090123111685.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhNDY0OTcx,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="docker相关命令"><a href="#docker相关命令" class="headerlink" title="docker相关命令"></a>docker相关命令</h2><p><a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">Docker 命令大全</a></p><p>列出正在运行的容器信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>列出所有容器信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>停止所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h1 id="或者通过docker-compose安装"><a href="#或者通过docker-compose安装" class="headerlink" title="或者通过docker-compose安装"></a>或者通过docker-compose安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ifui/baota.git</span><br></pre></td></tr></table></figure><h3 id="3-进入项目根目录"><a href="#3-进入项目根目录" class="headerlink" title="3. 进入项目根目录"></a>3. 进入项目根目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> baota</span><br></pre></td></tr></table></figure><h3 id="4-生成配置文件"><a href="#4-生成配置文件" class="headerlink" title="4. 生成配置文件"></a>4. 生成配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp .env-example .env</span><br></pre></td></tr></table></figure><h3 id="5-启动宝塔镜像，在项目根目录下执行命令"><a href="#5-启动宝塔镜像，在项目根目录下执行命令" class="headerlink" title="5. 启动宝塔镜像，在项目根目录下执行命令"></a>5. 启动宝塔镜像，在项目根目录下执行命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d app</span><br></pre></td></tr></table></figure><h3 id="6-查看默认登录信息"><a href="#6-查看默认登录信息" class="headerlink" title="6. 查看默认登录信息"></a>6. 查看默认登录信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose logs app</span><br></pre></td></tr></table></figure><p>如果自己修改过env中的端口配置，那么访问的时候就需要写自己修改的端口</p><p><img src="https://image.xiaomo.info//blog/image-20201106174751622.png" alt="image-20201106174751622"></p><p>比如我这里填的是18888，那我的访问地址就是 <a href="http://localhost:18888/63c795f5" target="_blank" rel="noopener">http://localhost:18888/63c795f5</a> ，后面的随机码可以用<code>docker-compose logs app</code>查看</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Javascript的事件循环(转载)</title>
      <link href="2020/browserEventLoop/"/>
      <url>2020/browserEventLoop/</url>
      
        <content type="html"><![CDATA[<p>苹果的safari对不在一个事件循环内的popup操作判定为非用户主动触发，后果就是会被浏览器自动拦截。所以开始查询浏览器事件循环相关的资料，如果有遇到同样问题的小伙伴可以参考一下。</p><a id="more"></a><p>原地址 : <a href="https://juejin.im/post/6844903653120163848" target="_blank" rel="noopener">聊聊Javascript的事件循环</a></p><h2 id="JavaScript、浏览器、事件之间的关系"><a href="#JavaScript、浏览器、事件之间的关系" class="headerlink" title="JavaScript、浏览器、事件之间的关系"></a>JavaScript、浏览器、事件之间的关系</h2><p>JavaScript程序采用了异步事件驱动编程（Event-driven programming）模型，维基百科对它的解释是：</p><blockquote><p>  事件驱动程序设计（英语：Event-driven programming）是一种电脑程序设计模型。这种模型的程序运行流程是由用户的动作（如鼠标的按键，键盘的按键动作）或者是由其他程序的消息来决定的。相对于批处理程序设计（batch programming）而言，程序运行的流程是由程序员来决定。批量的程序设计在初级程序设计教学课程上是一种方式。然而，事件驱动程序设计这种设计模型是在交互程序（Interactive program）的情况下孕育而生的</p></blockquote><p>简而言之，在web前端编程里面JavaScript通过浏览器提供的事件模型API和用户交互，接受用户的输入。</p><p>事件驱动程序模型基本的实现原理基本上都是使用 事件循环（Event Loop）。</p><p>而JS的运行环境主要有两个：浏览器、Node。</p><p>在两个环境下的Event Loop实现是不一样的，在浏览器中基于 <a href="https://www.w3.org/TR/2017/REC-html52-20171214/webappapis.html#event-loops" target="_blank" rel="noopener">规范</a> 来实现，不同浏览器可能有小小区别。在Node中基于 libuv 这个库来实现</p><p>JS是单线程执行的，而基于事件循环模型，形成了基本没有阻塞（除了alert或同步XHR等操作）的状态。</p><h3 id="浏览器中的事件循环-event-loop"><a href="#浏览器中的事件循环-event-loop" class="headerlink" title="浏览器中的事件循环 event loop"></a>浏览器中的事件循环 event loop</h3><p>先看HTML标准的一系列解释：</p><blockquote><p>  为了协调事件（event），用户交互（user interaction），脚本（script），渲染（rendering），网络（networking）等，用户代理（user agent）必须使用事件循环（event loops）。 有两类事件循环：一种针对浏览上下文（browsing context），还有一种针对worker（web worker）。</p></blockquote><p>为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲《<a href="http://vimeo.com/96425312" target="_blank" rel="noopener">Help, I’m stuck in an event-loop</a>》）</p><img src="https://image.xiaomo.info//blog/image-20201106150325595.png" alt="image-20201106150325595" style="zoom: 50%;"><p>上图中，主线程运行的时候，产生堆栈，栈中的代码调用各种外部API，异步操作执行完成后，就在消息队列中排队。只要栈中的代码执行完毕，主线程就会去读取“任务队列”，依次执行那些事件所对应的回调函数。</p><h5 id="详细的步骤如下："><a href="#详细的步骤如下：" class="headerlink" title="详细的步骤如下："></a>详细的步骤如下：</h5><ol><li> 所有同步任务都在主线程上执行，形成一个执行栈</li><li> 主线程之外，还存在一个“消息队列”。只要异步操作执行完成，就到消息队列中排队</li><li> 一旦执行栈中的所有同步任务执行完毕，系统就会依次读取消息队列的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li><li> 主线程不断重复上面的的第三步</li></ol><p>下面看一个有意思的例子，猜一下它的运行结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">        resolve()</span><br><span class="line">&#125;).then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>这是为什么？是不是跟上面说的相违背了？其实这里面就有了两个概念宏任务（task／macrotask），微任务（microtask），下面我们来详细介绍一下这两个东东。</p><h2 id="Macrotask-与-Microtask"><a href="#Macrotask-与-Microtask" class="headerlink" title="Macrotask 与 Microtask"></a>Macrotask 与 Microtask</h2><p>根据 <a href="https://www.w3.org/TR/2017/REC-html52-20171214/webappapis.html#event-loops" target="_blank" rel="noopener">规范</a>，每个线程都有一个事件循环（Event Loop），在浏览器中除了主要的页面执行线程 外，Web worker是在一个新的线程中运行的，所以可以将其独立看待。</p><p>每个事件循环有至少一个任务队列（Task Queue，也可以称作Macrotask宏任务），各个任务队列中放置着不同来源（或者不同分类）的任务，可以让浏览器根据自己的实现来进行优先级排序</p><p>以及一个微任务队列（Microtask Queue），主要用于处理一些状态的改变，UI渲染工作之前的一些必要操作（可以防止多次无意义的UI渲染）</p><p>主线程的代码执行时，会将执行程序置入执行栈（Stack）中，执行完毕后出栈，另外有个堆空间（Heap），主要用于存储对象及一些非结构化的数据。</p><img src="https://image.xiaomo.info//blog/image-20201106150407277.png" style="zoom: 50%;"><p>常见的macrotask有：</p><ol><li><p> run <script>（同步的代码执行）</p></li><li><p> setTimeout</p></li><li><p> setInterval</p></li><li><p> setImmediate (Node环境中)</p></li><li><p> requestAnimationFrame</p></li><li><p> I/O</p></li><li><p> UI rendering</p></li></ol><p>常见的microtask有：</p><ol><li><p> process.nextTick (Node环境中)</p></li><li><p> Promise callback</p></li><li><p> Object.observe (基本上已经废弃)</p></li><li><p> MutationObserver</p></li></ol><h2 id="事件循环执行顺序"><a href="#事件循环执行顺序" class="headerlink" title="事件循环执行顺序"></a>事件循环执行顺序</h2><h3 id="1-event-loop-执行步骤："><a href="#1-event-loop-执行步骤：" class="headerlink" title="1. event loop 执行步骤："></a>1. event loop 执行步骤：</h3><p>1、执行宏任务（先进先出），一次循环只执行一个宏任务）<br>2、执行栈 —— 同步方法顺序执行，异步方法交给异步处理模块<br>3、执行栈为空时取出微任务执行（先进先出），直到微任务队列为空<br>4、更新UI渲染。完成一轮循环，反复执行1-4。（不一定每次循环都会渲染）</p><h3 id="2-update-the-rendering-渲染更新："><a href="#2-update-the-rendering-渲染更新：" class="headerlink" title="2.update the rendering 渲染更新："></a>2.update the rendering 渲染更新：</h3><p>在一轮event loop中多次修改同一dom，只有最后一次会进行绘制。<br>渲染更新（Update the rendering）会在event loop中的tasks和microtasks完成后进行，但并不是每轮event loop都会更新渲染，浏览器有自己的机制来确定是否要更新渲染。如果在一帧（16.7ms）里多次修改了dom，浏览器可能只会渲染绘制一次。<br>如果希望在每轮event loop都即时呈现变动，可以使用requestAnimationFrame.</p><p>那么我们回到上面的那个例子就不难解释了：</p><p>==注意==： Promise 自身的代码是同步执行的，只有 .then后的回调函数才是微任务。</p><p>主线程的执行过程：</p><ol><li> 从宏任务队列（task）中取出 script，将所有同步代码推入执行栈中执行，遇到异步代码交给异步处理模块，异步处理模块处理完成后将任务按规则推入事件队列，宏任务推宏任务队列（先进先出），微任务推微任务队列（先进先出）。所以输出 2 和 4。</li><li> 执行完 script 中的同步代码，再将微任务队列中最老的任务推入执行栈执行，直到清空微任务队列。所以输出 3。</li><li> 浏览器更新渲染，再去宏任务队列中取出最老的任务推入执行栈中执行，循环以上步骤。所以输出 1。</li></ol><h2 id="在Node中的实现"><a href="#在Node中的实现" class="headerlink" title="在Node中的实现"></a>在Node中的实现</h2><p>在Node环境中，macrotask部分主要多了setImmediate，microtask部分主要多了process.nextTick，而这个nextTick是独立出来自成队列的，优先级高于其他microtask</p><p>不过事件循环的的实现就不太一样了，可以参考 <a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">Node事件文档</a> <a href="http://docs.libuv.org/en/v1.x/design.html">libuv事件文档</a></p><h4 id="Node中的事件循环有6个阶段"><a href="#Node中的事件循环有6个阶段" class="headerlink" title="Node中的事件循环有6个阶段"></a>Node中的事件循环有6个阶段</h4><ol><li> timers：执行setTimeout() 和 setInterval()中到期的callback</li><li> I/O callbacks：上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</li><li> idle, prepare：仅内部使用</li><li> poll：最为重要的阶段，执行I/Ocallback，在适当的条件下会阻塞在这个阶段</li><li> check：执行setImmediate的callback</li><li> close callbacks：执行close事件的callback，例如socket.on(“close”,func)</li></ol><img src="https://image.xiaomo.info//blog/image-20201106150543628.png" alt="image-20201106150543628" style="zoom: 25%;" /><p>每一轮事件循环都会经过六个阶段，在每个阶段后，都会执行microtask</p><img src="https://image.xiaomo.info//blog/image-20201106150609147.png" alt="image-20201106150609147" style="zoom:25%;" /><p>比较特殊的是在poll阶段，执行程序同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限</p><p>接下来再检查有无预设的setImmediate，如果有就转入check阶段，没有就先查询最近的timer的距离，以其作为poll阶段的阻塞时间，如果timer队列是空的，它就一直阻塞下去</p><p>而nextTick并不在这些阶段中执行，它在每个阶段之后都会执行。</p><p>一个简单的例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>根据以上知识，应该很快就能知道输出结果是 5 3 4 1 2</p><p>修改一下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出为 1 3 2 4 0，因为nextTick队列优先级高于同一轮事件循环中其他microtask队列</p><p>再次修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer1'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer2'</span>);</span><br><span class="line"></span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">timer1</span><br><span class="line">timer2</span><br><span class="line"><span class="number">3</span></span><br><span class="line">promise1</span><br><span class="line">promise2</span><br></pre></td></tr></table></figure><p>与在浏览器中不同，这里promise1并不是在timer1之后输出，因为在setTimeout执行的时候是出于timer阶段，会先一并处理timer回调.</p><h2 id="善用事件循环"><a href="#善用事件循环" class="headerlink" title="善用事件循环"></a>善用事件循环</h2><p>知道JS的事件循环是怎么样的了，就需要知道怎么才能把它用好：</p><ol><li> 在microtask中不要放置复杂的处理程序，防止阻塞UI的渲染</li><li> 可以使用process.nextTick处理一些比较紧急的事情</li><li> 可以在setTimeout回调中处理上轮事件循环中UI渲染的结果</li><li> 注意不要滥用setInterval和setTimeout，它们并不是可以保证能够按时处理的，setInterval甚至还会出现丢帧的情况，可考虑使用 requestAnimationFrame</li><li> 一些可能会影响到UI的异步操作，可放在promise回调中处理，防止多一轮事件循环导致重复执行UI的渲染</li><li> 在Node中使用immediate来可能会得到更多的保证</li></ol><p>如有错误欢迎指正，相互进步。</p><p>参考链接：</p><p><a href="http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/">JavaScript 运行机制详解：再谈Event Loop</a></p><p><a href="https://www.cnblogs.com/dong-xu/p/7000163.html">深入理解 JavaScript 事件循环（一）— event loop</a></p><p><a href="https://zhuanlan.zhihu.com/p/26229293">深入浅出Javascript事件循环机制(上)</a></p><h1 id="MDN中对并发模型与事件循环的讲解"><a href="#MDN中对并发模型与事件循环的讲解" class="headerlink" title="MDN中对并发模型与事件循环的讲解"></a>MDN中对并发模型与事件循环的讲解</h1><p>JavaScript有一个基于<strong>事件循环</strong>的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。这个模型与其它语言中的模型截然不同，比如 C 和 Java。</p><h2 id="运行时概念"><a href="#运行时概念" class="headerlink" title="运行时概念"></a>运行时概念</h2><p>接下来的内容解释了这个理论模型。现代JavaScript引擎实现并着重优化了以下描述的这些语义。</p><h3 id="可视化描述"><a href="#可视化描述" class="headerlink" title="可视化描述"></a>可视化描述</h3><p><img src="https://mdn.mozillademos.org/files/17124/The_Javascript_Runtime_Environment_Example.svg" alt="Stack, heap, queue"></p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>函数调用形成了一个由若干帧组成的栈。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> foo(x * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="number">7</span>)); <span class="comment">// 返回 42</span></span><br></pre></td></tr></table></figure><p>当调用 <code>bar</code> 时，第一个帧被创建并压入栈中，帧中包含了 <code>bar</code> 的参数和局部变量。 当 <code>bar</code> 调用 <code>foo</code> 时，第二个帧被创建并被压入栈中，放在第一个帧之上，帧中包含 <code>foo</code> 的参数和局部变量。当 <code>foo</code> 执行完毕然后返回时，第二个帧就被弹出栈（剩下 <code>bar</code> 函数的调用帧 ）。当 <code>bar</code> 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">事件循环</a> 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。</p><p>函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>之所以称之为 <strong>事件循环</strong>，是因为它经常按照类似如下的方式来被实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queue.waitForMessage()</code> 会同步地等待消息到达(如果当前没有任何消息等待被处理)。</p><h3 id="“执行至完成”"><a href="#“执行至完成”" class="headerlink" title="“执行至完成”"></a>“执行至完成”</h3><p>每一个消息完整地执行后，其它消息才会被执行。这为程序的分析提供了一些优秀的特性，包括：当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码，才能修改这个函数操作的数据。这与C语言不同，例如，如果函数在线程中运行，它可能在任何位置被终止，然后在另一个线程中运行其他代码。</p><p>这个模型的一个缺点在于当一个消息需要太长时间才能处理完毕时，Web应用程序就无法处理与用户的交互，例如点击或滚动。为了缓解这个问题，浏览器一般会弹出一个“这个脚本运行时间过长”的对话框。一个良好的习惯是缩短单个消息处理时间，并在可能的情况下将一个消息裁剪成多个消息。</p><h3 id="添加消息"><a href="#添加消息" class="headerlink" title="添加消息"></a>添加消息</h3><p>在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。</p><p>函数 <code>setTimeout</code> 接受两个参数：待加入队列的消息和一个时间值（可选，默认为 0）。这个时间值代表了消息被实际加入到队列的最小延迟时间。如果队列中没有其它消息并且栈为空，在这段延迟时间过去之后，消息会被马上处理。但是，如果有其它消息，<code>setTimeout</code> 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间，而非确切的等待时间。</p><p>下面的例子演示了这个概念（<code>setTimeout</code> 并不会在计时器到期之后直接执行）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 输出 "2"，表示回调函数并没有在 500 毫秒之后立即执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Ran after "</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds() - s) + <span class="string">" seconds"</span>);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds() - s &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Good, looped for 2 seconds"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="零延迟"><a href="#零延迟" class="headerlink" title="零延迟"></a>零延迟</h3><p>零延迟并不意味着回调会立即执行。以 0 为第二参数调用 <code>setTimeout</code> 并不表示在 0 毫秒后就立即调用回调函数。</p><p>其等待的时间取决于队列里待处理的消息数量。在下面的例子中，<code>&quot;这是一条消息&quot;</code> 将会在回调获得处理之前输出到控制台，这是因为延迟参数是运行时处理请求所需的最小等待时间，但并不保证是准确的等待时间。</p><p>基本上，<code>setTimeout</code> 需要等待当前队列中所有的消息都处理完毕之后才能执行，即使已经超出了由第二参数所指定的时间。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是开始'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是来自第一个回调的消息'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是一条消息'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是来自第二个回调的消息'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是结束'</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// "这是开始"</span></span><br><span class="line"><span class="comment">// "这是一条消息"</span></span><br><span class="line"><span class="comment">// "这是结束"</span></span><br><span class="line"><span class="comment">// "这是来自第一个回调的消息"</span></span><br><span class="line"><span class="comment">// "这是来自第二个回调的消息"</span></span><br></pre></td></tr></table></figure><h3 id="多个运行时互相通信"><a href="#多个运行时互相通信" class="headerlink" title="多个运行时互相通信"></a>多个运行时互相通信</h3><p>一个 web worker 或者一个跨域的 <code>iframe</code> 都有自己的栈、堆和消息队列。两个不同的运行时只能通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage"><code>postMessage</code></a> 方法进行通信。如果另一个运行时侦听 <code>message</code> 事件，则此方法会向该运行时添加消息。</p><h2 id="永不阻塞"><a href="#永不阻塞" class="headerlink" title="永不阻塞"></a>永不阻塞</h2><p>JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它永不阻塞。 处理 I/O 通常通过事件和回调来执行，所以当一个应用正等待一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API">IndexedDB</a> 查询返回或者一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XHR</a> 请求返回时，它仍然可以处理其它事情，比如用户输入。</p><p>由于历史原因有一些例外，如 <code>alert</code> 或者同步 XHR，但应该尽量避免使用它们。注意，<a href="https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311">例外的例外也是存在的</a>（但通常是实现错误而非其它原因）。</p><h2 id="标准规范"><a href="#标准规范" class="headerlink" title="标准规范"></a>标准规范</h2><table><thead><tr><th align="left">标准规范</th><th align="left">状态</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left"><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops">HTML Living Standard Event loops</a></td><td align="left">Living Standard</td><td align="left"></td></tr><tr><td align="left"><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop">Node.js 事件循环</a></td><td align="left">Living Standard</td><td align="left"></td></tr></tbody></table><h1 id="阮老师对EventLoop的解释"><a href="#阮老师对EventLoop的解释" class="headerlink" title="阮老师对EventLoop的解释"></a><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">阮老师对EventLoop的解释</a></h1><p>Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。</p><p>JavaScript语言就采用这种机制，来解决单线程运行带来的一些问题。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201310/2013102001.png" alt="Event Loop"></p><p>本文参考C. Aaron Cois的<a href="https://www.udemy.com/lectures/understanding-the-nodejs-event-loop-91298">《Understanding The Node.js Event Loop》</a>，解释什么是Event Loop，以及它与JavaScript语言的单线程模型有何关系。</p><p>想要理解Event Loop，就要从程序的运行模式讲起。运行以后的程序叫做<a href="http://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B">“进程”</a>（process），一般情况下，一个进程一次只能执行一个任务。</p><p>如果有很多任务需要执行，不外乎三种解决方法。</p><blockquote><p>  <strong>（1）排队。</strong>因为一个进程一次只能执行一个任务，只好等前面的任务执行完了，再执行后面的任务。</p><p>  <strong>（2）新建进程。</strong>使用fork命令，为每个任务新建一个进程。</p><p>  <strong>（3）新建线程。</strong>因为进程太耗费资源，所以如今的程序往往允许一个进程包含多个线程，由线程去完成任务。（进程和线程的详细解释，请看<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">这里</a>。）</p></blockquote><p>以JavaScript语言为例，它是一种单线程语言，所有任务都在一个线程上完成，即采用上面的第一种方法。一旦遇到大量任务或者遇到一个耗时的任务，网页就会出现”假死”，因为JavaScript停不下来，也就无法响应用户的行为。</p><p>你也许会问，JavaScript为什么是单线程，难道不能实现为多线程吗？</p><p>这跟历史有关系。JavaScript从诞生起就是单线程。原因大概是不想让浏览器变得太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了。后来就约定俗成，JavaScript为一种单线程语言。（Worker API可以实现多线程，但是JavaScript本身始终是单线程的。）</p><p>如果某个任务很耗时，比如涉及很多I/O（输入/输出）操作，那么线程的运行大概是下面的样子。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201310/2013102002.png" alt="synchronous mode"></p><p>上图的绿色部分是程序的运行时间，红色部分是等待时间。可以看到，由于I/O操作很慢，所以这个线程的大部分运行时间都在空等I/O操作的返回结果。这种运行方式称为”同步模式”（synchronous I/O）或”堵塞模式”（blocking I/O）。</p><p>如果采用多线程，同时运行多个任务，那很可能就是下面这样。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201310/2013102003.png" alt="synchronous mode"></p><p>上图表明，多线程不仅占用多倍的系统资源，也闲置多倍的资源，这显然不合理。</p><p>Event Loop就是为了解决这个问题而提出的。<a href="http://en.wikipedia.org/wiki/Event_loop">Wikipedia</a>这样定义：</p><blockquote><p>  “<strong>Event Loop是一个程序结构，用于等待和发送消息和事件。</strong>（a programming construct that waits for and dispatches events or messages in a program.）”</p></blockquote><p>简单说，就是在程序中设置两个线程：一个负责程序本身的运行，称为”主线程”；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，被称为”Event Loop线程”（可以译为”消息线程”）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201310/2013102004.png" alt="asynchronous mode"></p><p>上图主线程的绿色部分，还是表示运行时间，而橙色部分表示空闲时间。每当遇到I/O的时候，主线程就让Event Loop线程去通知相应的I/O程序，然后接着往后运行，所以不存在红色的等待时间。等到I/O程序完成操作，Event Loop线程再把结果返回主线程。主线程就调用事先设定的回调函数，完成整个任务。</p><p>可以看到，由于多出了橙色的空闲时间，所以主线程得以运行更多的任务，这就提高了效率。这种运行方式称为”<a href="http://en.wikipedia.org/wiki/Asynchronous_I/O">异步模式</a>“（asynchronous I/O）或”非堵塞模式”（non-blocking mode）。</p><p>这正是JavaScript语言的运行方式。单线程模型虽然对JavaScript构成了很大的限制，但也因此使它具备了其他语言不具备的优势。如果部署得好，JavaScript程序是不会出现堵塞的，这就是为什么node.js平台可以用很少的资源，应付大流量访问的原因。</p><h2 id="一、为什么JavaScript是单线程？"><a href="#一、为什么JavaScript是单线程？" class="headerlink" title="一、为什么JavaScript是单线程？"></a>一、为什么JavaScript是单线程？</h2><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><h2 id="二、任务队列"><a href="#二、任务队列" class="headerlink" title="二、任务队列"></a>二、任务队列</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p><blockquote><p>  （1）所有同步任务都在主线程上执行，形成一个<a href="http://www.ruanyifeng.com/blog/2013/11/stack.html">执行栈</a>（execution context stack）。</p><p>  （2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p><p>  （3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p><p>  （4）主线程不断重复上面的第三步。</p></blockquote><p>下图就是主线程和任务队列的示意图。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2014/bg2014100801.jpg" alt="任务队列"></p><p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</p><h2 id="三、事件和回调函数"><a href="#三、事件和回调函数" class="headerlink" title="三、事件和回调函数"></a>三、事件和回调函数</h2><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。</p><p>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。</p><p>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</p><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p><h2 id="四、Event-Loop"><a href="#四、Event-Loop" class="headerlink" title="四、Event Loop"></a>四、Event Loop</h2><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p><p>为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲<a href="http://vimeo.com/96425312">《Help, I’m stuck in an event-loop》</a>）。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="Event Loop"></p><p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><p>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。请看下面这个例子。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;       <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&gt;       req.open(<span class="string">'GET'</span>, url);    </span><br><span class="line">&gt;       req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;    </span><br><span class="line">&gt;       req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;    </span><br><span class="line">&gt;       req.send();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取”任务队列”。所以，它与下面的写法等价。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;       <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&gt;       req.open(<span class="string">'GET'</span>, url);</span><br><span class="line">&gt;       req.send();</span><br><span class="line">&gt;       req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;    </span><br><span class="line">&gt;       req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;   </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取”任务队列”。</p><h2 id="五、定时器"><a href="#五、定时器" class="headerlink" title="五、定时器"></a>五、定时器</h2><p>除了放置异步任务的事件，”任务队列”还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做”定时器”（timer）功能，也就是定时执行的代码。</p><p>定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。</p><p>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&gt;   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;,<span class="number">1000</span>);</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。</p><p>如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;, <span class="number">0</span>);</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行”任务队列”中的回调函数。</p><p>总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在”任务队列”的尾部添加一个事件，因此要等到同步任务和”任务队列”现有的事件都处理完，才会得到执行。</p><p>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。</p><p>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p><h2 id="六、Node-js的Event-Loop"><a href="#六、Node-js的Event-Loop" class="headerlink" title="六、Node.js的Event Loop"></a>六、Node.js的Event Loop</h2><p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p><p>请看下面的示意图（作者<a href="https://twitter.com/BusyRich/status/494959181871316992">@BusyRich</a>）。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2014/bg2014100803.png" alt="Node.js"></p><p>根据上图，Node.js的运行机制如下。</p><blockquote><p>  （1）V8引擎解析JavaScript脚本。</p><p>  （2）解析后的代码，调用Node API。</p><p>  （3）<a href="https://github.com/joyent/libuv">libuv库</a>负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。</p><p>  （4）V8引擎再将结果返回给用户。</p></blockquote><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与”任务队列”有关的方法：<a href="http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback">process.nextTick</a>和<a href="http://nodejs.org/docs/latest/api/timers.html#timers_setimmediate_callback_arg">setImmediate</a>。它们可以帮助我们加深对”任务队列”的理解。</p><p>process.nextTick方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前”任务队列”的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via <a href="http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation">StackOverflow</a>）。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&gt;     process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&gt;   &#125;);</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">&gt;   &#125;, <span class="number">0</span>)</span><br><span class="line">&gt;   <span class="comment">// 1</span></span><br><span class="line">&gt;   <span class="comment">// 2</span></span><br><span class="line">&gt;   <span class="comment">// TIMEOUT FIRED</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。</p><p>现在，再看setImmediate。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&gt;     setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&gt;   &#125;);</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">&gt;   &#125;, <span class="number">0</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1–TIMEOUT FIRED–2，也可能是TIMEOUT FIRED–1–2。</p><p>令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;     setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;       <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&gt;       setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt;   </span><br><span class="line">&gt;     setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;       <span class="built_in">console</span>.log(<span class="string">'TIMEOUT FIRED'</span>);</span><br><span class="line">&gt;     &#125;, <span class="number">0</span>);</span><br><span class="line">&gt;   &#125;);</span><br><span class="line">&gt;   <span class="comment">// 1</span></span><br><span class="line">&gt;   <span class="comment">// TIMEOUT FIRED</span></span><br><span class="line">&gt;   <span class="comment">// 2</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1–TIMEOUT FIRED–2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。</p><p>我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取”事件队列”！</p><blockquote>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;   process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;     process.nextTick(foo);</span><br><span class="line">&gt;   &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。</p><p>另外，由于process.nextTick指定的回调函数是在本次”事件循环”触发，而setImmediate指定的是在下次”事件循环”触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查”任务队列”）。</p></script></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SQS/SNS/Redis的pub/sub用法总结</title>
      <link href="2020/AwsSqsUse/"/>
      <url>2020/AwsSqsUse/</url>
      
        <content type="html"><![CDATA[<p>最近做一个功能的时候需要用到消息队列，提起消息队列首先想到的就是mq系列的rabbitMQ或者rockMQ,Kafuka之类的服务。另外aws也有自己的消息队列服务SNS和SQS，今天简单记录一下SQS/SNS/Redis的用法。</p><a id="more"></a><h1 id="mq和kafuka对比"><a href="#mq和kafuka对比" class="headerlink" title="mq和kafuka对比"></a>mq和kafuka对比</h1><h2 id="业务场景分析"><a href="#业务场景分析" class="headerlink" title="业务场景分析"></a>业务场景分析</h2><p>kafka 适合简单业务，性能极强，用于大数据领域的实时计算以及日志采集。</p><p>rocketmq 功能多，坑多，性能好， 用于大公司的业务</p><p>rabbitmq 功能多，简单易用，性能较差。用于中小公司的业务</p><p>activeMQ, 它是消息队列，叫做messagequeen，我们是使用在电商平台上。比如当用户商品上架的时候，它将用户的商品信息，它就是一个消息服务中间件，里面保存了参数值，就是商品上架的同时，将商品的ID信息保存到消息服务的中间件中，这是这一端，然后我到另一端，solr服务端和我的freemarker服务端都会反复不断的监听，监听activeMQ中的一些相应的参数信息，就是ID，如果找到了ID信息,那么我就会相应处理，而且activeMQ可以采用一对一模式和主题订阅模式。当引用了activeMQ的时候，它将用户的商品信息保存到消息服务中间件，然后我的另外2个，一个solr，一个freemarker这2个服务器都可以同时或者很短的时间内异步监听到ID信息，同时取出这个信息，异步的进行先相关处理，这样可以节约大量的时间，这就是为什么用,activeMQ是节省时间的。</p><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p>rocketmq 社区不太活跃，文档少，相对不太成熟，需要<strong>踩坑</strong>，不过是用 java 编写。</p><p>其他两个比较活跃，rabbitmq 是 erlang 编写，源码学习成本较高。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>rocketmq 和 rabbitmq 支持的功能较多，更适合业务。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>rocketmq 自己一套接口，有学习成本。</p><h3 id="延迟和性能"><a href="#延迟和性能" class="headerlink" title="延迟和性能"></a>延迟和性能</h3><p>rabbitmq 延迟低，性能差 rocketmq 一倍。kafka 最强。</p><p>rabbitmq 的集群模式感觉不太合理， producer 不知道 queue 数据在哪台机器上，只能挑一台发送，broker如果发现queue数据不在当前节点上就帮你转发，这样产生一次转发的开销。</p><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/yunfeng482/article/details/72856762" target="_blank" rel="noopener">Kafka、RabbitMQ、RocketMQ等消息中间件的介绍和对比_Brave Soul Blog-CSDN博客blog.csdn.net<img src="https://pic2.zhimg.com/v2-a97ab4d23db1a20da423b5bca98da5c9_180x120.jpg" alt="图标"></a></p><h3 id="队列数对性能的影响"><a href="#队列数对性能的影响" class="headerlink" title="队列数对性能的影响"></a>队列数对性能的影响</h3><ul><li>  kafka 单台机器 队列数量大于 64的时候，负载大幅增加。</li><li>  rabbitmq 的集群模式下，会在所有集群节点中同步队列的元信息。有一定的开销，也意味着队列数不宜过多。</li><li>  rocketmq 单台机器撑住五万的队列，由于有专门的namesrv节点存储元信息。所以集群能够存储很多很多队列。</li></ul><p>kafka 表现最差，但是得益于性能高，还是适用于队列数少，数据量大的场景。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>rocketmq 可以很容易实现消息有序性。</p><p>rabbitmq 很麻烦</p><p>kafka 不清楚。</p><h3 id="支持事务"><a href="#支持事务" class="headerlink" title="支持事务"></a>支持事务</h3><p>mq 支持这个功能不是刚需，有别的办法可以实现类似事务的效果。</p><h1 id="SQS是什么"><a href="#SQS是什么" class="headerlink" title="SQS是什么"></a>SQS是什么</h1><p>SQS(Simple Queue Service)提供高吞吐量的系统到系统消息收发队列。您可以使用队列来解耦高开销流程，并实现作业的缓冲和批处理。Amazon SQS 会在微服务和无服务器应用程序完成处理前一直存储消息。</p><h1 id="SQS作用"><a href="#SQS作用" class="headerlink" title="SQS作用"></a>SQS作用</h1><h3 id="高度可扩展的标准队列和-FIFO-队列"><a href="#高度可扩展的标准队列和-FIFO-队列" class="headerlink" title="高度可扩展的标准队列和 FIFO 队列"></a>高度可扩展的标准队列和 FIFO 队列</h3><p>队列可根据应用程序的需要弹性扩展。标准队列提供几乎无限的吞吐量，每个队列的消息数量也无限制。FIFO 队列按先进先出原则传送消息，并确保仅处理一次。</p><h3 id="持久性和可用性"><a href="#持久性和可用性" class="headerlink" title="持久性和可用性"></a>持久性和可用性</h3><p>在多个服务器上分布队列。冗余基础设施确保了对消息的高度并发访问。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>保护传输中的数据和静态数据。通过加密队列传输敏感数据。在 Virtual Private Cloud 中发送消息。    </p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>批量发送、接收或删除消息，每批最多 10 条消息或 256KB。</p><h1 id="SQS用法"><a href="#SQS用法" class="headerlink" title="SQS用法"></a>SQS用法</h1><p>spring 读取配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.amazonaws.regions.Regions;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"aws.credentials"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsCredentialsProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@NotNull</span> <span class="keyword">private</span> Regions region;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置用于开发的 AWS 凭证和区域 将读取到的配置文件填入snsClient中，注入一个bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiamo.property.AwsCredentialsProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sns.SnsClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsSnsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SnsClient <span class="title">sqsClient</span><span class="params">(AwsCredentialsProperties awsCredentialsProperties)</span> </span>&#123;</span><br><span class="line">        AwsBasicCredentials credentials =</span><br><span class="line">                AwsBasicCredentials.create(</span><br><span class="line">                        awsCredentialsProperties.getAccessKey(),</span><br><span class="line">                        awsCredentialsProperties.getSecretKey());</span><br><span class="line"></span><br><span class="line">        StaticCredentialsProvider credentialsProvider =</span><br><span class="line">                StaticCredentialsProvider.create(credentials);</span><br><span class="line"></span><br><span class="line">        String name = awsCredentialsProperties.getRegion().name();</span><br><span class="line">        <span class="keyword">return</span> SnsClient.builder()</span><br><span class="line">                .region(Region.of(name))</span><br><span class="line">                .credentialsProvider(credentialsProvider)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiaomo.property.AwsCredentialsProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sqs.SqsClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsSqsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqsClient <span class="title">sqsClient</span><span class="params">(AwsCredentialsProperties awsCredentialsProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SqsClient.builder()</span><br><span class="line">            .region(Region.of(awsCredentialsProperties.getRegion().getName()))</span><br><span class="line">                .credentialsProvider(</span><br><span class="line">                        StaticCredentialsProvider.create(</span><br><span class="line">                                AwsBasicCredentials.create(</span><br><span class="line">                                        awsCredentialsProperties.getAccessKey(),</span><br><span class="line">                                        awsCredentialsProperties.getSecretKey())))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sqs.SqsClient;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sqs.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsSqsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"clearCacheQueue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqsClient sqsClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 清除消息队列 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purgeMyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetQueueUrlRequest getQueueRequest =</span><br><span class="line">                GetQueueUrlRequest.builder().queueName(QUEUE_NAME).build();</span><br><span class="line"></span><br><span class="line">        PurgeQueueRequest queueRequest =</span><br><span class="line">                PurgeQueueRequest.builder()</span><br><span class="line">                        .queueUrl(sqsClient.getQueueUrl(getQueueRequest).queueUrl())</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        sqsClient.purgeQueue(queueRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; attr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        attr.add(<span class="string">"Name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            GetQueueUrlRequest getQueueRequest =</span><br><span class="line">                    GetQueueUrlRequest.builder().queueName(QUEUE_NAME).build();</span><br><span class="line"></span><br><span class="line">            String queueUrl = sqsClient.getQueueUrl(getQueueRequest).queueUrl();</span><br><span class="line"></span><br><span class="line">            ReceiveMessageRequest receiveRequest =</span><br><span class="line">                    ReceiveMessageRequest.builder()</span><br><span class="line">                            .queueUrl(queueUrl)</span><br><span class="line">                            .maxNumberOfMessages(<span class="number">10</span>)</span><br><span class="line">                            .messageAttributeNames(attr)</span><br><span class="line">                            .build();</span><br><span class="line">            List&lt;Message&gt; messages = sqsClient.receiveMessage(receiveRequest).messages();</span><br><span class="line"></span><br><span class="line">            SqsMessage myMessage;</span><br><span class="line"></span><br><span class="line">            List&lt;SqsMessage&gt; allMessages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Message m : messages) &#123;</span><br><span class="line"></span><br><span class="line">                myMessage = <span class="keyword">new</span> SqsMessage();</span><br><span class="line">                myMessage.setBody(m.body());</span><br><span class="line"></span><br><span class="line">                Map&lt;String, MessageAttributeValue&gt; map = m.messageAttributes();</span><br><span class="line">                MessageAttributeValue val = map.get(<span class="string">"Name"</span>);</span><br><span class="line">                myMessage.setName(val.stringValue());</span><br><span class="line"></span><br><span class="line">                allMessages.add(myMessage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> convertToString(toXml(allMessages));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SqsException e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(SqsMessage msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageAttributeValue attributeValue =</span><br><span class="line">                    MessageAttributeValue.builder()</span><br><span class="line">                            .stringValue(msg.getName())</span><br><span class="line">                            .dataType(<span class="string">"String"</span>)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">            Map&lt;String, MessageAttributeValue&gt; myMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            myMap.put(<span class="string">"Name"</span>, attributeValue);</span><br><span class="line"></span><br><span class="line">            GetQueueUrlRequest getQueueRequest =</span><br><span class="line">                    GetQueueUrlRequest.builder().queueName(QUEUE_NAME).build();</span><br><span class="line"></span><br><span class="line">            String queueUrl = sqsClient.getQueueUrl(getQueueRequest).queueUrl();</span><br><span class="line"></span><br><span class="line">            UUID uuid = UUID.randomUUID();</span><br><span class="line">            String msgId1 = uuid.toString();</span><br><span class="line"></span><br><span class="line">            SendMessageRequest sendMsgRequest =</span><br><span class="line">                    SendMessageRequest.builder()</span><br><span class="line">                            .queueUrl(queueUrl)</span><br><span class="line">                            .messageAttributes(myMap)</span><br><span class="line">                            .messageGroupId(<span class="string">"GroupA"</span>)</span><br><span class="line">                            .messageDeduplicationId(msgId1)</span><br><span class="line">                            .messageBody(msg.getBody())</span><br><span class="line">                            .build();</span><br><span class="line">            sqsClient.sendMessage(sendMsgRequest);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SqsException e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Document <span class="title">toXml</span><span class="params">(List&lt;SqsMessage&gt; itemList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">            Document doc = builder.newDocument();</span><br><span class="line"></span><br><span class="line">            Element root = doc.createElement(<span class="string">"Messages"</span>);</span><br><span class="line">            doc.appendChild(root);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SqsMessage myMessage : itemList) &#123;</span><br><span class="line"></span><br><span class="line">                Element item = doc.createElement(<span class="string">"Message"</span>);</span><br><span class="line">                root.appendChild(item);</span><br><span class="line"></span><br><span class="line">                Element id = doc.createElement(<span class="string">"Data"</span>);</span><br><span class="line">                id.appendChild(doc.createTextNode(myMessage.getBody()));</span><br><span class="line">                item.appendChild(id);</span><br><span class="line"></span><br><span class="line">                Element name = doc.createElement(<span class="string">"User"</span>);</span><br><span class="line">                name.appendChild(doc.createTextNode(myMessage.getName()));</span><br><span class="line">                item.appendChild(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> doc;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertToString</span><span class="params">(Document xml)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Transformer transformer = TransformerFactory.newInstance().newTransformer();</span><br><span class="line">            StreamResult result = <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> StringWriter());</span><br><span class="line">            DOMSource source = <span class="keyword">new</span> DOMSource(xml);</span><br><span class="line">            transformer.transform(source, result);</span><br><span class="line">            <span class="keyword">return</span> result.getWriter().toString();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (TransformerException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SqsMessage</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> String body;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SNS-是什么"><a href="#SNS-是什么" class="headerlink" title="SNS 是什么"></a>SNS 是什么</h1><p>SNS(Simple Notification Service)是发布/订阅主题的消息托管消息收发服务，可让您将发布者与订阅者分离。这对于用于微服务、分布式架构和无服务器应用程序的系统到系统消息收发很有用。</p><p><img src="https://image.xiaomo.info//blog/sns-how-works.png" alt="sns-how-works"></p><h1 id="SNS作用"><a href="#SNS作用" class="headerlink" title="SNS作用"></a>SNS作用</h1><p>Amazon SNS 可让您将推送通知发送到移动应用程序，将文本消息发送到电话号码，并将纯文本电子邮件发送到电子邮件地址。您可以通过主题来散发消息，或直接将消息发布到移动终端节点。</p><h1 id="SQS-VS-SNS-区别"><a href="#SQS-VS-SNS-区别" class="headerlink" title="SQS VS SNS 区别"></a>SQS VS SNS 区别</h1><p>Amazon SQS 和 Amazon SNS 都是 AWS 中的消息发送服务，但为开发人员提供了不同的优势。Amazon SNS 允许应用程序通过“推送”机制向多个订阅者发送时间关键型消息，并且无需定期检查或“轮询”更新。Amazon SQS 是供分布式应用程序使用的消息队列服务，它通过轮询模式交换消息，可用于解耦收发组件。Amazon SQS 使应用程序的分布式组件可以灵活地收发消息，并且不要求每个组件同时可用。</p><p>SNS重点在推送，需要接收组件同时可用</p><p>SQS更多是一个消息队列服务，需要使用组件通过轮询模式交换消息，不要求每个组件同时可用</p><h1 id="SNS用法"><a href="#SNS用法" class="headerlink" title="SNS用法"></a>SNS用法</h1><p><a href="https://docs.aws.amazon.com/zh_cn/sns/latest/dg/sns-dg.pdf#welcome" target="_blank" rel="noopener">pdf文档</a></p><h2 id="sns-命令行"><a href="#sns-命令行" class="headerlink" title="sns 命令行"></a>sns 命令行</h2><p>您可以使用 AWS Command Line Interface (AWS CLI) 访问 Amazon Simple Notification Service (Amazon SNS) 的功能。要列出 Amazon SNS 的 AWS CLI 命令，请使用以下命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws sns <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>在运行任何命令之前，请设置默认证书。有关更多信息，请参阅 <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-configure.html" target="_blank" rel="noopener">配置 AWS CLI</a>。</p><p>本主题显示执行 Amazon SNS 常见任务的 CLI 命令。</p><p><strong>主题</strong></p><ul><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-sns.html#cli-create-sns-topic" target="_blank" rel="noopener">创建主题</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-sns.html#cli-subscribe-sns-topic" target="_blank" rel="noopener">订阅主题</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-sns.html#cli-publish-sns-topic" target="_blank" rel="noopener">向主题发布</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-sns.html#cli-unsubscribe-sns-topic" target="_blank" rel="noopener">取消订阅主题</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-sns.html#cli-delete-sns-topic" target="_blank" rel="noopener">删除主题</a></li></ul><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><p>要创建主题，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/create-topic.html" target="_blank" rel="noopener"><code>create-topic</code></a> 命令并指定要分配给该主题的名称。</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">aws </span><span class="string">sns </span><span class="built_in">create-topic</span> <span class="built_in">--name</span> <span class="string">my-topic</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"TopicArn"</span>: <span class="string">"arn:aws:sns:us-west-2:123456789012:my-topic"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记下响应的 <code>TopicArn</code>，您随后将用它来发布消息。</p><h2 id="订阅主题"><a href="#订阅主题" class="headerlink" title="订阅主题"></a>订阅主题</h2><p>要订阅主题，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/subscribe.html" target="_blank" rel="noopener"><code>subscribe</code></a> 命令。</p><p>以下示例为 <code>notification-endpoint</code> 指定 <code>email</code> 协议和电子邮件地址。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>aws sns subscribe --topic-arn <span class="symbol">arn:</span><span class="symbol">aws:</span><span class="symbol">sns:</span>us-west<span class="number">-2:123456789012</span><span class="symbol">:my-topic</span> --protocol email --notification-endpoint saanvi<span class="variable">@example</span>.com</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"SubscriptionArn"</span>: <span class="string">"pending confirmation"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AWS 通过向您在 <code>subscribe</code> 命令中指定的地址发送电子邮件，立即发送确认电子邮件。电子邮件具有以下文本。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">You have chosen to subscribe to the <span class="string">topic:</span></span><br><span class="line"><span class="string">arn:</span><span class="string">aws:</span><span class="string">sns:</span>us-west<span class="number">-2</span>:<span class="number">123456789012</span>:my-topic</span><br><span class="line">To confirm <span class="keyword">this</span> subscription, click or visit the following link (If <span class="keyword">this</span> was <span class="keyword">in</span> error no action is necessary):</span><br><span class="line">Confirm subscription</span><br></pre></td></tr></table></figure><p>收件人单击<strong>确认订阅</strong>链接后，收件人的浏览器显示通知消息，信息类似于以下内容。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Subscription confirmed!</span><br><span class="line"></span><br><span class="line">You have subscribed saanvi@example.com <span class="keyword">to</span> <span class="keyword">the</span> topic:<span class="keyword">my</span>-topic.</span><br><span class="line"></span><br><span class="line">Your subscription's <span class="built_in">id</span> <span class="keyword">is</span>:</span><br><span class="line">arn:aws:sns:us-west<span class="number">-2</span>:<span class="number">123456789012</span>:<span class="keyword">my</span>-topic:<span class="number">1328</span>f057-de93<span class="number">-4</span>c15<span class="number">-512e-8</span>bb22EXAMPLE</span><br><span class="line"></span><br><span class="line">If <span class="keyword">it</span> was <span class="keyword">not</span> your intention <span class="keyword">to</span> subscribe, click here <span class="keyword">to</span> unsubscribe.</span><br></pre></td></tr></table></figure><h2 id="向主题发布"><a href="#向主题发布" class="headerlink" title="向主题发布"></a>向主题发布</h2><p>要将消息发送给某一主题的所有订阅者，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/publish.html" target="_blank" rel="noopener">publish</a> 命令。</p><p>以下示例向指定主题的所有订阅者发送消息“Hello World!”。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>aws sns publish --topic-arn <span class="symbol">arn:</span><span class="symbol">aws:</span><span class="symbol">sns:</span>us-west<span class="number">-2:123456789012</span><span class="symbol">:my-topic</span> --message <span class="string">"Hello World!"</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"MessageId"</span>: <span class="string">"4e41661d-5eec-5ddf-8dab-2c867EXAMPLE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本示例中，AWS 将包含文本“Hello World!”的电子邮件发送到 <code>saanvi@example.com</code>。</p><h2 id="取消订阅主题"><a href="#取消订阅主题" class="headerlink" title="取消订阅主题"></a>取消订阅主题</h2><p>要取消订阅某个主题并停止接收向该主题发布的消息，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/unsubscribe.html" target="_blank" rel="noopener">unsubscribe</a> 命令并指定您要取消订阅的主题的 ARN。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>aws sns unsubscribe --subscription-arn <span class="symbol">arn:</span><span class="symbol">aws:</span><span class="symbol">sns:</span>us-west<span class="number">-2:123456789012</span><span class="symbol">:my-topic</span><span class="symbol">:</span><span class="number">1328f057</span>-de93<span class="number">-4c15</span><span class="number">-512</span>e<span class="number">-8</span>bb22EXAMPLE</span><br></pre></td></tr></table></figure><p>要验证您已成功取消订阅，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/list-subscriptions.html" target="_blank" rel="noopener">list-subscriptions</a> 命令以确认该 ARN 不再显示在列表中。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ aws sns <span class="built_in">list</span>-subscriptions</span><br></pre></td></tr></table></figure><h2 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h2><p>要删除主题，请运行 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/delete-topic.html" target="_blank" rel="noopener">delete-topic</a> 命令。</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">aws </span><span class="string">sns </span><span class="built_in">delete-topic</span> <span class="built_in">--topic-arn</span> <span class="string">arn:aws:</span><span class="string">sns:us-</span><span class="string">west-2:123456789012:</span><span class="string">my-topic</span></span><br></pre></td></tr></table></figure><p>要验证 AWS 已成功删除主题，请使用 <a href="https://docs.aws.amazon.com/cli/latest/reference/sns/list-topics.html" target="_blank" rel="noopener">list-topics</a> 命令以确认该主题不再显示在列表中。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ aws sns <span class="built_in">list</span>-topics</span><br></pre></td></tr></table></figure><h2 id="java集成SNS-警告触发"><a href="#java集成SNS-警告触发" class="headerlink" title="java集成SNS(警告触发)"></a>java集成SNS(警告触发)</h2><p>gradle</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">implementation (<span class="string">"software.amazon.awssdk:sns:2.15.19"</span>)</span><br></pre></td></tr></table></figure><p>maven</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/software.amazon.awssdk/sns --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sns<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml配置文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">application.yml</span> <span class="string">配置文件</span></span><br><span class="line"><span class="attr">aws:</span></span><br><span class="line">  <span class="attr">credentials:</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">ap_northeast_1</span></span><br><span class="line">    <span class="attr">accessKey:</span> <span class="string">your</span> <span class="string">accessKey</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">you</span> <span class="string">secretKey</span></span><br></pre></td></tr></table></figure><p>spring 读取配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.amazonaws.regions.Regions;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"aws.credentials"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsCredentialsProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@NotNull</span> <span class="keyword">private</span> Regions region;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置用于开发的 AWS 凭证和区域 将读取到的配置文件填入snsClient中，注入一个bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiamo.property.AwsCredentialsProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sns.SnsClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsSnsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SnsClient <span class="title">snsClient</span><span class="params">(AwsCredentialsProperties awsCredentialsProperties)</span> </span>&#123;</span><br><span class="line">        AwsBasicCredentials credentials =</span><br><span class="line">                AwsBasicCredentials.create(</span><br><span class="line">                        awsCredentialsProperties.getAccessKey(),</span><br><span class="line">                        awsCredentialsProperties.getSecretKey());</span><br><span class="line"></span><br><span class="line">        StaticCredentialsProvider credentialsProvider =</span><br><span class="line">                StaticCredentialsProvider.create(credentials);</span><br><span class="line"></span><br><span class="line">        String name = awsCredentialsProperties.getRegion().getName();</span><br><span class="line">        <span class="keyword">return</span> SnsClient.builder()</span><br><span class="line">                .region(Region.of(name))</span><br><span class="line">                .credentialsProvider(credentialsProvider)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注册好的SnsClient调用api</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sns.SnsClient;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sns.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsSnsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> SnsClient snsClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主题</span></span><br><span class="line">  <span class="comment">//主题是通信通道的逻辑分组，可定义要将消息发送到的系统，例如，将消息发送到 AWS Lambda 和 HTTP Webhook。将消息发送到 Amazon SNS 之后，这些消息将分发到主题中定义的各个通道。这将使订阅者能够收到这些消息。要创建主题，请先构建一个 CreateTopicRequest 对象，并使用构建器中的 name() 方法设置主题的名称。然后，使用 SnsClient 的 createTopic() 方法将请求对象发送到 Amazon SNS。可以将此请求的结果作为 CreateTopicResponse 对象捕获，如以下代码段中所示。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createSNSTopic</span><span class="params">(String topicName)</span> </span>&#123;</span><br><span class="line">        CreateTopicResponse result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CreateTopicRequest request = CreateTopicRequest.builder().name(topicName).build();</span><br><span class="line"></span><br><span class="line">            result = snsClient.createTopic(request);</span><br><span class="line">            <span class="keyword">return</span> result.topicArn();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"create sns topic error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除主题</span></span><br><span class="line">   <span class="comment">// 要删除 Amazon SNS 主题，请先构建一个 DeleteTopicRequest 对象，并将主题的 ARN 设置为构建器中的 topicArn() 方法。然后，使用 SnsClient 的 deleteTopic() 方法将请求对象发送到 Amazon SNS。可以将此请求的结果作为 DeleteTopicResponse 对象捕获，如以下代码段中所示。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeleteTopicResponse <span class="title">deleteSNSTopic</span><span class="params">(String topicArn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DeleteTopicRequest request = DeleteTopicRequest.builder().topicArn(topicArn).build();</span><br><span class="line"></span><br><span class="line">            DeleteTopicResponse result = snsClient.deleteTopic(request);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"delete sns topic error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSNSAttributes</span><span class="params">(String topicArn)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GetSubscriptionAttributesRequest request =</span><br><span class="line">                    GetSubscriptionAttributesRequest.builder().subscriptionArn(topicArn).build();</span><br><span class="line"></span><br><span class="line">            GetSubscriptionAttributesResponse res = snsClient.getSubscriptionAttributes(request);</span><br><span class="line">            <span class="keyword">return</span> res.attributes();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"get sns attribute error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取sns属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSNSTopicAttributes</span><span class="params">(String topicArn)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GetTopicAttributesRequest request =</span><br><span class="line">                    GetTopicAttributesRequest.builder().topicArn(topicArn).build();</span><br><span class="line"></span><br><span class="line">            GetTopicAttributesResponse result = snsClient.getTopicAttributes(request);</span><br><span class="line">            <span class="keyword">return</span> result.attributes();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"get sns topic attributes error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Subscription&gt; <span class="title">listSNSSubscriptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListSubscriptionsRequest request = ListSubscriptionsRequest.builder().build();</span><br><span class="line">            ListSubscriptionsResponse result = snsClient.listSubscriptions(request);</span><br><span class="line">            <span class="keyword">return</span> result.subscriptions();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"list sns subscriptions error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 展示主题列表</span></span><br><span class="line">  <span class="comment">// 要检索现有 Amazon SNS 主题的列表，请构建一个 ListTopicsRequest 对象。然后，使用 SnsClient 的 listTopics() 方法将请求对象发送到 Amazon SNS。可以将此请求的结果作为 ListTopicsResponse 对象捕获。以下代码段输出请求的 HTTP 状态代码以及您的 Amazon SNS 主题的 Amazon 资源名称 (ARN) 列表。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Topic&gt; <span class="title">listSNSTopics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListTopicsRequest request = ListTopicsRequest.builder().build();</span><br><span class="line"></span><br><span class="line">            ListTopicsResponse result = snsClient.listTopics(request);</span><br><span class="line">            log.info(</span><br><span class="line">                    <span class="string">"Status was &#123;&#125; Topics :&#123;&#125;"</span>,</span><br><span class="line">                    result.sdkHttpResponse().statusCode(),</span><br><span class="line">                    result.topics());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result.topics();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"list sns topics error: &#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 发布消息</span></span><br><span class="line">  <span class="comment">// 如果您拥有一个主题并且已为该主题配置一个或多个终端节点，则可向该主题发布消息。首先，请构建一个 PublishRequest 对象。指定要发送的 message()，并指定要将消息发送到的主题的 ARN (topicArn())。然后，使用 SnsClient 的 publish() 方法将请求对象发送到 Amazon SNS。可以将此请求的结果作为 PublishResponse 对象捕获。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PublishResponse <span class="title">publishTopic</span><span class="params">(String message, String topicArn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PublishRequest request =</span><br><span class="line">                    PublishRequest.builder().message(message).topicArn(topicArn).build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> snsClient.publish(request);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"public topic error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅https</span></span><br><span class="line">  <span class="comment">// 创建主题后，您可以配置将哪些通信通道作为该主题的终端节点。在 Amazon SNS 收到消息后，消息将分发给这些终端节点。要将通信通道配置为主题的终端节点，请为该终端节点订阅主题。首先，请构建一个 SubscribeRequest 对象。将通信通道（例如，lambda 或 email）指定为 protocol()。将 endpoint() 设置为相关输出位置（例如，Lambda 函数的 ARN 或电子邮件地址），然后将要订阅的主题的 ARN 设置为 topicArn()。然后，使用 SnsClient 的 subscribe() 方法将请求对象发送到 SNS。可以将此请求的结果作为 SubscribeResponse 对象捕获。</span></span><br><span class="line"></span><br><span class="line">以下代码段说明如何为电子邮件地址订阅主题。</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscribeResponse <span class="title">subscribeHttps</span><span class="params">(String topicArn, String url)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SubscribeRequest request =</span><br><span class="line">                    SubscribeRequest.builder()</span><br><span class="line">                            .protocol(<span class="string">"https"</span>)</span><br><span class="line">                            .endpoint(url)</span><br><span class="line">                            .returnSubscriptionArn(<span class="keyword">true</span>)</span><br><span class="line">                            .topicArn(topicArn)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> snsClient.subscribe(request);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"subscribe https error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消订阅</span></span><br><span class="line">    <span class="comment">// 可以删除配置为主题的终端节点的通信通道。执行此操作后，主题本身将继续存在，并会将消息分发到为该主题配置的任何其他终端节点。要删除作为主题的终端节点的通信通道，请为该终端节点取消订阅主题。首先，请构建一个 UnsubscribeRequest 对象，并将要取消订阅的主题的 ARN 设置为 subscriptionArn()。然后，使用 SnsClient 的 unsubscribe() 方法将请求对象发送到 SNS。可以将此请求的结果作为 UnsubscribeResponse 对象捕获。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UnsubscribeResponse <span class="title">unSubscription</span><span class="params">(String subscriptionToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UnsubscribeRequest request =</span><br><span class="line">                    UnsubscribeRequest.builder().subscriptionArn(subscriptionToken).build();</span><br><span class="line">            <span class="keyword">return</span> snsClient.unsubscribe(request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SnsException e) &#123;</span><br><span class="line">            log.error(<span class="string">"unSubscription error:&#123;&#125;"</span>, e.awsErrorDetails().errorMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller中注入并测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiaomo.client.AwsSnsClient;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.sns.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/v1/sns"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"clear-cache"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> AwsSnsClient awsSnsClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的主题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 主题列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/listSNSTopics"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Topic&gt; <span class="title">listSNSTopics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.listSNSTopics();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的订阅</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订阅列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/listSnsSubscriptions"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Subscription&gt; <span class="title">listSnsSubscriptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.listSNSSubscriptions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建主题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> CreateTopicResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/createSnsTopic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CreateTopicResponse <span class="title">createSnsTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.createSNSTopic(TOPIC_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除主题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/deleteSnsTopic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteSnsTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DeleteTopicResponse deleteTopicResponse = awsSnsClient.deleteSNSTopic(TOPIC_NAME);</span><br><span class="line">        <span class="keyword">return</span> deleteTopicResponse.sdkHttpResponse().isSuccessful();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布主题 如果您拥有一个主题并且已为该主题配置一个或多个终端节点，则可向该主题发布消息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/publishTopic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PublishResponse <span class="title">publishTopic</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.publishTopic(message, TOPIC_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅 创建主题后，您可以配置将哪些通信通道作为该主题的终端节点。在 Amazon SNS 收到消息后，消息将分发给这些终端节点。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SubscribeResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/subscribe/&#123;url&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscribeResponse <span class="title">subscribe</span><span class="params">(@PathVariable String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.subscribeHttps(TOPIC_NAME, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订阅</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subscriptionToken subscriptionToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否取消成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/unSubscribe/&#123;subscriptionToken&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unSubscribe</span><span class="params">(@PathVariable String subscriptionToken)</span> </span>&#123;</span><br><span class="line">        UnsubscribeResponse unsubscribeResponse = awsSnsClient.unSubscription(subscriptionToken);</span><br><span class="line">        <span class="keyword">return</span> unsubscribeResponse.sdkHttpResponse().isSuccessful();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getSNSAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSNSAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.getSNSAttributes(TOPIC_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询主题的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 主题属性Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getSNSTopicAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSNSTopicAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> awsSnsClient.getSNSTopicAttributes(TOPIC_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Topic&gt; topics = awsSnsClient.listSNSTopics();</span><br><span class="line">        List&lt;Subscription&gt; subscriptions = awsSnsClient.listSNSSubscriptions();</span><br><span class="line">        System.out.println(topics);</span><br><span class="line">        System.out.println(subscriptions);</span><br><span class="line"></span><br><span class="line">        String topicName = <span class="string">"clearCacheTopic"</span>;</span><br><span class="line">        String topic = awsSnsClient.createSNSTopic(topicName).topicArn();</span><br><span class="line">        System.out.println(topic);</span><br><span class="line"></span><br><span class="line">        awsSnsClient.subscribeHttps(topicName, <span class="string">"xxx"</span>);</span><br><span class="line"></span><br><span class="line">        PublishResponse publishResponse = awsSnsClient.publishTopic(<span class="string">"hello"</span>, topicName);</span><br><span class="line">        <span class="keyword">if</span> (publishResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(publishResponse.messageId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnsubscribeResponse unsubscribeResponse = awsSnsClient.unSubscription(<span class="string">"1123"</span>);</span><br><span class="line">        <span class="keyword">if</span> (unsubscribeResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(unsubscribeResponse.sdkHttpResponse().statusCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; clearCacheTopic = awsSnsClient.getSNSAttributes(topicName);</span><br><span class="line">        <span class="keyword">for</span> (String value : clearCacheTopic.values()) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeleteTopicResponse deleteTopicResponse = awsSnsClient.deleteSNSTopic(topicName);</span><br><span class="line">        System.out.println(deleteTopicResponse.toString());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; attributes = awsSnsClient.getSNSTopicAttributes(topicName);</span><br><span class="line">        <span class="keyword">for</span> (String value : attributes.values()) &#123;</span><br><span class="line">            log.info(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Amazon-ElastiCache-for-Redis"><a href="#Amazon-ElastiCache-for-Redis" class="headerlink" title="Amazon ElastiCache for Redis"></a>Amazon ElastiCache for Redis</h2><p>Amazon ElastiCache for Redis 是速度超快的内存数据存储，能够提供亚毫秒级延迟来支持 Internet 范围内的实时应用程序。适用于 Redis 的 ElastiCache 基于开源 Redis 构建，可与 Redis API 兼容，能够与 Redis 客户端配合工作，并使用开放的 Redis 数据格式来存储数据。自我管理型 Redis 应用程序可与适用于 Redis 的 ElastiCache 无缝配合使用，无需更改任何代码。适用于 Redis 的 ElastiCache 兼具开源 Redis 的速度、简单性和多功能性与 Amazon 的可管理性、安全性和可扩展性，能够在游戏、广告技术、电子商务、医疗保健、金融服务和物联网领域支持要求最严苛的实时应用程序。支持pub/sub模式。</p><h2 id="极致性能"><a href="#极致性能" class="headerlink" title="极致性能"></a>极致性能</h2><p>适用于 Redis 的 Amazon ElastiCache 可以用作内存数据存储，能够支持要求最严苛且需要亚毫秒级响应时间的应用程序。与基于磁盘的数据库（其中大多数操作都需要往返于磁盘）相比，内存数据存储可以管理数据内存，其速度比磁盘提高了一个数量级。它可以提供超快的性能，读取或写入操作的平均时间不到一毫秒，并支持集群内每秒数亿次的操作。ElastiCache 可为您提供经过优化的端到端硬件和软件堆栈，以实现超快的性能。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>从 Amazon ElastiCache for Redis 6 开始，ElastiCache 现在提供了创建和管理用户和用户组的功能，可用于为 Redis 命令设置基于角色的访问控制 (RBAC)。您现在可以在保持安全边界的同时简化架构，还可以利用精细访问控制来管理用户组。Amazon ElastiCache for Redis 支持 Amazon VPC，这使您能够将集群隔离在您为节点选择的 IP 范围内。ElastiCache 团队持续监控开源 Redis、操作系统和固件中已知的安全漏洞，以确保您的 Redis 环境安全无虞。它符合 PCI 和 HIPAA 要求，由 FedRAMP 授权，提供动态和静态加密（包括 AWS KMS 中存储的客户管理 CMK）以及 Redis AUTH 来实现安全的节点间通信，从而帮助保护个人身份识别信息 (PII) 等敏感数据的安全。</p><p>详细了解<a href="https://docs-aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html" target="_blank" rel="noopener">基于角色的访问控制 (RBAC) »</a>详细了解<a href="https://aws.amazon.com/elasticache/faqs/#What_is_VPC_Why_Amazon_ElastiCache" target="_blank" rel="noopener">适用于 ElastiCache 的 VPC »</a></p><h3 id="完全托管并已强化"><a href="#完全托管并已强化" class="headerlink" title="完全托管并已强化"></a>完全托管并已强化</h3><p>适用于 Redis 的 Amazon ElastiCache 是一项完全托管的服务。您无需执行硬件预置、软件修补、设置、配置、监控、故障恢复和备份等管理任务。ElastiCache 会持续监控您的集群，以保障您的 Redis 正常运行，使您可以集中精力开发更高价值的应用程序。其提供有关您 Redis 使用情况的详细监控指标，使您能够跟踪应用程序趋势并按需调整集群配置。ElastiCache 增加了自动写入限制、智能交换内存管理和故障转移增强功能，以便改进开源 Redis 的可用性和可管理性。详细了解<a href="https://aws.amazon.com/cn/elasticache/redis/faqs/" target="_blank" rel="noopener">适用于 Redis 的 Amazon ElastiCache »</a></p><h3 id="与-REDIS-兼容"><a href="#与-REDIS-兼容" class="headerlink" title="与 REDIS 兼容"></a>与 REDIS 兼容</h3><p>Redis 是一种得到广泛采用的内存数据存储，可用作数据库、缓存、消息代理、队列、会话存储和排行榜。Amazon ElastiCache for Redis 可与开源 Redis 数据格式、Redis API 兼容，并与 Redis 客户端配合使用。您可以<a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/OnlineMigration.html" target="_blank" rel="noopener">将自行管理的 Redis 工作负载迁移到 ElastiCache</a> for Redis，而无需更改任何代码。详细了解<a href="https://aws.amazon.com/redis" target="_blank" rel="noopener">开源 Redis »</a></p><h3 id="高度可用且可靠"><a href="#高度可用且可靠" class="headerlink" title="高度可用且可靠"></a>高度可用且可靠</h3><p>Amazon ElastiCache for Redis 支持 Redis 集群和非集群模式，能够通过自动故障转移支持提供高可用性，而自动故障转移支持是通过检测主节点故障和在最大限度降低影响的情况下将副本提升为主节点来实现的。它通过跨可用区支持只读副本来为应用程序提供读取可用性，以便在主节点忙于应对增加的工作负载时提供读取内容。适用于 Redis 的 ElastiCache 支持增强的故障转移逻辑，能够在 Redis 集群模式的大多数主节点不可用时支持自动故障转移。从 Redis 5.0.5 开始，启用了自动故障转移的群集可为所有计划的操作提供在线配置更改。详细了解 <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html" target="_blank" rel="noopener">ElastiCache 的自动故障转移 »</a></p><h3 id="轻松扩展"><a href="#轻松扩展" class="headerlink" title="轻松扩展"></a>轻松扩展</h3><p>借助 Amazon ElastiCache for Redis，您可以先从小规模起步，然后随应用程序的不断增多轻松扩展您的 Redis 数据 — 最终可扩展到一个内存数据高达 340 TB 的集群。它支持您将 Redis 集群环境扩展到 500 个节点和 500 个分片。它支持在线集群规模调整以扩展和缩减您的 Redis 集群，无需停机，可自动适应不断变化的需求。为扩展读取容量，ElastiCache 允许您跨多个可用区添加多达五个只读副本。为扩展写入容量，ElastiCache 支持 Redis 集群模式，这使您能够跨多个主节点对写入流量进行分区。详细了解<a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html" target="_blank" rel="noopener">扩展 ElastiCache »</a></p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>适用于 Redis 的 Amazon ElastiCache 非常适用于实时事务和分析处理使用案例，例如<a href="https://aws.amazon.com/cn/elasticache/redis/#Caching" target="_blank" rel="noopener">缓存</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Chat_and_Messaging" target="_blank" rel="noopener">聊天/消息收发</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Gaming_Leaderboards" target="_blank" rel="noopener">游戏排行榜</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Geospatial" target="_blank" rel="noopener">地理空间</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Machine_Learning" target="_blank" rel="noopener">机器学习</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Media_Streaming" target="_blank" rel="noopener">媒体流</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Queues" target="_blank" rel="noopener">队列</a>、<a href="https://aws.amazon.com/cn/elasticache/redis/#Real-time_Analytics" target="_blank" rel="noopener">实时分析</a>，以及<a href="https://aws.amazon.com/cn/elasticache/redis/#Session_Store" target="_blank" rel="noopener">会话存储</a>。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>适用于 Redis 的 Amazon ElastiCache 是实施高度可用且安全的分布式<a href="https://aws.amazon.com/blogs/database/caching-hudls-news-feed-with-amazon-elasticache-for-redis/" target="_blank" rel="noopener">内存中缓存</a>的上好选择，它可以降低访问延迟、提高吞吐量，并可以减轻关系数据库或 NoSQL 数据库和应用程序的负载。ElastiCache 能够以亚毫秒级响应时间为频繁请求的项目提供支持，并且无需增加昂贵的后端数据库，即可轻松扩展以满足更高负载的需求。数据库查询结果缓存、持久性会话缓存以及整页缓存都是适用于 Redis 的 ElastiCache 的常见缓存示例。了解如何利用适用于 Redis 的 ElastiCache 构建<a href="https://aws.amazon.com/blogs/database/latency-reduction-of-hybrid-architectures-with-amazon-elasticache/" target="_blank" rel="noopener">缓存应用程序</a>。</p><h3 id="聊天和消息传送"><a href="#聊天和消息传送" class="headerlink" title="聊天和消息传送"></a>聊天和消息传送</h3><p>适用于 Redis 的 Amazon ElastiCache 支持 PUB/SUB 标准功能和模式匹配。这使得适用于 Redis 的 ElastiCache 能够支持高性能的聊天室、实时评论流以及服务器相互通信。您也可以使用 PUB/SUB 基于发布的事件触发操作。了解如何利用适用于 Redis 的 ElastiCache <a href="https://aws.amazon.com/blogs/database/how-to-build-a-chat-application-with-amazon-elasticache-for-redis/" target="_blank" rel="noopener">构建聊天应用程序</a>。</p><h3 id="地理空间"><a href="#地理空间" class="headerlink" title="地理空间"></a>地理空间</h3><p>适用于 Redis 的 Amazon ElastiCache 提供专门构建的内存中数据结构和运算符，以便从规模和速度方面管理实时地理空间数据。您可以使用适用于 Redis 的 ElastiCache 向应用程序添加基于位置的功能，如驾驶时间、驾驶距离和兴趣点。了解如何利用适用于 Redis 的 ElastiCache <a href="https://aws.amazon.com/blogs/database/amazon-elasticache-utilizing-redis-geospatial-capabilities/" target="_blank" rel="noopener">构建地理空间应用程序</a>。</p><h3 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h3><p>适用于 Redis 的 Amazon ElastiCache 为您提供了快速的内存中数据存储，可快速构建和部署机器学习模型。适用于 Redis 的 ElastiCache 可用于以下使用案例，例如游戏和金融服务中的欺诈检测、广告技术中的实时竞价，以及共享约会和共享单车中的配对，它能够在几十毫秒内处理实时数据并做出决策。了解 Coffee Meets Bagel 如何使用 ElastiCache <a href="https://www.youtube.com/watch?v=_Aniee-XpSQ" target="_blank" rel="noopener">提供基于机器学习的实时约会建议</a>。</p><h3 id="媒体流"><a href="#媒体流" class="headerlink" title="媒体流"></a>媒体流</h3><p>适用于 Redis 的 Amazon ElastiCache 提供了一个快速的内存中数据存储，支持实时流使用案例。适用于 Redis 的 ElastiCache 可存储用于用户配置文件和查看历史记录的元数据、数百万用户的身份验证信息/令牌，以及清单文件，以便 CDN 能够将视频一次性流式传输到数百万移动和桌面用户。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>适用于 Redis 的 Amazon ElastiCache 提供了列表数据结构，可轻松实施轻量级持久队列。这类列表提供了原子操作和屏蔽功能，适用于各种需要可靠消息代理或循环表的应用程序。</p><h3 id="实时分析"><a href="#实时分析" class="headerlink" title="实时分析"></a>实时分析</h3><p>可将 Amazon ElastiCache for Redis 与流解决方案（例如 Apache Kafka 和 Amazon Kinesis）搭配使用来作为内存数据存储，从而以亚毫秒级延迟提取、处理和分析实时数据。ElastiCache 非常适合实时分析使用案例，比如社交媒体、广告定位、个性化及<a href="https://aws.amazon.com/blogs/database/managing-iot-and-time-series-data-with-amazon-elasticache-for-redis/" target="_blank" rel="noopener">物联网和时间序列数据分析</a>。</p><h2 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h2><p>Pub/Sub功能（means Publish, Subscribe）即发布及订阅功能。基于事件的系统中，Pub/Sub是目前广泛使用的通信模型，它采用事件作为基本的通信机制，提供大规模系统所要求的松散耦合的交互模式：订阅者(如客户端)以事件订阅的方式表达出它有兴趣接收的一个事件或一类事件；发布者(如服务器)可将订阅者感兴趣的事件随时通知相关订阅者。熟悉设计模式的朋友应该了解这与23种设计模式中的观察者模式极为相似。 同样,Redis的pub/sub是一种消息通信模式，主要的目的是解除消息发布者和消息订阅者之间的耦合,Redis作为一个pub/sub的server,在订阅者和发布者之间起到了消息路由的功能。</p><h2 id="Redis-pub-sub的实现"><a href="#Redis-pub-sub的实现" class="headerlink" title="Redis pub/sub的实现"></a>Redis pub/sub的实现</h2><p>Redis通过publish和subscribe命令实现订阅和发布的功能。订阅者可以通过subscribe向redis server订阅自己感兴趣的消息类型。redis将信息类型称为通道(channel)。当发布者通过publish命令向redis server发送特定类型的信息时，订阅该消息类型的全部订阅者都会收到此消息。</p><p><strong>Pub/Sub在java中的实现</strong></p><p>导入Redis驱动:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>gradle </p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'redis.clients'</span>, <span class="string">name:</span> <span class="string">'jedis'</span>, <span class="string">version:</span> <span class="string">'3.3.0'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.data'</span>, <span class="string">name:</span> <span class="string">'spring-data-redis'</span>, <span class="string">version:</span> <span class="string">'2.4.0'</span></span><br></pre></td></tr></table></figure><p>Redis驱动包提供了一个抽象类:JedisPubSub…继承这个类就完成了对客户端对订阅的监听。示例代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPubSub;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** redis发布订阅消息监听器 */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span> <span class="keyword">extends</span> <span class="title">JedisPubSub</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(String... channels)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.unsubscribe(channels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String... channels)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.subscribe(channels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">psubscribe</span><span class="params">(String... patterns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.psubscribe(patterns);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">punsubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.punsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">punsubscribe</span><span class="params">(String... patterns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.punsubscribe(patterns);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onMessage: channel[&#123;&#125;], message[&#123;&#125;]"</span>, channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onPMessage: pattern[&#123;&#125;], channel[&#123;&#125;], message[&#123;&#125;]"</span>, pattern, channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(String channel, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onSubscribe: channel[&#123;&#125;], subscribedChannels[&#123;&#125;]"</span>, channel, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPUnsubscribe</span><span class="params">(String pattern, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(</span><br><span class="line">                <span class="string">"onPUnsubscribe: pattern[&#123;&#125;], subscribedChannels[&#123;&#125;]"</span>, pattern, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPSubscribe</span><span class="params">(String pattern, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onPSubscribe: pattern[&#123;&#125;], subscribedChannels[&#123;&#125;]"</span>, pattern, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnsubscribe</span><span class="params">(String channel, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"channel:&#123;&#125; is been subscribed:&#123;&#125;"</span>, channel, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示,抽象类中存在的方法。分别表示</p><p>监听到订阅模式接受到消息时的回调 (onPMessage)</p><p>监听到订阅频道接受到消息时的回调 (onMessage )</p><p>订阅频道时的回调( onSubscribe )</p><p>取消订阅频道时的回调( onUnsubscribe )</p><p>订阅频道模式时的回调 ( onPSubscribe )</p><p>取消订阅模式时的回调( onPUnsubscribe )</p><p>配置Redis(RedisConfiguration)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiaomo.redis.CustomerInfoSubscriber;</span><br><span class="line"><span class="keyword">import</span> info.xiaomo.redis.RedisCustomerInfoPublisher;</span><br><span class="line"><span class="keyword">import</span> info.xiaomo.service.AppService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericToStringSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"info.xiaomo.redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppService appService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericToStringSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">messageListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> CustomerInfoSubscriber(appService));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">redisContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">        container.addMessageListener(messageListener(), topic());</span><br><span class="line">        container.setTaskExecutor(Executors.newFixedThreadPool(<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisCustomerInfoPublisher <span class="title">redisPublisher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCustomerInfoPublisher();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ChannelTopic <span class="title">webTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChannelTopic(<span class="string">"pubsub:clear-web-cache"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ChannelTopic <span class="title">authTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChannelTopic(<span class="string">"pubsub:clear-auth-cache"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pub端（RedisCustomerInfoPublisher）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCustomerInfoPublisher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ChannelTopic webApiTopic;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ChannelTopic authTopic;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishWebApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.convertAndSend(webApiTopic.getTopic(), RedisConst.clearWebCacheMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicAuth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.convertAndSend(authTopic.getTopic(), RedisConst.clearAuthCacheMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub端(CustomerInfoSubscriber)(注意直接在sub端使用@autowired的话会出现空指针)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerInfoSubscriber</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OAuthService oAuthService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(@NotNull Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Received &gt;&gt; &#123;&#125;, thread:&#123;&#125;"</span>, message, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> String(message.getBody()).equals(RedisConst.clearAuthCacheMessage)) &#123;</span><br><span class="line">            oAuthService.reloadClients();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sub接收到消息后，执行对应的操作</p><p>测试控制器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> info.xiaomo.redis.RedisCustomerInfoPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/admin/api/v2/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPubSubController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里的名字一定要和注入的名字一样</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RedisCustomerInfoPublisher redisPublisher;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在当前项目中pub，在当前项目中sub(既做发送方又做接收方)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"clearWebCache"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishWebApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisPublisher.publishWebApi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在当前项目中发送，在auth中接收（当前项目只做为服务方）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"clearAuthCache"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisPublisher.publicAuth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>服务端</p><p>在RedisConfig中要定义一个topic，然后对外提供一个public的接口，用户触发publish。</p><p>客户端</p><p>在RedisConfig定义一个topic,名字要和服务的中定义的名字一致才能订阅到。用户在服务端publish，客户端收到后在onMessage中做对应的处理。</p><p>即做服务端又做客户端</p><p>需要在RedisConfig中监听(subscribe)（客户端的工作），然后提供一个接口给用户触发publish，如果只是作为服务端的话不需要监听消息。</p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SSO用法</title>
      <link href="2020/awsSSo/"/>
      <url>2020/awsSSo/</url>
      
        <content type="html"><![CDATA[<p>aws sso ( AWS Single Sign-On) 中文名叫做aws单点登陆，如果您的组织使用 AWS Single Sign-On (AWS SSO)，则您的用户可以登录到 Active Directory 或内置的 AWS SSO 目录，或<a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-idp.html" target="_blank" rel="noopener">其他连接到 AWS SSO 的 iDP</a>，并映射到使您能够运行 AWS CLI 命令的 AWS Identity and Access Management (IAM) 角色。无论您使用哪个 IdP，AWS SSO 都会将些区别抽象出来，并且它们都与下面所述的 AWS CLI 一起工作。</p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在企业发展初期，企业使用的系统很少，通常一个或者两个，每个系统都有自己的登录模块，运营人员每天用自己的账号登录，很方便。</p><p>但随着企业的发展，用到的系统随之增多，运营人员在操作不同的系统时，需要多次登录，而且每个系统的账号都不一样，这对于运营人员来说，很不方便。于是，就想到是不是可以在一个系统登录，其他系统就不用登录了呢？这就是单点登录要解决的问题。</p><p>单点登录英文全称Single Sign On，简称就是SSO。它的解释是：<strong>在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</strong></p><p><img src="https://image.xiaomo.info//blog/12540413-ddff3256817e357b.webp" alt="12540413-ddff3256817e357b"></p><p>如图所示，图中有3个系统，分别是Application1、Application2、和SSO。Application1、Application2没有登录模块，而SSO只有登录模块，没有其他的业务模块，当Application1、Application2需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了。这完全符合我们对单点登录（SSO）的定义。</p><h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><p>在说单点登录（SSO）的技术实现之前，我们先说一说普通的登录认证机制。</p><p><img src="https://image.xiaomo.info//blog/12540413-ddff3256817e357b.webp" alt="12540413-ddff3256817e357b"></p><p>如上图所示，我们在浏览器（Browser）中访问一个应用，这个应用需要登录，我们填写完用户名和密码后，完成登录认证。这时，我们在这个用户的session中标记登录状态为yes（已登录），同时在浏览器（Browser）中写入Cookie，这个Cookie是这个用户的唯一标识。下次我们再访问这个应用的时候，请求中会带上这个Cookie，服务端会根据这个Cookie找到对应的session，通过session来判断这个用户是否登录。如果不做特殊配置，这个Cookie的名字叫做jsessionid，值在服务端（server）是唯一的。</p><h2 id="同域下的单点登录"><a href="#同域下的单点登录" class="headerlink" title="同域下的单点登录"></a>同域下的单点登录</h2><p>一个企业一般情况下只有一个域名，通过二级域名区分不同的系统。比如我们有个域名叫做：a.com，同时有两个业务系统分别为：app1.a.com和app2.a.com。我们要做单点登录（SSO），需要一个登录系统，叫做：sso.a.com。</p><p>我们只要在sso.a.com登录，app1.a.com和app2.a.com就也登录了。通过上面的登陆认证机制，我们可以知道，在sso.a.com中登录了，其实是在sso.a.com的服务端的session中记录了登录状态，同时在浏览器端（Browser）的sso.a.com下写入了Cookie。那么我们怎么才能让app1.a.com和app2.a.com登录呢？这里有两个问题：</p><ul><li>  Cookie是不能跨域的，我们Cookie的domain属性是sso.a.com，在给app1.a.com和app2.a.com发送请求是带不上的。</li><li>  sso、app1和app2是不同的应用，它们的session存在自己的应用内，是不共享的。</li></ul><p><img src="https://image.xiaomo.info//blog/12540413-ddff3256817e357b.webp" alt="12540413-ddff3256817e357b">image</p><p>那么我们如何解决这两个问题呢？针对第一个问题，sso登录以后，可以将Cookie的域设置为顶域，即.a.com，这样所有子域的系统都可以访问到顶域的Cookie。<strong>我们在设置Cookie时，只能设置顶域和自己的域，不能设置其他的域。比如：我们不能在自己的系统中给baidu.com的域设置Cookie。</strong></p><p>Cookie的问题解决了，我们再来看看session的问题。我们在sso系统登录了，这时再访问app1，Cookie也带到了app1的服务端（Server），app1的服务端怎么找到这个Cookie对应的Session呢？这里就要把3个系统的Session共享，如图所示。共享Session的解决方案有很多，例如：Spring-Session。这样第2个问题也解决了。</p><p><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-configure-sso.html" target="_blank" rel="noopener">sso文档</a></p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aws command line 用法</title>
      <link href="2020/awsCommandLineUse/"/>
      <url>2020/awsCommandLineUse/</url>
      
        <content type="html"><![CDATA[<p>aws除了登陆到网页操作之外，还提供了api和命令行的操作方式。本文介绍了aws cli命令行工具的安装，权限配置和s3相关命令。</p><a id="more"></a><h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><ol><li>  通过python环境安装</li></ol><p><code>pip install awscli</code></p><ol start="2"><li><p>pkg安装</p><p> <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/install-cliv2-mac.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/install-cliv2-mac.html</a></p></li></ol><h1 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h1><p><code>aws configure</code> 可以配置一个默认的账号权限,输入以下4个值对应在的配置</p><p>AWS Access Key ID [None]: <code>AKIAIOSFODNN7EXAMPLE</code>    </p><p>AWS Secret Access Key [None]: <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>    </p><p>Default region name [None]: <code>us-west-2</code>      <code>sdk里是下划线，命令行这里要用横线</code>  </p><p>Default output format [None]: <code>json</code> </p><p><code>Default output format</code> 指定结果的格式。可以是以下列表中的任何值。如果未指定输出格式，则默认使用 <code>json</code>。</p><ul><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-output.html#json-output" target="_blank" rel="noopener">json</a> – 输出采用 <a href="https://json.org/" target="_blank" rel="noopener">JSON</a> 字符串的格式。</li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-output.html#yaml-output" target="_blank" rel="noopener">yaml</a> – 输出采用 <a href="https://yaml.org/" target="_blank" rel="noopener">YAML</a> 字符串的格式。<em>（仅在 AWS CLI 版本 2 中可用。）</em></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-output.html#yaml-stream-output" target="_blank" rel="noopener">yaml-stream</a> – 输出被流式处理并采用 <a href="https://yaml.org/" target="_blank" rel="noopener">YAML</a> 字符串的格式。流式处理支持更快地处理大型数据类型。<em>（仅在 AWS CLI 版本 2 中可用。）</em></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-output.html#text-output" target="_blank" rel="noopener">text</a> – 输出采用多个制表符分隔字符串值行的格式。这对于将输出传递到文本处理器（如 <code>grep</code>、<code>sed</code> 或 <code>awk</code>）很有用。</li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-usage-output.html#table-output" target="_blank" rel="noopener">table</a> – 输出采用表格形式，使用字符 +|- 以形成单元格边框。它通常以“人性化”格式呈现信息，这种格式比其他格式更容易阅读，但从编程方面来讲不是那么有用。</li></ul><p><code>aws help</code>可以获取帮助信息</p><p><code>aws configure --profile produser</code> 配置别名后，可以同时配多个账号切换使用</p><p><code>aws s3 ls--profile produser</code> 可以查看对应账号的信息</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">aws configure <span class="comment">--profile produser</span></span><br><span class="line">AKIAI44QH8DHBEXAMPLE</span><br><span class="line">je7MtGbClwBF/<span class="number">2</span>Zp9Utk/h3yCo8nvbEXAMPLEKEY</span><br><span class="line">us-east<span class="number">-1</span></span><br><span class="line"><span class="built_in">text</span></span><br></pre></td></tr></table></figure><p>配置完之后会在~/.aws下生成2个文件 <code>credentials</code> 和 <code>config</code> ，配置的内容都在这里</p><p><strong><code>~/.aws/credentials</code></strong></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span>=AKIAIOSFODNN7EXAMPLE</span><br><span class="line"><span class="attr">aws_secret_access_key</span>=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br></pre></td></tr></table></figure><p><strong><code>~/.aws/config</code></strong></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">region</span>=us-west-<span class="number">2</span></span><br><span class="line"><span class="attr">output</span>=json</span><br></pre></td></tr></table></figure><p><code>aws configure list </code>可以查看所有配置的数据</p><h1 id="aws-s3用法"><a href="#aws-s3用法" class="headerlink" title="aws s3用法"></a>aws s3用法</h1><ul><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-before" target="_blank" rel="noopener">先决条件</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-buckets-creating" target="_blank" rel="noopener">创建存储桶</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-listing-buckets" target="_blank" rel="noopener">列出存储桶和对象</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-delete-buckets" target="_blank" rel="noopener">删除存储桶</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-delete-objects" target="_blank" rel="noopener">删除对象</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-move" target="_blank" rel="noopener">移动对象</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-copy" target="_blank" rel="noopener">复制对象</a></li><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-sync" target="_blank" rel="noopener">同步对象</a></li></ul><p>对应命令</p><ul><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/" target="_blank" rel="noopener"><code>aws s3</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/cp.html" target="_blank" rel="noopener"><code>aws s3 cp</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/mb.html" target="_blank" rel="noopener"><code>aws s3 mb</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/mv.html" target="_blank" rel="noopener"><code>aws s3 mv</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html" target="_blank" rel="noopener"><code>aws s3 ls</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/rb.html" target="_blank" rel="noopener"><code>aws s3 rb</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/rm.html" target="_blank" rel="noopener"><code>aws s3 rm</code></a></li><li>  <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html" target="_blank" rel="noopener"><code>aws s3 sync</code></a></li></ul><ul><li>  <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-param" target="_blank" rel="noopener">s3 命令的常用选项</a></li></ul><h3 id="acl-可选参数配置权限"><a href="#acl-可选参数配置权限" class="headerlink" title="acl 可选参数配置权限"></a>acl 可选参数配置权限</h3><ul><li>  以公共读的权限，复制本地文件到s3对应的目录下</li></ul><p><code>aws s3 cp ~/Downloads/a.png s3://cdn-g123/h5-g123/game/kemo/ogp.png --acl public-read</code></p><ul><li>  将本地文件夹同步到s3对应的目录下</li></ul><p><code>aws s3 sync . s3://my-bucket/path --acl public-read</code> </p><h2 id="标准-ACL"><a href="#标准-ACL" class="headerlink" title="标准 ACL"></a>标准 ACL</h2><p>Amazon S3 支持一系列预定义的授权，称为<em>标准 ACL</em>。每个标准 ACL 都有一组预定义的被授权者和许可。下表列出了一系列标准 ACL 和相关联的预定义授权。</p><table><thead><tr><th align="left">标准 ACL</th><th align="left">适用于</th><th align="left">添加到 ACL 的权限</th></tr></thead><tbody><tr><td align="left"><code>private</code></td><td align="left">存储桶和对象</td><td align="left">所有者将获得 <code>FULL_CONTROL</code>。其他人没有访问权限 (默认)。</td></tr><tr><td align="left"><code>public-read</code></td><td align="left">存储桶和对象</td><td align="left">所有者将获得 <code>FULL_CONTROL</code>。<code>AllUsers</code> 组 (参阅 <a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/acl-overview.html#specifying-grantee" target="_blank" rel="noopener">谁是被授权者？</a>) 将获得 <code>READ</code> 访问权限。</td></tr><tr><td align="left"><code>public-read-write</code></td><td align="left">存储桶和对象</td><td align="left">所有者将获得 <code>FULL_CONTROL</code>。<code>AllUsers</code> 组将获得 <code>READ</code> 和 <code>WRITE</code> 访问权限。通常不建议在存储桶上授予该权限。</td></tr><tr><td align="left"><code>aws-exec-read</code></td><td align="left">存储桶和对象</td><td align="left">所有者获取 <code>FULL_CONTROL</code>。Amazon EC2 从 Amazon S3 获取对 <code>GET</code> Amazon 系统映像 (AMI) 捆绑的 <code>READ</code> 访问权限。</td></tr><tr><td align="left"><code>authenticated-read</code></td><td align="left">存储桶和对象</td><td align="left">所有者将获得 <code>FULL_CONTROL</code>。<code>AuthenticatedUsers</code> 组将获得 <code>READ</code> 访问权限。</td></tr><tr><td align="left"><code>bucket-owner-read</code></td><td align="left">Object</td><td align="left">对象所有者将获得 <code>FULL_CONTROL</code>。存储桶拥有者将获得 <code>READ</code> 访问权限。如果您在创建存储桶时指定此标准 ACL，Amazon S3 将忽略它。</td></tr><tr><td align="left"><code>bucket-owner-full-control</code></td><td align="left">Object</td><td align="left">对象所有者和存储桶拥有者均可获得对对象的 <code>FULL_CONTROL</code>。如果您在创建存储桶时指定此标准 ACL，Amazon S3 将忽略它。</td></tr><tr><td align="left"><code>log-delivery-write</code></td><td align="left">存储桶</td><td align="left"><code>LogDelivery</code> 组将获得针对存储桶的 <code>WRITE</code> 和 <code>READ_ACP</code> 许可。有关日志的更多信息，请参阅 (<a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/ServerLogs.html" target="_blank" rel="noopener">Amazon S3 服务器访问日志记录</a>)。</td></tr></tbody></table><h1 id="最后leader推荐了一个客户端"><a href="#最后leader推荐了一个客户端" class="headerlink" title="最后leader推荐了一个客户端"></a>最后leader推荐了一个客户端</h1><p><a href="https://cyberduck.io/" target="_blank" rel="noopener">cyberduck</a> 小黄鸭它不香吗,用个鬼的命令行啊。</p><p>(<a href="https://dl.acronis.com/u/software-defined/html/AcronisCyberInfrastructure_3_5_users_guide_zh-CN/_images/stor_image50.png" target="_blank" rel="noopener">https://dl.acronis.com/u/software-defined/html/AcronisCyberInfrastructure_3_5_users_guide_zh-CN/_images/stor_image50.png</a>)</p><p><img src="https://image.xiaomo.info//blog/image-20201029190726465.png" alt="image-20201029190726465"></p><p>上传图片时需要执开启public-read权限，不然上传的图片是打不开的</p><p><img src="https://image.xiaomo.info//blog/image-20201029192409798.png" alt="image-20201029192409798"></p><p>使用教程：<a href="https://dl.acronis.com/u/software-defined/html/AcronisCyberInfrastructure_3_5_users_guide_zh-CN/accessing-s3/accessing-s3-with-cyberduck.html" target="_blank" rel="noopener">通过 CyberDuck 访问 S3 存储</a></p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue框架状态管理之vuex</title>
      <link href="2020/vueFrameworkVuex/"/>
      <url>2020/vueFrameworkVuex/</url>
      
        <content type="html"><![CDATA[<p>作为一个全沾攻城狮，需要会的东西实在太多了。虽然思路都大同小异，但是对于不同的框架，架构和使用的api都有着不小的区别，还是需要花费点时间学习一下，今天要记录的是便是管理vue状态的框架vuex。</p><a id="more"></a><h1 id="vuex是什么"><a href="#vuex是什么" class="headerlink" title="vuex是什么"></a>vuex是什么</h1><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">vuex</a>是一个状态管理框架，也可以叫做数据共享框架。它能够创建一个独立于组件之外的一个共享数据仓储，将需要的数据放在store当中，当需要用到数据的组件通过this.$store.state.xxx获取 。</p><h1 id="不使用vuex的现状"><a href="#不使用vuex的现状" class="headerlink" title="不使用vuex的现状"></a>不使用vuex的现状</h1><p>父向子传值: v-bind，子组件通过props接收。   </p><p>子向父传值: $emit()发射自定义事件, 父组件用v-on监听事件。  </p><p>不相干组件传值，eventbus实现。 接收方用$on,传递方用$emit()   </p><p>此种方式只能在小型项目中使用，当需要大量组件需要传值时，会通过其他不相干的组件层层传递，导致组件之间耦合严重,维护相当吃力。</p><h1 id="使用vuex有什么好处"><a href="#使用vuex有什么好处" class="headerlink" title="使用vuex有什么好处"></a>使用vuex有什么好处</h1><p>vuex创建的state是独立于组件的，能够解藕组件。</p><p>集中管理数据，易于维护。</p><p>共享数据,存储和获取都非常便捷。</p><p>state中的数据都是响应式的，引用state的组件能够实时同步UI</p><p> 存储原则：一般来说将需要共享的数据放在state中，私有的数据放在组件的data中。但是也可以将所有数据都放在state中，这要看个人和项目组的的开发习惯。</p><h1 id="vuex组成部分"><a href="#vuex组成部分" class="headerlink" title="vuex组成部分"></a>vuex组成部分</h1><p>解构注意事项： state和getter本质上是属性，所以解构的时候是放在computed中，actions和mutactions是方法，所以解构是要放在methods中。</p><h3 id="state（公共数据源，需要共享的数据都放在这里面）"><a href="#state（公共数据源，需要共享的数据都放在这里面）" class="headerlink" title="state（公共数据源，需要共享的数据都放在这里面）"></a>state（公共数据源，需要共享的数据都放在这里面）</h3><p>使用的时候: this.$store.state.count (this可以省略)</p><p>或者使用mapState解构为computed属性,使用哪种方法都可以</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">    ...mapState([</span><br><span class="line"><span class="actionscript"><span class="string">'count'</span></span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mutations-同步的修改state，mutations中不能使用异步操作"><a href="#mutations-同步的修改state，mutations中不能使用异步操作" class="headerlink" title="mutations(同步的修改state，mutations中不能使用异步操作)"></a>mutations(同步的修改state，mutations中不能使用异步操作)</h3><p>用setTimeoutt等异步操作会出错 ,异步操作需要放在action中</p><p>好处：在统一的地方对应，方便管理和维护</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">add (state) &#123;</span><br><span class="line">state.count++</span><br><span class="line">&#125;,</span><br><span class="line">addN (state, n) &#123;</span><br><span class="line">state.count += n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时</p><p>第一种</p><p><code>this.$store.commit(&#39;add&#39;)</code></p><p>如果想传递参数</p><p><code>this.$store.commit(&#39;addN&#39;，3)</code></p><p>第二种mapMutations (注意要放在<code>methods</code>中)</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span>  </span><br><span class="line"><span class="comment">/// 省略其他内容</span></span><br><span class="line">methods: &#123;  ...mapMutations([  <span class="string">'add'</span>, <span class="string">'addN'</span>  ])  &#125;</span><br></pre></td></tr></table></figure><h3 id="actions-异步的修改state，它不能直接操作state，需要调用mucations中的方法来操作"><a href="#actions-异步的修改state，它不能直接操作state，需要调用mucations中的方法来操作" class="headerlink" title="actions(异步的修改state，它不能直接操作state，需要调用mucations中的方法来操作)"></a>actions(异步的修改state，它不能直接操作state，需要调用mucations中的方法来操作)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    add (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    addN (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line">addAsync (context) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">addNAsync (context，n) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    context.commit(<span class="string">'addN'</span>,n)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用时:方式一</p><p>写一个方法，通过$store.dispatch这个action,想要传参数和mucation中写法一样</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handleAsyncAdd () &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'addAsync'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleAsyncAddN () &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'addNAsync'</span>,<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种使用方法,解构出来直接使用(注意要放在<code>methods</code>中)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">    <span class="string">'addAsync'</span>,</span><br><span class="line">    <span class="string">'addNAsync'</span></span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div @click=<span class="string">"addAsync"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="getters-用于对store中的数据进行加工形成新的数据，但不会影响store中的数据"><a href="#getters-用于对store中的数据进行加工形成新的数据，但不会影响store中的数据" class="headerlink" title="getters(用于对store中的数据进行加工形成新的数据，但不会影响store中的数据)"></a>getters(用于对store中的数据进行加工形成新的数据，但不会影响store中的数据)</h3><p>store的数据变化之后，getter中的数据也会变化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    showNum (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`当前最新的数量 <span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用时</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"addAsync"</span>&gt;</span></span><br><span class="line">    &#123;&#123;$store.getters.showNum&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种使用方法(注意要放在<code>computed</code>中)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">        <span class="string">'showNum'</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"addAsync"</span>&gt;</span></span><br><span class="line">    &#123;&#123;showNum&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="modules-对store进行模块划分"><a href="#modules-对store进行模块划分" class="headerlink" title="modules(对store进行模块划分)"></a>modules(对store进行模块划分)</h3><p>使用场景：当项目组中有多个人同时开发时，如果放在一个文件里面则会出现修改冲突，这里需要使用modules进行文件切分再组合。</p><p>目录结构：</p><img src="https://image.xiaomo.info//blog/image-20201028145155073.png" alt="image-20201028145155073" style="zoom:50%;"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> users <span class="keyword">from</span> <span class="string">'./users'</span></span><br><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">'./todos'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    users,</span><br><span class="line">    todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /store/todos/index.js</span></span><br><span class="line"><span class="keyword">import</span> todoStates <span class="keyword">from</span> <span class="string">'./todoStates'</span></span><br><span class="line"><span class="keyword">import</span> todoActions <span class="keyword">from</span> <span class="string">'./todoActions'</span></span><br><span class="line"><span class="keyword">import</span> todoMutations <span class="keyword">from</span> <span class="string">'./todoMutations'</span></span><br><span class="line"><span class="keyword">import</span> todoGetters <span class="keyword">from</span> <span class="string">'./todoGetters'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: todoStates,</span><br><span class="line">  mutations: todoMutations,</span><br><span class="line">  actions: todoActions,</span><br><span class="line">  getters: todoGetters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  /store/users.js</span></span><br><span class="line"><span class="keyword">import</span> userStates <span class="keyword">from</span> <span class="string">'./userStates'</span></span><br><span class="line"><span class="keyword">import</span> userActions <span class="keyword">from</span> <span class="string">'./userActions'</span></span><br><span class="line"><span class="keyword">import</span> userMutations <span class="keyword">from</span> <span class="string">'./userMutations'</span></span><br><span class="line"><span class="keyword">import</span> userGetters <span class="keyword">from</span> <span class="string">'./userGetters'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: userStates,</span><br><span class="line">  mutations: userMutations,</span><br><span class="line">  actions: userActions,</span><br><span class="line">  getters: userGetters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，解构的时候写法有区别。commit的时候需要加上模块名</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addTodo"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todoList"</span> <span class="attr">:key</span>=<span class="string">"todo.name"</span>&gt;</span></span><br><span class="line">            &#123;&#123;todo.name&#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line"><span class="javascript">      todoList: <span class="function"><span class="params">state</span> =&gt;</span> state.todos.todoList</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      addTodo (commit) &#123;</span><br><span class="line"><span class="actionscript">        commit(<span class="string">'todos/addTodo'</span>, <span class="string">'test'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用注解方式"><a href="#使用注解方式" class="headerlink" title="使用注解方式"></a>使用注解方式</h1><p>只有使用ts的环境才能使用注解方式,通过调研有以下两种方案。至于怎么选择，看实际项目的情况下，有的时候不一定有发言权，leader定哪个就用哪个吧。</p><ul><li>  <a href="https://github.com/championswimmer/vuex-module-decorators#readme" target="_blank" rel="noopener">vuex-module-decorators</a> ：  <a href="https://github.com/Armour/vue-typescript-admin-template/tree/minimal" target="_blank" rel="noopener">vue-typescript-admin-template</a>使用的解决方案</li><li>  <a href="https://github.com/ktsn/vuex-class" target="_blank" rel="noopener">vuex-class</a>：非官方维护，在 vue-class-component 基础上补充一定<code>vuex</code>支持（支持有限）</li></ul><h3 id="vuex-module-decorators-用法"><a href="#vuex-module-decorators-用法" class="headerlink" title="vuex-module-decorators 用法"></a>vuex-module-decorators 用法</h3><p><code>yarn add vuex-module-decorators</code></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule, Mutation, Action &#125; <span class="keyword">from</span> <span class="string">'vuex-module-decorators'</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Counter2 <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Mutation</span></span><br><span class="line">  increment(delta: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.count += delta</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Mutation</span></span><br><span class="line">  decrement(delta: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.count -= delta</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// action 'incr' commits mutation 'increment' when done with return value as payload</span></span><br><span class="line">  <span class="meta">@Action</span>(&#123; commit: <span class="string">'increment'</span> &#125;)</span><br><span class="line">  incr() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// action 'decr' commits mutation 'decrement' when done with return value as payload</span></span><br><span class="line">  <span class="meta">@Action</span>(&#123; commit: <span class="string">'decrement'</span> &#125;)</span><br><span class="line">  decr() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vuex-class用法"><a href="#vuex-class用法" class="headerlink" title="vuex-class用法"></a>vuex-class用法</h3><p><code>yarn add vuex-class</code></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  State,</span><br><span class="line">  Getter,</span><br><span class="line">  Action,</span><br><span class="line">  Mutation,</span><br><span class="line">  <span class="keyword">namespace</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vuex-class'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someModule = <span class="keyword">namespace</span>(<span class="string">'path/to/module'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComp <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@State</span>(<span class="string">'foo'</span>) stateFoo</span><br><span class="line">  <span class="meta">@State</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.bar) stateBar</span><br><span class="line">  <span class="meta">@Getter</span>(<span class="string">'foo'</span>) getterFoo</span><br><span class="line">  <span class="meta">@Action</span>(<span class="string">'foo'</span>) actionFoo</span><br><span class="line">  <span class="meta">@Mutation</span>(<span class="string">'foo'</span>) mutationFoo</span><br><span class="line">  <span class="meta">@someModule</span>.Getter(<span class="string">'foo'</span>) moduleGetterFoo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the argument is omitted, use the property name</span></span><br><span class="line">  <span class="comment">// for each state/getter/action/mutation type</span></span><br><span class="line">  <span class="meta">@State</span> foo</span><br><span class="line">  <span class="meta">@Getter</span> bar</span><br><span class="line">  <span class="meta">@Action</span> baz</span><br><span class="line">  <span class="meta">@Mutation</span> qux</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.stateFoo <span class="comment">// -&gt; store.state.foo</span></span><br><span class="line">    <span class="keyword">this</span>.stateBar <span class="comment">// -&gt; store.state.bar</span></span><br><span class="line">    <span class="keyword">this</span>.getterFoo <span class="comment">// -&gt; store.getters.foo</span></span><br><span class="line">    <span class="keyword">this</span>.actionFoo(&#123; value: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; store.dispatch('foo', &#123; value: true &#125;)</span></span><br><span class="line">    <span class="keyword">this</span>.mutationFoo(&#123; value: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; store.commit('foo', &#123; value: true &#125;)</span></span><br><span class="line">    <span class="keyword">this</span>.moduleGetterFoo <span class="comment">// -&gt; store.getters['path/to/module/foo']</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://juejin.im/post/6844904003633954829" target="_blank" rel="noopener">Vue &amp; TypeScript 初体验 - 使用Vuex (vuex-module-decorators)</a>    </p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情下的回日坎坷路</title>
      <link href="2020/backToJapan/"/>
      <url>2020/backToJapan/</url>
      
        <content type="html"><![CDATA[<p>背景介绍：熟悉小莫的应该知道，小莫在日本依旧从事着掉头发的工作。在去年过年前打算重温一下家乡，毅然决然请了半个月假（当时已经知道疫情，但是没想到的是这次影响居然大到我等凡人不可想象之境）。盼望着，盼望着，脱掉冬装换成春装，却依旧像一只只老鼠在这个魔幻的鼠年蹲在各自的小房子里。盼望着盼望着，历经重重艰难，回到了杭州，然而入馆限制却越来越厉害，一直持续到了8月。终于！！！！！可以迈上回日的坎坷之路了。</p><a id="more"></a><p>众所周知，日本入馆局从7.29日宣布：4.3号之前出境的长期签证可以回去了。但是！他是有条件滴….</p><ul><li>护照在留卡不可或缺</li><li>需要再入国确认书</li><li>日本规定格式的核酸检测证明<br>以上</li></ul><h1 id="再入国确认书"><a href="#再入国确认书" class="headerlink" title="再入国确认书"></a>再入国确认书</h1><p>去当地的入馆局申请，带上护照和签证<br>200大洋，8个工作日左右，可以邮寄（浙江地区，其他地区不详）<br><img src="https://oss.xiaomo.info/blog/toJapan.jpg"></p><h1 id="核酸检测证明（72小时以内）"><a href="#核酸检测证明（72小时以内）" class="headerlink" title="核酸检测证明（72小时以内）"></a>核酸检测证明（72小时以内）</h1><p>重要！！！！！<br>必须开日本大使馆提供的证明格式，有很多人到了日本因为证明格式不行导致相当大麻烦，具体参考 徐静波的文章 <a href="https://mp.weixin.qq.com/s/hIc-GqUXgY5fy8_TkFPKPA" target="_blank" rel="noopener">中国的核酸检测证明到了日本机场为啥不管用？</a><br><img src="https://oss.xiaomo.info/blog/china_certification.jpg"></p><h1 id="乘机经验分享"><a href="#乘机经验分享" class="headerlink" title="乘机经验分享"></a>乘机经验分享</h1><p>众所周知：目前国际航班价格升天，非富即贵者望票兴叹而不可得。但是！国内的机票是便宜的，并且！大连飞东京的票也是相对万元票也是便宜的。因此！从你在的地方飞大连周水子国际机场，出来找小黑店马杀鸡一晚，第二天神清气爽飞东京，NICE！</p><h1 id="乘机过程"><a href="#乘机过程" class="headerlink" title="乘机过程"></a>乘机过程</h1><p>特别提醒！<br>因为特殊时期检查繁琐，内容众多，效率低下，下，下不为例。反正就是提醒你早点去机场排队队队队队队队！！！</p><h1 id="上灰机"><a href="#上灰机" class="headerlink" title="上灰机"></a>上灰机</h1><ul><li>排队出示绿码</li><li>排队出示国务院行程卡</li><li>排队填写健康申报单</li><li>排队安检</li><li>排队办登机</li><li>排队测体温</li><li>排队再安检</li><li>排队登机</li><li>排队……算了上灰机了坐一会儿不排了</li></ul><h1 id="下灰机"><a href="#下灰机" class="headerlink" title="下灰机"></a>下灰机</h1><p>经历了天上3个小时的短暂休息，艰难的过程还在后面。如果国内的总结起来是排队排到怀疑人生，那么日本这边就是小板凳坐到欲哭无泪</p><ul><li>下鸡后经过长长的望眼欲不穿的走廊，坐上那整齐而又优雅的小板凳，一波一波的等待检阅（拿上证件过检时出示调查表，确认信息后等待核酸检测，这个表之后很长一段时间都用它）<br><img src="https://oss.xiaomo.info/blog/chair.jpg"></li><li>到新的地方坐上那心爱的小板凳，等待检察官给你发一个小管管，到属于自己的小格子疯狂喷水。啊不好意思，是吐吐沫。吐半管管之后拿去确认没问题就可以继续下一步</li><li>拿上绿色的回执小卡片，在新的检察官的引导下来到新的小板凳聚集地，坐上那茫茫众多属于你的你的小板凳开始漫长的等待，这篇攻略便是在小板凳上用我的爪机写出来的<br><img src="https://oss.xiaomo.info/blog/check_result.jpg"></li><li>听到叫号之后拿上小卡去取结果，会在一个结果受付房间拿结果，阴性可以得一张红色小卡片，拿到直接就可以去办入境审查了。<br><img src="https://oss.xiaomo.info/blog/check_certification.jpg"></li><li>办入境审查的时候把阴性成就卡片，护照，在留卡，再入国确认书，国内开的阴性证明交到审查管，然后在一个小房间等待，大概15分钟可以即可出关拿行李。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>之前听说出来之后会有审查官陪你到一直送上车并记录车牌号之后才会离开，我实际遇到的情况是审查管会问有没有人来接你，并不会跟着你。从你拿行李开始就和以前入境没有任何区别，但是有规定不能坐公共交通，万一查到，后果自负。</p><h1 id="转载请注明原文地址"><a href="#转载请注明原文地址" class="headerlink" title="转载请注明原文地址"></a>转载请注明原文地址</h1><p><a href="https://blog.xiaomo.info/2020/backToJapan/">https://blog.xiaomo.info/2020/backToJapan/</a></p>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity常见面试题</title>
      <link href="2020/unityInterviewQuestions/"/>
      <url>2020/unityInterviewQuestions/</url>
      
        <content type="html"><![CDATA[<p>算起来到现在为止面试的大多是游戏服务端或者web前端相关的类容，没有经历过一次正儿八经的Unity面试，通过面试题也可以侧面了解到Unity开发中有哪些常用的需要掌握的知识，因此搬运一篇号称“屎上最全”的博客当作备份。</p><a id="more"></a><h3 id="一．什么是渲染管道？"><a href="#一．什么是渲染管道？" class="headerlink" title="一．什么是渲染管道？"></a>一．什么是渲染管道？</h3><p>是指在显示器上为了显示出图像而经过的一系列必要操作。<br>渲染管道中的很多步骤，都要将几何物体从一个坐标系中变换到另一个坐标系中去。<br>主要步骤有：<br>本地坐标-&gt;视图坐标-&gt;背面裁剪-&gt;光照-&gt;裁剪-&gt;投影-&gt;视图变换-&gt;光栅化。</p><h3 id="二．如何优化内存？"><a href="#二．如何优化内存？" class="headerlink" title="二．如何优化内存？"></a>二．如何优化内存？</h3><p>有很多种方式，例如</p><ul><li>1.压缩自带类库；</li><li>2.将暂时不用的以后还需要使用的物体隐藏起来而不是直接Destroy掉；</li><li>3.释放AssetBundle占用的资源；</li><li>4.降低模型的片面数，降低模型的骨骼数量，降低贴图的大小；</li><li>5.使用光照贴图，使用多层次细节(LOD)，使用着色器(Shader)，使用预设(Prefab)。</li></ul><h3 id="三、动态加载资源的方式？-有时候也问区别，具体请百度"><a href="#三、动态加载资源的方式？-有时候也问区别，具体请百度" class="headerlink" title="三、动态加载资源的方式？(有时候也问区别，具体请百度)"></a>三、动态加载资源的方式？(有时候也问区别，具体请百度)</h3><ul><li>1.Resources.Load();</li><li>2.AssetBundle</li></ul><h3 id="四：什么是协同程序？"><a href="#四：什么是协同程序？" class="headerlink" title="四：什么是协同程序？"></a>四：什么是协同程序？</h3><p>在主线程运行的同时开启另一段逻辑处理，来协助当前程序的执行，协程很像多线程，但是不是多线程，Unity的协程实在每帧结束之后去检测yield的条件是否满足。<br>五：Unity3d中的碰撞器和触发器的区别？</p><p>碰撞器是触发器的载体，而触发器只是碰撞器身上的一个属性。当Is Trigger=false时，碰撞器根据物理引擎引发碰撞，产生碰撞的效果，可以调用OnCollisionEnter/Stay/Exit函数；当Is Trigger=true时，碰撞器被物理引擎所忽略，没有碰撞效果，可以调用OnTriggerEnter/Stay/Exit函数。如果既要检测到物体的接触又不想让碰撞检测影响物体移动或要检测一个物件是否经过空间中的某个区域这时就可以用到触发器</p><h3 id="六：物体发生碰撞的必要条件？"><a href="#六：物体发生碰撞的必要条件？" class="headerlink" title="六：物体发生碰撞的必要条件？"></a>六：物体发生碰撞的必要条件？</h3><p>两个物体都必须带有碰撞器（Collider），其中一个物体还必须带有Rigidbody刚体，而且必须是运动的物体带有Rigidbody脚本才能检测到碰撞。</p><h3 id="七：请简述ArrayList和List的主要区别？"><a href="#七：请简述ArrayList和List的主要区别？" class="headerlink" title="七：请简述ArrayList和List的主要区别？"></a>七：请简述ArrayList和List的主要区别？</h3><p>ArrayList存在不安全类型（ArrayList会把所有插入其中的数据都当做Object来处理） 装箱拆箱的操作（费时） List是接口，ArrayList是一个实现了该接口的类，可以被实例化</p><h3 id="八：如何安全的在不同工程间安全地迁移asset数据？三种方法"><a href="#八：如何安全的在不同工程间安全地迁移asset数据？三种方法" class="headerlink" title="八：如何安全的在不同工程间安全地迁移asset数据？三种方法"></a>八：如何安全的在不同工程间安全地迁移asset数据？三种方法</h3><ul><li>1.将Assets目录和Library目录一起迁移</li><li>2.导出包，export Package</li><li>3.用unity自带的assets Server功能</li></ul><h3 id="九：OnEnable、Awake、Start运行时的发生顺序？哪些可能在同一个对象周期中反复的发生"><a href="#九：OnEnable、Awake、Start运行时的发生顺序？哪些可能在同一个对象周期中反复的发生" class="headerlink" title="九：OnEnable、Awake、Start运行时的发生顺序？哪些可能在同一个对象周期中反复的发生"></a>九：OnEnable、Awake、Start运行时的发生顺序？哪些可能在同一个对象周期中反复的发生</h3><p>Awake –&gt;OnEnable-&gt;Start，OnEnable在同一周期中可以反复地发生。</p><h3 id="十：MeshRender中material和sharedmaterial的区别？"><a href="#十：MeshRender中material和sharedmaterial的区别？" class="headerlink" title="十：MeshRender中material和sharedmaterial的区别？"></a>十：MeshRender中material和sharedmaterial的区别？</h3><p>修改sharedMaterial将改变所有物体使用这个材质的外观，并且也改变储存在工程里的材质设置。不推荐修改由sharedMaterial返回的材质。如果你想修改渲染器的材质，使用material替代。</p><h3 id="十一：Unity提供了几种光源，分别是什么"><a href="#十一：Unity提供了几种光源，分别是什么" class="headerlink" title="十一：Unity提供了几种光源，分别是什么"></a>十一：Unity提供了几种光源，分别是什么</h3><p>四种。</p><ul><li>平行光：Directional Light</li><li>点光源：Point Light</li><li>聚光灯：Spot Light</li><li>区域光源：Area Light</li></ul><h3 id="十二：简述一下对象池，你觉得在FPS里哪些东西适合使用对象池"><a href="#十二：简述一下对象池，你觉得在FPS里哪些东西适合使用对象池" class="headerlink" title="十二：简述一下对象池，你觉得在FPS里哪些东西适合使用对象池"></a>十二：简述一下对象池，你觉得在FPS里哪些东西适合使用对象池</h3><p>对象池就存放需要被反复调用资源的一个空间，当一个对象回大量生成的时候如果每次都销毁创建会很费时间，通过对象池把暂时不用的对象放到一个池中（也就是一个集合），当下次要重新生成这个对象的时候先去池中查找一下是否有可用的对象，如果有的话就直接拿出来使用，不需要再创建，如果池中没有可用的对象，才需要重新创建，利用空间换时间来达到游戏的高速运行效果，在FPS游戏中要常被大量复制的对象包括子弹，敌人，粒子等</p><h3 id="十三：CharacterController和Rigidbody的区别"><a href="#十三：CharacterController和Rigidbody的区别" class="headerlink" title="十三：CharacterController和Rigidbody的区别"></a>十三：CharacterController和Rigidbody的区别</h3><p>Rigidbody具有完全真实物理的特性，Unity中物理系统最基本的一个组件，包含了常用的物理特性，而CharacterController可以说是受限的的Rigidbody，具有一定的物理效果但不是完全真实的，是Unity为了使开发者能方便的开发第一人称视角的游戏而封装的一个组件</p><h3 id="十四：简述prefab的用处"><a href="#十四：简述prefab的用处" class="headerlink" title="十四：简述prefab的用处"></a>十四：简述prefab的用处</h3><p>在游戏运行时实例化，prefab相当于一个模板，对你已经有的素材、脚本、参数做一个默认的配置，以便于以后的修改，同时prefab打包的内容简化了导出的操作，便于团队的交流。</p><h3 id="十五：请简述sealed关键字用在类声明时与函数声明时的作用"><a href="#十五：请简述sealed关键字用在类声明时与函数声明时的作用" class="headerlink" title="十五：请简述sealed关键字用在类声明时与函数声明时的作用"></a>十五：请简述sealed关键字用在类声明时与函数声明时的作用</h3><p>sealed修饰的类为密封类，类声明时可防止其他类继承此类，在方法中声明则可防止派生类重写此方法。</p><h3 id="十六：请简述private，public，protected，internal的区别"><a href="#十六：请简述private，public，protected，internal的区别" class="headerlink" title="十六：请简述private，public，protected，internal的区别"></a>十六：请简述private，public，protected，internal的区别</h3><ul><li>public：对任何类和成员都公开，无限制访问</li><li>private：仅对该类公开</li><li>protected：对该类和其派生类公开</li><li>internal：只能在包含该类的程序集中访问该类</li></ul><h3 id="十七：使用Unity3d实现2d游戏，有几种方式？"><a href="#十七：使用Unity3d实现2d游戏，有几种方式？" class="headerlink" title="十七：使用Unity3d实现2d游戏，有几种方式？"></a>十七：使用Unity3d实现2d游戏，有几种方式？</h3><ul><li>1.使用本身的GUI，在Unity4.6以后出现的UGUI</li><li>2.把摄像机的Projection(投影)值调为Orthographic(正交投影)，不考虑z轴；</li><li>3.使用2d插件，如：2DToolKit，和NGUI</li></ul><h3 id="十八：在物体发生碰撞的整个过程中，有几个阶段，分别列出对应的函数"><a href="#十八：在物体发生碰撞的整个过程中，有几个阶段，分别列出对应的函数" class="headerlink" title="十八：在物体发生碰撞的整个过程中，有几个阶段，分别列出对应的函数"></a>十八：在物体发生碰撞的整个过程中，有几个阶段，分别列出对应的函数</h3><p>三个阶段，1.OnCollisionEnter 2.OnCollisionStay 3.OnCollisionExit</p><h3 id="十九：Unity3d的物理引擎中，有几种施加力的方式，分别描述出来"><a href="#十九：Unity3d的物理引擎中，有几种施加力的方式，分别描述出来" class="headerlink" title="十九：Unity3d的物理引擎中，有几种施加力的方式，分别描述出来"></a>十九：Unity3d的物理引擎中，有几种施加力的方式，分别描述出来</h3><p>rigidbody.AddForce/AddForceAtPosition，都在rigidbody系列函数中。大家可以自己去查看一下rigidbody的API</p><h3 id="二十：什么叫做链条关节？"><a href="#二十：什么叫做链条关节？" class="headerlink" title="二十：什么叫做链条关节？"></a>二十：什么叫做链条关节？</h3><p>Hinge Joint，可以模拟两个物体间用一根链条连接在一起的情况，能保持两个物体在一个固定距离内部相互移动而不产生作用力，但是达到固定距离后就会产生拉力。</p><h3 id="二十一：物体自身旋转使用的函数？"><a href="#二十一：物体自身旋转使用的函数？" class="headerlink" title="二十一：物体自身旋转使用的函数？"></a>二十一：物体自身旋转使用的函数？</h3><p>Transform.Rotate()</p><h3 id="二十二：Unity3d提供了一个用于保存和读取数据的类-PlayerPrefs-，请列出保存和读取整形数据的函数"><a href="#二十二：Unity3d提供了一个用于保存和读取数据的类-PlayerPrefs-，请列出保存和读取整形数据的函数" class="headerlink" title="二十二：Unity3d提供了一个用于保存和读取数据的类(PlayerPrefs)，请列出保存和读取整形数据的函数"></a>二十二：Unity3d提供了一个用于保存和读取数据的类(PlayerPrefs)，请列出保存和读取整形数据的函数</h3><p>PlayerPrefs.SetInt() PlayerPrefs.GetInt()</p><h3 id="二十三：Unity3d脚本从唤醒到销毁有着一套比较完整的生命周期，请列出系统自带的几个重要的方法。"><a href="#二十三：Unity3d脚本从唤醒到销毁有着一套比较完整的生命周期，请列出系统自带的几个重要的方法。" class="headerlink" title="二十三：Unity3d脚本从唤醒到销毁有着一套比较完整的生命周期，请列出系统自带的几个重要的方法。"></a>二十三：Unity3d脚本从唤醒到销毁有着一套比较完整的生命周期，请列出系统自带的几个重要的方法。</h3><p>Awake——&gt;OnEnable–&gt;Start——&gt;Update——&gt;FixedUpdate——&gt;LateUpdate——&gt;OnGUI——&gt;OnDisable——&gt;OnDestroy</p><h3 id="二十四：物理更新一般放在哪个系统函数里？"><a href="#二十四：物理更新一般放在哪个系统函数里？" class="headerlink" title="二十四：物理更新一般放在哪个系统函数里？"></a>二十四：物理更新一般放在哪个系统函数里？</h3><p>FixedUpdate，每固定帧绘制时执行一次，和Update不同的是FixedUpdate是渲染帧执行，如果你的渲染效率低下的时候FixedUpdate调用次数就会跟着下降。FixedUpdate比较适用于物理引擎的计算，因为是跟每帧渲染有关。Update就比较适合做控制。</p><h3 id="二十五：在场景中放置多个Camera并同时处于活动状态会发生什么？"><a href="#二十五：在场景中放置多个Camera并同时处于活动状态会发生什么？" class="headerlink" title="二十五：在场景中放置多个Camera并同时处于活动状态会发生什么？"></a>二十五：在场景中放置多个Camera并同时处于活动状态会发生什么？</h3><p>游戏界面可以看到很多摄像机的混合。</p><h3 id="二十六：如何销毁一个UnityEngine-Object及其子类？"><a href="#二十六：如何销毁一个UnityEngine-Object及其子类？" class="headerlink" title="二十六：如何销毁一个UnityEngine.Object及其子类？"></a>二十六：如何销毁一个UnityEngine.Object及其子类？</h3><p>使用Destroy()方法;</p><h3 id="二十七：请描述为什么Unity3d中会发生在组件上出现数据丢失的情况"><a href="#二十七：请描述为什么Unity3d中会发生在组件上出现数据丢失的情况" class="headerlink" title="二十七：请描述为什么Unity3d中会发生在组件上出现数据丢失的情况"></a>二十七：请描述为什么Unity3d中会发生在组件上出现数据丢失的情况</h3><p>一般是组件上绑定的物体对象被删除了</p><h3 id="二十八：LOD是什么，优缺点是什么？"><a href="#二十八：LOD是什么，优缺点是什么？" class="headerlink" title="二十八：LOD是什么，优缺点是什么？"></a>二十八：LOD是什么，优缺点是什么？</h3><p>LOD(Level of detail)多层次细节，是最常用的游戏优化技术。它按照模型的位置和重要程度决定物体渲染的资源分配，降低非重要物体的面数和细节度，从而获得高效率的渲染运算。缺点是增加了内存。</p><h3 id="二十九：MipMap是什么，作用？"><a href="#二十九：MipMap是什么，作用？" class="headerlink" title="二十九：MipMap是什么，作用？"></a>二十九：MipMap是什么，作用？</h3><p>MipMapping：在三维计算机图形的贴图渲染中有常用的技术，为加快渲染进度和减少图像锯齿，贴图被处理成由一系列被预先计算和优化过的图片组成的文件，这样的贴图被称为MipMap。</p><h3 id="三十：请描述Interface与抽象类之间的不同"><a href="#三十：请描述Interface与抽象类之间的不同" class="headerlink" title="三十：请描述Interface与抽象类之间的不同"></a>三十：请描述Interface与抽象类之间的不同</h3><p>抽象类表示该类中可能已经有一些方法的具体定义，但接口就是公公只能定义各个方法的界面 ，不能具体的实现代码在成员方法中。类是子类用来继承的，当父类已经有实际功能的方法时该方法在子类中可以不必实现，直接引用父类的方法，子类也可以重写该父类的方法。实现接口的时候必须要实现接口中所有的方法，不能遗漏任何一个。</p><h3 id="三十一：-Net与Mono的关系？"><a href="#三十一：-Net与Mono的关系？" class="headerlink" title="三十一：.Net与Mono的关系？"></a>三十一：.Net与Mono的关系？</h3><p>mono是.net的一个开源跨平台工具，就类似java虚拟机，java本身不是跨平台语言，但运行在虚拟机上就能够实现了跨平台。.net只能在windows下运行，mono可以实现跨平台跑，可以运行于linux，Unix，Mac OS等。</p><h3 id="三十二：简述Unity3D支持的作为脚本的语言的名称"><a href="#三十二：简述Unity3D支持的作为脚本的语言的名称" class="headerlink" title="三十二：简述Unity3D支持的作为脚本的语言的名称"></a>三十二：简述Unity3D支持的作为脚本的语言的名称</h3><p>Unity的脚本语言基于Mono的.Net平台上运行，可以使用.NET库，这也为XML、数据库、正则表达式等问题提供了很好的解决方案。Unity里的脚本都会经过编译，他们的运行速度也很快。这三种语言实际上的功能和运行速度是一样的，区别主要体现在语言特性上。JavaScript、 C#、Boo</p><h3 id="三十三：U3D中用于记录节点空间几何信息的组件名称，及其父类名称"><a href="#三十三：U3D中用于记录节点空间几何信息的组件名称，及其父类名称" class="headerlink" title="三十三：U3D中用于记录节点空间几何信息的组件名称，及其父类名称"></a>三十三：U3D中用于记录节点空间几何信息的组件名称，及其父类名称</h3><p>Transform 父类是 Component</p><h3 id="三十四：向量的点乘、叉乘以及归一化的意义？"><a href="#三十四：向量的点乘、叉乘以及归一化的意义？" class="headerlink" title="三十四：向量的点乘、叉乘以及归一化的意义？"></a>三十四：向量的点乘、叉乘以及归一化的意义？</h3><ul><li>1.点乘描述了两个向量的相似程度，结果越大两向量越相似，还可表示投影</li><li>2.叉乘得到的向量垂直于原来的两个向量</li><li>3.标准化向量：用在只关系方向，不关心大小的时候<h3 id="三十五：为何大家都在移动设备上寻求U3D原生GUI的替代方案"><a href="#三十五：为何大家都在移动设备上寻求U3D原生GUI的替代方案" class="headerlink" title="三十五：为何大家都在移动设备上寻求U3D原生GUI的替代方案"></a>三十五：为何大家都在移动设备上寻求U3D原生GUI的替代方案</h3>不美观，OnGUI很耗费时间，效率不高，使用不方便</li></ul><h3 id="三十六：请简述如何在不同分辨率下保持UI的一致性"><a href="#三十六：请简述如何在不同分辨率下保持UI的一致性" class="headerlink" title="三十六：请简述如何在不同分辨率下保持UI的一致性"></a>三十六：请简述如何在不同分辨率下保持UI的一致性</h3><p>NGUI很好的解决了这一点，屏幕分辨率的自适应性，原理就是计算出屏幕的宽高比跟原来的预设的屏幕分辨率求出一个对比值，然后修改摄像机的size。UGUI通过锚点和中心点和分辨率也解决这个问题</p><h3 id="三十七：什么是LightMap？"><a href="#三十七：什么是LightMap？" class="headerlink" title="三十七：什么是LightMap？"></a>三十七：什么是LightMap？</h3><p>LightMap:就是指在三维软件里实现打好光，然后渲染把场景各表面的光照输出到贴图上，最后又通过引擎贴到场景上，这样就使物体有了光照的感觉。</p><h3 id="三十八：Unity和cocos2d的区别"><a href="#三十八：Unity和cocos2d的区别" class="headerlink" title="三十八：Unity和cocos2d的区别"></a>三十八：Unity和cocos2d的区别</h3><ul><li><ol><li>Unity3D支持C#、javascript等，cocos2d-x 支持c++、Html5、Lua等。</li></ol></li><li><ol start="2"><li>cocos2d 开源 并且免费</li></ol></li><li><ol start="3"><li>Unity3D支持iOS、Android、Flash、Windows、Mac、Wii等平台的游戏开发，cocos2d-x支持iOS、Android、WP等。</li></ol></li></ul><h3 id="三十九：C-和C-的区别？"><a href="#三十九：C-和C-的区别？" class="headerlink" title="三十九：C#和C++的区别？"></a>三十九：C#和C++的区别？</h3><p>简单的说：C### 与C++ 比较的话，最重要的特性就是C### 是一种完全面向对象的语言，而C++ 不是，另外C### 是基于IL 中间语言和.NET Framework CLR 的，在可移植性，可维护性和强壮性都比C++ 有很大的改进。C### 的设计目标是用来开发快速稳定可扩展的应用程序，当然也可以通过Interop 和Pinvoke 完成一些底层操作。更详细的区别大家可以参考这里</p><h3 id="四十：结构体和类有何区别？"><a href="#四十：结构体和类有何区别？" class="headerlink" title="四十：结构体和类有何区别？"></a>四十：结构体和类有何区别？</h3><p>结构体是一种值类型，而类是引用类型。（值类型、引用类型是根据数据存储的角度来分的）就是值类型用于存储数据的值，引用类型用于存储对实际数据的引用。那么结构体就是当成值来使用的，类则通过引用来对实际数据操作</p><h3 id="四十一：ref参数和out参数是什么？有什么区别？"><a href="#四十一：ref参数和out参数是什么？有什么区别？" class="headerlink" title="四十一：ref参数和out参数是什么？有什么区别？"></a>四十一：ref参数和out参数是什么？有什么区别？</h3><p>ref和out参数的效果一样，都是通过关键字找到定义在主函数里面的变量的内存地址，并通过方法体内的语法改变它的大小。不同点就是输出参数必须对参数进行初始化。ref必须初始化，out 参数必须在函数里赋值。ref参数是引用，out参数为输出参数。</p><h3 id="四十二：C-的委托是什么？有何用处？"><a href="#四十二：C-的委托是什么？有何用处？" class="headerlink" title="四十二：C#的委托是什么？有何用处？"></a>四十二：C#的委托是什么？有何用处？</h3><p>委托类似于一种安全的指针引用，在使用它时是当做类来看待而不是一个方法，相当于对一组方法的列表的引用。用处：使用委托使程序员可以将方法引用封装在委托对象内。然后可以将该委托对象传递给可调用所引用方法的代码，而不必在编译时知道将调用哪个方法。与C或C++中的函数指针不同，委托是面向对象，而且是类型安全的。</p><h3 id="四十三：C-中的排序方式有哪些？"><a href="#四十三：C-中的排序方式有哪些？" class="headerlink" title="四十三：C#中的排序方式有哪些？"></a>四十三：C#中的排序方式有哪些？</h3><p>选择排序，冒泡排序，快速排序，插入排序，希尔排序，归并排序</p><h3 id="四十四：射线检测碰撞物的原理是？"><a href="#四十四：射线检测碰撞物的原理是？" class="headerlink" title="四十四：射线检测碰撞物的原理是？"></a>四十四：射线检测碰撞物的原理是？</h3><p>射线是3D世界中一个点向一个方向发射的一条无终点的线，在发射轨迹中与其他物体发生碰撞时，它将停止发射 。</p><h3 id="四十五：Unity中，照相机的Clipping-Planes的作用是什么？调整Near、Fare两个值时，应该注意什么？"><a href="#四十五：Unity中，照相机的Clipping-Planes的作用是什么？调整Near、Fare两个值时，应该注意什么？" class="headerlink" title="四十五：Unity中，照相机的Clipping Planes的作用是什么？调整Near、Fare两个值时，应该注意什么？"></a>四十五：Unity中，照相机的Clipping Planes的作用是什么？调整Near、Fare两个值时，应该注意什么？</h3><p>剪裁平面 。从相机到开始渲染和停止渲染之间的距离。</p><h3 id="四十六：如何让已经存在的GameObject在LoadLevel后不被卸载掉？"><a href="#四十六：如何让已经存在的GameObject在LoadLevel后不被卸载掉？" class="headerlink" title="四十六：如何让已经存在的GameObject在LoadLevel后不被卸载掉？"></a>四十六：如何让已经存在的GameObject在LoadLevel后不被卸载掉？</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DontDestroyOnLoad(transform.gameObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四十七：请简述GC（垃圾回收）产生的原因，并描述如何避免？"><a href="#四十七：请简述GC（垃圾回收）产生的原因，并描述如何避免？" class="headerlink" title="四十七：请简述GC（垃圾回收）产生的原因，并描述如何避免？"></a>四十七：请简述GC（垃圾回收）产生的原因，并描述如何避免？</h3><p>GC回收堆上的内存<br>避免：</p><ul><li>1.减少new产生对象的次数</li><li>2.使用公用的对象（静态成员）</li><li>3.将String换为StringBuilder</li></ul><h3 id="四十八：反射的实现原理？"><a href="#四十八：反射的实现原理？" class="headerlink" title="四十八：反射的实现原理？"></a>四十八：反射的实现原理？</h3><p>审查元数据并收集关于它的类型信息的能力。实现原理：在运行时根据程序集及其中的类型得到元数据。下面是实现步骤：</p><ol><li>导入using System.Reflection;</li><li>Assembly.Load(“程序集”)加载程序集,返回类型是一个Assembly</li><li>得到程序集中所有类的名称</li></ol><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Type<span class="built_in"> type </span><span class="keyword">in</span> assembly.GetTypes())</span><br><span class="line">&#123;</span><br><span class="line">    string t = type.Name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Type type = assembly.GetType(“程序集.类名”);获取当前类的类型</li><li>Activator.CreateInstance(type); 创建此类型实例</li><li>MethodInfo mInfo = type.GetMethod(“方法名”);获取当前方法</li><li>m.Info.Invoke(null,方法参数);</li></ol><h3 id="四十九：简述四元数的作用，四元数对欧拉角的优点？"><a href="#四十九：简述四元数的作用，四元数对欧拉角的优点？" class="headerlink" title="四十九：简述四元数的作用，四元数对欧拉角的优点？"></a>四十九：简述四元数的作用，四元数对欧拉角的优点？</h3><p>四元数用于表示旋转<br>相对欧拉角的优点：<br>1.能进行增量旋转<br>2.避免万向锁<br>3.给定方位的表达方式有两种，互为负（欧拉角有无数种表达方式）</p><h3 id="五十：移动相机动作在哪个函数里，为什么在这个函数里？"><a href="#五十：移动相机动作在哪个函数里，为什么在这个函数里？" class="headerlink" title="五十：移动相机动作在哪个函数里，为什么在这个函数里？"></a>五十：移动相机动作在哪个函数里，为什么在这个函数里？</h3><p>LateUpdate，是在所有的update结束后才调用，比较适合用于命令脚本的执行。官网上例子是摄像机的跟随，都是所有的update操作完才进行摄像机的跟进，不然就有可能出现摄像机已经推进了，但是视角里还未有角色的空帧出现。</p><h3 id="五十一：GPU的工作原理"><a href="#五十一：GPU的工作原理" class="headerlink" title="五十一：GPU的工作原理"></a>五十一：GPU的工作原理</h3><p>简而言之，GPU的图形（处理）流水线完成如下的工作：（并不一定是按照如下顺序） </p><ul><li>顶点处理：这阶段GPU读取描述3D图形外观的顶点数据并根据顶点数据确定3D图形的形状及位置关系，建立起3D图形的骨架。在支持DX8和DX9规格的GPU中，这些工作由硬件实现的Vertex Shader（定点着色器）完成。 </li><li>光栅化计算：显示器实际显示的图像是由像素组成的，我们需要将上面生成的图形上的点和线通过一定的算法转换到相应的像素点。把一个矢量图形转换为一系列像素点的过程就称为光栅化。例如，一条数学表示的斜线段，最终被转化成阶梯状的连续像素点。 </li><li>纹理帖图：顶点单元生成的多边形只构成了3D物体的轮廓，而纹理映射（texture mapping）工作完成对多变形表面的帖图，通俗的说，就是将多边形的表面贴上相应的图片，从而生成“真实”的图形。TMU（Texture mapping unit）即是用来完成此项工作。 </li><li>像素处理：这阶段（在对每个像素进行光栅化处理期间）GPU完成对像素的计算和处理，从而确定每个像素的最终属性。在支持DX8和DX9规格的GPU中，这些工作由硬件实现的Pixel Shader（像素着色器）完成。 </li><li>最终输出：由ROP（光栅化引擎）最终完成像素的输出，1帧渲染完毕后，被送到显存帧缓冲区。</li><li>总结：GPU的工作通俗的来说就是完成3D图形的生成，将图形映射到相应的像素点上，对每个像素进行计算确定最终颜色并完成输出。</li></ul><h3 id="五十二：什么是渲染管道？"><a href="#五十二：什么是渲染管道？" class="headerlink" title="五十二：什么是渲染管道？"></a>五十二：什么是渲染管道？</h3><p>是指在显示器上为了显示出图像而经过的一系列必要操作。 渲染管道中的很多步骤，都要将几何物体从一个坐标系中变换到另一个坐标系中去。主要步骤有：<br>本地坐标-&gt;视图坐标-&gt;背面裁剪-&gt;光照-&gt;裁剪-&gt;投影-&gt;视图变换-&gt;光栅化</p><h3 id="五十三：如何优化内存？"><a href="#五十三：如何优化内存？" class="headerlink" title="五十三：如何优化内存？"></a>五十三：如何优化内存？</h3><p>有很多种方式，例如</p><ul><li>1.压缩自带类库；</li><li>2.将暂时不用的以后还需要使用的物体隐藏起来而不是直接Destroy掉；</li><li>3.释放AssetBundle占用的资源；</li><li>4.降低模型的片面数，降低模型的骨骼数量，降低贴图的大小；</li><li>5.使用光照贴图，使用多层次细节(LOD)，使用着色器(Shader)，使用预设(Prefab)。</li><li>6.代码中少产生临时变量</li></ul><h3 id="五十四：动态加载资源的方式？他们之间的区别"><a href="#五十四：动态加载资源的方式？他们之间的区别" class="headerlink" title="五十四：动态加载资源的方式？他们之间的区别"></a>五十四：动态加载资源的方式？他们之间的区别</h3><ul><li>1.Resources.Load();</li><li>2.AssetBundle<br>区别参考</li></ul><h3 id="五十五：请描述游戏动画有哪几种，以及其原理？"><a href="#五十五：请描述游戏动画有哪几种，以及其原理？" class="headerlink" title="五十五：请描述游戏动画有哪几种，以及其原理？"></a>五十五：请描述游戏动画有哪几种，以及其原理？</h3><p>主要有关节动画、骨骼动画、单一网格模型动画(关键帧动画)。<br>关节动画：把角色分成若干独立部分，一个部分对应一个网格模型，部分的动画连接成一个整体的动画，角色比较灵活，Quake2中使用这种动画；<br>骨骼动画，广泛应用的动画方式，集成了以上两个方式的优点，骨骼按角色特点组成一定的层次结构，有关节相连，可做相对运动，皮肤作为单一网格蒙在骨骼之外，决定角色的外观；<br>单一网格模型动画由一个完整的网格模型构成，在动画序列的关键帧里记录各个顶点的原位置及其改变量，然后插值运算实现动画效果，角色动画较真实。</p><h3 id="五十六：alpha-blend工作原理"><a href="#五十六：alpha-blend工作原理" class="headerlink" title="五十六：alpha blend工作原理"></a>五十六：alpha blend工作原理</h3><p>Alpha Blend 实现透明效果，不过只能针对某块区域进行alpha操作，透明度可设。</p><h3 id="五十七：写出光照计算中的diffuse的计算公式"><a href="#五十七：写出光照计算中的diffuse的计算公式" class="headerlink" title="五十七：写出光照计算中的diffuse的计算公式"></a>五十七：写出光照计算中的diffuse的计算公式</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">diffuse = Kd x colorLight x <span class="built_in">max</span>(<span class="built_in">N</span>*L,<span class="number">0</span>)；</span><br><span class="line">Kd 漫反射系数、colorLight 光的颜色、</span><br><span class="line"><span class="built_in">N</span> 单位法线向量、</span><br><span class="line">L 由点指向光源的单位向量、</span><br><span class="line">其中<span class="built_in">N</span>与L点乘，如果结果小于等于<span class="number">0</span>，则漫反射为<span class="number">0</span>。</span><br></pre></td></tr></table></figure><h3 id="五十八：两种阴影判断的方法、工作原理。"><a href="#五十八：两种阴影判断的方法、工作原理。" class="headerlink" title="五十八：两种阴影判断的方法、工作原理。"></a>五十八：两种阴影判断的方法、工作原理。</h3><ul><li>本影和半影：参考本影和半影</li><li>本影：景物表面上那些没有被光源直接照射的区域（全黑的轮廓分明的区域）。</li><li>半影：景物表面上那些被某些特定光源直接照射但并非被所有特定光源直接照射的区域（半明半暗区域）</li><li>工作原理：从光源处向物体的所有可见面投射光线，将这些面投影到场景中得到投影面，再将这些投影面与场景中的其他平面求交得出阴影多边形，保存这些阴影多边形信息，然后再按视点位置对场景进行相应处理得到所要求的视图（利用空间换时间，每次只需依据视点位置进行一次阴影计算即可，省去了一次消隐过程）</li></ul><h3 id="五十九：Vertex-Shader是什么，怎么计算？"><a href="#五十九：Vertex-Shader是什么，怎么计算？" class="headerlink" title="五十九：Vertex Shader是什么，怎么计算？"></a>五十九：Vertex Shader是什么，怎么计算？</h3><p>顶点着色器是一段执行在GPU上的程序，用来取代fixed pipeline中的transformation和lighting，Vertex Shader主要操作顶点。<br>Vertex Shader对输入顶点完成了从local space到homogeneous space（齐次空间）的变换过程，homogeneous space即projection space的下一个space。在这其间共有world transformation, view transformation和projection transformation及lighting几个过程。</p><h3 id="六十：下列代码在运行中会产生几个临时对象？"><a href="#六十：下列代码在运行中会产生几个临时对象？" class="headerlink" title="六十：下列代码在运行中会产生几个临时对象？"></a>六十：下列代码在运行中会产生几个临时对象？</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> a = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="string">"abc"</span>);</span><br><span class="line">a = (a.ToUpper() + <span class="string">"123"</span>).Substring(<span class="number">0</span>, <span class="number">2</span>); </span><br><span class="line">在C<span class="meta">#中第一行是会报错的（Java中倒是可行）。</span></span><br><span class="line">应该这样初始化：</span><br><span class="line"><span class="keyword">string</span> b = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;);</span><br></pre></td></tr></table></figure><p>答案为：5个临时对象</p><h3 id="六十一：下列代码在运行中会发生什么问题？如何避免？"><a href="#六十一：下列代码在运行中会发生什么问题？如何避免？" class="headerlink" title="六十一：下列代码在运行中会发生什么问题？如何避免？"></a>六十一：下列代码在运行中会发生什么问题？如何避免？</h3><figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">int</span>&gt; ls = <span class="keyword">new</span> <span class="keyword">List</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> item in ls)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item * item);</span><br><span class="line">    ls.Remove(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生运行时错误，在 ls.Remove(item)这行，因为foreach是只读的。不能一边遍历一边修改。</p><h3 id="六十二：Unity3D是否支持写成多线程程序？如果支持的话需要注意什么？"><a href="#六十二：Unity3D是否支持写成多线程程序？如果支持的话需要注意什么？" class="headerlink" title="六十二：Unity3D是否支持写成多线程程序？如果支持的话需要注意什么？"></a>六十二：Unity3D是否支持写成多线程程序？如果支持的话需要注意什么？</h3><p>仅能从主线程中访问Unity3D的组件，对象和Unity3D系统调用<br>支持：如果同时你要处理很多事情或者与Unity的对象互动小可以用thread,否则使用coroutine。<br>注意：C#中有lock这个关键字,以确保只有一个线程可以在特定时间内访问特定的对象</p><h3 id="六十三：Unity3D的协程和C-线程之间的区别是什么？"><a href="#六十三：Unity3D的协程和C-线程之间的区别是什么？" class="headerlink" title="六十三：Unity3D的协程和C#线程之间的区别是什么？"></a>六十三：Unity3D的协程和C#线程之间的区别是什么？</h3><p>多线程程序同时运行多个线程 ，而在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只在必要时才被挂起。除主线程之外的线程无法访问Unity3D的对象、组件、方法。<br>Unity3d没有多线程的概念，不过unity也给我们提供了StartCoroutine（协同程序）和LoadLevelAsync（异步加载关卡）后台加载场景的方法。 StartCoroutine为什么叫协同程序呢，所谓协同，就是当你在StartCoroutine的函数体里处理一段代码时，利用yield语句等待执行结果，这期间不影响主程序的继续执行，可以协同工作。</p><h3 id="六十四：矩阵相乘的意义及注意点"><a href="#六十四：矩阵相乘的意义及注意点" class="headerlink" title="六十四：矩阵相乘的意义及注意点"></a>六十四：矩阵相乘的意义及注意点</h3><p>用于表示线性变换：旋转、缩放、投影、平移、仿射<br>注意矩阵的蠕变：误差的积累</p><h3 id="六十五：为什么dynamic-font在unicode环境下优于static-font"><a href="#六十五：为什么dynamic-font在unicode环境下优于static-font" class="headerlink" title="六十五：为什么dynamic font在unicode环境下优于static font"></a>六十五：为什么dynamic font在unicode环境下优于static font</h3><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。<br>使用动态字体时，Unity将不会预先生成一个与所有字体的字符纹理。当需要支持亚洲语言或者较大的字体的时候，若使用正常纹理，则字体的纹理将非常大。</p><h3 id="六十六：当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"><a href="#六十六：当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？" class="headerlink" title="六十六：当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"></a>六十六：当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？</h3><p>穿透（碰撞检测失败）</p><h3 id="六十七：请简述OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义？"><a href="#六十七：请简述OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义？" class="headerlink" title="六十七：请简述OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义？"></a>六十七：请简述OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义？</h3><p>当物体是否可见切换之时。可以用于只需要在物体可见时才进行的计算。</p><h3 id="六十八：什么叫动态合批？跟静态合批有什么区别？"><a href="#六十八：什么叫动态合批？跟静态合批有什么区别？" class="headerlink" title="六十八：什么叫动态合批？跟静态合批有什么区别？"></a>六十八：什么叫动态合批？跟静态合批有什么区别？</h3><p>如果动态物体共用着相同的材质，那么Unity会自动对这些物体进行批处理。动态批处理操作是自动完成的，并不需要你进行额外的操作。<br>区别：动态批处理一切都是自动的，不需要做任何操作，而且物体是可以移动的，但是限制很多。静态批处理：自由度很高，限制很少，缺点可能会占用更多的内存，而且经过静态批处理后的所有物体都不可以再移动了。<br>参考</p><h3 id="六十九：简述StringBuilder和String的区别？"><a href="#六十九：简述StringBuilder和String的区别？" class="headerlink" title="六十九：简述StringBuilder和String的区别？"></a>六十九：简述StringBuilder和String的区别？</h3><ul><li>String是字符串常量。</li><li>StringBuffer是字符串变量 ，线程安全。</li><li>StringBuilder是字符串变量，线程不安全。</li><li>String类型是个不可变的对象，当每次对String进行改变时都需要生成一个新的String对象，然后将指针指向一个新的对象，如果在一个循环里面，不断的改变一个对象，就要不断的生成新的对象，所以效率很低，建议在不断更改String对象的地方不要使用String类型。</li><li>StringBuilder对象在做字符串连接操作时是在原来的字符串上进行修改，改善了性能。这一点我们平时使用中也许都知道，连接操作频繁的时候，使用StringBuilder对象。</li></ul><h3 id="七十：Unity3D-Shader分哪几种，有什么区别？"><a href="#七十：Unity3D-Shader分哪几种，有什么区别？" class="headerlink" title="七十：Unity3D Shader分哪几种，有什么区别？"></a>七十：Unity3D Shader分哪几种，有什么区别？</h3><p>表面着色器的抽象层次比较高，它可以轻松地以简洁方式实现复杂着色。表面着色器可同时在前向渲染及延迟渲染模式下正常工作。<br>顶点片段着色器可以非常灵活地实现需要的效果，但是需要编写更多的代码，并且很难与Unity的渲染管线完美集成。<br>固定功能管线着色器可以作为前两种着色器的备用选择，当硬件无法运行那些酷炫Shader的时，还可以通过固定功能管线着色器来绘制出一些基本的内容。</p><h3 id="七十一：已知strcpy函数的原型是：char-strcpy-char-strDest-const-char-strSrc-1-不调用库函数，实现strcpy函数。2-解释为什么要返回char"><a href="#七十一：已知strcpy函数的原型是：char-strcpy-char-strDest-const-char-strSrc-1-不调用库函数，实现strcpy函数。2-解释为什么要返回char" class="headerlink" title="七十一：已知strcpy函数的原型是：char * strcpy(char * strDest,const char * strSrc); 1.不调用库函数，实现strcpy函数。2.解释为什么要返回char *"></a>七十一：已知strcpy函数的原型是：char * strcpy(char * strDest,const char * strSrc); 1.不调用库函数，实现strcpy函数。2.解释为什么要返回char *</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> * strDest,<span class="keyword">const</span> <span class="keyword">char</span> * strSrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((strDest==<span class="literal">NULL</span>)||(strSrc==<span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Invalid argument(s)"</span>;</span><br><span class="line">    <span class="keyword">char</span> * strDestCopy=strDest;</span><br><span class="line">    <span class="keyword">while</span> ((*strDest++=*strSrc++)!=<span class="string">'\0'</span>);</span><br><span class="line">    <span class="keyword">return</span> strDestCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七十二：C-中四种访问修饰符是哪些？各有什么区别？"><a href="#七十二：C-中四种访问修饰符是哪些？各有什么区别？" class="headerlink" title="七十二：C#中四种访问修饰符是哪些？各有什么区别？"></a>七十二：C#中四种访问修饰符是哪些？各有什么区别？</h3><p>1.属性修饰符 2.存取修饰符 3.类修饰符 4.成员修饰符。<br>属性修饰符：</p><ul><li>Serializable：按值将对象封送到远程服务器。</li><li>STATread：是单线程套间的意思，是一种线程模型。</li><li>MATAThread：是多线程套间的意思，也是一种线程模型。<br>存取修饰符：</li><li>public：存取不受限制。</li><li>private：只有包含该成员的类可以存取。</li><li>internal：只有当前工程可以存取。</li><li>protected：只有包含该成员的类以及派生类可以存取。<br>类修饰符：</li><li>abstract：抽象类。指示一个类只能作为其它类的基类。</li><li>sealed：密封类。指示一个类不能被继承。理所当然，密封类不能同时又是抽象类，因为抽象总是希望被继承的。<br>成员修饰符：</li><li>abstract：指示该方法或属性没有实现。</li><li>sealed：密封方法。可以防止在派生类中对该方法的override（重载）。不是类的每个成员方法都可以作为密封方法密封方法，必须对基类的虚方法进行重载，提供具体的实现方法。所以，在方法的声明中，sealed修饰符总是和override修饰符同时使用。</li><li>delegate：委托。用来定义一个函数指针。C#中的事件驱动是基于delegate + event的。</li><li>const：指定该成员的值只读不允许修改。</li><li>event：声明一个事件。</li><li>extern：指示方法在外部实现。</li><li>override：重写。对由基类继承成员的新实现。</li><li>readonly：指示一个域只能在声明时以及相同类的内部被赋值。</li><li>static：指示一个成员属于类型本身，而不是属于特定的对象。即在定义后可不经实例化，就可使用。</li><li>virtual：指示一个方法或存取器的实现可以在继承类中被覆盖。<br>new：在派生类中隐藏指定的基类成员，从而实现重写的功能。 若要隐藏继承类的成员，请使用相同名称在派生类中声明该成员，并用 new 修饰符修饰它。</li></ul><h3 id="七十三：Heap与Stack有何区别？"><a href="#七十三：Heap与Stack有何区别？" class="headerlink" title="七十三：Heap与Stack有何区别？"></a>七十三：Heap与Stack有何区别？</h3><ul><li>1.heap是堆，stack是栈。</li><li>2.stack的空间由操作系统自动分配和释放，heap的空间是手动申请和释放的，heap常用new关键字来分配。</li><li>3.stack空间有限，heap的空间是很大的自由区。</li></ul><h3 id="七十四：值类型和引用类型有何区别？"><a href="#七十四：值类型和引用类型有何区别？" class="headerlink" title="七十四：值类型和引用类型有何区别？"></a>七十四：值类型和引用类型有何区别？</h3><p>1.值类型的数据存储在内存的栈中；引用类型的数据存储在内存的堆中，而内存单元中只存放堆中对象的地址。<br>2.值类型存取速度快，引用类型存取速度慢。<br>3.值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针或引用<br>4.值类型继承自System.ValueType，引用类型继承自System.Object<br>5.栈的内存分配是自动释放；而堆在.NET中会有GC来释放<br>6.值类型的变量直接存放实际的数据，而引用类型的变量存放的则是数据的地址，即对象的引用。</p><h3 id="七十五：协同程序的执行代码是什么？有何用处，有何缺点？"><a href="#七十五：协同程序的执行代码是什么？有何用处，有何缺点？" class="headerlink" title="七十五：协同程序的执行代码是什么？有何用处，有何缺点？"></a>七十五：协同程序的执行代码是什么？有何用处，有何缺点？</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Start</span><span class="params">()</span></span> &#123; </span><br><span class="line">    // 协同程序WaitAndPrint在Start函数内执行,可以视同于它与Start函数同步执行.</span><br><span class="line">    StartCoroutine(WaitAndPrint(<span class="number">2.0</span>)); </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"Before WaitAndPrint Finishes "</span> + Time.<span class="built_in">time</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WaitAndPrint</span> <span class="params">(waitTime : float)</span></span> &#123;</span><br><span class="line">    // 暂停执行waitTime秒</span><br><span class="line">    <span class="built_in">yield</span> WaitForSeconds (waitTime);</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"WaitAndPrint "</span>+ Time.<span class="built_in">time</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：一个协同程序在执行过程中,可以在任意位置使用yield语句。yield的返回值控制何时恢复协同程序向下执行。协同程序在对象自有帧执行过程中堪称优秀。协同程序在性能上没有更多的开销。<br>缺点：协同程序并非真线程，可能会发生堵塞。</p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年年终总结</title>
      <link href="2020/my2019Summary/"/>
      <url>2020/my2019Summary/</url>
      
        <content type="html"><![CDATA[<p>如果说2018年是工作之后的人生转折点的话，那么2019年这一年就是转折之后的习惯过程。从大学远离故乡，到毕业到沿海城市就业，再到去年来到东京,这一个个的决定无不是对自我挑战的过程，这期间伴随着阵痛，同时也伴随着成长。有的人习惯了熟悉的生活非常害怕改变，怕换工作，怕搬家，怕交新朋友。各种各样的改变都会对生活带来冲击，但也带来了新鲜感，还是要看自己怎么样来看待这种改变。</p><a id="more"></a><h3 id="进入华人派遣"><a href="#进入华人派遣" class="headerlink" title="进入华人派遣"></a>进入华人派遣</h3><p>来日本之前也算是搜集了不少的信息，经过了各种考量觉得进华人派遣公司是不是最优但当前的唯一选择。一般来说到日本做IT相关工作，如果没有日本留学经验，都会经历<code>华人派遣公司——&gt;日本大手派遣公司——&gt;个人事业主（可能跳过）——&gt;日本自社开发（在日外企）</code>这个过程，而我正处在这个初级阶段但不想长期处于初级阶段，所以为此也做了一些准备。</p><ul><li>2017年年底通过了Oracle java认证</li><li>2019年7月考取了日语能力测试N2证书</li><li>2019年8月获取日本自动车驾照</li><li>2019年11月参加了中国国家软件考试（软件设计师），但不幸没有通过，准备报2020年5月的软考</li><li>2019年12月参加了日语能力测试N1测试（2020年3月公布成绩）</li><li>学习Angular/Vue前端开发框架(Javascript/Typescript)</li><li>学习Unity3D</li></ul><p>但是，如果按照这个计划的话在日本转职至少要2次。日本是一个对跳槽容忍度比较低的国家，一份工作干不到2年就辞职会觉得相当不稳定，对找下份工作和申请永住签证都有一定的影响，所以之后可能会有一些不同的打算。</p><p>接下来的计划</p><ul><li>打算2020年参加日本IT考试 基本情報技術者試験</li><li>打算参加2020年5月的软考</li><li>学习Python以便于开发脚本工具/效率工具/游戏逻辑/AI/爬虫等</li><li>带老婆孩子在日本定居</li><li>申请高级人才签证之后转永住者签证（中国软考和日本IT考试获取证书有助于申请高级人才）</li><li>学习英语之后参加托业英语考试进入英语系外企游戏公司</li></ul><h3 id="面试游戏公司"><a href="#面试游戏公司" class="headerlink" title="面试游戏公司"></a>面试游戏公司</h3><p>在做了11个月的前端开发之后（首次从事前端商业项目开发，但受到领导好评），所在的项目也接近尾声。在寻找下个项目时优先挑选游戏行业的项目，因为在自己离开游戏行业后发现自己不是不喜欢游戏行业，反而是特别喜欢游戏行业所以越发的厌恶中国的圈钱式垃圾游戏。我从来不觉得贪玩蓝月是一个好玩的游戏，只是被资本运作圈钱的一个工具。从小接触到红白机和各种游戏充满了回忆，而这些游戏基本上都是日本开发出来的。所以我离开了待了3年的游戏公司，毅然来到日本。当时也的确厌倦了给垃圾页游换皮的工作内容，再加上自己工作这么多年自己无法独立开发出一个完整的应用（只会后端但前端技术不是很擅长），为了锻炼自己所以找了一个前端开发的工作。到现在来看，我丝毫不觉得这个决定有任何坏的影响。在这近一年的时间中学到了非常非常多前端开发的知识，弥补了自己不会前端的遗憾，也增强了自己的信心。接下来如果运气好能够遇到做游戏客户端开发的工作的话，那就太好了。</p><h3 id="面试日本自社公司"><a href="#面试日本自社公司" class="headerlink" title="面试日本自社公司"></a>面试日本自社公司</h3><p>申请了<code>geekly</code>,<code>doda</code>,<code>linkedbrain</code>的面谈，希望匹配到合适的自社游戏公司。听在日本做HR的朋友说，日本的游戏行业待遇相当不尽人意，他的一个应届毕业的朋友在做《只狼》的超牛逼的公司年收才给300万+，这着实有点打击了我，不过先面试看看情况吧。</p><h3 id="不同契约的区别"><a href="#不同契约的区别" class="headerlink" title="不同契约的区别"></a>不同契约的区别</h3><p>刚到日本的时候因为没有什么底气为了保险起见签了正社员的契约，它的区别就是在派遣公司如果一个项目结束之后第二个项目没接上（也就是说没有找到新项目）工资也照常发，但如果是契约社员的话待机的话每个月大概只有12万的待机费。个人当时感觉有点慌，所以选择了正社。但是之后在日本熟悉了，也拿到了N2的证书就转了契约社员。有人肯定会好奇我的动机，因为正社员公司会交保险和年金，各负担一半。但是我在的公司没有交年金，保险也是自己负担，契约的话到手的工资会高一些，所以就转成了契约。后来听前辈说契约社员的话签证更新的话比较难拿到3年以上的，这个我也找别的朋友确认过，没有统一的说话，但是长期待在华人派遣公司不是办法。至少也要向日本大手派遣公司努力，签个正社待遇也是不错的。</p>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经历了几场面试后的全球同服架构思考</title>
      <link href="2019/worldServerGame/"/>
      <url>2019/worldServerGame/</url>
      
        <content type="html"><![CDATA[<p>从自己的游戏从业经验来看，一直做的是滚服机制的游戏，当然也是因为我游戏从业经历不多。中国的网络游戏喜欢开小服，制造玩家矛盾，引起战斗，进而让用户心甘情愿充钱的氪金模式。日本的大部分游戏是做内容，所以基本上都是同服机制，但是因为知识水平受限面试表现并不尽如意，之后专门查资料研究了一番。</p><a id="more"></a><p>首先，游戏服务器是IO密集型服务器，它的主要瓶颈在网络IO，而不是CPU，这点要记住了。所以经常服务器问题都会出现在网络IO，带宽，数据库磁盘读写上面，而非CPU上面。</p><p>其实全球同服也就是大量在线，只是你看起来同服，而不是他本身就在同一个服务器上，或者同一个进程上，这是完全不现实的。一个好的服务器进程，能同时承载10k的游戏玩家(还依赖于游戏逻辑复杂度)已经不错了。其实要全球同服，就是堆服务器进程嘛。</p><ul><li>1.Gate: 首先要有一个(多个)Gate(网关)服务器，负责客户端连接及消息转发到GameServer(游戏服)（选服逻辑）,保持客户端到服务端的连接。没有任何逻辑，只做消息加密和解密，以及客户端和服务器消息的转发(相当于两者之间的桥梁).</li><li>2.GameServer: GameServer是主要的游戏进程,提供游戏逻辑功能(采用单进程(或者单线程)模型,游戏服务器的瓶颈从来不在CPU,所以只做逻辑功能的话单线程足够了,在这里没必要用多线程或多进程)。</li><li>3.DBManager: 实现数据库的读写，方便Game服务器异步读写数据库的数据(有些把数据库读写放在游戏服，没有单独的服务器，那恐怕游戏服单进程就不够用了)。</li><li>4.GameManager: 负责管理所有的GameServer，GameServer之间消息转发，提供广播到所有Game的功能。</li></ul><p>客户端连Gate，Gate连GameServer，GameServer连DBManager，GameManager管理所有的GameServer并通知所有的Gate。</p><p>除了GameManager只有一个，理论上Gate，GameServer，DBManager都可以扩展到多个实例，你要实现全球唯一服，理论上就是扩展GameServer，那么怎么让他们看起来在一个服呢？其实很简单，COC大多数都是单服玩法，只有交互玩法的时候你才能感受到它是同一个服。</p><p>主要讲讲GameServer，这是主要的处理服务器逻辑的地方，一般单进程就可以了，一个epoll_wait hold住全场，然后做分发，理论上cpu都能承载的住，而epoll能处理的上限，一般跟机器的内存有关，远大于1024，正常的也达到100k，当然考虑到逻辑的复杂度，一个实例一般处理的连接接近10k就可以了。<br>那怎么处理100k，1000k甚至更多了，那就多个实例，那这样还是唯一服吗？是的，至少可以看起来是，游戏自然有单人玩法和多人玩法，单人玩法自然自己在自己的服就可以了，谁也不知道是不是跟别人一个服。<br>当然有全服的排行榜，好友系统之类的怎么办呢，其实很简单，我们不是有GameManager吗，它就是负责做这事的，每当你发个好友请求，GameManager广播一条消息，然后如果有某个GameServer存在这个玩家，那就回应你，你们就可以相互通信了，更简单的想办法获取玩家的服务器ID号，直接通过GameManager转发给那个服务器，自然就可以通信了，就像在同一个服务器一样。<br>排行榜呢，最简单的，指定一个服务器，或者单独开辟一个服务器做排行榜，所有数据变动都通知这个服务器，然后服务器自然就能排行了，然后再广播。<br>双人战斗或者多人副本呢？<br>像COC这样的，掠夺战，我们当时的做法就是，直接搜到敌方，然后把自己的玩家，士兵军队等需要的数据序列化之后，传到对面的服务器去，反序列化，然后直接开打，打完再把数据传回来。<br>更多人的呢，那就方便点，再开辟一类服务器，叫BattleServer，专门负责多人玩法，副本玩法之类的，多人的时候，把所有的多人数据迁移到BattleServer，然后多人（副本玩法）结束的时候，再通过GameManager把数据迁移回原来的服务器。</p><p>这样看，其实全球唯一服也就没有那么高大上了。</p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语汉字速查表</title>
      <link href="2019/japanKannjiIndex/"/>
      <url>2019/japanKannjiIndex/</url>
      
        <content type="html"><![CDATA[<p>音读，训读，特殊读，平假名，片假名，王小明…..</p><a id="more"></a><ul><li>亜(あ)</li><li>哀(あい)</li><li>爱(あい)</li><li>悪(あく)</li><li>握(あく)</li><li>圧(あつ)</li><li>扱(あつかい)</li><li>安(あん)</li><li>暗(あん)</li><li>案(あん)</li><li>以(い)</li><li>位(くらい)</li><li>依(やすし)</li><li>伟(いさむ)</li><li>囲(かこい)</li><li>委(い)</li><li>威(い)</li><li>尉(い)</li><li>意(い)</li><li>慰(いさむ)</li><li>易(えき)</li><li>为(ため)</li><li>异(い)</li><li>移(うつり)</li><li>维(ゆい)</li><li>纬(い)</li><li>胃(い)</li><li>衣(ころも)</li><li>违(ちがい)</li><li>遗(い)</li><li>医(い)</li><li>井(せい)</li><li>域(いき)</li><li>育(いく)</li><li>一(いち)</li><li>壱(いち)</li><li>逸(すぐる)</li><li>稲(いね)</li><li>芋(いも)</li><li>印(いん)</li><li>员(いん)</li><li>因(いん)</li><li>姻(いん)</li><li>引(いん)</li><li>饮(いん)</li><li>院(いん)</li><li>阴(かげ)</li><li>隠(いん)</li><li>韵(いん)</li><li>右(みぎ)</li><li>宇(たか)</li><li>羽(はね)</li><li>雨(あめ)</li><li>涡(うず)</li><li>浦(うら)</li><li>运(うん)</li><li>云(くも)</li><li>営(えい)</li><li>影(かげ)</li><li>映(うつる)</li><li>栄(えい)</li><li>永(なが)</li><li>泳(およ)</li><li>英(えい)</li><li>卫(まもる)</li><li>咏(えい)</li><li>锐(はやし)</li><li>液(えき)</li><li>疫(えき)</li><li>益(えき)</li><li>駅(えき)</li><li>悦(えつ)</li><li>谒(えつ)</li><li>越(こし)</li><li>阅(えつ)</li><li>円(えん)</li><li>园(えん)</li><li>宴(えん)</li><li>延(えん)</li><li>援(えん)</li><li>沿(えん)</li><li>演(えん)</li><li>炎(ほのお)</li><li>烟(けむり)</li><li>猿(さる)</li><li>縁(えん)</li><li>远(えん)</li><li>铅(なまり)</li><li>塩(しお)</li><li>汚(きたな)</li><li>凹(ぼこ)</li><li>央(ひさし)</li><li>奥(おく)</li><li>往(おう)</li><li>応(おう)</li><li>押(おし)</li><li>横(よこ)</li><li>欧(おう)</li><li>殴(なぐ)</li><li>王(おう)</li><li>翁(おきな)</li><li>黄(き)</li><li>冲(おき)</li><li>亿(おく)</li><li>屋(や)</li><li>忆(おく)</li><li>乙(おつ)</li><li>卸(おろし)</li><li>恩(おん)</li><li>温(あつし)</li><li>穏(おん)</li><li>音(おん)</li><li>下(した)</li><li>化(か)</li><li>仮(かり)</li><li>何(なに)</li><li>価(あたい)</li><li>佳(よろし)</li><li>加(か)</li><li>可(か)</li><li>夏(なつ)</li><li>嫁(よめ)</li><li>家(いえ)</li><li>寡(やもめ)</li><li>科(か)</li><li>暇(ひま)</li><li>果(はたし)</li><li>架(か)</li><li>歌(うた)</li><li>河(かわ)</li><li>火(ひ)</li><li>祸(わざわい)</li><li>稼(かせぎ)</li><li>个(か)</li><li>花(はな)</li><li>荷(に)</li><li>华(はな)</li><li>菓(か)</li><li>课(か)</li><li>货(か)</li><li>过(か)</li><li>蚊(か)</li><li>我(われ)</li><li>画(が)</li><li>芽(め)</li><li>贺(が)</li><li>雅(が)</li><li>饿(が)</li><li>介(すけ)</li><li>会(かい)</li><li>解(かい)</li><li>回(かい)</li><li>块(かたまり)</li><li>壊(こわ)</li><li>快(かい)</li><li>怪(かい)</li><li>悔(くや)</li><li>懐(ふところ)</li><li>戒(かい)</li><li>拐(かい)</li><li>改(あらた)</li><li>械(かい)</li><li>海(うみ)</li><li>灰(はい)</li><li>界(かい)</li><li>皆(みな)</li><li>絵(え)</li><li>开(かい)</li><li>阶(かい)</li><li>贝(かい)</li><li>劾(がい)</li><li>外(がい)</li><li>害(がい)</li><li>慨(がい)</li><li>概(おおむね)</li><li>涯(がい)</li><li>街(まち)</li><li>该(がい)</li><li>垣(かき)</li><li>吓(かく)</li><li>各(かく)</li><li>拡(ひろむ)</li><li>格(かく)</li><li>核(かく)</li><li>壳(から)</li><li>获(え)</li><li>确(あきら)</li><li>获(ゆたか)</li><li>覚(さとる)</li><li>角(かど)</li><li>较(くら)</li><li>郭(くるわ)</li><li>阁(かく)</li><li>隔(へだ)</li><li>革(かわ)</li><li>学(がく)</li><li>岳(たけ)</li><li>楽(らく)</li><li>额(がく)</li><li>挂(かかり)</li><li>潟(かた)</li><li>割(わり)</li><li>喝(かつ)</li><li>括(くく)</li><li>活(かつ)</li><li>渇(かつ)</li><li>滑(なめら)</li><li>褐(かつ)</li><li>辖(かつ)</li><li>且(かつ)</li><li>株(かぶ)</li><li>刈(かり)</li><li>乾(いぬい)</li><li>冠(かん)</li><li>寒(かん)</li><li>刊(かん)</li><li>勘(かん)</li><li>勧(すすむ)</li><li>巻(かん)</li><li>唤(かん)</li><li>堪(かん)</li><li>完(かん)</li><li>官(かん)</li><li>寛(ひろし)</li><li>干(かん)</li><li>干(みき)</li><li>患(わずら)</li><li>感(かん)</li><li>惯(な)</li><li>憾(かん)</li><li>换(かん)</li><li>敢(かん)</li><li>棺(ひつぎ)</li><li>款(かん)</li><li>歓(かん)</li><li>汗(あせ)</li><li>汉(かん)</li><li>环(わ)</li><li>甘(かん)</li><li>监(らん)</li><li>看(み)</li><li>管(かん)</li><li>简(かん)</li><li>缓(ゆる)</li><li>缶(かん)</li><li>肝(きも)</li><li>舰(かん)</li><li>観(かん)</li><li>贯(ぬき)</li><li>还(かん)</li><li>鉴(かがみ)</li><li>间(あいだ)</li><li>闲(ひま)</li><li>関(せき)</li><li>陥(おちい)</li><li>馆(かん)</li><li>丸(まる)</li><li>含(ふくみ)</li><li>岸(きし)</li><li>眼(め)</li><li>岩(いわ)</li><li>顽(がん)</li><li>颜(かお)</li><li>愿(ねがい)</li><li>企(くわだ)</li><li>危(あぶ)</li><li>喜(よし)</li><li>器(うつわ)</li><li>基(もと)</li><li>奇(き)</li><li>寄(やどりき)</li><li>岐(ちまた)</li><li>希(まれ)</li><li>几(いく)</li><li>忌(いみ)</li><li>挥(き)</li><li>机(つくえ)</li><li>旗(はた)</li><li>既(き)</li><li>期(き)</li><li>棋(ぎ)</li><li>弃(す)</li><li>机(き)</li><li>帰(き)</li><li>気(き)</li><li>汽(き)</li><li>祈(いのり)</li><li>季(き)</li><li>纪(おさむ)</li><li>规(き)</li><li>记(き)</li><li>贵(き)</li><li>起(おこし)</li><li>轨(き)</li><li>辉(てる)</li><li>饥(う)</li><li>骑(き)</li><li>鬼(おに)</li><li>伪(ぎ)</li><li>仪(ぎ)</li><li>宜(ぎ)</li><li>戯(ぎ)</li><li>技(わざ)</li><li>拟(ぎ)</li><li>欺(ぎ)</li><li>犠(ぎ)</li><li>疑(うたが)</li><li>义(ぎ)</li><li>议(ぎ)</li><li>菊(きく)</li><li>吉(きち)</li><li>吃(いさむ)</li><li>诘(つめ)</li><li>却(きゃく)</li><li>客(きゃく)</li><li>脚(あし)</li><li>虐(ぎゃく)</li><li>逆(ぎゃく)</li><li>丘(おか)</li><li>久(ひさし)</li><li>休(きゅう)</li><li>及(およぶ)</li><li>吸(きゅう)</li><li>宫(みや)</li><li>弓(ゆみ)</li><li>急(きゅう)</li><li>救(すくい)</li><li>朽(きゅう)</li><li>求(もとむ)</li><li>泣(な)</li><li>球(たま)</li><li>究(きわむ)</li><li>穷(きゅう)</li><li>级(きゅう)</li><li>纠(ただす)</li><li>给(きゅう)</li><li>旧(きゅう)</li><li>牛(うし)</li><li>去(きょ)</li><li>居(きょ)</li><li>巨(きょ)</li><li>拒(こば)</li><li>拠(きょ)</li><li>挙(きょ)</li><li>虚(きょ)</li><li>许(もと)</li><li>距(きょ)</li><li>渔(りょう)</li><li>鱼(さかな)</li><li>享(すすむ)</li><li>京(きょう)</li><li>供(とも)</li><li>竞(せり)</li><li>共(とも)</li><li>凶(きょう)</li><li>协(きょう)</li><li>叫(きょう)</li><li>境(さかい)</li><li>峡(きょう)</li><li>强(つよし)</li><li>恐(おそ)</li><li>恭(やすし)</li><li>挟(はさ)</li><li>教(きょう)</li><li>桥(はし)</li><li>况(きょう)</li><li>狂(きょう)</li><li>狭(せま)</li><li>矫(きょう)</li><li>胸(むね)</li><li>胁(おびや)</li><li>兴(きょう)</li><li>郷(ごう)</li><li>镜(かがみ)</li><li>响(ひびき)</li><li>惊(おどろき)</li><li>仰(あおぎ)</li><li>凝(ぎょう)</li><li>暁(あかつき)</li><li>业(ぎょう)</li><li>局(きょく)</li><li>曲(きょく)</li><li>极(きょく)</li><li>玉(たま)</li><li>勤(つとむ)</li><li>均(たもつ)</li><li>斤(きん)</li><li>琴(こと)</li><li>禁(きん)</li><li>筋(すじ)</li><li>紧(みしと)</li><li>菌(きん)</li><li>襟(えり)</li><li>谨(すすむ)</li><li>近(こん)</li><li>金(きん)</li><li>吟(ぎん)</li><li>银(ぎん)</li><li>九(きゅう)</li><li>句(く)</li><li>区(く)</li><li>苦(く)</li><li>駆(く)</li><li>具(ぐ)</li><li>愚(ぐ)</li><li>虞(おそれ)</li><li>空(そら)</li><li>偶(ぐう)</li><li>遇(ぐう)</li><li>隅(すみ)</li><li>屈(くつ)</li><li>掘(ほり)</li><li>靴(くつ)</li><li>缲(くり)</li><li>桑(くわ)</li><li>勲(いさお)</li><li>君(きみ)</li><li>薫(かおる)</li><li>训(くん)</li><li>群(ぐん)</li><li>军(ぐん)</li><li>郡(ぐん)</li><li>系(かかり)</li><li>倾(なだれ)</li><li>刑(けい)</li><li>兄(あに)</li><li>启(けい)</li><li>型(かた)</li><li>契(ちぎり)</li><li>形(けい)</li><li>径(けい)</li><li>恵(めぐみ)</li><li>庆(けい)</li><li>憩(いこい)</li><li>掲(けい)</li><li>携(たずさ)</li><li>敬(けい)</li><li>景(かげ)</li><li>渓(けい)</li><li>系(けい)</li><li>経(きょう)</li><li>継(つぎ)</li><li>茎(くき)</li><li>蛍(ほたる)</li><li>计(けい)</li><li>警(けい)</li><li>軽(けい)</li><li>鶏(にわとり)</li><li>芸(げい)</li><li>迎(むかい)</li><li>鲸(くじら)</li><li>剧(げき)</li><li>撃(げき)</li><li>激(げき)</li><li>杰(すぐる)</li><li>欠(けつ)</li><li>决(けつ)</li><li>洁(きよし)</li><li>穴(あな)</li><li>结(むすぶ)</li><li>血(ち)</li><li>月(つき)</li><li>件(けん)</li><li>倹(けん)</li><li>健(けん)</li><li>兼(けん)</li><li>券(けん)</li><li>剣(けん)</li><li>圏(けん)</li><li>坚(けん)</li><li>嫌(いや)</li><li>建(けん)</li><li>宪(けん)</li><li>悬(かけ)</li><li>検(けん)</li><li>権(けん)</li><li>犬(いぬ)</li><li>献(けん)</li><li>研(けん)</li><li>绢(きぬ)</li><li>県(けん)</li><li>肩(かた)</li><li>见(み)</li><li>谦(けん)</li><li>贤(けん)</li><li>轩(のき)</li><li>遣(つか)</li><li>険(けん)</li><li>顕(けん)</li><li>験(しるし)</li><li>元(もと)</li><li>原(はら)</li><li>厳(げん)</li><li>幻(まぼろし)</li><li>弦(つる)</li><li>减(げん)</li><li>源(みなもと)</li><li>玄(げん)</li><li>现(うつつ)</li><li>言(げん)</li><li>限(きり)</li><li>个(こ)</li><li>古(いにしえ)</li><li>呼(こ)</li><li>固(かたむ)</li><li>孤(こ)</li><li>己(おのれ)</li><li>库(こ)</li><li>弧(こ)</li><li>戸(と)</li><li>故(ゆえ)</li><li>枯(かれ)</li><li>湖(みずうみ)</li><li>夸(ほこ)</li><li>雇(やとい)</li><li>顾(かえりみ)</li><li>鼓(つづみ)</li><li>五(ご)</li><li>互(たがい)</li><li>午(うま)</li><li>呉(くれ)</li><li>娯(ご)</li><li>后(ご)</li><li>御(お)</li><li>悟(さとる)</li><li>碁(ご)</li><li>语(ご)</li><li>误(ご)</li><li>护(ゆずる)</li><li>交(こう)</li><li>侯(こう)</li><li>候(こう)</li><li>光(ひかり)</li><li>公(こう)</li><li>功(こう)</li><li>効(こう)</li><li>厚(あつし)</li><li>口(くち)</li><li>向(むかい)</li><li>后(きさき)</li><li>坑(こう)</li><li>好(よしみ)</li><li>孔(あな)</li><li>孝(たかし)</li><li>工(こう)</li><li>巧(こう)</li><li>幸(さいわい)</li><li>広(ひろ)</li><li>康(やすし)</li><li>恒(つね)</li><li>慌(あわ)</li><li>抗(こう)</li><li>拘(かか)</li><li>控(ひかえ)</li><li>攻(こう)</li><li>更(さら)</li><li>校(こう)</li><li>构(かまえ)</li><li>江(え)</li><li>洪(こう)</li><li>港(みなと)</li><li>沟(みぞ)</li><li>甲(こう)</li><li>皇(すべらぎ)</li><li>硬(こう)</li><li>稿(こう)</li><li>红(べに)</li><li>绞(しぼり)</li><li>纲(つな)</li><li>耕(こう)</li><li>考(こう)</li><li>肯(こう)</li><li>航(こう)</li><li>荒(あら)</li><li>行(ぎょう)</li><li>衡(たいら)</li><li>讲(こう)</li><li>贡(みつぐ)</li><li>购(こう)</li><li>郊(こう)</li><li>酵(こう)</li><li>鉱(こう)</li><li>钢(こう)</li><li>降(たかし)</li><li>项(こう)</li><li>香(かおり)</li><li>高(たか)</li><li>刚(ごう)</li><li>号(ごう)</li><li>合(ごう)</li><li>拷(ごう)</li><li>豪(ごう)</li><li>克(かつみ)</li><li>刻(こく)</li><li>告(こく)</li><li>国(こく)</li><li>谷(こく)</li><li>酷(こく)</li><li>黒(くろ)</li><li>狱(ごく)</li><li>腰(こし)</li><li>骨(ほね)</li><li>込(こみ)</li><li>今(いま)</li><li>困(こま)</li><li>垦(ひらく)</li><li>婚(こん)</li><li>恨(うら)</li><li>恳(こん)</li><li>昆(こん)</li><li>根(ね)</li><li>混(こん)</li><li>绀(こん)</li><li>魂(たましい)</li><li>佐(さ)</li><li>唆(さ)</li><li>左(ひだり)</li><li>差(さ)</li><li>査(さ)</li><li>砂(すな)</li><li>诈(さ)</li><li>锁(くさり)</li><li>座(ざ)</li><li>债(さい)</li><li>催(もよお)</li><li>再(さい)</li><li>最(さい)</li><li>妻(つま)</li><li>宰(つかさ)</li><li>彩(いろどり)</li><li>才(さい)</li><li>采(さい)</li><li>栽(さい)</li><li>歳(とし)</li><li>済(すみ)</li><li>灾(わざわ)</li><li>砕(くだ)</li><li>祭(さい)</li><li>斎(いわい)</li><li>细(ほそ)</li><li>菜(な)</li><li>裁(さい)</li><li>载(みつる)</li><li>际(さい)</li><li>剤(ざい)</li><li>在(ざい)</li><li>材(ざい)</li><li>罪(つみ)</li><li>财(ざい)</li><li>坂(さか)</li><li>咲(さき)</li><li>崎(ざき)</li><li>作(さく)</li><li>削(けず)</li><li>榨(しぼ)</li><li>昨(さく)</li><li>策(さく)</li><li>索(さく)</li><li>错(さく)</li><li>桜(さくら)</li><li>册(さつ)</li><li>刷(さつ)</li><li>察(さつ)</li><li>撮(さつ)</li><li>擦(さつ)</li><li>札(さつ)</li><li>杀(ころ)</li><li>雑(ざつ)</li><li>皿(さら)</li><li>三(さん)</li><li>伞(かさ)</li><li>参(さん)</li><li>山(やま)</li><li>惨(さん)</li><li>散(さん)</li><li>桟(さん)</li><li>产(さん)</li><li>算(ざん)</li><li>蚕(かいこ)</li><li>賛(さん)</li><li>酸(さん)</li><li>暂(ざん)</li><li>残(ざん)</li><li>仕(つこう)</li><li>伺(うかがい)</li><li>使(つか)</li><li>刺(とげ)</li><li>司(つかさ)</li><li>史(し)</li><li>嗣(つぐ)</li><li>四(よん)</li><li>士(し)</li><li>始(はじめ)</li><li>姉(あね)</li><li>姿(すがた)</li><li>子(こ)</li><li>市(し)</li><li>师(し)</li><li>志(こころざし)</li><li>思(おもう)</li><li>指(ゆび)</li><li>支(ささ)</li><li>施(し)</li><li>旨(むね)</li><li>枝(えだ)</li><li>止(どめ)</li><li>死(し)</li><li>氏(し)</li><li>祉(し)</li><li>私(わたし)</li><li>糸(いと)</li><li>纸(かみ)</li><li>紫(むらさき)</li><li>肢(あし)</li><li>脂(あぶら)</li><li>至(いたる)</li><li>视(し)</li><li>词(し)</li><li>诗(し)</li><li>试(ためし)</li><li>志(し)</li><li>谘(とう)</li><li>资(し)</li><li>赐(たまもの)</li><li>雌(めす)</li><li>饲(か)</li><li>歯(は)</li><li>事(こと)</li><li>似(に)</li><li>侍(さむらい)</li><li>児(じ)</li><li>字(じ)</li><li>寺(てら)</li><li>慈(めぐむ)</li><li>持(もち)</li><li>时(とき)</li><li>次(つぎ)</li><li>滋(しげる)</li><li>治(おさむ)</li><li>玺(じ)</li><li>磁(じ)</li><li>示(しめす)</li><li>耳(みみ)</li><li>自(じ)</li><li>辞(じ)</li><li>式(しき)</li><li>识(さとし)</li><li>轴(じく)</li><li>七(しち)</li><li>执(もり)</li><li>失(しつ)</li><li>室(しつ)</li><li>湿(しつ)</li><li>漆(うるし)</li><li>疾(しつ)</li><li>质(しつ)</li><li>実(じつ)</li><li>芝(しば)</li><li>舎(しゃ)</li><li>写(しゃ)</li><li>射(い)</li><li>舍(しゃ)</li><li>赦(しゃ)</li><li>斜(しゃ)</li><li>煮(に)</li><li>社(しゃ)</li><li>者(しゃ)</li><li>谢(しゃ)</li><li>车(くるま)</li><li>遮(さえぎ)</li><li>蛇(へび)</li><li>邪(よこしま)</li><li>借(しゃく)</li><li>勺(しゃく)</li><li>尺(しゃく)</li><li>爵(たか)</li><li>酌(しゃく)</li><li>釈(せき)</li><li>若(わか)</li><li>寂(じゃく)</li><li>弱(じゃく)</li><li>主(しゅ)</li><li>取(とり)</li><li>守(かみ)</li><li>手(て)</li><li>朱(しゅ)</li><li>殊(こと)</li><li>狩(かり)</li><li>珠(たま)</li><li>种(たね)</li><li>趣(おもむき)</li><li>酒(さけ)</li><li>首(くび)</li><li>儒(じゅ)</li><li>受(うけ)</li><li>寿(ことぶき)</li><li>授(じゅ)</li><li>树(き)</li><li>需(もとめ)</li><li>囚(しゅう)</li><li>収(おさむ)</li><li>周(しゅう)</li><li>宗(しゅう)</li><li>就(しゅう)</li><li>州(しゅう)</li><li>修(おさむ)</li><li>愁(しゅう)</li><li>拾(おさむ)</li><li>秀(ひで)</li><li>秋(あき)</li><li>终(しゅう)</li><li>习(ならい)</li><li>臭(しゅう)</li><li>舟(ふね)</li><li>众(しゅう)</li><li>袭(おそい)</li><li>周(しゅう)</li><li>酬(しゅう)</li><li>集(しゅう)</li><li>丑(しゅう)</li><li>住(じゅう)</li><li>充(みつる)</li><li>十(じゅう)</li><li>従(じゅう)</li><li>柔(じゅう)</li><li>汁(しる)</li><li>渋(しぶ)</li><li>獣(けもの)</li><li>縦(たて)</li><li>重(しげる)</li><li>铳(じゅう)</li><li>叔(すえ)</li><li>宿(やど)</li><li>淑(よし)</li><li>祝(しゅく)</li><li>缩(ちぢみ)</li><li>粛(しゅく)</li><li>塾(じゅく)</li><li>熟(じゅく)</li><li>出(で)</li><li>术(じゅつ)</li><li>述(のべる)</li><li>俊(しゅん)</li><li>春(はる)</li><li>瞬(しゅん)</li><li>准(じゅん)</li><li>循(めぐる)</li><li>旬(しゅん)</li><li>殉(じゅん)</li><li>准(じゅん)</li><li>润(じゅん)</li><li>盾(たて)</li><li>纯(じゅん)</li><li>巡(じゅん)</li><li>遵(じゅん)</li><li>顺(じゅん)</li><li>処(ところ)</li><li>初(しょ)</li><li>所(しょ)</li><li>暑(しょ)</li><li>庶(ちかし)</li><li>绪(ちょ)</li><li>署(しょ)</li><li>书(しょ)</li><li>诸(もろ)</li><li>助(すけ)</li><li>叙(じょ)</li><li>女(おんな)</li><li>序(じょ)</li><li>徐(じょ)</li><li>除(じょ)</li><li>伤(きず)</li><li>偿(しょう)</li><li>胜(かつ)</li><li>匠(たくみ)</li><li>升(ます)</li><li>召(しょう)</li><li>商(しょう)</li><li>唱(うた)</li><li>奨(すすむ)</li><li>宵(よい)</li><li>将(しょう)</li><li>小(しょう)</li><li>少(しょう)</li><li>尚(なお)</li><li>床(ゆか)</li><li>彰(あきら)</li><li>承(うけたまわ)</li><li>抄(しょう)</li><li>招(しょう)</li><li>掌(てのひら)</li><li>升(のぼる)</li><li>昭(あきら)</li><li>晶(あきら)</li><li>松(まつ)</li><li>沼(ぬま)</li><li>消(け)</li><li>渉(わたる)</li><li>焼(やき)</li><li>焦(あせ)</li><li>照(てる)</li><li>症(しょう)</li><li>省(しょう)</li><li>硝(しょう)</li><li>礁(しょう)</li><li>祥(しょ)</li><li>称(しょう)</li><li>章(しょう)</li><li>笑(わらい)</li><li>妆(しょう)</li><li>绍(たすく)</li><li>肖(あやか)</li><li>冲(しょう)</li><li>讼(しょう)</li><li>证(あかし)</li><li>诏(みことのり)</li><li>详(しょう)</li><li>象(ぞう)</li><li>赏(しょう)</li><li>钟(かね)</li><li>障(さわ)</li><li>上(じょう)</li><li>丈(たけ)</li><li>乗(じょう)</li><li>冗(じょう)</li><li>剰(じょう)</li><li>城(しろ)</li><li>场(ば)</li><li>壌(ゆずる)</li><li>嬢(じょう)</li><li>常(つね)</li><li>情(じょう)</li><li>条(じょう)</li><li>浄(じょう)</li><li>状(じょう)</li><li>畳(たたみ)</li><li>蒸(むし)</li><li>譲(ゆずる)</li><li>醸(じょう)</li><li>锭(じょう)</li><li>嘱(しょく)</li><li>饰(かざり)</li><li>植(うえ)</li><li>殖(しょく)</li><li>织(おり)</li><li>职(しょく)</li><li>色(いろ)</li><li>触(しょく)</li><li>食(しょく)</li><li>辱(はじ)</li><li>伸(しん)</li><li>信(しん)</li><li>侵(おか)</li><li>唇(くちびる)</li><li>娠(しん)</li><li>寝(ね)</li><li>审(しん)</li><li>心(こころ)</li><li>慎(まき)</li><li>振(おさむ)</li><li>新(しん)</li><li>森(もり)</li><li>浸(ひた)</li><li>深(しん)</li><li>申(さる)</li><li>真(まこと)</li><li>神(かみ)</li><li>绅(しん)</li><li>臣(しん)</li><li>薪(たきぎ)</li><li>亲(おや)</li><li>诊(み)</li><li>身(み)</li><li>辛(しん)</li><li>进(すすむ)</li><li>针(はり)</li><li>震(しん)</li><li>人(じん)</li><li>仁(じん)</li><li>刃(は)</li><li>寻(ひろ)</li><li>甚(じん)</li><li>尽(じん)</li><li>迅(じん)</li><li>阵(じん)</li><li>酢(す)</li><li>図(ず)</li><li>吹(すい)</li><li>垂(たれ)</li><li>帅(そち)</li><li>推(すい)</li><li>水(みず)</li><li>炊(すい)</li><li>睡(すい)</li><li>粋(いき)</li><li>衰(おとろ)</li><li>遂(やすし)</li><li>酔(すい)</li><li>锤(おもり)</li><li>随(ずい)</li><li>髄(ずい)</li><li>崇(たかし)</li><li>数(かず)</li><li>枢(かなめ)</li><li>据(きょ)</li><li>杉(すぎ)</li><li>澄(きよむ)</li><li>寸(すん)</li><li>世(よ)</li><li>瀬(せ)</li><li>亩(うね)</li><li>是(これ)</li><li>制(せい)</li><li>势(ぜい)</li><li>姓(せい)</li><li>征(ただし)</li><li>性(せい)</li><li>成(しげる)</li><li>政(せい)</li><li>整(ただし)</li><li>星(ほし)</li><li>晴(はれ)</li><li>正(せい)</li><li>清(せい)</li><li>牲(せい)</li><li>生(しょう)</li><li>盛(もり)</li><li>精(せい)</li><li>圣(ひじり)</li><li>声(こえ)</li><li>制(せい)</li><li>西(にし)</li><li>诚(まこと)</li><li>誓(ちかい)</li><li>请(しょう)</li><li>逝(ゆ)</li><li>青(あお)</li><li>静(せい)</li><li>斉(さい)</li><li>税(ぜい)</li><li>只(せき)</li><li>席(せき)</li><li>惜(せき)</li><li>斥(せき)</li><li>昔(むかし)</li><li>析(せき)</li><li>石(いし)</li><li>积(せき)</li><li>籍(せき)</li><li>绩(つむぎ)</li><li>责(せき)</li><li>赤(あか)</li><li>迹(あと)</li><li>切(きり)</li><li>拙(せつ)</li><li>接(せつ)</li><li>摂(せつ)</li><li>折(おり)</li><li>设(せつ)</li><li>窃(せつ)</li><li>节(せつ)</li><li>说(せつ)</li><li>雪(ゆき)</li><li>绝(ぜつ)</li><li>舌(した)</li><li>仙(せん)</li><li>先(さき)</li><li>千(せん)</li><li>占(うらない)</li><li>宣(よろし)</li><li>専(あつむ)</li><li>川(かわ)</li><li>戦(いくさ)</li><li>扇(おうぎ)</li><li>栓(せん)</li><li>泉(いずみ)</li><li>浅(あさ)</li><li>洗(すすぐ)</li><li>染(そめ)</li><li>潜(ひそか)</li><li>旋(めぐる)</li><li>线(せん)</li><li>繊(せん)</li><li>船(せん)</li><li>荐(すすむ)</li><li>践(せん)</li><li>选(せん)</li><li>迁(せん)</li><li>銭(ぜに)</li><li>铣(せん)</li><li>鲜(あらた)</li><li>前(まえ)</li><li>善(ぜん)</li><li>渐(すすむ)</li><li>然(ぜん)</li><li>全(ぜん)</li><li>禅(ぜん)</li><li>缮(つくろ)</li><li>塑(そ)</li><li>措(そ)</li><li>疎(そ)</li><li>础(いしずえ)</li><li>祖(そ)</li><li>租(そ)</li><li>粗(ほぼ)</li><li>素(す)</li><li>组(くみ)</li><li>诉(うった)</li><li>阻(はば)</li><li>僧(そう)</li><li>创(きず)</li><li>双(そう)</li><li>仓(くら)</li><li>丧(も)</li><li>壮(そう)</li><li>奏(そう)</li><li>层(そう)</li><li>想(そう)</li><li>捜(さが)</li><li>扫(は)</li><li>挿(ざし)</li><li>操(みさお)</li><li>早(はや)</li><li>曹(そう)</li><li>巣(す)</li><li>槽(そう)</li><li>燥(そう)</li><li>争(あらそ)</li><li>相(そう)</li><li>窓(まど)</li><li>総(ふさ)</li><li>草(くさ)</li><li>荘(しょう)</li><li>葬(そう)</li><li>藻(も)</li><li>装(そう)</li><li>走(そう)</li><li>送(そう)</li><li>遭(あ)</li><li>霜(しも)</li><li>騒(さわ)</li><li>像(ぞう)</li><li>増(ぞう)</li><li>憎(ぞう)</li><li>臓(ぞう)</li><li>蔵(くら)</li><li>赠(おく)</li><li>造(づくり)</li><li>促(うなが)</li><li>侧(がわ)</li><li>则(のり)</li><li>即(そく)</li><li>息(いき)</li><li>束(たば)</li><li>测(はかり)</li><li>足(あし)</li><li>速(はやし)</li><li>俗(ぞく)</li><li>属(ぞく)</li><li>贼(ぞく)</li><li>族(ぞく)</li><li>続(ぞく)</li><li>卒(そつ)</li><li>存(ぞん)</li><li>孙(まご)</li><li>尊(みこと)</li><li>损(そん)</li><li>村(むら)</li><li>他(ほか)</li><li>多(た)</li><li>太(ふとし)</li><li>堕(だ)</li><li>妥(ゆずる)</li><li>惰(だ)</li><li>打(だ)</li><li>駄(だ)</li><li>体(からだ)</li><li>対(たい)</li><li>耐(しのぶ)</li><li>帯(おび)</li><li>待(まつ)</li><li>怠(おこた)</li><li>态(たい)</li><li>替(たい)</li><li>泰(はた)</li><li>滞(たい)</li><li>胎(はら)</li><li>袋(ふくろ)</li><li>贷(かし)</li><li>退(たい)</li><li>逮(たい)</li><li>队(たい)</li><li>代(だい)</li><li>台(だい)</li><li>大(だい)</li><li>第(だい)</li><li>题(だい)</li><li>滝(たき)</li><li>卓(たく)</li><li>宅(たく)</li><li>択(たく)</li><li>拓(つぶせ)</li><li>沢(さわ)</li><li>濯(たく)</li><li>托(ことづけ)</li><li>浊(だく)</li><li>诺(だく)</li><li>但(ただし)</li><li>达(たち)</li><li>夺(だっ)</li><li>脱(だつ)</li><li>棚(だな)</li><li>谷(たに)</li><li>丹(に)</li><li>単(たん)</li><li>叹(たん)</li><li>担(たん)</li><li>探(さぐ)</li><li>淡(たん)</li><li>炭(すみ)</li><li>短(たん)</li><li>端(はし)</li><li>胆(きも)</li><li>诞(たん)</li><li>锻(きたえ)</li><li>団(だん)</li><li>坛(だん)</li><li>弾(たま)</li><li>断(だん)</li><li>暖(だん)</li><li>段(だん)</li><li>男(おとこ)</li><li>谈(だん)</li><li>値(あたい)</li><li>知(ち)</li><li>地(ち)</li><li>耻(はじ)</li><li>池(いけ)</li><li>痴(ち)</li><li>稚(おさない)</li><li>置(おき)</li><li>致(いたす)</li><li>遅(ち)</li><li>筑(ちく)</li><li>畜(ちく)</li><li>竹(たけ)</li><li>蓄(ちく)</li><li>逐(ちく)</li><li>秩(さとし)</li><li>窒(ちつ)</li><li>茶(ちゃ)</li><li>嫡(ちゃく)</li><li>着(き)</li><li>中(なか)</li><li>仲(なか)</li><li>宙(ちゅう)</li><li>忠(ちゅう)</li><li>抽(ちゅう)</li><li>昼(ひる)</li><li>柱(はしら)</li><li>注(ちゅう)</li><li>虫(むし)</li><li>衷(まこと)</li><li>鋳(い)</li><li>驻(ちゅう)</li><li>著(ちょ)</li><li>贮(ちょ)</li><li>丁(ちょう)</li><li>兆(ちょう)</li><li>帐(とばり)</li><li>庁(ちょう)</li><li>吊(とむら)</li><li>张(はり)</li><li>雕(ほり)</li><li>徴(しるし)</li><li>惩(ちょう)</li><li>挑(いど)</li><li>朝(あさ)</li><li>潮(しお)</li><li>町(まち)</li><li>眺(なが)</li><li>聴(ちょう)</li><li>胀(ちょう)</li><li>肠(ちょう)</li><li>调(ちょう)</li><li>超(ちょう)</li><li>跳(は)</li><li>长(ちょう)</li><li>顶(いただき)</li><li>鸟(とり)</li><li>勅(ちょく)</li><li>直(ちょく)</li><li>朕(ちん)</li><li>沈(ちん)</li><li>珍(ちん)</li><li>赁(ちん)</li><li>镇(しん)</li><li>陈(ちん)</li><li>津(つ)</li><li>坠(つい)</li><li>追(つい)</li><li>痛(つう)</li><li>通(つう)</li><li>冢(つか)</li><li>渍(づけ)</li><li>坪(つぼ)</li><li>钓(つり)</li><li>亭(てい)</li><li>低(てい)</li><li>停(てい)</li><li>侦(てい)</li><li>贞(さだ)</li><li>呈(てい)</li><li>堤(つつみ)</li><li>定(さだむ)</li><li>帝(てい)</li><li>底(そこ)</li><li>庭(にわ)</li><li>廷(てい)</li><li>弟(おとうと)</li><li>抵(てい)</li><li>提(つつみ)</li><li>程(ほど)</li><li>缔(しめ)</li><li>艇(てい)</li><li>订(てい)</li><li>逓(てい)</li><li>邸(やしき)</li><li>泥(どろ)</li><li>摘(てき)</li><li>敌(てき)</li><li>滴(しずく)</li><li>的(まと)</li><li>笛(ふえ)</li><li>适(てき)</li><li>哲(てつ)</li><li>彻(とおる)</li><li>撤(てつ)</li><li>迭(てつ)</li><li>鉄(てつ)</li><li>典(てん)</li><li>天(てん)</li><li>展(てん)</li><li>店(てん)</li><li>添(そう)</li><li>転(てん)</li><li>点(てん)</li><li>伝(でん)</li><li>殿(どの)</li><li>田(た)</li><li>电(でん)</li><li>吐(は)</li><li>涂(ぬり)</li><li>徒(と)</li><li>斗(はかる)</li><li>渡(わたり)</li><li>登(のぼる)</li><li>途(と)</li><li>都(みやこ)</li><li>努(つとむ)</li><li>度(ど)</li><li>土(つち)</li><li>奴(やつ)</li><li>怒(いかり)</li><li>倒(だおれ)</li><li>党(とう)</li><li>冬(ふゆ)</li><li>冻(こお)</li><li>刀(かたな)</li><li>唐(とう)</li><li>塔(とう)</li><li>岛(しま)</li><li>悼(いたむ)</li><li>投(とう)</li><li>搭(とう)</li><li>东(ひがし)</li><li>桃(もも)</li><li>栋(むね)</li><li>盗(ぬす)</li><li>汤(ゆ)</li><li>灯(ひ)</li><li>当(とう)</li><li>痘(とう)</li><li>等(とう)</li><li>答(こたえ)</li><li>筒(つつ)</li><li>糖(とう)</li><li>统(おさむ)</li><li>到(いたる)</li><li>讨(う)</li><li>誊(とう)</li><li>豆(まめ)</li><li>踏(とう)</li><li>逃(のが)</li><li>透(とおる)</li><li>陶(すえ)</li><li>头(あたま)</li><li>腾(とう)</li><li>闘(たたか)</li><li>働(はたらき)</li><li>动(どう)</li><li>同(どう)</li><li>堂(どう)</li><li>导(しるべ)</li><li>洞(ほら)</li><li>童(わらべ)</li><li>胴(どう)</li><li>道(みち)</li><li>铜(どう)</li><li>峠(とうげ)</li><li>匿(とく)</li><li>得(とく)</li><li>徳(とく)</li><li>特(とく)</li><li>督(よし)</li><li>笃(あつし)</li><li>毒(どく)</li><li>独(どく)</li><li>読(どく)</li><li>凸(でこ)</li><li>突(とつ)</li><li>届(とどけ)</li><li>屯(たむろ)</li><li>豚(ぶた)</li><li>昙(くもり)</li><li>钝(どん)</li><li>内(ない)</li><li>縄(なわ)</li><li>南(みなみ)</li><li>软(やわ)</li><li>难(なん)</li><li>二(に)</li><li>尼(あま)</li><li>弐(に)</li><li>肉(にく)</li><li>日(ひ)</li><li>乳(ちち)</li><li>入(いり)</li><li>如(ぎん)</li><li>尿(にょう)</li><li>任(にん)</li><li>妊(にん)</li><li>忍(にん)</li><li>认(しのぶ)</li><li>宁(やすし)</li><li>猫(ねこ)</li><li>热(ねつ)</li><li>年(とし)</li><li>念(ねん)</li><li>燃(ねん)</li><li>粘(ねん)</li><li>悩(なや)</li><li>浓(のう)</li><li>纳(おさむ)</li><li>能(のう)</li><li>脳(のう)</li><li>农(のう)</li><li>把(たば)</li><li>覇(は)</li><li>波(なみ)</li><li>派(は)</li><li>破(やぶ)</li><li>婆(ばばあ)</li><li>马(うま)</li><li>俳(はい)</li><li>廃(はい)</li><li>拝(おが)</li><li>排(はい)</li><li>败(はい)</li><li>杯(さかずき)</li><li>背(せ)</li><li>肺(はい)</li><li>辈(やから)</li><li>配(くば)</li><li>倍(ばい)</li><li>培(つちかう)</li><li>媒(ばい)</li><li>梅(うめ)</li><li>买(ばい)</li><li>売(ばい)</li><li>赔(ばい)</li><li>陪(ばい)</li><li>伯(はく)</li><li>博(ひろし)</li><li>拍(はく)</li><li>泊(はく)</li><li>白(しろ)</li><li>舶(はく)</li><li>薄(すすき)</li><li>迫(はさま)</li><li>漠(ばく)</li><li>爆(ばく)</li><li>缚(ばく)</li><li>麦(むぎ)</li><li>箱(はこ)</li><li>肌(はだ)</li><li>畑(はたけ)</li><li>八(はち)</li><li>钵(はち)</li><li>発(はつ)</li><li>髪(かみ)</li><li>伐(ばつ)</li><li>罚(ばち)</li><li>抜(ぬ)</li><li>阀(ばつ)</li><li>伴(とも)</li><li>判(はん)</li><li>半(はん)</li><li>反(はん)</li><li>帆(ほ)</li><li>搬(はん)</li><li>板(いた)</li><li>版(はん)</li><li>犯(はん)</li><li>班(はん)</li><li>畔(あぜ)</li><li>繁(しげる)</li><li>般(ぱん)</li><li>藩(はん)</li><li>贩(はん)</li><li>范(はん)</li><li>烦(はん)</li><li>颁(はん)</li><li>饭(めし)</li><li>晩(ばん)</li><li>番(ばん)</li><li>盘(ばん)</li><li>蛮(ばん)</li><li>卑(いや)</li><li>否(いな)</li><li>妃(きさき)</li><li>彼(かれ)</li><li>悲(かな)</li><li>扉(とびら)</li><li>批(ひ)</li><li>披(ひ)</li><li>比(ひ)</li><li>泌(ひつ)</li><li>疲(つか)</li><li>皮(かわ)</li><li>碑(ひ)</li><li>秘(ひ)</li><li>罢(ひ)</li><li>肥(こえ)</li><li>被(ひ)</li><li>费(ひ)</li><li>避(さ)</li><li>非(ひ)</li><li>飞(とび)</li><li>备(そなえ)</li><li>尾(お)</li><li>微(び)</li><li>美(び)</li><li>鼻(はな)</li><li>匹(ぴき)</li><li>必(ひつ)</li><li>笔(ふで)</li><li>姫(ひめ)</li><li>百(ひゃく)</li><li>表(たわら)</li><li>标(ひょう)</li><li>氷(こおり)</li><li>漂(ただよ)</li><li>票(ひょう)</li><li>表(おもて)</li><li>评(ひょう)</li><li>描(びょう)</li><li>病(びょう)</li><li>秒(びょう)</li><li>苗(なえ)</li><li>品(ひん)</li><li>浜(はま)</li><li>贫(ひん)</li><li>宾(ひん)</li><li>频(ひん)</li><li>敏(びん)</li><li>瓶(びん)</li><li>不(ふ)</li><li>付(づけ)</li><li>夫(おっと)</li><li>妇(ふ)</li><li>富(とみ)</li><li>布(ぬの)</li><li>府(ふ)</li><li>怖(こわ)</li><li>扶(たもつ)</li><li>敷(しき)</li><li>普(すすむ)</li><li>浮(うき)</li><li>父(ちち)</li><li>符(ふ)</li><li>腐(くさ)</li><li>肤(はだ)</li><li>谱(ふ)</li><li>负(ふ)</li><li>赋(みつぐ)</li><li>赴(おもむ)</li><li>附(ふ)</li><li>侮(ぶ)</li><li>武(ぶ)</li><li>舞(まい)</li><li>部(ぶ)</li><li>封(ふう)</li><li>风(ふう)</li><li>伏(ふし)</li><li>副(ふく)</li><li>复(また)</li><li>幅(はば)</li><li>服(ふく)</li><li>福(ふく)</li><li>腹(はら)</li><li>复(ふく)</li><li>覆(くつがえ)</li><li>払(ばらい)</li><li>沸(ふつ)</li><li>仏(ふつ)</li><li>物(ぶつ)</li><li>分(ぶん)</li><li>喷(ふん)</li><li>坟(ふん)</li><li>愤(いきどお)</li><li>奋(いさむ)</li><li>粉(こな)</li><li>纷(まぎ)</li><li>雰(ふん)</li><li>文(ぶん)</li><li>闻(ぶん)</li><li>丙(へい)</li><li>并(へい)</li><li>兵(へい)</li><li>塀(へい)</li><li>币(へい)</li><li>平(ひら)</li><li>弊(へい)</li><li>柄(え)</li><li>并(なみ)</li><li>闭(へい)</li><li>陛(のぼる)</li><li>米(べい)</li><li>壁(かべ)</li><li>癖(くせ)</li><li>别(べつ)</li><li>偏(へん)</li><li>変(へん)</li><li>片(かた)</li><li>编(へん)</li><li>辺(へん)</li><li>返(へん)</li><li>遍(へん)</li><li>便(びん)</li><li>勉(つとむ)</li><li>弁(べん)</li><li>保(ほ)</li><li>舗(ほ)</li><li>捕(つか)</li><li>歩(ほ)</li><li>补(たすく)</li><li>穂(ほ)</li><li>募(つのる)</li><li>墓(はか)</li><li>慕(した)</li><li>暮(くれ)</li><li>母(はは)</li><li>簿(ぼ)</li><li>仿(ほう)</li><li>俸(ほう)</li><li>包(つつみ)</li><li>报(ほう)</li><li>奉(みつぐ)</li><li>宝(たから)</li><li>峰(みね)</li><li>崩(くずれ)</li><li>抱(かかえ)</li><li>放(ほう)</li><li>方(かた)</li><li>法(ほう)</li><li>泡(あわ)</li><li>炮(ほう)</li><li>缝(ぬい)</li><li>胞(ほう)</li><li>芳(よし)</li><li>褒(ほ)</li><li>访(おとず)</li><li>豊(とよ)</li><li>邦(ほう)</li><li>饱(あ)</li><li>乏(ぼう)</li><li>亡(ぼう)</li><li>傍(そば)</li><li>剖(ぼう)</li><li>坊(ぼう)</li><li>妨(さまた)</li><li>帽(ぼう)</li><li>忘(わす)</li><li>忙(いそが)</li><li>房(ふさ)</li><li>暴(あば)</li><li>望(ぼう)</li><li>某(ぼう)</li><li>棒(ぼう)</li><li>冒(ぼう)</li><li>纺(ぼう)</li><li>肪(ぼう)</li><li>膨(ふく)</li><li>谋(はかりごと)</li><li>贸(ぼう)</li><li>防(ぼう)</li><li>北(きた)</li><li>仆(ぼく)</li><li>墨(すみ)</li><li>扑(ぼく)</li><li>朴(ぼく)</li><li>牧(まき)</li><li>没(ぼつ)</li><li>堀(ほり)</li><li>奔(ほん)</li><li>本(ほん)</li><li>翻(ほん)</li><li>凡(ぼん)</li><li>盆(ぼん)</li><li>摩(ま)</li><li>磨(おさむ)</li><li>魔(ま)</li><li>麻(あさ)</li><li>埋(まい)</li><li>妹(いもうと)</li><li>枚(まい)</li><li>毎(ごと)</li><li>幕(まく)</li><li>膜(まく)</li><li>又(また)</li><li>抹(まつ)</li><li>末(すえ)</li><li>茧(まゆ)</li><li>万(よろず)</li><li>慢(まん)</li><li>満(まん)</li><li>漫(まん)</li><li>味(あじ)</li><li>未(み)</li><li>魅(み)</li><li>岬(みさき)</li><li>密(みつ)</li><li>脉(みゃく)</li><li>妙(みょう)</li><li>民(みん)</li><li>眠(みん)</li><li>务(つとむ)</li><li>梦(ゆめ)</li><li>无(む)</li><li>矛(ほこ)</li><li>雾(きり)</li><li>婿(むこ)</li><li>娘(むすめ)</li><li>名(めい)</li><li>命(いのち)</li><li>明(めい)</li><li>盟(めい)</li><li>迷(めい)</li><li>铭(めい)</li><li>鸣(なる)</li><li>灭(めつ)</li><li>免(めん)</li><li>绵(わた)</li><li>面(めん)</li><li>模(ぼ)</li><li>茂(しげる)</li><li>妄(もう)</li><li>毛(け)</li><li>猛(たける)</li><li>盲(もう)</li><li>网(もう)</li><li>耗(もう)</li><li>木(き)</li><li>黙(もく)</li><li>目(め)</li><li>戻(もどり)</li><li>问(とい)</li><li>纹(もん)</li><li>门(もん)</li><li>匁(もんめ)</li><li>夜(よる)</li><li>野(の)</li><li>矢(や)</li><li>厄(やく)</li><li>役(えき)</li><li>约(やく)</li><li>薬(くすり)</li><li>訳(やく)</li><li>跃(おど)</li><li>柳(やなぎ)</li><li>愉(さとる)</li><li>油(あぶら)</li><li>愈(ゆ)</li><li>谕(さとし)</li><li>输(ゆ)</li><li>唯(ただ)</li><li>优(ゆう)</li><li>勇(ゆう)</li><li>友(とも)</li><li>幽(ゆう)</li><li>悠(ゆう)</li><li>忧(うれ)</li><li>有(ゆう)</li><li>犹(なお)</li><li>由(よし)</li><li>裕(ゆう)</li><li>诱(ゆう)</li><li>游(ゆう)</li><li>邮(ゆう)</li><li>雄(おす)</li><li>融(ゆう)</li><li>夕(ゆう)</li><li>予(よ)</li><li>余(よ)</li><li>与(あたえ)</li><li>誉(ほまれ)</li><li>预(あずかり)</li><li>幼(よう)</li><li>容(かたち)</li><li>庸(よう)</li><li>扬(よう)</li><li>揺(ゆ)</li><li>拥(まもる)</li><li>曜(ひかり)</li><li>様(さま)</li><li>洋(よう)</li><li>溶(よう)</li><li>用(よう)</li><li>窑(かま)</li><li>羊(ひつじ)</li><li>叶(は)</li><li>要(よう)</li><li>谣(うたい)</li><li>踊(おどり)</li><li>阳(よう)</li><li>养(おさむ)</li><li>抑(おおき)</li><li>欲(よく)</li><li>浴(よく)</li><li>翌(よく)</li><li>翼(つばさ)</li><li>罗(ら)</li><li>裸(はだか)</li><li>来(らい)</li><li>頼(より)</li><li>雷(かみなり)</li><li>络(らく)</li><li>落(おち)</li><li>酪(らく)</li><li>乱(らん)</li><li>卵(たまご)</li><li>栏(らん)</li><li>滥(らん)</li><li>覧(らん)</li><li>利(り)</li><li>吏(つかさ)</li><li>履(くつ)</li><li>理(り)</li><li>痢(り)</li><li>裏(うら)</li><li>里(さと)</li><li>离(はなれ)</li><li>陆(りく)</li><li>律(りつ)</li><li>率(りつ)</li><li>立(りつ)</li><li>略(りゃく)</li><li>流(りゅう)</li><li>留(どめ)</li><li>硫(りゅう)</li><li>粒(つぶ)</li><li>隆(たかし)</li><li>竜(りゅう)</li><li>虑(りょ)</li><li>旅(たび)</li><li>虏(とりこ)</li><li>了(りょう)</li><li>僚(しかさ)</li><li>両(りょう)</li><li>寮(りょう)</li><li>料(りょう)</li><li>凉(りょう)</li><li>猟(りょう)</li><li>疗(りょう)</li><li>粮(かて)</li><li>良(りょう)</li><li>量(りょう)</li><li>陵(みささぎ)</li><li>领(りょう)</li><li>力(ちから)</li><li>绿(みどり)</li><li>伦(たぐい)</li><li>厘(りん)</li><li>林(はやし)</li><li>临(のぞむ)</li><li>轮(わ)</li><li>隣(となり)</li><li>塁(るい)</li><li>涙(なみだ)</li><li>累(るい)</li><li>类(たぐい)</li><li>令(れい)</li><li>例(れい)</li><li>冷(ひや)</li><li>励(つとむ)</li><li>礼(れい)</li><li>铃(すず)</li><li>隷(れい)</li><li>零(ぜろ)</li><li>霊(れい)</li><li>丽(うるわ)</li><li>齢(よわい)</li><li>暦(こよみ)</li><li>歴(れき)</li><li>列(れつ)</li><li>劣(れつ)</li><li>烈(れつ)</li><li>裂(れつ)</li><li>廉(かど)</li><li>恋(こい)</li><li>练(ねり)</li><li>连(れん)</li><li>錬(きたう)</li><li>炉(ろ)</li><li>路(ろ)</li><li>露(つゆ)</li><li>労(ろう)</li><li>廊(ろう)</li><li>朗(あきら)</li><li>楼(ろう)</li><li>浪(なみ)</li><li>漏(ろう)</li><li>老(ろう)</li><li>郎(ろう)</li><li>六(ろく)</li><li>录(ろく)</li><li>论(ろん)</li><li>和(わ)</li><li>话(はなし)</li><li>贿(まかない)</li><li>惑(まど)</li><li>枠(わく)</li><li>湾(わん)</li><li>腕(うで)</li></ul>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>签证总结大全（工作签、在留卡加汉字、工作签证更新、家族签证等）</title>
      <link href="2019/aboutAllVisa/"/>
      <url>2019/aboutAllVisa/</url>
      
        <content type="html"><![CDATA[<p>今天办理了家族签证和工作签更新，突然发现自己接触的签证相关的也有4种类型了，所以差不多可以做个总结性blog了。今天办签证遇到的坑很多，感觉真是难以言说。先是公司资料没有寄到，自己去公司拿了一趟。之后告知需要去区役所开非课税证明，而去了之后说是未满一年开不了。各种种的坑，觉得需要记录下来，给需要的朋友少走弯路。</p><a id="more"></a><h1 id="东京入管局概述"><a href="#东京入管局概述" class="headerlink" title="东京入管局概述"></a>东京入管局概述</h1><p>东京入管局一共有5个区，分别是A（红色）留学类、更新再交付 B（橘黄色）签证更新、C（蓝色）就劳相谈、D（绿色）永驻/再交付/再入国、E（1楼）家族签证。ABCD在二楼，E在1楼。</p><h1 id="首次工作签"><a href="#首次工作签" class="headerlink" title="首次工作签"></a>首次工作签</h1><p>理论上来说大专以上的学历都是可以到日本工作的，只要在日本的公司给offer就可以。所以首先是在招聘App上更新简历，我是通过猎聘app上拿到的offer。日本IT相关工作非常缺人，一般来说单纯在上面更新一下简历不需要投递就会有一大波猎头主动过去找你。然后就是精挑细选，挑出觉得比较合适的公司和猎头沟通进行面试安排。一般来说首次来日工作的话都是进的华人外派公司作为跳板，待1-2年之后有合适的机会再换。所以远程面试可能会用wechat视频等不是很正规的方式。等offer确定后就可以和公司沟通办理签证相关事项了，工作签证需要3个月左右。给大家一个提醒，还没给你发工资就要找你要钱的果断拉黑，都9102了相信也不会有人会被这种骗术骗到了吧。</p><h2 id="需要的资料"><a href="#需要的资料" class="headerlink" title="需要的资料"></a>需要的资料</h2><ol><li>毕业证</li><li>学位证（专科不需要）</li><li>护照</li></ol><p>将1-3资料国际快递给公司，之后剩下的时间就是等待了。如果这期间日语不是很好，而经济又不是很紧张的话可以报个班学习一下，这点投入是很值得的。</p><h2 id="去日本需要准备的东西"><a href="#去日本需要准备的东西" class="headerlink" title="去日本需要准备的东西"></a>去日本需要准备的东西</h2><p>这些内容一般来说公司会交代，但是不一定会很详细，在此列举一下。</p><ol><li>印章（12mm左右），日本社会对印章信任度大过签字</li><li>一张visa或jcb的信用卡，银联不可。因为不支持绑定手机卡消费</li><li>西瓜卡（可以在淘宝上买，也可以下飞机了再买，不过提前准备我觉得更好，坐车吃饭都可以用）</li><li>现金若干，不用太多，刷卡一样的，主要用来应急用。</li><li>手机卡（或者在支付宝买一个国际流量包）</li><li>家族关系公正书（公正处可以办），主要用来年底申请抚养时退税用，如果不在乎这点钱就直接忽略吧</li><li>一些小东西，比如指甲钳、挖耳勺之类的刚到日本可能都不知道在哪买，自备一个挺方便。（推荐一个日本的百元连锁店Daiso，生活用品又全又便宜）</li></ol><p>以上是1年前来日本时准备的东西的回忆版，可能有所遗漏，想到再补充吧。</p><h1 id="在留卡加汉字"><a href="#在留卡加汉字" class="headerlink" title="在留卡加汉字"></a>在留卡加汉字</h1><p>初次工作签到日本的话，拿着在留资格认定书在入关换在留卡的时候给的卡是只有拼音名字。如果觉得不方便的话可以之后去入管局申请加一下汉字，当天就能拿到。</p><h2 id="需要的资料-1"><a href="#需要的资料-1" class="headerlink" title="需要的资料"></a>需要的资料</h2><ol><li>护照</li><li>在留卡</li><li>申请表（可以到入管了再拿申请表填）</li><li>照片*1</li><li>1500日币</li></ol><p>去拿新的在留卡的时候他们会把你原来的在留卡挖个洞再还给你。老的在留卡虽然不知道还有没有用，但是最好不要丢，拿回去放着，也不会吃你家大米不是？</p><h1 id="工作签到期更新"><a href="#工作签到期更新" class="headerlink" title="工作签到期更新"></a>工作签到期更新</h1><p>在签证快到期时就在留意去入管更新了，一般在到期前3个月都可以去。要跑两趟的，第一趟去申请更新，会拿到回执。之后会寄通知单过来，再去一趟拿新的在留卡，需要4000日币的更新费用。拿到新的在留卡之后记得把填的老的在留卡的信息的地方全部更新一下，然后拍一张电子照留存。</p><p>办理更新是在B区，也是人最多的一个区，拿号都得排队。B1-B4是资料提交区，B5-B6是回执交付区。也就是说在B1-B4递送资料，然后在B5-B6等着。B7是排队拿号的地方，也是噩梦的开始。在等候区有个日本老头找我们聊天说以后如果来入管尽量避开周一和周四，说这2天人超级多。感觉日本的老头老太太都好優しい啊，来日本没多久已经被很多老头老太太关照，暖心的不得了。</p><p>这是从公司拿到的资料<br><img src="/img/blog/visa_update_from_company.jpg" width="30%" height="30%"></p><p>2019年11月25追记：<br>时隔整整一个月，入管终于把通知去拿在留卡的明信片送过来了，然后带上必要的资料去换卡就好了。我早上7点左右出发，11点拿到在留卡（2楼A1区），天还下着雨。但是拿到3年的签证还是很开心的，同事更新后还是一年，虽然不知道有什么讲究。</p><ul><li>护照</li><li>在留卡</li><li>回执</li><li>通知卡</li><li>4000円（到入管后的全家便利店买4000的邮票）</li></ul><h2 id="需要的资料-2"><a href="#需要的资料-2" class="headerlink" title="需要的资料"></a>需要的资料</h2><ol><li>在留期间申请更新表</li><li>照片 4*3 白底 无帽 正面（3个月内，如果不在3个月内也不要用和上一个在留卡一样的照片，这不是明明白白的告诉他们你的照片是1年前的么）</li><li>在留卡</li><li>护照</li><li>住民税证明（不满1年不需要，因为也开不出来。日本不会出现踢皮球式的刁难，一边不给开另一边非得要） </li></ol><h1 id="以下资料公司准备"><a href="#以下资料公司准备" class="headerlink" title="以下资料公司准备"></a>以下资料公司准备</h1><ol start="6"><li>雇用契约书 （公司准备）</li><li>登记薄滕本（公司准备）</li><li>决算报告书（公司准备）</li><li>法定调书合计表（公司准备）</li><li>在留期间更新许可申请书（公司准备）</li></ol><p>这个是拿到的回执单，一把辛酸泪。<br><img src="/img/blog/visa_update_result.jpg" width="30%" height="30%"></p><h1 id="家族签证"><a href="#家族签证" class="headerlink" title="家族签证"></a>家族签证</h1><p>这次的家族签证是给老婆孩子办的，家族签证可以在日本生活但没有就劳资格。申请所需要时间在1-3个月之间。据说提交的资料越全下签越快，通过率越高，所以我也是尽可能的多准备些资料。换到在留卡之后可以去区役所申请补助，一个月1万5000日元，一直补贴到16岁。1岁半之后就可以免费送去保育园上学，3岁后可以免费上幼儿园。如果抚养者交了社保或者国民健康保险的话老婆孩子都可以享受福利。一家3口，孩子全免，大人负担30%，一个月上限8万日元。以下是所需的资料：</p><h2 id="申请书"><a href="#申请书" class="headerlink" title="申请书"></a>申请书</h2><ol><li>家族签证申请书（有几个人就需要填几份）</li></ol><h2 id="复印件"><a href="#复印件" class="headerlink" title="复印件"></a>复印件</h2><ol><li>护照复印件</li><li>在留卡复印件</li><li>结婚证复印件</li><li>出生证明复印件（没有孩子就不需要）</li></ol><h2 id="公正书"><a href="#公正书" class="headerlink" title="公正书"></a>公正书</h2><ol><li>家族关系公正书</li><li>结婚证公正书</li><li>出生证明公正书（没有孩子就不需要）</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>夫妻交往照片*10</li><li>证件照*1（小孩的也需要，我在官网查的资料写16岁以下不要，去了又说要可急坏了我，最后拍了一张护照上的照片应急搞定了） </li><li>在职证明</li><li>未来半年的收入证明</li><li>去1楼的全家花417买简易书留的信封</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>剪刀（打照片剪照片用）</li><li>固体胶（贴照片用）</li><li>笔和本子</li><li>订书机（固定资料）</li><li>在留卡（申请者身份证明）</li><li>护照（提前都复印好了可以不用带）</li></ol><p>这是个自己做的一些记录<br><img src="/img/blog/visa_update.jpg" width="30%" height="30%"></p><p>这个是家族签证的回执单<br><img src="/img/blog/family_result.jpg" width="30%" height="30%"></p><h1 id="高级人才签证"><a href="#高级人才签证" class="headerlink" title="高级人才签证"></a>高级人才签证</h1><p>目前暂未涉及，留坑以后补充</p><h1 id="永住者签证"><a href="#永住者签证" class="headerlink" title="永住者签证"></a>永住者签证</h1><p>目前暂未涉及，留坑以后补充</p>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-Java到底是值传递还是引用传递？</title>
      <link href="2019/javaPassByValueAndReference/"/>
      <url>2019/javaPassByValueAndReference/</url>
      
        <content type="html"><![CDATA[<p>首先，不要纠结于 Pass By Value 和 Pass By Reference 的字面上的意义，否则很容易陷入所谓的“一切传引用其实本质上是传值”这种并不能解决问题无意义论战中。更何况，要想知道Java到底是传值还是传引用，起码你要先知道传值和传引用的准确含义吧？可是如果你已经知道了这两个名字的准确含义，那么你自己就能判断Java到底是传值还是传引用。这就好像用大学的名词来解释高中的题目，对于初学者根本没有任何意义。</p><a id="more"></a><h1 id="一、搞清楚-基本类型-和-引用类型的不同之处"><a href="#一、搞清楚-基本类型-和-引用类型的不同之处" class="headerlink" title="一、搞清楚 基本类型 和 引用类型的不同之处"></a>一、搞清楚 基本类型 和 引用类型的不同之处</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int num</span> = 10;</span><br><span class="line"><span class="attribute">String str</span> = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/166032bc90958c21604110441ad03f45_hd.jpg"></p><p>如图所示，num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为”引用”，引用指向实际对象，实际对象中保存着内容。</p><h1 id="二、搞清楚赋值运算符（-）的作用"><a href="#二、搞清楚赋值运算符（-）的作用" class="headerlink" title="二、搞清楚赋值运算符（=）的作用"></a>二、搞清楚赋值运算符（=）的作用</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int num</span> = 10;</span><br><span class="line"><span class="attribute">String str</span> = <span class="string">"hello"</span>;</span><br><span class="line"><span class="attribute">num</span> = 20;</span><br><span class="line"><span class="attribute">str</span> = <span class="string">"java"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/287c0efbb179638cf4cf27cbfdf3e746_hd.jpg"></p><p>对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。<code>但是原来的对象不会被改变（重要）。</code> 如上图所示，”hello” 字符串对象没有被改变。（没有被任何引用所指向的对象是垃圾，会被垃圾回收器回收）</p><h1 id="三、调用方法时发生了什么？参数传递基本上就是赋值操作。"><a href="#三、调用方法时发生了什么？参数传递基本上就是赋值操作。" class="headerlink" title="三、调用方法时发生了什么？参数传递基本上就是赋值操作。"></a>三、调用方法时发生了什么？参数传递基本上就是赋值操作。</h1><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">第一个例子：基本类型</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">value</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(num); <span class="comment">// num 没有被改变</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">第二个例子：没有提供改变自身方法的引用类型</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">String</span> <span class="built_in">text</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">text</span> = <span class="string">"windows"</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(str); <span class="comment">// str 也没有被改变</span></span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">第三个例子：提供了改变自身方法的引用类型</span><br><span class="line"><span class="keyword">StringBuilder </span><span class="built_in">sb</span> = new <span class="keyword">StringBuilder("iphone");</span></span><br><span class="line"><span class="keyword">void </span>foo(<span class="keyword">StringBuilder </span><span class="keyword">builder) </span>&#123;</span><br><span class="line">    <span class="keyword">builder.append("4");</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">foo(sb); </span>// <span class="built_in">sb</span> 被改变了，变成了<span class="string">"iphone4"</span>。</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">第四个例子：提供了改变自身方法的引用类型，但是不使用，而是使用赋值运算符。</span><br><span class="line"><span class="keyword">StringBuilder </span><span class="built_in">sb</span> = new <span class="keyword">StringBuilder("iphone");</span></span><br><span class="line"><span class="keyword">void </span>foo(<span class="keyword">StringBuilder </span><span class="keyword">builder) </span>&#123;</span><br><span class="line">    <span class="keyword">builder </span>= new <span class="keyword">StringBuilder("ipad");</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">foo(sb); </span>// <span class="built_in">sb</span> 没有被改变，还是 <span class="string">"iphone"</span>。</span><br></pre></td></tr></table></figure><p>重点理解为什么，第三个例子和第四个例子结果不同？</p><p>下面是第三个例子的图解：<br><img src="https://pic2.zhimg.com/80/d8b82e07ea21375ca6b300f9162aa95f_hd.jpg"><br><code>builder.append(&quot;4&quot;)之后</code><br><img src="https://pic2.zhimg.com/80/ff2ede9c6c55568d42425561f25a0fd7_hd.jpg"></p><p>下面是第四个例子的图解：<br><img src="https://pic2.zhimg.com/80/d8b82e07ea21375ca6b300f9162aa95f_hd.jpg"><br><code>builder = new StringBuilder(&quot;ipad&quot;);</code> 之后<br><img src="https://pic4.zhimg.com/80/46fa5f10cc135a3ca087dae35a5211bd_hd.jpg"></p><h1 id="从局部变量-方法参数开始讲起"><a href="#从局部变量-方法参数开始讲起" class="headerlink" title="从局部变量/方法参数开始讲起"></a>从局部变量/方法参数开始讲起</h1><p>局部变量和方法参数在jvm中的储存方法是相同的，都是在栈上开辟空间来储存的，随着进入方法开辟，退出方法回收。以32位JVM为例，boolean/byte/short/char/int/float以及引用都是分配4字节空间，long/double分配8字节空间。对于每个方法来说，最多占用多少空间是一定的，这在编译时就可以计算好。</p><p>我们都知道JVM内存模型中有，stack和heap的存在，但是更准确的说，是每个线程都分配一个独享的stack，所有线程共享一个heap。对于每个方法的局部变量来说，是绝对无法被其他方法，甚至其他线程的同一方法所访问到的，更遑论修改。当我们在方法中声明一个 int i = 0，或者 Object obj = null 时，仅仅涉及stack，不影响到heap，当我们 new Object() 时，会在heap中开辟一段内存并初始化Object对象。</p><p>当我们将这个对象赋予obj变量时，仅仅是stack中代表obj的那4个字节变更为这个对象的地址。</p><h1 id="数组类型引用和对象："><a href="#数组类型引用和对象：" class="headerlink" title="数组类型引用和对象："></a>数组类型引用和对象：</h1><p>当我们声明一个数组时，如int[] arr = new int[10]，因为数组也是对象，arr实际上是引用，stack上仅仅占用4字节空间，new int[10]会在heap中开辟一个数组对象，然后arr指向它。</p><p>当我们声明一个二维数组时，如 int[][] arr2 = new int[2][4]，arr2同样仅在stack中占用4个字节，会在内存中开辟一个长度为2的，类型为int[]的数组，然后arr2指向这个数组。这个数组内部有两个引用（大小为4字节），分别指向两个长度为4的类型为int的数组。</p><p><img src="https://pic4.zhimg.com/80/v2-6590cb935ae8bf3b7241cb309fe041d7_hd.jpg"></p><p>所以当我们传递一个数组引用给一个方法时，数组的元素是可以被改变的，但是无法让数组引用指向新的数组。</p><p>你还可以这样声明：int[][] arr3 = new int[3][]，这时内存情况如下图</p><p><img src="https://pic2.zhimg.com/80/v2-fdc86227021d56a02b559d6485983c71_hd.jpg"></p><p>你还可以这样 arr3[0] = new int [5]; arr3[1] = arr2[0];</p><p><img src="https://pic1.zhimg.com/80/v2-fdc5e737a95d625a47d66ab61e4a2f55_hd.jpg"></p><h1 id="关于String"><a href="#关于String" class="headerlink" title="关于String"></a>关于String</h1><p>String对象内部仅需要维护三个变量，char[] chars, int startIndex, int length。而chars在某些情况下是可以共用的。但是因为String被设计成为了不可变类型，所以你思考时把String对象简化考虑也是可以的。String str = new String(“hello”)</p><p><img src="https://pic4.zhimg.com/80/v2-a143d0a3594d06f54c6853c46c429e08_hd.jpg"></p><p>当然某些JVM实现会把”hello”字面量生成的String对象放到常量池中，而常量池中的对象可以实际分配在heap中，有些实现也许会分配在方法区，当然这对我们理解影响不大。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-Thread.sleep(0)和Thread.sleep(1)的区别</title>
      <link href="2019/jdkSourceCodeReadThreadSleep/"/>
      <url>2019/jdkSourceCodeReadThreadSleep/</url>
      
        <content type="html"><![CDATA[<p>某人的代码中用了一句看似莫明其妙的话：Thread.Sleep(0) 。既然是 Sleep 0 毫秒，那么他跟去掉这句代码相比，有啥区别么？Thread.Sleep(0) 表示挂起0毫秒，你可能觉得没作用，你要写Thread.Sleep(1000) 就有感觉了。</p><a id="more"></a><p>Thread.Sleep(0) 并非是真的要线程挂起0毫秒，意义在于这次调用Thread.Sleep(0)的当前线程确实的被冻结了一下，让其他线程有机会优先执行。Thread.Sleep(0) 是你的线程暂时放弃cpu，也就是释放一些未用的时间片给其他线程或进程使用，就相当于一个让位动作。<br>在线程中，调用sleep（0）可以释放cpu时间，让线程马上重新回到就绪队列而非等待队列，sleep(0)释放当前线程所剩余的时间片（如果有剩余的话），这样可以让操作系统切换其他线程来执行，提升效率。<br>我们可能经常会用到 Thread.Sleep 函数来使线程挂起一段时间。那么你有没有正确的理解这个函数的用法呢？</p><h1 id="回顾一下操作系统原理"><a href="#回顾一下操作系统原理" class="headerlink" title="回顾一下操作系统原理"></a>回顾一下操作系统原理</h1><p>操作系统中，CPU竞争有很多种策略。Unix系统使用的是时间片算法，而Windows则属于抢占式的。<br>在时间片算法中，所有的进程排成一个队列。操作系统按照他们的顺序，给每个进程分配一段时间，即该进程允许运行的时间。如果在 时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程 序所要做的就是维护一张就绪进程列表，，当进程用完它的时间片后，它被移到队列的末尾。</p><p>所谓抢占式操作系统，就是说如果一个进程得到了 CPU 时间，除非它自己放弃使用 CPU ，否则将完全霸占 CPU 。因此可以看出，在抢 占式操作系统中，操作系统假设所有的进程都是“人品很好”的，会主动退出 CPU 。在抢占式操作系统中，假设有若干进程，操作系统会根据他们的优先级、饥饿时间（已经多长时间没有使用过 CPU 了），给他们算出一 个总的优先级来。操作系统就会把 CPU 交给总优先级最高的这个进程。当进程执行完毕或者自己主动挂起后，操作系统就会重新计算一 次所有进程的总优先级，然后再挑一个优先级最高的把 CPU 控制权交给他。</p><p>我们用分蛋糕的场景来描述这两种算法。假设有源源不断的蛋糕（源源不断的时间），一副刀叉（一个CPU），10个等待吃蛋糕的人（10 个进程）。<br>如果是 Unix操作系统来负责分蛋糕，那么他会这样定规矩：每个人上来吃 1 分钟，时间到了换下一个。最后一个人吃完了就再从头开始。于是，不管这10个人是不是优先级不同、饥饿程度不同、饭量不同，每个人上来的时候都可以吃 1 分钟。当然，如果有人本来不太饿，或者饭量小，吃了30秒钟之后就吃饱了，那么他可以跟操作系统说：我已经吃饱了（挂起）。于是操作系统就会让下一个人接着来。<br>如果是 Windows 操作系统来负责分蛋糕的，那么场面就很有意思了。他会这样定规矩：我会根据你们的优先级、饥饿程度去给你们每个人计算一个优先级。优先级最高的那个人，可以上来吃蛋糕——吃到你不想吃为止。等这个人吃完了，我再重新根据优先级、饥饿程度来计算每个人的优先级，然后再分给优先级最高的那个人。<br>这样看来，这个场面就有意思了——可能有些人是PPMM，因此具有高优先级，于是她就可以经常来吃蛋糕。可能另外一个人是个丑男，而去很ws，所以优先级特别低，于是好半天了才轮到他一次（因为随着时间的推移，他会越来越饥饿，因此算出来的总优先级就会越来越高，因此总有一天会轮到他的）。而且，如果一不小心让一个大胖子得到了刀叉，因为他饭量大，可能他会霸占着蛋糕连续吃很久很久，导致旁边的人在那里咽口水。。。</p><p>而且，还可能会有这种情况出现：操作系统现在计算出来的结果，5号PPMM总优先级最高，而且高出别人一大截。因此就叫5号来吃蛋糕。5号吃了一小会儿，觉得没那么饿了，于是说“我不吃了”（挂起）。因此操作系统就会重新计算所有人的优先级。因为5号刚刚吃过，因此她的饥饿程度变小了，于是总优先级变小了；而其他人因为多等了一会儿，饥饿程度都变大了，所以总优先级也变大了。不过这时候仍然有可能5号的优先级比别的都高，只不过现在只比其他的高一点点——但她仍然是总优先级最高的啊。因此操作系统就会说：5号mm上来吃蛋糕……（5号mm心里郁闷，这不刚吃过嘛……人家要减肥……谁叫你长那么漂亮，获得了那么高的优先级）。</p><p>那么，Thread.Sleep 函数是干吗的呢？还用刚才的分蛋糕的场景来描述。上面的场景里面，5号MM在吃了一次蛋糕之后，觉得已经有8分饱了，她觉得在未来的半个小时之内都不想再来吃蛋糕了，那么她就会跟操作系统说：在未来的半个小时之内不要再叫我上来吃蛋糕了。这样，操作系统在随后的半个小时里面重新计算所有人总优先级的时候，就会忽略5号mm。Sleep函数就是干这事的，他告诉操作系统“在未来的多少毫秒内我不参与CPU竞争”。</p><p>看完了 Thread.Sleep 的作用，我们再来想想文章开头的两个问题。<br>对于第一个问题，答案是：不一定。因为你只是告诉操作系统：在未来的1000毫秒内我不想再参与到CPU竞争。那么1000毫秒过去之后，这时候也许另外一个线程正在使用CPU，那么这时候操作系统是不会重新分配CPU的，直到那个线程挂起或结束；况且，即使这个时候恰巧轮到操作系统进行CPU 分配，那么当前线程也不一定就是总优先级最高的那个，CPU还是可能被其他线程抢占去。与此相似的，Thread有个Resume函数，是用来唤醒挂起的线程的。好像上面所说的一样，这个函数只是“告诉操作系统我从现在起开始参与CPU竞争了”，这个函数的调用并不能马上使得这个线程获得CPU控制权。</p><p>对于第二个问题，答案是：有，而且区别很明显。假设我们刚才的分蛋糕场景里面，有另外一个PPMM 7号，她的优先级也非常非常高（因为非常非常漂亮），所以操作系统总是会叫道她来吃蛋糕。而且，7号也非常喜欢吃蛋糕，而且饭量也很大。不过，7号人品很好，她很善良，她没吃几口就会想：如果现在有别人比我更需要吃蛋糕，那么我就让给他。因此，她可以每吃几口就跟操作系统说：我们来重新计算一下所有人的总优先级吧。不过，操作系统不接受这个建议——因为操作系统不提供这个接口。于是7号mm就换了个说法：“在未来的0毫秒之内不要再叫我上来吃蛋糕了”。这个指令操作系统是接受的，于是此时操作系统就会重新计算大家的总优先级——注意这个时候是连7号一起计算的，因为“0毫秒已经过去了”嘛。因此如果没有比7号更需要吃蛋糕的人出现，那么下一次7号还是会被叫上来吃蛋糕。<br>因此，Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”。竞争的结果也许是当前线程仍然获得CPU控制权，也许会换成别的线程获得CPU控制权。这也是我们在大循环里面经常会写一句Thread.Sleep(0) ，因为这样就给了其他线程比如Paint线程获得CPU控制权的权力，这样界面就不会假死在那里。</p><p>末了说明一下，虽然上面提到说“除非它自己放弃使用 CPU ，否则将完全霸占 CPU”，但这个行为仍然是受到制约的——操作系统会监控你霸占CPU的情况，如果发现某个线程长时间霸占CPU，会强制使这个线程挂起，因此在实际上不会出现“一个线程一直霸占着 CPU 不放”的情况。至于我们的大循环造成程序假死，并不是因为这个线程一直在霸占着CPU。实际上在这段时间操作系统已经进行过多次CPU竞争了，只不过其他线程在获得CPU控制权之后很短时间内马上就退出了，于是就又轮到了这个线程继续执行循环，于是就又用了很久才被操作系统强制挂起。。。因此反应到界面上，看起来就好像这个线程一直在霸占着CPU一样。<br>末了再说明一下，文中线程、进程有点混乱，其实在Windows原理层面，CPU竞争都是线程级的，本文中把这里的进程、线程看成同一个东西就好了。</p><h1 id="问题：主动的放弃运行让系统调度的意义是什么呢？"><a href="#问题：主动的放弃运行让系统调度的意义是什么呢？" class="headerlink" title="问题：主动的放弃运行让系统调度的意义是什么呢？"></a>问题：主动的放弃运行让系统调度的意义是什么呢？</h1><p>为了等待资源、事件，那么你需要进入等待队列。如果你已经拥有运行所需资源，却让系统调度，这是资源的浪费，并且调度也是要浪费资源的</p><p>解释：对的，你要等待资源，你确实需要排队，假如AB两个线程为合作关系，A线程处理一些原始数据，数据处理到一定程度，交给B线程处理，在A处理原始数据的时候，B也要做一些准备工作，所以，AB是并发的，但是B做好准备之后，需要等待A处理好那些数据，接过A的数据，继续处理，因此，这个等待，如果A不使用信号或者等待条件来通知B的话，那么B必须一直轮询，查看A是否已完成，B线程所做的这个轮询是否会一直占用CPU来做无用的循环查看呢？因此B这个时候占用的cpu时间片做的是无用功，因此，这里sleep(0)就有作用，当B查看A没处理完数据的时候，B马上sleep(0)交出B的时间片，让操作系统调度A来运行(假设只有AB两个线程），那么这个时候，A就会得到充分的时间来处理它的数据，这个不是一个应用了吗？我猜测pthread_conn_wait()内部阻塞就是使用这个机制</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">thread_fun</span>()</span><br><span class="line">&#123;</span><br><span class="line">    prepare_word.....</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (A is finish)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">0</span>); <span class="comment">//这里会交出B的时间片，下一次调度B的时候，接着执行这个循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    process A's data</span><br></pre></td></tr></table></figure><p>没有sleep(0)版：</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">thread_fun</span>()</span><br><span class="line">&#123;</span><br><span class="line">    prepare_word.....</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)  <span class="comment">//这里会一直浪费CPU时间做死循环的轮询，无用功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (A is finish)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    process A's data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说是轮询，那它就是一种高效、节约、谦虚的轮询，如果没有sleep(0)，那么B线程可能会执行上万次的while循环，直至它的时间片消耗完，做这些都是无用功，而是用了sleep(0)后，B线程每一次执行就只做一次while循环就把剩余的时间片让出给A，能让A得到更多的执行次数,利用率更高</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>在线程没退出之前，线程有三个状态，就绪态，运行态，等待态。sleep(n)之所以在n秒内不会参与CPU竞争，是因为，当线程调用sleep(n)的时候，线程是由运行态转入等待态，线程被放入等待队列中，等待定时器n秒后的中断事件，当到达n秒计时后，线程才重新由等待态转入就绪态，被放入就绪队列中，等待队列中的线程是不参与cpu竞争的，只有就绪队列中的线程才会参与cpu竞争，所谓的cpu调度，就是根据一定的算法（优先级，FIFO等。。。），从就绪队列中选择一个线程来分配cpu时间。</p><p>而sleep(0)之所以马上回去参与cpu竞争，是因为调用sleep(0)后，因为0的原因，线程直接回到就绪队列，而非进入等待队列，只要进入就绪队列，那么它就参与cpu竞争。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful最佳实践</title>
      <link href="2019/restfulBestUse/"/>
      <url>2019/restfulBestUse/</url>
      
        <content type="html"><![CDATA[<p>restful 是目前最流行的 API 设计规范，用于 Web 数据接口的设计。它的大原则容易把握，但是细节不容易做对。</p><a id="more"></a><h4 id="不要纠结于无意义的规范"><a href="#不要纠结于无意义的规范" class="headerlink" title="不要纠结于无意义的规范"></a>不要纠结于无意义的规范</h4><p>  在开始本文之前，我想先说这么一句：RESTful 真的很好，但它只是一种软件架构风格，过度纠结如何遵守规范只是徒增烦恼，也违背了使用它的初衷。</p><p>  就像 Elasticsearch 的 API 会在 GET 请求中直接传 JSON，但这是它的业务需要，因为普通的 Query Param 根本无法构造如此复杂的查询 DSL。Github 的 V3 API 中也有很多不符合标准的地方，这也并不会妨碍它成为业界 RESTful API 的参考标准。</p><p>  我接下来要介绍的一些东西也会跟标准不符，但这是我在实际开发中遇到过、困扰过、思考过所得出的结论，所以才是<q>我所认为的</q>RESTful API 最佳实践。</p><h1 id="为什么要用-RESTful"><a href="#为什么要用-RESTful" class="headerlink" title="为什么要用 RESTful"></a>为什么要用 RESTful</h1><p> RESTful 给我的最大感觉就是规范、易懂和优雅，一个结构清晰、易于理解的 API 完全可以省去许多无意义的沟通和文档。并且 RESTful 现在越来越流行，也有越来越多优秀的周边工具（例如文档工具 Swagger）。</p><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>  如果能全站 HTTPS 当然是最好的，不能的话也请尽量将登录、注册等涉及密码的接口使用 HTTPS。</p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p> API 的版本号和客户端 APP 的版本号是毫无关系的，不要让 APP 将它们用于提交应用市场的版本号传递到服务器，而是提供类似于<code>v1</code>、<code>v2</code>之类的 API 版本号。版本号只允许枚举，不允许判断区间。</p><p>  版本号拼接在 URL 中或是放在 Header 中都可以。例如：</p> <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">api.xxx.com</span>/<span class="built_in">v1</span>/users</span><br></pre></td></tr></table></figure><p>  或：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">api.xxx.com/users</span><br><span class="line"> <span class="attribute">version</span>=v1</span><br></pre></td></tr></table></figure><h1 id="URL-设计"><a href="#URL-设计" class="headerlink" title="URL 设计"></a>URL 设计</h1><h3 id="动词-宾语"><a href="#动词-宾语" class="headerlink" title="动词+宾语"></a>动词+宾语</h3><p>RESTful 的核心思想就是，客户端发出的数据操作指令都是”动词 + 宾语”的结构。比如，GET /articles这个命令，GET是动词，/articles是宾语。<br>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p><h3 id="动词的覆盖"><a href="#动词的覆盖" class="headerlink" title="动词的覆盖"></a>动词的覆盖</h3><p>有些客户端只能使用GET和POST这两种方法。服务器必须接受POST模拟其他三个方法（PUT、PATCH、DELETE）。<br>这时，客户端发出的 HTTP 请求，要加上X-HTTP-Method-Override属性，告诉服务器应该使用哪一个动词，覆盖POST方法。</p><h3 id="宾语必须是名词"><a href="#宾语必须是名词" class="headerlink" title="宾语必须是名词"></a>宾语必须是名词</h3><p>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，/articles这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</p><h3 id="复数-URL"><a href="#复数-URL" class="headerlink" title="复数 URL"></a>复数 URL</h3><p>既然 URL 是名词，那么应该使用复数，还是单数？<br>这没有统一的规定，但是常见的操作是读取一个集合，比如GET /articles（读取所有文章），这里明显应该是复数。<br>为了统一起见，建议都使用复数 URL，比如GET /articles/2要好于GET /article/2。</p><h3 id="避免多级-URL"><a href="#避免多级-URL" class="headerlink" title="避免多级 URL"></a>避免多级 URL</h3><p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">GET <span class="regexp">/authors/</span><span class="number">12</span><span class="regexp">/categories/</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。<br>更好的做法是，除了第一级，其他级别都用查询字符串表达。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /authors/12?<span class="attribute">categories</span>=2</span><br></pre></td></tr></table></figure><h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><p>一般来说 API 的外在形式无非就是增删改查（当然具体的业务逻辑肯定要复杂得多），而查询又分为详情和列表两种，在 RESTful 中这就相当于通用的模板。例如针对文章（Article）设计 API，那么最基础的 URL 就是这几种：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">GET <span class="meta-keyword">/articles/</span>list： 文章列表</span><br><span class="line">GET <span class="meta-keyword">/articles/</span>detail<span class="class">/&#123;id&#125;：文章详情</span></span><br><span class="line"><span class="class">POST <span class="meta-keyword">/articles/</span>create/： 创建文章</span></span><br><span class="line"><span class="class">PUT <span class="meta-keyword">/articles/</span>update/&#123;id&#125;：修改文章</span></span><br><span class="line"><span class="class">DELETE <span class="meta-keyword">/articles/</span>delete/&#123;id&#125;：删除文章</span></span><br></pre></td></tr></table></figure><p> RESTful 中使用 GET、POST、PUT 和 DELETE 来表示资源的查询、创建、更改、删除，并且除了 POST 其他三种请求都具备幂等性（多次请求的效果相同）。需要注意的是 POST 和 PUT 最大的区别就是幂等性，所以 PUT 也可以用于创建操作，只要在创建前就可以确定资源的 id。</p><p>  将 id 放在 URL 中而不是 Query Param 的其中一个好处是可以表示资源之间的层级关系，例如文章下面会有评论（Comment）和点赞（Like），这两项资源必然会属于一篇文章，所以它们的 URL 应该是这样的：</p><p>评论：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">GET <span class="string">/articles/</span>&#123;aid&#125;<span class="string">/comments</span>： 某篇文章的评论列表</span><br><span class="line">GET <span class="string">/comments/</span>&#123;cid&#125;<span class="string">/get</span>： 获取</span><br><span class="line">POST <span class="string">/articles/</span>&#123;aid&#125;<span class="string">/comments/create</span>： 在某篇文章中创建评论</span><br><span class="line">PUT <span class="string">/comments/</span>&#123;cid&#125;<span class="string">/update</span>： 修改评论</span><br><span class="line">DELETE <span class="string">/comments/</span>&#123;cid&#125;<span class="string">/delete</span>： 删除评论</span><br></pre></td></tr></table></figure><p>  这里有一点比较特殊，永远去使用可以指向资源的的最短 URL 路径，也就是说既然<code>/comments/{cid}</code>已经可以指向一条评论了，就不需要再用<code>/articles/{aid}/comments/{cid}</code>特意的指出所属文章了。</p><p>点赞：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">GET <span class="string">/articles/</span>&#123;id&#125;<span class="string">/like</span>：查看文章是否被点赞</span><br><span class="line">PUT <span class="string">/articles/</span>&#123;id&#125;<span class="string">/like</span>：点赞文章</span><br><span class="line">DELETE <span class="string">/articles/</span>&#123;id&#125;<span class="string">/like</span>：取消点赞</span><br></pre></td></tr></table></figure><p>由于大部分的关系查询都与当前的登录用户有关，所以也可以直接在关系所属的资源中返回关系状态。例如点赞状态就可以直接在获取文章详情时返回。注意这里我选择了 PUT 而不是 POST，因为我觉得点赞这种行为应该是幂等的，多次操作的结果应该相同。</p><h1 id="Token-和-Sign"><a href="#Token-和-Sign" class="headerlink" title="Token 和 Sign"></a>Token 和 Sign</h1><p>API 需要设计成无状态，所以客户端在每次请求时都需要提供有效的 Token 和 Sign，在我看来它们的用途分别是：</p><ul><li>Token 用于证明请求所属的用户，一般都是服务端在登录后随机生成一段字符串（UUID）和登录用户进行绑定，再将其返回给客户端。Token 的状态保持一般有两种方式实现：一种是在用户每次操作都会延长或重置 TOKEN 的生存时间（类似于缓存的机制），另一种是 Token 的生存时间固定不变，但是同时返回一个刷新用的 Token，当 Token 过期时可以将其刷新而不是重新登录。</li><li>Sign 用于证明该次请求合理，所以一般客户端会把请求参数拼接后并加密作为 Sign 传给服务端，这样即使被抓包了，对方只修改参数而无法生成对应的 Sign 也会被服务端识破。当然也可以将时间戳、请求地址和 Token 也混入 Sign，这样 Sign 也拥有了所属人、时效性和目的地。</li></ul><h1 id="统计性参数"><a href="#统计性参数" class="headerlink" title="统计性参数"></a>统计性参数</h1><p>  我不太清楚这类参数具体该被称为什么，总之就是用户的各种隐私【误。类似于经纬度、手机系统、型号、IMEI、网络状态、客户端版本、渠道等，这些参数会经常收集然后用作运营、统计等平台，但是在大部分情况下他们是与业务无关的。这类参数变化不频繁的可以在登录时提交，变化比较频繁的可以用轮训或是在其他请求中附加提交。</p><h1 id="业务参数"><a href="#业务参数" class="headerlink" title="业务参数"></a>业务参数</h1><p>  在 RESTful 的标准中，PUT 和 PATCH 都可以用于修改操作，它们的区别是 PUT 需要提交整个对象，而 PATCH 只需要提交修改的信息。但是在我看来实际应用中不需要这么麻烦，所以我一律使用 PUT，并且只提交修改的信息。<br>  另一个问题是在 POST 创建对象时，究竟该用表单提交更好些还是用 JSON 提交更好些。其实两者都可以，在我看来它们唯一的区别是 JSON 可以比较方便的表示更为复杂的结构（有嵌套对象）。另外无论使用哪种，请保持统一，不要两者混用。<br>  还有一个建议是最好将过滤、分页和排序的相关信息全权交给客户端，包括过滤条件、页数或是游标、每页的数量、排序方式、升降序等，这样可以使 API 更加灵活。但是对于过滤条件、排序方式等，不需要支持所有方式，只需要支持目前用得上的和以后可能会用上的方式即可，并通过字符串枚举解析，这样可见性要更好些。例如：<br>  搜索，客户端只提供关键词，具体搜索的字段，和搜索方式（前缀、全文、精确）由服务端决定：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/users/?<span class="attribute">query</span>=ScienJus</span><br></pre></td></tr></table></figure><p>  过滤，只需要对已有的情况进行支持：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/users/?<span class="attribute">gender</span>=1</span><br></pre></td></tr></table></figure><p>  对于某些特定且复杂的业务逻辑，不要试图让客户端用复杂的查询参数表示，而是在 URL 使用别名：</p> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/users/</span>recommend</span><br></pre></td></tr></table></figure><p>  分页：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/users/?<span class="attribute">offset</span>=10&amp;limit=10</span><br><span class="line"> /articles/?<span class="attribute">cursor</span>=2015-01-01 15:20:30&amp;<span class="attribute">limit</span>=10</span><br><span class="line"> /users/?<span class="attribute">page</span>=2&amp;pre_page=20</span><br></pre></td></tr></table></figure><p>  排序，只需要对已有的情况进行支持：</p> <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/articles/</span><span class="keyword">sort</span>=-create_date</span><br></pre></td></tr></table></figure><p> PS：我很喜欢这种在字段名前面加<code>-</code>表示降序排列的方式。</p><h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><p>HTTP 状态码就是一个三位数，分成五个类别。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>xx：相关信息</span><br><span class="line"><span class="number">2</span>xx：操作成功</span><br><span class="line"><span class="number">3</span>xx：重定向</span><br><span class="line"><span class="number">4</span>xx：客户端错误</span><br><span class="line"><span class="number">5</span>xx：服务器错误</span><br></pre></td></tr></table></figure><p>这五大类总共包含100多种状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。<br>API 不需要1xx状态码，下面介绍其他四类状态码的精确含义。</p><h3 id="2xx-状态码"><a href="#2xx-状态码" class="headerlink" title="2xx 状态码"></a>2xx 状态码</h3><p>200状态码表示操作成功，但是不同的方法可以返回更精确的状态码。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">GET:</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">POST:</span> <span class="number">201</span> <span class="string">Created</span></span><br><span class="line"><span class="attr">PUT:</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">PATCH:</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">DELETE:</span> <span class="number">204</span> <span class="literal">No</span> <span class="string">Content</span></span><br></pre></td></tr></table></figure><p>上面代码中，POST返回201状态码，表示生成了新的资源；DELETE返回204状态码，表示资源已经不存在。<br>此外，202 Accepted状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于异步操作。下面是一个例子</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "task": &#123;</span><br><span class="line">    "href": "/api/company/job-management/jobs/2130040",</span><br><span class="line">    "id": "2130040"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3xx-状态码"><a href="#3xx-状态码" class="headerlink" title="3xx 状态码"></a>3xx 状态码</h3><p>API 用不到301状态码（永久重定向）和302状态码（暂时重定向，307也是这个含义），因为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。<br>API 用到的3xx状态码，主要是303 See Other，表示参考另一个 URL。它与302和307的含义一样，也是”暂时重定向”，区别在于302和307用于GET请求，而303用于POST、PUT和DELETE请求。收到303以后，浏览器不会自动跳转，而会让用户</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">303</span> See Other</span><br><span class="line"><span class="attribute">Location</span>: /api/orders/12345</span><br></pre></td></tr></table></figure><h3 id="4xx-状态码"><a href="#4xx-状态码" class="headerlink" title="4xx 状态码"></a>4xx 状态码</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>xx状态码表示客户端错误，主要有下面几种。</span><br><span class="line"><span class="symbol">400 </span>Bad Request：服务器不理解客户端的请求，未做任何处理。</span><br><span class="line"><span class="symbol">401 </span>Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。</span><br><span class="line"><span class="symbol">403 </span>Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。</span><br><span class="line"><span class="symbol">404 </span><span class="keyword">Not</span> Found：所请求的资源不存在，或不可用。</span><br><span class="line"><span class="symbol">405 </span>Method <span class="keyword">Not</span> Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</span><br><span class="line"><span class="symbol">410 </span>Gone：所请求的资源已从这个地址转移，不再可用。</span><br><span class="line"><span class="symbol">415 </span>Unsupported Media Type：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</span><br><span class="line"><span class="symbol">422 </span>Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。</span><br><span class="line"><span class="symbol">429 </span>Too Many Requests：客户端的请求次数超过限额。</span><br></pre></td></tr></table></figure><h3 id="5xx-状态码"><a href="#5xx-状态码" class="headerlink" title="5xx 状态码"></a>5xx 状态码</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>xx状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了。</span><br><span class="line"><span class="symbol">500 </span>Internal Server <span class="keyword">Error</span>：客户端请求有效，服务器处理时发生了意外。</span><br><span class="line"><span class="symbol">503 </span>Service Unavailable：服务器无法处理请求，一般用于网站维护状态。</span><br></pre></td></tr></table></figure><p>  但是有些时候仅仅使用 HTTP 状态码没有办法明确的表达错误信息，所以我倾向于在里面再包一层自定义的返回码，例如：</p><p>  成功时：</p> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"成功"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  失败时：</p> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">-1000</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"用户名或密码错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>data</code>是真正需要返回的数据，并且只会在请求成功时才存在，<code>msg</code>只用在开发环境，并且只为了开发人员识别。客户端逻辑只允许识别<code>code</code>，并且不允许直接将<code>msg</code>的内容展示给用户。如果这个错误很复杂，无法使用一段话描述清楚，也可以在添加一个<code>doc</code>字段，包含指向该错误的文档的链接。</p><h1 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h1><h3 id="不要返回纯本文"><a href="#不要返回纯本文" class="headerlink" title="不要返回纯本文"></a>不要返回纯本文</h3><p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的Content-Type属性要设为application/json。<br>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的ACCEPT属性也要设成application/json。下面是一个例子。</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">GET <span class="meta-keyword">/orders/</span><span class="number">2</span> HTTP/<span class="number">1.1</span> </span><br><span class="line"><span class="symbol">Accept:</span> application/json</span><br></pre></td></tr></table></figure><h3 id="发生错误时，不要返回-200-状态码"><a href="#发生错误时，不要返回-200-状态码" class="headerlink" title="发生错误时，不要返回 200 状态码"></a>发生错误时，不要返回 200 状态码</h3><p>有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "status": "failure",</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "error": "Expected at least two items in list."</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，解析数据体以后，才能得知操作失败。<br>这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "error": "Invalid payoad.",</span><br><span class="line">  "detail": &#123;</span><br><span class="line">     "surname": "This field is required."</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提供链接"><a href="#提供链接" class="headerlink" title="提供链接"></a>提供链接</h3><p>API 的使用者未必知道，URL 是怎么设计的。一个解决方法就是，在回应中，给出相关链接，便于下一步操作。这样的话，用户只要记住一个 URL，就可以发现其他的 URL。这种方法叫做 HATEOAS。<br>举例来说，GitHub 的 API 都在 api.github.com 这个域名。访问它，就可以得到其他 URL。</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="string">"feeds_url"</span>: <span class="string">"https://api.github.com/feeds"</span>,</span><br><span class="line">  <span class="string">"followers_url"</span>: <span class="string">"https://api.github.com/user/followers"</span>,</span><br><span class="line">  <span class="string">"following_url"</span>: <span class="string">"https://api.github.com/user/following&#123;/target&#125;"</span>,</span><br><span class="line">  <span class="string">"gists_url"</span>: <span class="string">"https://api.github.com/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">  <span class="string">"hub_url"</span>: <span class="string">"https://api.github.com/hub"</span>,</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的回应中，挑一个 URL 访问，又可以得到别的 URL。对于用户来说，不需要记住 URL 设计，只要从 api.github.com 一步步查找就可以了。</p><p>HATEOAS 的格式没有统一规定，上面例子中，GitHub 将它们与其他属性放在一起。更好的做法应该是，将相关链接与其他属性分开。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "status": "In progress",</span><br><span class="line">   "links": &#123;[</span><br><span class="line">    &#123; "rel":"cancel", "method": "delete", "href":"/api/status/12345" &#125; ,</span><br><span class="line">    &#123; "rel":"edit", "method": "put", "href":"/api/status/12345" &#125;</span><br><span class="line">  ]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON 比 XML 可视化更好，也更加节约流量，所以尽量不要使用 XML。<br>创建和修改操作成功后，需要返回该资源的全部信息。<br>返回数据不要和客户端界面强耦合，不要在设计 API 时就考虑少查询一张关联表或是少查询 / 返回几个字段能带来多大的性能提升。并且一定要以资源为单位，即使客户端一个页面需要展示多个资源，也不要在一个接口中全部返回，而是让客户端分别请求多个接口。<br>最好将返回数据进行加密和压缩，尤其是压缩在移动应用中还是比较重要的。</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>  在 <a href="http://www.scienjus.com/app-server-paging/" target="_blank" rel="noopener">APP 后端分页设计</a> 中提到过，分页布局一般分为两种，一种是在 Web 端比较常见的有底部分页栏的电梯式分页，另一种是在 APP 中比较常见的上拉加载更多的流式分页。这两种分页的 API 到底该如何设计呢？</p><p>  电梯式分页需要提供<code>page</code>（页数）和<code>pre_page</code>（每页的数量）。例如：</p> <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta-keyword">/users/</span>?page=<span class="number">2</span><span class="variable">&amp;pre_page</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure><p>  而服务端则需要额外返回<code>total_count</code>（总记录数），以及可选的当前页数、每页的数量（这两个与客户端提交的相同）、总页数、是否有下一页、是否有上一页（这三个都可以通过总记录数计算出）。例如：</p> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pagination"</span>: &#123;</span><br><span class="line">       <span class="attr">"previous"</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">"next"</span>: <span class="number">3</span>,</span><br><span class="line">       <span class="attr">"current"</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="attr">"per_page"</span>: <span class="number">20</span>,</span><br><span class="line">       <span class="attr">"total"</span>: <span class="number">200</span>,</span><br><span class="line">       <span class="attr">"pages"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  流式布局也完全可以使用这种方式，并且不需要查询总记录数（好处是减少一次数据库操作，坏处时客户端需要多请求一次才能判断是否到最后一页）。但是会出现数据重复和缺失的情况，所以更推荐使用游标分页。</p><p>  游标分页需要提供<code>cursor</code>(下一页的起点游标) 和<code>limit</code>(数量) 参数。例如：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/articles/?<span class="attribute">cursor</span>=2015-01-01 15:20:30&amp;<span class="attribute">limit</span>=10</span><br></pre></td></tr></table></figure><p>  如果文章列表默认是以创建时间为倒序排列的，那么<code>cursor</code>就是当前列表最后一条的创建时间（第一页为当前时间）。</p><p>  服务端需要返回的数据也很简单，只需要以此游标为起点的总记录数和下一个起点游标就可以了。例如：</p> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pagination"</span>: &#123;</span><br><span class="line">       <span class="attr">"next"</span>: <span class="string">"2015-01-01 12:20:30"</span>,</span><br><span class="line">       <span class="attr">"limit"</span>: <span class="number">10</span>,</span><br><span class="line">       <span class="attr">"total"</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果<code>total</code>小于<code>limit</code>，就说明已经没有数据了。</p><p>  流式布局的分页 API 还有一种情况很常见，就是下拉刷新的增量更新。它的业务逻辑正好和游标分页相反，但是参数基本一样：</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/articles/?<span class="attribute">cursor</span>=2015-01-01 15:20:30&amp;<span class="attribute">limit</span>=20</span><br></pre></td></tr></table></figure><p>  返回数据有两种可能，一种是增量更新的数据小于指定的数量，就直接将全部数据返回（这个数量可以设置的相对大一些），客户端会将这些增量更新的数据添加在已有列表的顶部。但是如果增量更新的数据要大于指定的数量，就会只返回最新的 n 条数据作为第一页，这时候客户端需要清空之前的列表。例如：</p> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pagination"</span>: &#123;</span><br><span class="line">       <span class="attr">"limit"</span>: <span class="number">20</span>,</span><br><span class="line">       <span class="attr">"total"</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果<code>total</code>大于<code>limit</code>，说明增量的数据太多所以只返回了第一页，需要清空旧的列表。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小莫的日本换驾照攻略</title>
      <link href="2019/nihonnmennkyo/"/>
      <url>2019/nihonnmennkyo/</url>
      
        <content type="html"><![CDATA[<p>虽然没有100%确定要在日本定居，但是也不能像咸鱼一样度日。而且日本的驾照可以作为身份证明使用（有些日企在填资料时有一项是填：是否有驾照），所以便有准备考驾照，当然以后自驾游啥的也是很方便。在准备考试的过程中经过多方了解和调查获取了许多相关知识，所以准备以blog的形式记录下来。一是把内容整理出来方便自己更好的通过考试，也可以方便在日本想要换驾照的朋友提供个参照。（本篇文章历时2周，花费时间5个小时左右）</p><a id="more"></a><h1 id="换驾照和住所有关"><a href="#换驾照和住所有关" class="headerlink" title="换驾照和住所有关"></a>换驾照和住所有关</h1><p>因为我住在琦玉，所以换驾照是去<code>埼玉県鴻巣市鴻巣405番地</code>警察署，具体移步<a href="https://www.police.pref.saitama.lg.jp/f0130/menkyo/gaikoku.html" target="_blank" rel="noopener">琦玉警察署</a>，还有一种不需要和住所绑定，也就是报一个华人驾校，费用在3-4万左右。由于我准备硬刚，所以没有做这种方式的相关攻略，我同事选的这个方式目前己拿到驾照。如果万一对自己没有信心的话可以找个技能学习中心学几节课，费用在2万左右。不管怎么说换驾照都比直接考要便宜，我有个朋友10连休去学的驾照花了20多万，12天拿到驾照。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>资料审核时间是工作日的早上9:30-10:30,和下午的1:30-2:00，各半小时（政府单位就是这么任性）。如果要当天考视力和笔试必须得上午去，下午1点钟考。</li><li>在国内拿到驾照之后需要待满3个月以上才能过来换。</li><li>如果日语不好需要有人陪同，会问一些简单的情况。</li><li>如果戴眼镜的话会被做标记限制只能戴眼镜开车，很在意这个测视力的时候可以戴隐形假装自己不近视。（看的别人的攻略，个人觉得没必要这样弄虚作假）</li><li>考试内容的话概括是视力测试;10道题的理论测试，7道以上合格;类似国内科二跑一圈。扣分制，70分以下考官会叫停。</li><li>日本是右舵，跟国内相反。不过看到这个攻略的人应该都知道这个情况。</li><li>台湾护照可以不经过考试直接换日本驾照。</li></ol><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><ol><li>报名费 2550　（意味着挂几次就要出几次2550）</li><li>领取驾照 2050 （工本费，考过后出一次）</li></ol><h1 id="需要的资料"><a href="#需要的资料" class="headerlink" title="需要的资料"></a>需要的资料</h1><ol><li>在留卡原件</li><li>护照。用来确认在居留期限及出入国境的记录。</li><li>1寸照片（3X2.4），两张或以上。日本的车站里的写真机器或者便利店里的打印机都可以弄。</li><li>登录所有信息的住民票</li><li>中国驾驶证。（原件。JAF及各县交通局会拿去复印。需要在取证之后的3个月内没有出中国的记录。）</li><li>JAF（Japan Automobile Federation日本汽车联盟）翻译件，可以去JAF窗口也可以邮寄。费用 3500，具体请移步<a href="http://www.jaf.or.jp/inter/translation/" target="_blank" rel="noopener">JAF</a></li><li>国内的成绩单和个人信息表，不需要翻译件</li></ol><h1 id="中文PDF说明文件"><a href="#中文PDF说明文件" class="headerlink" title="中文PDF说明文件"></a>中文PDF说明文件</h1><p><a href="https://www.keishicho.metro.tokyo.jp/multilingual/chinese/traffic_safety/drivers_licenses/index.files/convert_license_chinese.pdf" target="_blank" rel="noopener">外国驾照更换日本驾照</a></p><h1 id="考试经过"><a href="#考试经过" class="headerlink" title="考试经过"></a>考试经过</h1><ol><li>坐电梯上2楼右转再右转，到<code>外国人免许相谈室</code>门口排队，等待资料审核。会问一些国内考驾照的细节，需要有一定的日语基础。（不会日语需要自带翻译）</li><li>下午1点前到1楼大厅左侧3-4号排队检查视力，然后考10道理论题，7道以上合格。（正常人都能通过）</li><li>通过之后就会被带到场地上车考试，场地有很多小牌子，考官会提前发出指令。对牌子的位置不熟的话很快就会挂掉！！！<a href="https://blog.xiaomo.info/2019/nihonnmennkyo/#%E6%9C%80%E5%90%8E%E9%85%8D%E4%B8%80%E5%BC%A0%E7%90%A6%E7%8E%89%E8%80%83%E8%AF%95%E7%9A%84%E5%B9%B3%E9%9D%A2%E8%B7%AF%E7%BA%BF%E5%9B%BE">参考</a></li><li>我在考到一半的时候被叫停挂掉，最大原因就是对场地不熟悉（毕竟没练过），开车的时候不停的在找牌子就这样挂掉了，预约在半个月后（6/24）再次考试。</li><li>参考考试结果觉得不练一下还是比较难考过，果断找了一家驾校准备去练几节课。</li></ol><h1 id="练车心得"><a href="#练车心得" class="headerlink" title="练车心得"></a>练车心得</h1><p>2019/6/10去驾校练车，由于平日练车的人不多所以直接一次性练了3节课（<code>3280*3</code>），练车后觉得还是挺有帮助的。</p><ol><li>上车前：从副驾侧绕到车头中间后退3步蹲下看车底和轮胎，然后从副驾侧绕道车尾后退3步蹲下看车底和轮胎 检查有没有小动物，儿童，或障碍物，有没有漏油，变形，车轮是否回正等。确认无误后，从后面绕到车右侧开门上车。。（不能从车头直接绕到驾驶室）</li><li>上车时：先看后方，无人时把车门开一个缝，然后再扭头观察后方。无车情况下打开车门进入驾驶室。坐下后关车门：关车门分两段，先虚掩一下车门，确认不会夹到东西，再用力关上，关上后顺便锁车门！不锁车门会扣分。然后向考官问好：こんにちは，留个好印象。</li><li>打火前准备：调节座椅位置，调节车内后视镜（就算合适也要调整，要有这个动作），系上安全带，并告诉考官 シートベルト(seat belt)お願いいたします。如果车轮没有回正的话，把车轮回正。依次摸一下档位和手刹，确认手刹已经拉上，档位在P档，雨刮，灯光拨杆位置都正确。确认的时候可以用手指一个一个点过去做确认状。然后踩着刹车，发动引擎，启动后确认车况和指示灯无异常。</li><li>打火后准备：调节左右2个后视镜，如果下雨情况下要打开雨刷。（没打火调不了左右后视镜）准备完之后告诉考官 準備終わりました。</li><li>当考官告诉你 出発，回答　はい。然后挂D档，松手刹，打右转灯。依次扭头确认后方，左后视镜，车内后视镜，右后视镜，右侧，扭头看右向方（记住一定要回头！不然会扣分！扣分！分！），没车的情况下松开刹车起步。</li><li>进入主道前要停车，依次观察车内后视镜，右方后视镜，右后方，无车情况下方可进入。</li><li>过弯道后进入直道要加速至35-40码，进入弯道前减速。</li></ol><hr><ol start="8"><li>此时考官会说 <code>3</code>番：右，到<code>33</code>号附近（提前30米）打右转灯。确认车内后视镜，右方后视镜，右后方。无车开始向右并线，到<code>3号</code>再次3点确认后右转到左道上，然后此直道上要加速到35-40码。</li><li>此时考官会说 <code>35</code>番：右，打右转灯，右方3点确认。可在上一步的基础上贴近右侧线，到<code>35号</code>前再次右方3次确认进入<code>直接弯</code>。</li><li>此时考官会说 <code>38</code>番：右，打右转灯，在路口停车以此确认左后视镜，车内后视镜，右后视镜，右方，然后看着左方没车的时候拐入左侧道路。</li><li>此时考官会说 <code>2</code>番：左，此时离2号还隔着一个<code>红绿灯</code>，不要急着打灯。正常通过红绿灯后，打左转灯。然后依次左方3点确认后开始向左并线。在2号时停车看右方，右后视镜，车内后视镜，左边后视镜，左前方，然后看下右方没车转向左道。</li><li>此时考官会说 <code>1</code>番：左，打左转打。左方3点确认，没车的话往左并线。到了<code>1号</code>后停车左方3点确认没车的话进入左道，前方直接要加速到35-40码。前方十字路口<code>有树（見通し悪い場所）</code>，要降速至10码以下到达路口时要前倾以右左右的顺序确认缓慢通过。</li><li>此时考官会说 <code>50</code>番：左，打左转灯，左方3点确认，向左并线。到达50号时再次左方3点确认，没车时开始进入<code>S弯</code>。</li><li>此时考官会说 <code>49</code>番：右，在路口时要停车看右前方，车内后视镜，左前方，没车时右转到左道。</li><li>此时考官会说 <code>16</code>番：左，打左转灯，左方3点确认，并线至左边。然后到达<code>16</code>号时<code>停车3秒(止まれ)</code>,不停会挂掉。看右前，车内后视镜，左侧后视镜，扭头看后方。然后看下右方没车的话开始左转。前方有一个路口，减速通过。然后有一个人行道，减速通过。</li><li>此时考官会说 <code>14</code>番：左，打左转灯。左方3点确认，开始向左并线。到达<code>14</code>号再次3点确认，没车时开始左转。前人有一个红绿灯，注意看灯。通过后加速到35-40码。</li><li>此时考官会说 <code>4</code>番：右，打右转打，右方3点确认，并线到右边。到达4号后再次右方3点确认，看下左边没车的话开始进入左道。</li><li>此时考官会说 <code>8</code>番：右，打右转打，右方3点确认，向右侧并线。同样也要反复左右偏头确认后再进入左侧道路。前方<code>有树（見通し悪い場所）</code>，要路口前要减速到10码以下，以右左右的顺序确认缓慢通过。</li><li>此时考官会说 <code>10</code>番：右，打右转灯，右方3点确认，然后向右侧并线。到达10号再次右方3点确认，并进入左道。此时加速至40-50， 前方有<code>障碍物</code>，还有50米左右时打右转灯，然后右方3点确认，打30度方向盘加速进入右道，车子摆正后打左转灯，到达障碍物时左方3点确认，没车时打30度方向盘并入左侧。前方过弯道后打左转灯，左方3点确认。没车时进入左道。</li><li>此时考官会说 <code>左</code> 终点停車,减速，打左灯，回头看，贴边，在指定的位置慢慢停住。（左侧30CM以内，左前方铁栏杆50CM以内）。</li></ol><hr><ol start="22"><li>先拉手刹（不用按），然后挂P档。如果雨刷打开着的话要向前推关掉雨刷，熄火。把座椅推到最后，然后解掉安全带。把车门打开一个缝，观察后方安全推开车门，一只脚踏出去后告诉考官 終わりました。</li><li>从车的后方绕到考官的左侧车窗，听候发落。。</li><li>车开到终点，考官会根据你的表现告诉你及不及格，合格的话归还号码牌，不合格的话会还你申请资料。有时候考官会问你两句，比如说你之前练了多久的车，在哪个驾校练的，这是第几次考试了之类的，有时候结果介于及格和不及格之间的话，回答没怎么练过，或者驾校的名声比较臭的话容易给不及格。不及格的话一般考官会告诉你扣分点在哪里，你是怎么错的，不过一般也就说一两个地方，如果错的比较多的话考官不会全部都告诉你，但是如果教官完全没说的话你可以开口问，考官是有义务告知你的，问的话不会不说。等说完之后就按照指示去约下一次的考试。及格的话，去换证窗口办手续，按照指示等两三个小时，就可以领到驾照了。最后祝换证的朋友们都能一切顺利！</li></ol><h1 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>打方向盘不要太急，不稳会扣分。</li><li>打方向盘一次不要太多，回盘一次扣5分。</li><li>止まれ 不停车会被直接踩停挂掉考试;红灯不停会被踩停挂掉考试;逆行会被踩停挂掉考试。</li><li>考试前拿着路线图实地进场走一走，再熟悉一遍(11:45~12:45)。</li><li>要先打灯后确认，到达目的地点后再次确认方可动盘。</li><li>确认的时候要保持方向盘水平且不能动盘。</li><li>有树的地方（見通し悪い場所）一定要减速并左右观察确定。</li><li>路线一定要熟记，在哪往哪转提前心里要有谱。</li></ol><h1 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h1><ol><li>日本驾照的扣分是：每个月有3分。各种违章，按轻重扣分不同。比如15号，你的3分扣完了，那么你这个月就不能再开车了。但下个月自动还是有3分的。</li><li>开车的时候，一定不要喝酒，一口都不行，因为你考回来的驾照会被吊销！另外，安全带，上车后必须系上！必须！包括副驾驶的！如果副驾驶没有系安全带，警察看到后，司机的驾照仍旧会被扣分。</li><li>普通道路的时候，可以稍微超速，80km/h的限速，开到120km/h的也大有人在，只是有被扣分罚钱的危险。</li></ol><h1 id="最后配一张琦玉考试的平面路线图"><a href="#最后配一张琦玉考试的平面路线图" class="headerlink" title="最后配一张琦玉考试的平面路线图"></a>最后配一张琦玉考试的平面路线图</h1><p><img src="/img/blog/saitama.png"></p><h1 id="更加真实一点的地图"><a href="#更加真实一点的地图" class="headerlink" title="更加真实一点的地图"></a>更加真实一点的地图</h1><p><img src="/img/blog/course.jpg"></p><h1 id="2019-08-20-更新"><a href="#2019-08-20-更新" class="headerlink" title="2019/08/20 更新"></a>2019/08/20 更新</h1><p>在昨天，终于拿到了驾照，不负这段付出的时光，希望每个努力的人都有一个好结果。<br><img src="/img/blog/menkyo.jpg"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://www.infukuoka.info/life/5168.html" target="_blank" rel="noopener">中国驾照转日本驾照超详细攻略！</a></li><li><a href="https://blog.xiangzhuyuan.com/tranfer-chinese-driver-license-to-japanese/" target="_blank" rel="noopener">东京换驾照记</a></li><li><a href="https://baijiahao.baidu.com/s?id=1595714456461270665&wfr=spider&for=pc" target="_blank" rel="noopener">日本留学 ｜ 如何在日本换驾照</a></li><li><a href="http://mini.eastday.com/bdmip/180404112201086.html#" target="_blank" rel="noopener">YMG教你中国驾照如何换日本驾照</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年终总结（日本的生活日常）</title>
      <link href="2018/nihonnkita2kagetsu/"/>
      <url>2018/nihonnkita2kagetsu/</url>
      
        <content type="html"><![CDATA[<p>来日本也差不多有2个月啦，这2个月时间也一直没有更新博客,本来是在元旦就应该开始写的，但是一直拖到了现在。主要是因为换了新环境很多事情需要做，很多地方需要适应，所以没时间也没法静下心来写写博客记录一下生活。现在终于有时间坐下来记录一下在日本的生活日常。</p><a id="more"></a><h1 id="我为什么要来日本"><a href="#我为什么要来日本" class="headerlink" title="我为什么要来日本"></a>我为什么要来日本</h1><p>大学的时候一直对动漫特别感觉趣，毕业后在杭州偶然接触到对日的软件开发，开始萌发了学日语的想法。后来看动漫的量越来越多，听力也慢慢好起来，开始有了到日本看一看的念头，但是因为能力受限一直没有到日本，但是在2015年~2018年期间有断断续续的背日语单词。17年国庆节的时候和老婆一起来日本自由行12天，亲眼见证了日本的自然和人文，便把到日本工作作为自己的下一个计划。大家应该都知道2018年是互联网很不好的一年，裁员风暴一波又一波，但是我的前公司并没有因此裁员反而吸收了大量被裁员的人。我15年进那家公司的时候不到60人，我18年离职的时候己经快1000人了，我亲眼见证了这家公司的飞速成长。但是为我什么离职呢，我在这家公司3年了也想换换新的环境，但是国内的环境不好自己带的那个项目表现不是很好又经常通宵加班所以趁此机会开始找日本的工作机会。从6月份开始通过猎头远程面试到7月份确定工作，然后就是各种证件EMS给公司办在留资格证。</p><h1 id="我来日本多久了"><a href="#我来日本多久了" class="headerlink" title="我来日本多久了"></a>我来日本多久了</h1><p>2018年8月份开始申请在留，2019年11月拿到手，但是很快到日本的新年了。所以我在农历的腊月中旬（2019.1.16）来到日本东京，2019年在日本度过了的第一个中国新年，正好今年东京塔在春节当晚亮起了中国红，刷爆了朋友圈,突然也有了一点恋家的感觉。我老家在非常偏僻的农村，后来了为读书我们搬到了镇上。考上了县城高中然后在县城买了房子。到后来读大学，去了武汉。毕业后和朋友一起到杭州谋生。现在都各自成家立业，朋友正在注册着属于自己的公司，而我飘扬过海来到日本工作。我一直不信星座，但是作为射手座的我，星座解释说射手座向往自由和远方，这一点我倒是深信不疑,从一个小村庄到出国，是射手座给我的勇气。截至到目前为止，我在日本待了大概有2个月，可能还会待很多个两个月。今年天皇退位,所以黄金周放10天假可以回杭州休息一段时间了。</p><h1 id="在日本住的房子是什么样的"><a href="#在日本住的房子是什么样的" class="headerlink" title="在日本住的房子是什么样的"></a>在日本住的房子是什么样的</h1><p>公司提供了3种方案：1、住公司宿舍——价格最便宜，也最省心，但是环境不是很好，地方也比较小。 2、在公司合租的中介那边自租房间——个人感觉价格比较贵，而且有朋友在日本工作，问我愿不愿意合租。 3、自理——我选择了自己搞定，在日本和朋友合租了UR团地，9万一个月，总面积54平，3DK。在房子上没有走很多才来日本的朋友的坑，这一点比较省心。但是由于住的地方比较远，所以上班时间得花1个多小时。不过和北上广比较来，也差不了太多。既然选择在大城市，就得有这个觉悟。</p><h1 id="在日本做什么样的工作"><a href="#在日本做什么样的工作" class="headerlink" title="在日本做什么样的工作"></a>在日本做什么样的工作</h1><p>我是2019年1月17号到达日本，来了之后公司催着去上班（我还以为是2.1号开始）。所以在17号当天急急忙忙办了各种手续。包括住民登记、办手机卡、办银行卡、去公司签协议等等。于是，在2019年2月18号，我正式开始了在日本的第一天社畜生活。我是在 在日华人在日本开的公司，属于派遣形式。第一个现场是在浦田，公司名字是日立制作所，我对日立印象最深的就是中国很多电梯都是三菱和日立的品牌。做的工作内容并没有什么技术性，短暂的做了一些测试的工作，在这期间我开始疯狂的记单词，没有工作任务的时候就记。好在这个现场的工作时间不长，2019年2月底就结束了，所以我开始面试新的项目，从3.1号开始到下个现场上班。说实话，因为自己日语口语太差，加上基本上没有对日开发经验，所以一度非常受挫。第一个面试的项目是在SoftBank，第二个是日本NSD,第三个是ricoh(理光)。第三个面上了，我特意去了解了一下是个世界500强的公司，还算是不错。工作内容是使用Angular6做网站开发，因为我经常不务正业研究一些乱七八糟的技术，包括但不限于Angular,React之类。在面试的时候虽然口语表达的不好，但是把自己Angular会的部分展示出来成功的获得了工作机会。还有最后2天就要开始做这个项目了，希望会是一个开心的过程。</p><h1 id="在日本的通讯方式"><a href="#在日本的通讯方式" class="headerlink" title="在日本的通讯方式"></a>在日本的通讯方式</h1><p>来日本的第一天匆匆忙忙办了一张Y！Mobile的手机卡，一个月2000日元，3GB流量。由于考虑手机用的比较久，电池不耐用，32G内存也不够用等等花了8万日元入手了一台256G的iphoneXR，办了一个SoftBank的卡，因为室友也用的SoftBank的卡，所以每个月还可以额外优惠1000日元。</p><h1 id="在日本吃什么"><a href="#在日本吃什么" class="headerlink" title="在日本吃什么"></a>在日本吃什么</h1><p>首先，我出生在内陆，很少吃海鲜，偶尔吃虾和鱼。来了日本之后看到鱼特别便宜但是却没有想吃的欲望觉得还是挺浪费的。正所谓入乡随俗，所以我也开始尝试一些日本料理，但是吃了一次生鱼片我确实还没法习惯。再加上店里吃饭比较贵，我一般都是自己做饭吃，带便当去现场中午吃。住的地方超市、便利店、物产店都很方便，想吃什么基本上都能买到。</p><h1 id="打算在日本待多久"><a href="#打算在日本待多久" class="headerlink" title="打算在日本待多久"></a>打算在日本待多久</h1><p>目前来说还没有确定，只能说走一步看一步。刚来日本各种东西不熟悉、语言不通、环境不适应等等各种因素我也打过退堂鼓，但是觉得自己努力了这么久才来了不到2个月，还得需要更多的时间去适应。</p><h1 id="日本的工作加班吗"><a href="#日本的工作加班吗" class="headerlink" title="日本的工作加班吗"></a>日本的工作加班吗</h1><p>做IT行业我说不加班你会信吗？ 你肯定会说：我信你鬼哟，你个糟老头子坏的很！ 确实，IT行业不需要和人打交道，有内容一直都可以做。但是日本确定很少加班，日本和中国不一样，日本是按照出勤时间算。比如说一天上班8小时，一个月上20天。所以日本普遍月出勤时间在150-160之间。到了下班时间还在公司墨迹领导会催着回去，而且有些公司规定周三、周五强制6点离场。在现在这个现场我偶尔也有加班，但是最晚是到8点钟，这样的话我出勤时间就有10个小时。我之后如果有事情要办，可以调休去办自己的事情，只要总工时达到了规定时间就能发全工资，所以我觉得这一点还是比较人性化。</p><h1 id="日本的社保"><a href="#日本的社保" class="headerlink" title="日本的社保"></a>日本的社保</h1><p>日本有社保和厚生年金，年金和国内的一金非常类似，自己的公司各负担一半。社保可以不交，但是国民健康保险最好交一下，我现在每个月是2700日元。日本纳税是按照上一年度纳税，我第一年来日本所以比较低，明年的话可能一个月要交8000左右的保险金。这个国民健康保险看病自己只用负担30%，家人也可以用，小孩子是全免费的。有些不分大人小孩可吃的药医生出会多开一些剂量，不用出钱大人也可以用，比如说日本人春天物别容易犯的花粉症的抗过敏药。我到现在为止拿到了国民健康保险卡，这个月也刚交了2700的保险金，但是没有到医院去过，所以具体什么样子得等以后再实践。</p><h1 id="日本IT行业的那些规矩"><a href="#日本IT行业的那些规矩" class="headerlink" title="日本IT行业的那些规矩"></a>日本IT行业的那些规矩</h1><p>在日本做IT没有灵活可言，要用什么工具，什么版本基本上都是定好的，给什么用什么。有问题一定要及时和上级沟通，上级会很认真的帮忙解决，自己想当然做到最后出问题会很严重，一直出错最终会失去领导的信任。在工位上可以玩手机，可以充电啥的，但是绝对不要把USB插到电脑上，也不要在办公室拍照。日本人上班工作喝水基本上都是在自动贩卖机上买各种饮料或矿泉水，目前只有我一个人会抱着个大大的保温杯去接开水喝，而且日本人食量很小，我每天中午都吃的是我们领导的2倍多，才开始还觉得有点羞耻，后来脸厚了也就无畏无惧了。我现在工作的地方允许在工位上吃饭，可能有些地方会不让。</p><h1 id="在日本的中国人可信吗"><a href="#在日本的中国人可信吗" class="headerlink" title="在日本的中国人可信吗"></a>在日本的中国人可信吗</h1><p>来日本之前看过很多文章说中国人坑中国人，首先我觉得比较丢脸，因为我也是中国人，但是我觉得事实上并没有说的那么严重。至少我来日本遇到的中国人都还是挺好的，包括我现在公司的社长、公司营业、办手机卡的中国营业员、项目组的中国人，感觉都还挺好的。目前没有出现被坑的情况，也希望以后不要遇到，不要让我也觉得国人坑国人是那么普遍。</p><h1 id="日本的卫生间"><a href="#日本的卫生间" class="headerlink" title="日本的卫生间"></a>日本的卫生间</h1><p>可能有朋友有觉得我把这个单独提出来是不是有点变态，其实我觉得是有些可以拿出来说的。首先，日本的卫生间干净的让人觉得十分舒服，完全没有味道。每个水龙头都有热水，旁边摆的洗手液永远都不会成空瓶子。有风干机，有镜子，每个马桶边上的纸从来不会空。总之，这些小细节真的是让人非常喜欢。</p><h1 id="办公室工作结构"><a href="#办公室工作结构" class="headerlink" title="办公室工作结构"></a>办公室工作结构</h1><p>我目前所在的项目是6个人，4个中国人和2个日本人。为了练日语，我会经常厚脸皮的和其中一个日本人发消息聊天，在没有工作内容的时候经常会一聊 聊半天时间。从开始打字都不知道打什么，到现在能长篇大论，从吃的谈到用的，从家庭谈到工作。我觉得我进步还是挺大的，但是目标最弱的还是口语，所以在接下来的时候我会努力的去读去练发声。</p><h1 id="非工作时间我一般在做什么"><a href="#非工作时间我一般在做什么" class="headerlink" title="非工作时间我一般在做什么"></a>非工作时间我一般在做什么</h1><p>来日本一个多月了，除了上班我感觉别的事情我真的什么都没做，但是总觉得时间一晃就非常晚了。一般来说，花1个多小时回家，再花1个小时做饭吃饭，再玩玩电脑玩玩手机不知不觉都己经过了12点。从高中开始一直对钢琴比较有兴趣，所以买了雅马哈的电钢琴但是也没什么时间练，但是它也是我以后其中计划的一环，总有一天我会流利的弹出我喜欢的钢琴曲。周六固定在日本政府办的免费日语教室上课，然后和朋友一起吃个晚饭。周末做家里蹲一睡一整天，其实我觉得这样很不好，这个我会尽量改掉。我一直计划想去海边去玩，但是因为温度比较低一直没有去，等天气暖和一点了去海边玩。在国内的时候玩着来日本了一有时间我就要出去各种浪，但是真正来了日本快2个月了一直没有出去玩过真是汗颜。</p><h1 id="日本的电车"><a href="#日本的电车" class="headerlink" title="日本的电车"></a>日本的电车</h1><p>日本的电车非常准时，我仔细注意过，我只要早上固定在某个时间点从家里出来，一定是在某个时间点到达公司。只有一次电车延迟了半个多小时，原因好像是我坐的这条线正好遇到了人身事故。日本的电车非常安静，日本人在电车上很喜欢看书。电车上明文规定手机保持震动，不要在车上打电话，所以车上非常安静。能听到别人说的悄悄话和翻书的声音。电车上有2个固定的显示屏，一个放广告一个放实时站点信息。不想看广告的话完全不会被打扰，屏幕上会有当天的天气预报。每个电车基本上都设置有3节女性车厢，早晚高峰最好不要坐，不然有可能会被白眼，其实这倒没什么，万一遇到蛮不讲理的女性非要说是痴汉会很伤脑筋。东京早晚高峰电车非常拥挤，这也是为什么男性要尽量避免女性专用车厢。但是平时的话很容易遇到座位，因为有很多日本人都不坐。据说是他们觉得会有比自己更需要座位的人，所以不是特别累就会站着，反正我是奉行有位置不坐是王八的バカ。</p><h1 id="日本的电梯文化"><a href="#日本的电梯文化" class="headerlink" title="日本的电梯文化"></a>日本的电梯文化</h1><p>我工作的现场有8个电梯，在两边都排着整齐的队伍。有电梯下来依次乘坐，坐不下的会退回来等下一部电梯。站的太满的时候靠近门的那部分人会先出来等别人都出来了再上去，电梯按钮边上的人也会帮忙一直把开的按钮一直按着，不会像国内站在里面想出来只能使劲挤出来。在坐电梯的时候如果门快关了有快速跑过来按开电梯，进来之前会先鞠躬道歉再过来。在按钮边上站着的人会按着开的按钮等所有人都出来了他们再出来，因为我没有这个习惯所以一到目的地楼层我就会先出来，所以心里会有点抱歉。</p><h1 id="来日本2个月的感觉"><a href="#来日本2个月的感觉" class="headerlink" title="来日本2个月的感觉"></a>来日本2个月的感觉</h1><p>首先从去市役所做住所登录来说，政府人员真的是非常非常有耐心。我听不懂他们说什么的时候，会用非常慢的语速再重复，如果再听不懂会用笔写下来。还是不懂的话我会打电话给日语好的朋友让我朋友帮我说，不管花多长时间他们不会显示出不耐烦。据日本的朋友说，我们作为纳税人养活着他们，他们态度好不是理所当然的么。我觉得非常震惊，但是仔细想过又觉得他说的非常有道理。但是日本非常不方便的是办事情只能工作日，周六周日从来不上班。但是工作现场可以调休这一点也正好弥补了这一点不方便。还有非常不方便的地方就是日本的快递不能邮寄到公司，只能邮到家里。但是提前不能指定时间，他们送到之后。人不在家拿不了时，会给一张不在联络票放在邮箱，拿到不在联络票再指定时间。我觉得这真是一个神奇而又变态的设定。在日本总体来说有着非常好的服务态度，不用担心食品安全问题，每天都能看到蓝天，很多细节感人泪人，也不用在意各种墙，写代码因为网络原因出现各种奇怪而又难解决的问题。但是毕竟这不是自己的家乡，会觉得不适应。也会想家人，想老婆，想孩子，也想我家那只蓝猫。</p><h1 id="我接下来的计划"><a href="#我接下来的计划" class="headerlink" title="我接下来的计划"></a>我接下来的计划</h1><p>在日本工作生活，时间越长越觉得日语不好是多么的不方便。听着别人说一口流利的日语，真的是不要太羡慕。所以接下来首要的任务就是加油学日语，然后报今年7月份的N2。如果N2能考，12月份接着考N1,万一考不过继续考N2。反正不考到N1不罢休。然后就是好好学学技术，技术是自己的饭碗所以这个当然不能丢。计划做一个独立小游戏上线推广。朋友注册了公司，帮忙做一些公司建设方面的内容。N1到手之后开始把时间转移到学英语和钢琴上，然后考一些日本政府认可的技术证书等等（高级人才签证的准备工作）。我一直觉得人活着，过一天就要有新的收获，所以每一天都在不停的学习。达到一个目标后，继续开始新的目标。比如说初中时各个假期学五笔、学PS、学装系统、电脑维修等等，这些都为我以后的工作生活带来了极大的方便 。有的时候和我朋友讲我的经历，他们总会觉得我的经历充满了传奇，非常的羡慕。但是我想说的是，每个人都是一个精彩的传奇，我被别人羡慕着同样也羡慕着别人。我也有特别多让人烦心的事情，也是一个普通的不能再普通的普通人。</p><h1 id="不会日语可以来日本工作吗"><a href="#不会日语可以来日本工作吗" class="headerlink" title="不会日语可以来日本工作吗"></a>不会日语可以来日本工作吗</h1><p>完全可以，因为众所周知，日本是一个少子化相当严重的国家，而IT行业缺人尤为严重。只要会一点点技术，基本上都不会找不到工作。不过工资不会太高，一般会在25万左右。但是想在日本长期生活，建议尽最大努力提长自己的日语能力。哪怕来了日语才开始记50音图都没关系，但是一直要快点把日语学好，因为这关系到自己的待遇和生活质量。谁都不想出去了只买自己知道的东西，找不到东西不知道怎么给店员说。有人可能会反驳，很多店都有中国店员，甚至有很多日本人也在在学中文。但是在日本这个国家生活，只想靠中文生活是不是有点说不过去。</p><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1><p>断断续续天马行空的写了些乱七八糟的东西。想看的朋友将就着看，如果有什么问题想了解我没有提到的欢迎留言，我会适当补充内容。</p>]]></content>
      
      
      <categories>
          
          <category> japan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fps游戏常用功能</title>
      <link href="2018/unityFpsCommonMethod/"/>
      <url>2018/unityFpsCommonMethod/</url>
      
        <content type="html"><![CDATA[<p>镜头拉远拉近，类似狙的镜头缩放；枪口特效；角色的移动和镜头旋转</p><a id="more"></a><h1 id="镜头拉远拉近"><a href="#镜头拉远拉近" class="headerlink" title="镜头拉远拉近"></a>镜头拉远拉近</h1><ol><li>在main camera中添加一个脚本 <code>CameraZoom</code></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraZoom</span> :</span> MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Camera mainCamera;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] zoomLevel = &#123;<span class="number">60</span>, <span class="number">40</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentLevel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mainCamera = GetComponent&lt;Camera&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            currentLevel += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (currentLevel &gt;= zoomLevel.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                currentLevel = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> currentFieldOfView = zoomLevel[currentLevel];</span><br><span class="line"></span><br><span class="line">        mainCamera.fieldOfView = Mathf.Lerp(mainCamera.fieldOfView, currentFieldOfView, <span class="number">0.1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>此脚本的功能是可以在编辑器中自定义缩放等级，不设置的话默认是60,40,20共3个等级。当按下鼠标左键的时候缩放等级+1,到了最大缩放等级回到0</li></ol><h1 id="fps角色组成部分"><a href="#fps角色组成部分" class="headerlink" title="fps角色组成部分"></a>fps角色组成部分</h1><p><img src="https://image.xiaomo.info/unity3d/fps/player.png"></p><ul><li>player是个空物体，是放角色模型的容器</li><li>player/main camera是player的子物体，我们控制player移动时camera跟着一起移动</li><li>player/guns 是枪的容器,放所有的枪</li><li>player/guns/HandGun是手枪的容器，里面放手枪的模型，枪口</li><li>player/guns/handGun/firePoint/fireEffect 是枪口开火特效，默认隐藏，开火时显示</li></ul><ol><li>新建一个脚本<code>FireEffectController</code>挂在<code>firePoint</code>空物体上,当点击鼠标左键时开火显示特效，使用<code>Invoke</code>方法延迟0.3秒隐藏</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunFireEffect</span> :</span> MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject fireEffect;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fireEffect = transform.Find(<span class="string">"Effect"</span>).gameObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            fireEffect.SetActive(<span class="literal">true</span>);</span><br><span class="line">            Invoke(<span class="string">"HideEffect"</span>, <span class="number">0.3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HideEffect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fireEffect.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="角色控制"><a href="#角色控制" class="headerlink" title="角色控制"></a>角色控制</h1><ol><li>移动,这个方法因为乘了<code>Time.deltaTime</code>，所以它是在<code>Update</code>方法中调用的，h或者v要有其一大于0</li></ol><figure class="highlight plain"><figcaption><span><summary></summary></span></figcaption><table><tr><td class="code"><pre><span class="line">/// 在update中调用</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;h&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;v&quot;&gt;&lt;/param&gt;</span><br><span class="line">public void Move(float h, float v)</span><br><span class="line">&#123;</span><br><span class="line">    Vector3 dir = new Vector3(h * speed * Time.deltaTime, 0, v * speed * Time.deltaTime);</span><br><span class="line">    player.Translate(dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>旋转视野，这个方法只能在<code>FixedUpdate中调用</code>，如果要放在<code>Update</code>中,x、y要乘于<code>Time.deltaTime</code></li></ol><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在fixUpdate中调用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RotateView</span>(<span class="params"><span class="keyword">float</span> x, <span class="keyword">float</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x *= rotateSpeed;</span><br><span class="line">    y *= rotateSpeed;</span><br><span class="line">    <span class="comment">// 左右沿自身旋转</span></span><br><span class="line">    transform.Rotate(-y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下旋转沿世界坐标</span></span><br><span class="line">    transform.Rotate(<span class="number">0</span>, x, <span class="number">0</span>, Space.World);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>角色控制器脚本<code>FpsPlayerController</code>方法</li></ol><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FpsPlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Range(2, 4)</span>] <span class="keyword">public</span> <span class="keyword">int</span> speed = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Transform player;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> rotateSpeed = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        player = GameObject.Find(<span class="string">"Player"</span>).transform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 键盘</span></span><br><span class="line">        <span class="keyword">float</span> h = Input.GetAxisRaw(<span class="string">"Horizontal"</span>);</span><br><span class="line">        <span class="keyword">float</span> v = Input.GetAxisRaw(<span class="string">"Vertical"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h &gt;= <span class="number">0.1f</span> || v &gt;= <span class="number">0.1f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Move(h, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 鼠标</span></span><br><span class="line">        <span class="keyword">float</span> x = Input.GetAxisRaw(<span class="string">"Mouse X"</span>);</span><br><span class="line">        <span class="keyword">float</span> y = Input.GetAxisRaw(<span class="string">"Mouse Y"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0.1f</span> || y &gt; <span class="number">0.1f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            RotateView(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://image.xiaomo.info/unity3d/camera/fps.gif"></p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>镜头拉远拉近</title>
      <link href="2018/unitySceneFarAndNear/"/>
      <url>2018/unitySceneFarAndNear/</url>
      
        <content type="html"><![CDATA[<p>镜头拉远拉近，类似狙的镜头缩放</p><a id="more"></a><ol><li>在场景中创建一个cube,默认fieldOfView为60</li><li>在main camera中添加一个脚本 <code>CameraZoom</code></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraZoom</span> :</span> MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Camera mainCamera;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] zoomLevel = &#123;<span class="number">60</span>, <span class="number">40</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentLevel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mainCamera = GetComponent&lt;Camera&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            currentLevel += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (currentLevel &gt;= zoomLevel.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                currentLevel = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> currentFieldOfView = zoomLevel[currentLevel];</span><br><span class="line"></span><br><span class="line">        mainCamera.fieldOfView = Mathf.Lerp(mainCamera.fieldOfView, currentFieldOfView, <span class="number">0.1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>此脚本的功能是可以在编辑器中自定义缩放等级，不设置的话默认是60,40,20共3个等级。当按下鼠标左键的时候缩放等级+1,到了最大缩放等级回到0</li><li>效果如下<br><img src="https://image.xiaomo.info/unity3d/camera/cameraFieldOfView.gif"></li></ol>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity3d小地图</title>
      <link href="2018/unity3dMiniMap/"/>
      <url>2018/unity3dMiniMap/</url>
      
        <content type="html"><![CDATA[<p>小地图基本是每个RPG游戏都必备的功能，如果连这个都不会做就太不应该了。</p><a id="more"></a><ol><li>新建一个相机，<code>projection</code>设置为正交模式（2d）<code>orthographic</code>,size大概为30左右（视地图而定）,把它放在角色的容器中,让它可以和角色一起移动。Rotation绕x旋转90度，放到天上调整到合适位置和距离<br><img src="https://image.xiaomo.info/unity3d/miniMap/miniMapCamera.png"></li><li>新建一个renderTexture,把它给小地图相机</li><li>下载<a href="https://image.xiaomo.info/unity3d3d/ugui/minimap/Minimap.unity3dpackage" target="_blank" rel="noopener">miniMap包</a>导入，新建材质球。shade设置为custom，第一个指定为renderTexture,第二个指定为mask<br><img src="https://image.xiaomo.info/unity3d/miniMap/miniMapPackage.png"><br><img src="https://image.xiaomo.info/unity3d/miniMap/mat_miniMap.png"></li><li>新建一个RawImage,把renderTexture和材质球给它<br><img src="https://image.xiaomo.info/unity3d/miniMap/miniMapImage.png"></li><li>在角色容器中添加一个plane，把miniMap包中的icon给它。然后把layer设置为miniMap层。</li><li>把角色模型本体设置为Player层，把主相机的culling mask 取消miniMap,小地图摄像机的culling mask取消player层<br><img src="https://image.xiaomo.info/unity3d/miniMap/mainCamera.png"><br><img src="https://image.xiaomo.info/unity3d/miniMap/miniMapCameraCullingMask.png"></li><li>完成品如下，如果有外框可以给地图加个外框会漂亮一点<br><img src="https://image.xiaomo.info/unity3d/miniMap/CompleteMiniMap.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ugui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用UGUI中的层级问题——以背包为例</title>
      <link href="2018/UGUISorting/"/>
      <url>2018/UGUISorting/</url>
      
        <content type="html"><![CDATA[<p>UGUI的canvas默认层级是UI，Sorting order 是0，由于unity渲染物体时是从上到下直接渲染的，这就导致了渲染出来的效果和我们预期的不一致，因此必须设置层级，指定渲染的先后顺序（层级低的先渲染）才行。 </p><a id="more"></a><p>想要实现的效果是有一个背包，背包里有道具，鼠标移上去之后出现一个框显示物品的详细信息，移开就消失。但是默认UI层级会把挡住<br><img src="https://image.xiaomo.info/unity3d/ugui/bag/mask.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>在被挡住的UI上添加组件<code>canvas</code>,增大它的<code>sorting order</code>，但是坑爹的是：设置完后，层级的问题解决了，但是UI的所有事件被拦截（包括按钮的点击、UI拖拽等等）</li><li>给UI再设置一个组件Graphic RayCaster，完美解决，既可以显示特效，还不会遮挡UI。<br><img src="https://image.xiaomo.info/unity3d/ugui/bag/correct.png"></li><li>至此有个问题，如果界面很多都需要设置上述的canvas，那就需要自己实现一个管理类，给每个ui设置它的order，不过canvas会影响合并批次，所以不能有太多，自己权衡。</li><li>给Item上挂一个脚本，实现<code>IPointerEnter</code>和<code>IPointerExit</code>接口，分别对应设置Active属性</li></ol><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BagItem</span> : <span class="title">MonoBehaviour</span>, <span class="title">IPointerEnterHandler</span>, <span class="title">IPointerExitHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> GameObject desc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            desc = transform.Find(<span class="string">"Desc"</span>).gameObject;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerEnter</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            desc.SetActive(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerExit</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            desc.SetActive(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://image.xiaomo.info/unity3d/ugui/bag/bag.gif"></p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ugui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用UGUI制作滚动列表-选服列表</title>
      <link href="2018/UGUIServerList/"/>
      <url>2018/UGUIServerList/</url>
      
        <content type="html"><![CDATA[<p>UGUI必将千秋万代，一统江湖！（麻烦给UGUI加一下动画系统，谢谢）</p><a id="more"></a><p>想要实现的效果..ummmm，大概是以下这个样子，这是最终做好的样子，记录一下<br><img src="https://image.xiaomo.info/unity3d/ugui/serverList/serverList.gif"></p><ol><li>假设我现在的目录结构是这样子的，canvas下有一个Bg,bg下有一个RegionFrom用来放服务器列表。<br><img src="https://image.xiaomo.info/unity3d/ugui/serverList/fileTree1.png"></li><li>在Region下新建一个Image控件ServerList用来做内容呈现的容器，给它添加<code>mask组件</code>和<code>scroll rect组件</code>,把<code>mask</code>的 <code>show mask graphic</code>的勾去掉。<br><img src="https://image.xiaomo.info/unity3d/ugui/serverList/fileTree3.png"></li><li>在ServerList下新建一个空物体Content做来做滑动的区域，这个区域的宽度和ServerList一样大，高度设置大一点,添加上GridLayoutGoup组件自动布局，设置好大小和间距。<br><img src="https://image.xiaomo.info/unity3d/ugui/serverList/fileTree2.png"></li><li>在Content下添加服务器项目，项目会被自动布局。运行后即可获得gif效果所示。</li></ol>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ugui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker应用</title>
      <link href="2018/aboutDockerUse/"/>
      <url>2018/aboutDockerUse/</url>
      
        <content type="html"><![CDATA[<p>docker是一个简化部署的容器,使用docker不仅能够降低性能消耗，而且方便部署工作，在互联网企业中使用十分普遍。</p><a id="more"></a><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol><li>解决了运行环境不一致的问题。</li><li>docker隔离了运行环境，对同一台服务器上运行的其他应用不会产生任何影响。</li><li>docker可伸缩的部署服务减少了资源的浪费和运维的人工成本。</li></ol><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="https://www.docker.com/get-docker" target="_blank" rel="noopener">https://www.docker.com/get-docker</a></p><h1 id="网易镜像"><a href="#网易镜像" class="headerlink" title="网易镜像"></a>网易镜像</h1><p><a href="https://c.163yun.com/hub#/m/home/" target="_blank" rel="noopener">https://c.163yun.com/hub#/m/home/</a></p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><h2 id="center-os"><a href="#center-os" class="headerlink" title="center os"></a>center os</h2><p>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。通过 uname -r 命令查看你当前的内核版本<br><code>uname -r</code></p><h3 id="yum安装docker"><a href="#yum安装docker" class="headerlink" title="yum安装docker"></a>yum安装docker</h3><p><code>yum -y install docker-io</code><br>运行docker<br><code>systemctl start docker</code><br>测试<br><code>docker run hello-world</code></p><h3 id="脚本安装docker"><a href="#脚本安装docker" class="headerlink" title="脚本安装docker"></a>脚本安装docker</h3><p>更新系统组件<br><code>sudo yum update</code><br>执行 Docker 安装脚本<br><code>curl -fsSL https://get.docker.com/ | sh</code><br>启动docker<br><code>sudo service docker start</code><br>验证 docker 是否安装成功并在容器中执行一个测试的镜像。<br><code>sudo docker run hello-world</code><br><code>docker ps </code></p><h3 id="docker镜像加速"><a href="#docker镜像加速" class="headerlink" title="docker镜像加速"></a>docker镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com.新版的/" target="_blank" rel="noopener">http://hub-mirror.c.163.com。新版的</a> Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。<br>请在该配置文件中加入（没有该文件的话，请先建一个）：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mac-os"><a href="#mac-os" class="headerlink" title="mac os"></a>mac os</h2><p>一个命令搞定<br><code> brew cask install docker</code></p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com./" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a><br>在任务栏点击 Docker for mac 应用图标 -&gt; Preferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。</p><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><ol><li>查看应用容器 <code>docker ps</code></li><li>启动一个容器 <code>docker run -d -p 5000:5000 training/webapp python app.py</code></li><li>查看应用日志 <code>docker logs -f 7a38a1ad55c6</code></li><li>查看应用程序容器的进程 <code>docker top 镜像名</code></li><li>检查应用程序 <code>docker inspect 镜像名</code></li><li>停止应用容器 <code>docker stop 镜像名</code></li><li>移除应用容器 <code>docker rm 镜像名</code></li><li>查看镜像列表 <code>docker image</code></li><li>获取一个新镜像 <code>docker pull image:tag</code></li><li>查找镜像 <code>docker search httpd</code></li><li>构建镜像 <code>docker build -t image:tag .</code></li><li>设置镜像tag <code>docker tag 860c279d2fec image:tag</code></li></ol><h1 id="docker学习资源"><a href="#docker学习资源" class="headerlink" title="docker学习资源"></a>docker学习资源</h1><p><a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-command-manual.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-Java中ArrayList、LinkedList和Vector的联系与区别</title>
      <link href="2018/jdkSourceCodeReadArrayListAndLinkedArrayList/"/>
      <url>2018/jdkSourceCodeReadArrayListAndLinkedArrayList/</url>
      
        <content type="html"><![CDATA[<p>毫无疑问，List是一种非常基础的数据结构，翻译过来就是列表。正如它的名字所示，List表示的是一个有序(插入顺序)的元素序列。在Java的集合框架中，List是作为顶级接口Collection的直接子类接口存在，因此，List分支是集合框架中最简单、最常用的分支。</p><a id="more"></a><h1 id="List概述"><a href="#List概述" class="headerlink" title="List概述"></a>List概述</h1><p>List分支作为集合框架中最简单、最常用的分支，其在集合框架中的位置可以直接参看下图：<br><img src="https://image.xiaomo.info/blog/linkedArraylist.jpg"></p><p>仔细观察和分析此图，你会发现JDK中对于List接口的实现由三种类型：ArrayList、Vector 和 LinkedList。当我们谈论List的时候，我们可以用它与Set来做比较，集合框架中的Set代表一群无序和唯一的元素集合。<br>仔细观察上图可知，集合框架中的List接口具有多达三个实现类。由继承机制可知，它们在很多方面都是非常相似的，比如有序、用法等。它们之间最大的区别是它们的内部实现方式和细节，不同的实现方式和细节造就了它们之间巨大的性能差异和用法差异。</p><ol><li>ArrayList 是Java语言对于动态数组的一个实现。当不断地添加新的元素到ArrayList集合中时，该集合的底层数组的长度就会动态的增长，以便能容纳新添加的元素。至于ArrayList的底层数组长度的动态增长策略，在不同的JDK实现和版本中是不同的，最常见的策略是新增 %50，具体请参看源码。正因为ArrayList的底层实现是数组，其带来的一个特性是：它的元素可以通过 getter(index) 和 setter(index) 方法直接访问，而且性能特别好。</li><li>LinkedList 的底层实现是基于 双向队列(double linked list)。熟悉数据结构的读者应该可以猜到：LinkedList 对于新增和删除元素的操作在性能上远远优于 ArrayList。但是，它的缺点在于：其 getter(index) 方法和 setter(index) 方法的性能很差，时间复杂度是 O(n)。</li><li>Vector 与 ArrayList 唯一的区别是：它是同步的(synchronized)，线程安全。</li></ol><h1 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h1><ol><li>对于ArrayList，add/remove的时间复杂度是 O(n)；但在尾部操作是 O(1) 。</li><li>对于LinkedList，add/remove的时间复杂度是 O(n)；但在尾部和头部操作的是 O(1) 。</li></ol><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>为了实际测验三种List的add、get和remove的性能，我们可以使用如下的代码片段：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">arrayList.<span class="keyword">add</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"duration : "</span> + duration);</span><br></pre></td></tr></table></figure><p>此处只给出测验ArrayList的add操作的代码，但是测验LinkedList和其他操作的代码是类似，读者可自行修改代码进行测验。测验的结果表明：<br>在add和remove操作时，LinkedList的性能远优于ArrayList。在get操作时，ArrayList的性能优于LinkedList。经过性能对比和性能的测试，我们可以总结出如何在它们之间做出选择。通常使用ArrayList，但是LinkedList在如下场景时更合适：</p><ol><li>随机访问集合元素的次数不是很频繁。</li><li>对集合有大量的add/remove操作需求。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对比Vector和ArrayList，如果程序本身就是线程安全的，为了更好的性能，应该选择ArrayList。当添加新的元素到集合时，Vector和ArrayList都需要更多的空间来存储新元素，但是它们的增长策略是不一样的：Vector的增长幅度是 100%；ArrayList的增长幅度是 50%。对于LinkdedList而言，其不仅实现了List接口，还实现了Queue接口，这个Queue接口给LinkdedList带来了更多的访问和操作元素的方法，比如 offer(), peek(), poll() 等。<br>对于ArrayList而言，如果使用不含参数的构造函数新建一个ArrayList对象，该对象的起始大小是比较小的，只有10。我们都知道对象的动态增长导致的底层数组重写分配和复制是一个非常耗时的操作。所以，对于可以预估ArrayList大小的应用场景，应该指定ArrayList对象的初始大小，从而提供性能。</p><h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><p><a href="http://www.tiantianbianma.com/java-arraylist-linkedlist-vector.html/" target="_blank" rel="noopener">Java中ArrayList、LinkedList和Vector的联系与区别</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-创建对象</title>
      <link href="2018/jdkSourceCodeReadCreateObject/"/>
      <url>2018/jdkSourceCodeReadCreateObject/</url>
      
        <content type="html"><![CDATA[<p><code>String str=new String(&quot;abc&quot;);</code>到底创建了几个对象？相信大家对这此并不陌生，答案也是众所周知的，2个。接下来我们就从这道题展开，一起回顾一下与创建String对象相关的一些JAVA知识。</p><a id="more"></a><h1 id="String-str-new-String-quot-abc-quot"><a href="#String-str-new-String-quot-abc-quot" class="headerlink" title="String str=new String(&quot;abc&quot;);"></a><code>String str=new String(&quot;abc&quot;);</code></h1><p>我们可以把上面这行代码分成String str、=、”abc”和new String()四部分来看待。String str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下new String(“abc”)了。那么，new String(“abc”)为什么又能被看成”abc”和new String()呢？我们来看一下被我们调用了的String的构造器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//other code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家都知道，我们常用的创建一个类的实例（对象）的方法有以下两种：</p><ol><li>使用new创建对象。</li><li>调用Class类的newInstance方法，利用反射机制创建对象。<br>我们正是使用new调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了str变量。同时我们注意到，被调用的构造器方法接受的参数也是一个String对象，这个对象正是”abc”。由此我们又要引入另外一种创建String对象的方式的讨论——引号内包含文本。这种方式是String特有的，并且它与new的方式存在很大区别</li></ol><h1 id="String-str-quot-abc-quot"><a href="#String-str-quot-abc-quot" class="headerlink" title="String str=&quot;abc&quot;;"></a><code>String str=&quot;abc&quot;;</code></h1><p>毫无疑问，这行代码创建了一个String对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    String a=<span class="string">"abc"</span>;</span><br><span class="line">    String b=<span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这里呢？答案还是一个。</p><p><code>String a=&quot;ab&quot;+&quot;cd&quot;;</code><br>再看看这里呢？答案仍是一个。有点奇怪吗？说到这里，我们就需要引入对字符串池相关知识的回顾了。</p><p>在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。我们再回头看看String a=”abc”;，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为”abc”的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。<br>对于第三个例子：<br>String a=”ab”+”cd”;<br>由于常量的值在编译的时候就被确定了。在这里，”ab”和”cd”都是常量，因此变量a的值在编译时就可以确定。</p><p>这行代码编译后的效果等同于：<br>String a=”abcd”;<br>因此这里只创建了一个对象”abcd”，并且它被保存在字符串池里了。现在问题又来了，是不是所有经过“+”连接后得到的字符串都会被添加到字符串池中呢？我们都知道“==”</p><p>可以用来比较两个变量，它有以下两种情况：</p><ol><li>如果比较的是两个基本类型（char，byte，short，int，long，float，double，boolean），则是判断它们的值是否相等。</li><li>如果表较的是两个对象变量，则是判断它们的引用是否指向同一个对象。</li></ol><p>下面我们就用“==”来做几个测试。为了便于说明，我们把指向字符串池中已经存在的对象也视为该对象被加入了字符串池：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String a = <span class="string">"ab"</span>;<span class="comment">// 创建了一个对象，并加入字符串池中</span></span><br><span class="line">System.out.println(<span class="string">"String a = \"ab\";"</span>);</span><br><span class="line">String b = <span class="string">"cd"</span>;<span class="comment">// 创建了一个对象，并加入字符串池中</span></span><br><span class="line">System.out.println(<span class="string">"String b = \"cd\";"</span>);</span><br><span class="line">String c = <span class="string">"abcd"</span>;<span class="comment">// 创建了一个对象，并加入字符串池中</span></span><br><span class="line">String d = <span class="string">"ab"</span> + <span class="string">"cd"</span>;</span><br><span class="line"><span class="comment">// 如果d和c指向了同一个对象，则说明d也被加入了字符串池</span></span><br><span class="line"><span class="keyword">if</span> (d == c) &#123;</span><br><span class="line">    System.out.println(<span class="string">"\"ab\"+\"cd\" 创建的对象 \"加入了\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果d和c没有指向了同一个对象，则说明d没有被加入字符串池</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"\"ab\"+\"cd\" 创建的对象 \"没加入\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String e = a + <span class="string">"cd"</span>;</span><br><span class="line"><span class="comment">// 如果e和c指向了同一个对象，则说明e也被加入了字符串池</span></span><br><span class="line"><span class="keyword">if</span> (e == c) &#123;</span><br><span class="line">    System.out.println(<span class="string">" a +\"cd\" 创建的对象 \"加入了\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果e和c没有指向了同一个对象，则说明e没有被加入字符串池</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">" a +\"cd\" 创建的对象 \"没加入\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String f = <span class="string">"ab"</span> + b;</span><br><span class="line"><span class="comment">// 如果f和c指向了同一个对象，则说明f也被加入了字符串池</span></span><br><span class="line"><span class="keyword">if</span> (f == c) &#123;</span><br><span class="line">    System.out.println(<span class="string">"\"ab\"+ b 创建的对象 \"加入了\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果f和c没有指向了同一个对象，则说明f没有被加入字符串池</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"\"ab\"+ b 创建的对象 \"没加入\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String g = a + b;</span><br><span class="line"><span class="comment">// 如果g和c指向了同一个对象，则说明g也被加入了字符串池</span></span><br><span class="line"><span class="keyword">if</span> (g == c) &#123;</span><br><span class="line">    System.out.println(<span class="string">" a + b 创建的对象 \"加入了\" 字符串池中"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果g和c没有指向了同一个对象，则说明g没有被加入字符串池</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">" a + b 创建的对象 \"没加入\" 字符串池中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><ol><li>String a = “ab”;</li><li>String b = “cd”;</li><li>“ab”+”cd” 创建的对象 “加入了” 字符串池中</li><li>a +”cd” 创建的对象 “没加入” 字符串池中</li><li>“ab”+ b 创建的对象 “没加入” 字符串池中</li><li>a + b 创建的对象 “没加入” 字符串池中</li></ol><p>从上面的结果中我们不难看出，只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述</p><p>但是有一种情况需要引起我们的注意。请看下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringStaticTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 常量A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String A = <span class="string">"ab"</span>;</span><br><span class="line">    <span class="comment">// 常量B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String B = <span class="string">"cd"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将两个常量用+连接对s进行初始化</span></span><br><span class="line">    String s = A + B;</span><br><span class="line">    String t = <span class="string">"abcd"</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == t) &#123;</span><br><span class="line">        System.out.println(<span class="string">"s等于t，它们是同一个对象"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"s不等于t，它们不是同一个对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的运行结果如下：</p><ul><li>s等于t，它们是同一个对象</li></ul><p>这又是为什么呢？原因是这样的，对于常量来讲，它的值是固定的，因此在编译期就能被确定了，而变量的值只有到运行时才能被确定，因为这个变量可以被不同的方法调用，从而可能引起值的改变。在上面的例子中，A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：</p><p><code>String s=A+B;</code> 等同于<code>String s=&quot;ab&quot;+&quot;cd&quot;;</code></p><p>我对上面的例子稍加改变看看会出现什么情况：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringStaticTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 常量A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String A;</span><br><span class="line">    <span class="comment">// 常量B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String B;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    A = <span class="string">"ab"</span>;</span><br><span class="line">    B = <span class="string">"cd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将两个常量用+连接对s进行初始化</span></span><br><span class="line">    String s = A + B;</span><br><span class="line">    String t = <span class="string">"abcd"</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == t) &#123;</span><br><span class="line">        System.out.println(<span class="string">"s等于t，它们是同一个对象"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"s不等于t，它们不是同一个对象"</span>);</span><br><span class="line">     &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的运行结果是这样：</p><ul><li>s不等于t，它们不是同一个对象<br>只是做了一点改动，结果就和刚刚的例子恰好相反。我们再来分析一下。A和B虽然被定义为常量（只能被赋值一次），但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。由于字符串池中对象的共享能够带来效率的提高，因此我们提倡大家用引号包含文本的方式来创建String对象，实际上这也是我们在编程中常采用的。<br>接下来我们再来看看intern()方法，它的定义如下：<br><code>public native String intern();</code></li></ul><p>这是一个本地方法。在调用这个方法时，JAVA虚拟机首先检查字符串池中是否已经存在与该对象值相等对象存在，如果有则返回字符串池中对象的引用；如果没有，则先在字符串池中创建一个相同值的String对象，然后再将它的引用返回。</p><p>我们来看这段代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInternTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用char数组来初始化a，避免在a被创建之前字符串池中已经存在了值为"abcd"的对象</span></span><br><span class="line">    String a = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span> &#125;);</span><br><span class="line">    String b = a.intern();</span><br><span class="line">    <span class="keyword">if</span> (b == a) &#123;</span><br><span class="line">        System.out.println(<span class="string">"b被加入了字符串池中，没有新建对象"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"b没被加入字符串池中，新建了对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>b没被加入字符串池中，新建了对象。如果String类的intern()方法在没有找到相同值的对象时，是把当前对象加入字符串池中，然后返回它的引用的话，那么b和a指向的就是同一个对象；否则b指向的对象就是JAVA虚拟机在字符串池中新建的，只是它的值与a相同罢了。上面这段代码的运行结果恰恰印证了这一点。最后我们再来说说String对象在JAVA虚拟机（JVM）中的存储，以及字符串池与堆（heap）和栈（stack）的关系。我们首先回顾一下堆和栈的区别：</p><p>• 栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。<br>• 堆（heap）：用于存储对象。</p><p>我们查看String类的源码就会发现，它有一个value属性，保存着String对象的值，类型是char[]，这也正说明了字符串就是字符的序列。当执行String a=”abc”;时，JAVA虚拟机会在栈中创建三个char型的值’a’、’b’和’c’，然后在堆中创建一个String对象，它的值（value）是刚才在栈中创建的三个char型值组成的数组{‘a’,’b’,’c’}，最后这个新创建的String对象会被添加到字符串池中。如果我们接着执行String b=new String(“abc”);代码，由于”abc”已经被创建并保存于字符串池中，因此JAVA虚拟机只会在堆中新创建一个String对象，但是它的值（value）是共享前一行代码执行时在栈中创建的三个char型值值’a’、’b’和’c’。说到这里，我们对于篇首提出的String str=new String(“abc”)为什么是创建了两个对象这个问题就已经相当明了了</p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>转载自 臧圩人 <a href="http://zangweiren.javaeye.com/" target="_blank" rel="noopener">http://zangweiren.javaeye.com</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-类的初始化顺序</title>
      <link href="2018/jdkSourceCodeReadClassInitOrder/"/>
      <url>2018/jdkSourceCodeReadClassInitOrder/</url>
      
        <content type="html"><![CDATA[<p>大家在去参加面试的时候，经常会遇到这样的考题：给你两个类的代码，它们之间是继承的关系，每个类里只有构造器方法和一些变量，构造器里可能还有一段代码对变量值进行了某种运算，另外还有一些将变量值输出到控制台的代码，然后让我们判断输出的结果。这实际上是在考查我们对于继承情况下类的初始化顺序的了解</p><a id="more"></a><p>我们大家都知道，对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序依次是（静态变量、静态初始化块）&gt;（变量、初始化块）&gt;构造器。我们也可以通过下面的测试代码来验证这一点：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrderTest</span> </span>&#123;</span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String staticField = <span class="string">"静态变量"</span>;</span><br><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">public</span> String field = <span class="string">"变量"</span>;</span><br><span class="line"><span class="comment">// 静态初始化块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(staticField);</span><br><span class="line">    System.out.println(<span class="string">"静态初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化块</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">    System.out.println(<span class="string">"初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InitialOrderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> InitialOrderTest();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码，我们会得到如下的输出结果：</p><ol><li>静态变量</li><li>静态初始化块</li><li>变量</li><li>初始化块</li><li>构造器</li></ol><p>这与上文中说的完全符合。那么对于继承情况下又会怎样呢？我们仍然以一段测试代码来获取最终结果:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String p_StaticField = <span class="string">"父类--静态变量"</span>;</span><br><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">public</span> String p_Field = <span class="string">"父类--变量"</span>;</span><br><span class="line"><span class="comment">// 静态初始化块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(p_StaticField);</span><br><span class="line">    System.out.println(<span class="string">"父类--静态初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化块</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(p_Field);</span><br><span class="line">    System.out.println(<span class="string">"父类--初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(<span class="string">"父类--构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String s_StaticField = <span class="string">"子类--静态变量"</span>;</span><br><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">public</span> String s_Field = <span class="string">"子类--变量"</span>;</span><br><span class="line"><span class="comment">// 静态初始化块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(s_StaticField);</span><br><span class="line">    System.out.println(<span class="string">"子类--静态初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化块</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(s_Field);</span><br><span class="line">    System.out.println(<span class="string">"子类--初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"子类--构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 程序入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SubClass();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下上面的代码，结果马上呈现在我们的眼前：</p><ol><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ol><p>现在，结果已经不言自明了。大家可能会注意到一点，那就是，并不是父类完全初始化完毕后才进行子类的初始化，实际上子类的静态变量和静态初始化块的初始化是在父类的变量、初始化块和构造器初始化之前就完成了。<br>那么对于静态变量和静态初始化块之间、变量和初始化块之间的先后顺序又是怎样呢？是否静态变量总是先于静态初始化块，变量总是先于初始化块就被初始化了呢？实际上这取决于它们在类中出现的先后顺序。我们以静态变量和静态初始化块为例来进行说明。</p><p>同样，我们还是写一个类来进行测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOrder</span> </span>&#123;</span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TestA a = <span class="keyword">new</span> TestA();</span><br><span class="line"><span class="comment">// 静态初始化块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"静态初始化块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TestB b = <span class="keyword">new</span> TestB();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> TestOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test--A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test--B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，会得到如下的结果：</p><ol><li>Test–A</li><li>静态初始化块</li><li>Test–B</li></ol><p>大家可以随意改变变量a、变量b以及静态初始化块的前后位置，就会发现输出结果随着它们在类中出现的前后顺序而改变，这就说明静态变量和静态初始化块是依照他们在类中的定义顺序进行初始化的。同样，变量和初始化块也遵循这个规律。了解了继承情况下类的初始化顺序之后，如何判断最终输出结果就迎刃而解了</p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>转载自 臧圩人 <a href="http://zangweiren.javaeye.com/" target="_blank" rel="noopener">http://zangweiren.javaeye.com</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-String,StringBuffer,StringBuilder</title>
      <link href="2018/jdkSourceCodeReadStringDifferent/"/>
      <url>2018/jdkSourceCodeReadStringDifferent/</url>
      
        <content type="html"><![CDATA[<p>String,StringBuilder以及StringBuffer这三个类之间有什么区别?</p><a id="more"></a><p>这三个类之间的区别主要是在两个方面，即运行速度和线程安全这两方面。</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String<br>String最慢的原因：<br>String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。以下面一段代码为例：</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span>=<span class="string">"abc"</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>+<span class="string">"de"</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br></pre></td></tr></table></figure><p>　如果运行这段代码会发现先输出“abc”，然后又输出“abcde”，好像是str这个对象被更改了，其实，这只是一种假象罢了，JVM对于这几行代码是这样处理的，首先创建一个String对象str，并把“abc”赋值给str，然后在第三行中，其实JVM又创建了一个新的对象也名为str，然后再把原来的str的值和“de”加起来再赋值给新的str，而原来的str就会被JVM的垃圾回收机制（GC）给回收掉了，所以，str实际上并没有被更改，也就是前面说的String对象一旦创建之后就不可更改了。所以，Java中对String对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。而StringBuilder和StringBuffer的对象是变量，对变量进行操作就是直接对该对象进行更改，而不进行创建和回收的操作，所以速度要比String快很多。另外，有时候我们会这样对字符串进行赋值</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span>=<span class="string">"abc"</span>+<span class="string">"de"</span>;</span><br><span class="line">StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder().<span class="built_in">append</span>(<span class="string">"abc"</span>).<span class="built_in">append</span>(<span class="string">"de"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(stringBuilder.toString());</span><br></pre></td></tr></table></figure><p>这样输出结果也是“abcde”和“abcde”，但是String的速度却比StringBuilder的反应速度要快很多，这是因为第1行中的操作和<code>String str=&quot;abcde&quot;;</code>是完全一样的，所以会很快，而如果写成下面这种形式</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">String <span class="attribute">str1</span>=<span class="string">"abc"</span>;</span><br><span class="line">String <span class="attribute">str2</span>=<span class="string">"de"</span>;</span><br><span class="line">String <span class="attribute">str</span>=str1+str2;</span><br></pre></td></tr></table></figure><p>那么JVM就会像上面说的那样，不断的创建、回收对象来进行这个操作了。速度就会很慢。</p><ol start="2"><li><p>再来说线程安全<br>在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的<br>如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。</p></li><li><p>总结一下<br>String：适用于少量的字符串操作的情况<br>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况<br>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</p></li></ol><h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><p><a href="https://www.cnblogs.com/su-feng/p/6659064.html" target="_blank" rel="noopener">Java中的String，StringBuilder，StringBuffer三者的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-AtomicInteger</title>
      <link href="2018/jdkSourceCodeReadAtomicInteger/"/>
      <url>2018/jdkSourceCodeReadAtomicInteger/</url>
      
        <content type="html"><![CDATA[<p>JDK 里面提供的以 Atomic* 开头的类基本原理都是一致的， 都是借助了底层硬件级别的 Lock 来实现原子操作的。 本文以 AtomicInteger 为例进行讲述， 其他的类似。阅读本文前建议先阅读基础篇：<a href="https://blog.xiaomo.info/2018/jdkSourceCodeReadMemoryActor/">Java内存模型</a></p><a id="more"></a><h1 id="处理器原子操作：-3种加锁方式"><a href="#处理器原子操作：-3种加锁方式" class="headerlink" title="处理器原子操作： 3种加锁方式"></a>处理器原子操作： 3种加锁方式</h1><p>关于 CPU 的锁有如下 3 种：</p><ol><li><p>处理器自动保证基本内存操作的原子性<br>首先处理器会自动保证基本的内存操作的原子性。 处理器保证从系统内存当中读取或者写入一个字节是原子的， 意思是当一个处理器读取一个字节时， 其他处理器不能访问这个字节的内存地址。 奔腾 6 和最新的处理器能自动保证单处理器对同一个缓存行里进行 16/32/64 位的操作是原子的， 但是复杂的内存操作处理器不能自动保证其原子性， 比如跨总线宽度， 跨多个缓存行， 跨页表的访问。 但是处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。 </p></li><li><p>使用总线锁保证原子性（开销大）<br>如果多个处理器同时对共享变量进行读改写（i++ 就是经典的读改写操作）操作， 那么共享变量就会被多个处理器同时进行操作， 这样读改写操作就不是原子的， 操作完之后共享变量的值会和期望的不一致， 举个例子：如果 i=1,我们进行两次 i++ 操作，我们期望的结果是 3，但是有可能结果是 2 。如下图<br>原因是有可能多个处理器同时从各自的缓存中读取变量i， 分别进行加一操作， 然后分别写入系统内存当中。 那么想要保证读改写共享变量的操作是原子的， 就必须保证 CPU1 读改写共享变量的时候，CPU2 不能操作缓存了该共享变量内存地址的缓存。<br>处理器使用总线锁就是来解决这个问题的。 所谓总线锁就是使用处理器提供的一个 LOCK＃ 信号，当一个处理器在总线上输出此信号时， 其他处理器的请求将被阻塞住, 那么该处理器可以独占使用共享内存。<br><img src="https://img-blog.csdn.net/20150929000908894"></p></li><li><p>用缓存锁保证原子性<br>频繁使用的内存会缓存在处理器的 L1，L2 和 L3 高速缓存里， 那么原子操作就可以直接在处理器内部缓存中进行， 并不需要声明总线锁， 在奔腾 6 和最近的处理器中可以使用“缓存锁定”的方式来实现复杂的原子性。所谓“缓存锁定”就是如果缓存在处理器缓存行中内存区域在 LOCK 操作期间被锁定，当它执行锁操作回写内存时，处理器不在总线上声言 LOCK＃ 信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时会起缓存行无效，在上图中，当 CPU1 修改缓存行中的 i 时使用缓存锁定，那么 CPU2 就不能同时修改缓存了 i 的缓存行， 在 CPU1 更新后， CPU2 去主存拿最新值， 从而保证了数据的一致性。</p></li></ol><p>但是有两种情况下处理器不会使用缓存锁定。第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line），则处理器会调用总线锁定。第二种情况是：有些处理器不支持缓存锁定。对于 Inter486 和奔腾处理器,就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。</p><p>以上两个机制我们可以通过 Inter 处理器提供了很多 LOCK 前缀的指令来实现。比如位测试和修改指令BTS，BTR，BTC，交换指令 XADD，CMPXCHG 和其他一些操作数和逻辑指令，比如 ADD（加），OR（或）等，被这些指令操作的内存区域就会加锁，导致其他处理器不能同时访问它。</p><h1 id="AtomicInteger-源码如何实现原子性"><a href="#AtomicInteger-源码如何实现原子性" class="headerlink" title="AtomicInteger 源码如何实现原子性"></a>AtomicInteger 源码如何实现原子性</h1><p>类声明：<br><code>public class AtomicInteger extends Number implements java.io.Serializable  </code></p><p>继承了 Number， 这主要是提供方法将数值转化为 byte, double 等方便 Java 开发者使用；<br>实现了 Serializable， 为了网络传输等的序列化用， 编码时最好手动生成序列化 ID， 让 javac 编译器生成开销大， 而且可能造成意想不到的状况。</p><p>变量声明：<br><code>private volatile int value;  </code></p><p>原始类型变量声明为 private 的， 这样不会发生外部修改问题（逃逸）， 如果是引用的话， 再把引用用 public 方法暴露出去那么还是会造成逃逸现象， 不过这里是原始类型， 不会出现这种情况；<br>volatile 关键字修饰， 使 value 变量的改变具有可见性， 底层实现是内存栅栏，保证每次取到的是最新值。</p><p>get 方法： </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final 类型方法， 不可继承， 进一步保证线程安全。</p><p>自减操作： </p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">        <span class="keyword">int</span> current = <span class="built_in">get</span>();  </span><br><span class="line">        <span class="keyword">int</span> next = current - <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next))  </span><br><span class="line">            <span class="keyword">return</span> current;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 for 是一个死循环， 是采用忙等（也叫自旋）的方式不断地尝试（乐观锁）－1 操作， 直到成功才退出。<br>这里的核心是调用了 compareAndSet() 方法， 传入当前值和新值。  </p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, expect, update)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 JNI 调用底层其他语言实现的方法， 利用操作系统提供的 CAS（只要当前值和原来不一致就重新取值直到成功） 来保证原子性。</p><h1 id="CAS-的缺点"><a href="#CAS-的缺点" class="headerlink" title="CAS 的缺点"></a>CAS 的缺点</h1><p>基本上 Java 的 concurrent 包都是建立在 CAS 的基础上的， 甚至还包括业界一个很出名的应用于高频交易的框架 Disruptor 也是利用 CAS 来保证原子性。 但是 CAS 还是有它的缺点：</p><ol><li> ABA问题。因为 CAS 需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。<br>从Java1.5开始JDK的atomic包里提供了一个类 AtomicStampedReference 来解决 ABA 问题。这个类的compareAndSet 方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</li><li>循环时间长开销大。自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销。如果JVM能支持处理器提供的 pause 指令那么效率会有一定的提升，pause 指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation：内存顺序冲突一般是由伪/假共享引起，假共享是指多个 CPU 同时修改同一个缓存行的不同部分而引起其中一个CPU的操作无效，当出现这个内存顺序冲突时，CPU必须清空流水线）而引起 CPU 流水线被清空（CPU pipeline flush），从而提高 CPU 的执行效率。</li><li>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li></ol><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-Integer</title>
      <link href="2018/jdkSourceCodeReadInteger/"/>
      <url>2018/jdkSourceCodeReadInteger/</url>
      
        <content type="html"><![CDATA[<p>对于 Integer 这个 Java 程序员几乎天天使用的类,使用上却可以看出普通程序员和优秀程序员区别。</p><a id="more"></a><h1 id="深入代码"><a href="#深入代码" class="headerlink" title="深入代码"></a>深入代码</h1><p>在创建数字 1 的对象时， 大多数人会使用 new Integer(1)， 而使用 Integer.valueOf(1) 可以使用系统缓存，既减少可能的内存占用，也省去了频繁创建对象的开销。<br>系统默认只缓存 -128～127 之间的整数。下面我们看一下 Integer.valueOf(int) 方法的代码： </p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;  </span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)  </span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到核心 <code>IntegerCache.cache[i + (-IntegerCache.low)]</code>， 观察<code>IntegerCache</code>类的源码实现：<br>为 －128 ～ 127 数值提供自动装箱的缓存服务。 </p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = <span class="number">-128</span>;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="comment">// high value may be configured by property  </span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;  </span><br><span class="line">        <span class="keyword">String</span> integerCacheHighPropValue =  </span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);  </span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != null) &#123;  </span><br><span class="line">            <span class="keyword">int</span> i = <span class="built_in">parseInt</span>(integerCacheHighPropValue);  </span><br><span class="line">            i = Math.<span class="built_in">max</span>(i, <span class="number">127</span>);  </span><br><span class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE  </span></span><br><span class="line">            h = Math.<span class="built_in">min</span>(i, Integer.MAX_VALUE - (-low) <span class="number">-1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        high = h;  </span><br><span class="line">  </span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];  </span><br><span class="line">        <span class="keyword">int</span> j = low;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)  </span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static 静态代码块可知缓存的初始化是在第一次使用的时候。 通过 VM 参数-XX:AutoBoxCacheMax=<size> 可以配置缓存的最大值。 在 VM 初始化期间， 缓存最大值 high， 可能被保存在 sun.misc.VM class 的私有系统属性里。   </size></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  除非是 JDK 1.5 以前的环境， 如果系统不需要新对象， 则推荐使用 Long， Integer， Short， Character， Byte 的 valueOf() 方法提升性能。 </p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-ConcurrentHashMap</title>
      <link href="2018/jdkSourceCodeReadConcurrentHashMap/"/>
      <url>2018/jdkSourceCodeReadConcurrentHashMap/</url>
      
        <content type="html"><![CDATA[<p>ConcurrentHashMap 是将锁的范围细化来实现高效并发的。 基本策略是将数据结构分为一个一个 Segment（每一个都是一个并发可读的 hash table， 即分段锁）作为一个并发单元。 为了减少开销， 除了一处 Segment 是在构造器初始化的， 其他都延迟初始化（详见 ensureSegment）。 并使用 volatile 关键字来保证 Segment 延迟初始化的可见性问题。 </p><p>HashMap 不是线程安全的， 故多线程情况下会出现 infinit loop。 HashTable 是线程安全的， 但是是用全局锁来保障， 效率很低。 所以 Doug Lea 并发专家研发了高效并发的 ConcurrentHashMap 来应对并发情况下的情景。 阅读本文前最好先看： <a href="https://blog.xiaomo.info/2018/jdkSourceCodeReadMemoryActor/">Java内存模型</a> 和 <a href="https://blog.xiaomo.info/2018/jdkSourceCodeReadAtomicInteger/">AtomicInteger 分析</a>。</p><a id="more"></a><h1 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h1><ol><li><p>哈希算法<br>是一种将任意内容的输入转换成相同长度输出的加密方式，其输出被称为哈希值。</p></li><li><p>哈希表<br>根据设定的哈希函数H(key)和处理冲突方法将一组关键字映象到一个有限的地址区间上，并以关键字在地址区间中的象作为记录在表中的存储位置，这种表称为哈希表或散列，所得存储位置称为哈希地址或散列地址。</p></li></ol><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p><img src="https://image.xiaomo.info/blog/c1.png"></p><p>抽象结构图<br><img src="https://image.xiaomo.info/blog/c2.png"></p><p>从上述类图和抽象结构图可以看出 ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。Segment 继承(Generalization)了可重入锁ReentrantLock，HashEntry 用于存储键值对数据。一个 ConcurrentHashMap 里 contains-a (Composition) 一个 Segment []，Segment 的结构和 HashMap 类似，是一种数组和链表结构， 一个 Segment 里 has-a (Aggregation)一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素， 每个 Segment 锁定一个 HashEntry 数组里的元素, 当对 HashEntry 数组的数据进行 put 等修改操作时，必须先获得它对应的 Segment 锁。</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>内部类 Segment 类：<br>Segment 维护着条目列表状态一致性， 所以可以实现无锁读。 在表超出 threshold 进行 resize 的时候， 复制节点， 所以在做 resize 修改操作的时候， 还可以进行读操作（在旧 list 读）。 本类里只有变化操作的方法才需要加锁， 变化的方法利用一系列忙等控制来处理资源争用， 例如 scanAndLock 和 scanAndLockForPut 。 那些遍历去查找节点的 tryLocks() 方法， 主要是用来吸收 cached 不命中(在 hash tables 经常出现)， 这样后续获取锁的遍历操作效率将会有不小提升。 我们可能不是真的需要使用找到的数据， 因为重新获得数据还需要加锁来保证更新操作的一致性， 但他们会更快地进行重定位。 此外，  scanAndLockForPut 特地创建新数据用于没有数据被找到的 put 方法。</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在准备锁住 segment 操作前最大的 tryLock() 次数。 多核情况下， 在定位 nodes 时使用 64 次最大值维持缓存  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =  </span><br><span class="line">    <span class="keyword">Runtime</span>.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The per-segment table. 数据访问通过 </span></span><br><span class="line"><span class="comment"> * entryAt/setEntryAt 提供的 volatile 语义来保证可见性. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * sengment 内 hash entry 元素个数 , 之所以在每个 Segment 对象中包含一个计数器，而不是在 ConcurrentHashMap 中使用全局的计数器，是为了避免出现“热点域”而影响 ConcurrentHashMap 的并发性。 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">count</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 在 segment 中可变操作总数, 即更新次数 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 当超过threshold 时候，  table 再哈希 </span></span><br><span class="line"><span class="comment"> * (The value of this field is always &lt;tt&gt;(int)(capacity * </span></span><br><span class="line"><span class="comment"> * loadFactor)&lt;/tt&gt;.) </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> threshold;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> *  hash table 负载因子.  Even though this value </span></span><br><span class="line"><span class="comment"> * is same for all segments, it is replicated to avoid needing </span></span><br><span class="line"><span class="comment"> * links to outer object. </span></span><br><span class="line"><span class="comment"> * @serial </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p><code>put</code> 方法：<br>插入A， B， C后 Segment 示意图：</p><p><img src="https://image.xiaomo.info/blog/c3.png"></p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">final V put(K <span class="built_in">key</span>, <span class="type">int</span> hash, V <span class="built_in">value</span>, boolean onlyIfAbsent) &#123;  </span><br><span class="line"> <span class="comment">// tryLock 一般缓存作用  </span></span><br><span class="line">HashEntry&lt;K,V&gt; node = tryLock() ? <span class="built_in">null</span> :  </span><br><span class="line">        scanAndLockForPut(<span class="built_in">key</span>, hash, <span class="built_in">value</span>);  </span><br><span class="line">    V oldValue;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;  </span><br><span class="line">        <span class="type">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;  </span><br><span class="line">        <span class="comment">// 找到 bucket 位置  </span></span><br><span class="line">        HashEntry&lt;K,V&gt; <span class="built_in">first</span> = entryAt(tab, index);  </span><br><span class="line">        for (HashEntry&lt;K,V&gt; e = <span class="built_in">first</span>;;) &#123;  </span><br><span class="line">            if (e != <span class="built_in">null</span>) &#123;  </span><br><span class="line">                K k;  </span><br><span class="line">                if ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> ||  </span><br><span class="line">                    (e.hash == hash &amp;&amp; <span class="built_in">key</span>.equals(k))) &#123;  </span><br><span class="line">                    <span class="comment">// 保存旧值， 这样 get 操作就可以无锁访问正在写操作的节点  </span></span><br><span class="line">                    oldValue = e.<span class="built_in">value</span>;  </span><br><span class="line">                    if (!onlyIfAbsent) &#123;  </span><br><span class="line">                        <span class="comment">// 覆盖原来的值  </span></span><br><span class="line">                        e.<span class="built_in">value</span> = <span class="built_in">value</span>;  </span><br><span class="line">                        <span class="comment">// 修改计数  </span></span><br><span class="line">                        ++modCount;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">// 每次从头部插入  </span></span><br><span class="line">                e = e.<span class="built_in">next</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            else &#123;  </span><br><span class="line">                if (node != <span class="built_in">null</span>)  </span><br><span class="line">                    node.setNext(<span class="built_in">first</span>);  </span><br><span class="line">                else  </span><br><span class="line">                    node = new HashEntry&lt;K,V&gt;(hash, <span class="built_in">key</span>, <span class="built_in">value</span>, <span class="built_in">first</span>);  </span><br><span class="line">                <span class="type">int</span> c = <span class="built_in">count</span> + <span class="number">1</span>;  </span><br><span class="line">                <span class="comment">// 超过 threshold 则， rehash()  </span></span><br><span class="line">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)  </span><br><span class="line">                    rehash(node);  </span><br><span class="line">                else  </span><br><span class="line">                    setEntryAt(tab, index, node);  </span><br><span class="line">                ++modCount;  </span><br><span class="line">                <span class="built_in">count</span> = c;  </span><br><span class="line">                oldValue = <span class="built_in">null</span>;  </span><br><span class="line">                break;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; finally &#123;  </span><br><span class="line">        <span class="comment">// 典型的 ReentrantLock 释放锁  </span></span><br><span class="line">        unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return oldValue;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConcurrentHashMap的size操作<br>如果我们要统计整个ConcurrentHashMap里元素的大小，就必须统计所有Segment里元素的大小后求和。Segment里的全局变量count是一个volatile变量，那么在多线程场景下，我们是不是直接把所有Segment的count相加就可以得到整个ConcurrentHashMap大小了呢？不是的，虽然相加时可以获取每个Segment的count的最新值，但是拿到之后可能累加前使用的count发生了变化，那么统计结果就不准了。所以最安全的做法，是在统计size的时候把所有Segment的put，remove和clean方法全部锁住，但是这种做法显然非常低效。 因为在累加count操作过程中，之前累加过的count发生变化的几率非常小，所以ConcurrentHashMap的做法是先尝试2次通过不锁住Segment的方式来统计各个Segment大小，如果统计的过程中，容器的count发生了变化，则再采用加锁的方式来统计所有Segment的大小。</p><p>那么ConcurrentHashMap是如何判断在统计的时候容器是否发生了变化呢？使用modCount变量，在put , remove和clean方法里操作元素前都会将变量modCount进行加1，那么在统计size前后比较modCount是否发生变化，从而得知容器的大小是否发生变化。</p><p><code>rehash()</code> 方法:  在新 table 中重新分类节点。 因为使用了 2 的幂指数扩展方式， bucket/bin 中的数据还是在原位， 即旧数据的索引位置不变或者偏移了 2 的幂指数距离。 可以重用旧节点减少不必要的节点生成。 </p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * table 大小 *2， 重新放置 HashEntry， 加入新节点 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)  </span><br><span class="line"><span class="keyword">private</span> void rehash(HashEntry&lt;K,V&gt; node) &#123;  </span><br><span class="line">    <span class="comment">// 保存旧值以便 get 操作遍历  </span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;  </span><br><span class="line">    int oldCapacity = oldTable.length;  </span><br><span class="line">    int <span class="keyword">new</span><span class="type">Capacity</span> = oldCapacity &lt;&lt; <span class="number">1</span>;  </span><br><span class="line">    threshold = (int)(<span class="keyword">new</span><span class="type">Capacity</span> * loadFactor);  </span><br><span class="line">    HashEntry&lt;K,V&gt;[] <span class="keyword">new</span><span class="type">Table</span> =  </span><br><span class="line">        (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> <span class="type">HashEntry</span>[<span class="keyword">new</span><span class="type">Capacity</span>];  </span><br><span class="line">    int sizeMask = <span class="keyword">new</span><span class="type">Capacity</span> - <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;  </span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;  </span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;  </span><br><span class="line">            int idx = e.hash &amp; sizeMask;  </span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">null</span>)   <span class="comment">//  单节点链表  </span></span><br><span class="line">                <span class="keyword">new</span><span class="type">Table</span>[idx] = e;  </span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 重用在同一个 slot 的连续序列  </span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;  </span><br><span class="line">                int lastIdx = idx;  </span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;  </span><br><span class="line">                     last != <span class="literal">null</span>;  </span><br><span class="line">                     last = last.next) &#123;  </span><br><span class="line">                    int k = last.hash &amp; sizeMask;  </span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;  </span><br><span class="line">                        lastIdx = k;  </span><br><span class="line">                        lastRun = last;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">new</span><span class="type">Table</span>[lastIdx] = lastRun;  </span><br><span class="line">                <span class="comment">// Clone remaining nodes  </span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;  </span><br><span class="line">                    V v = p.value;  </span><br><span class="line">                    int h = p.hash;  </span><br><span class="line">                    int k = h &amp; sizeMask;  </span><br><span class="line">                    HashEntry&lt;K,V&gt; n = <span class="keyword">new</span><span class="type">Table</span>[k];  </span><br><span class="line">                    <span class="keyword">new</span><span class="type">Table</span>[k] = <span class="keyword">new</span> <span class="type">HashEntry</span>&lt;K,V&gt;(h, p.key, v, n);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    int nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node  </span></span><br><span class="line">    node.setNext(<span class="keyword">new</span><span class="type">Table</span>[nodeIndex]);  </span><br><span class="line">    <span class="keyword">new</span><span class="type">Table</span>[nodeIndex] = node;  </span><br><span class="line">    table = <span class="keyword">new</span><span class="type">Table</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类 <code>HashEntry</code>：链表结构</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> HashEntry&lt;K,V&gt; &#123;  </span><br><span class="line">    <span class="comment">// final 保证不变性， 即为线程安全的字段  </span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;  </span><br><span class="line">    <span class="keyword">final</span> K key;  </span><br><span class="line">    <span class="comment">// 根据 volatile 写永远先于读操作的 happens-before 原则来保证获取到都是最新值  </span></span><br><span class="line">    <span class="keyword">volatile</span> V value;  </span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; <span class="keyword">next</span>;  </span><br><span class="line">  </span><br><span class="line">    HashEntry(<span class="keyword">int</span> hash, K key, V value, HashEntry&lt;K,V&gt; <span class="keyword">next</span>) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.hash = hash;  </span><br><span class="line">        <span class="keyword">this</span>.key = key;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 使用 volatile 写语义设置 next </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> setNext(HashEntry&lt;K,V&gt; n) &#123;  </span><br><span class="line">        UNSAFE.putOrderedObject(<span class="keyword">this</span>, nextOffset, n);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Unsafe mechanics  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> nextOffset;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();  </span><br><span class="line">            <span class="keyword">Class</span> k = HashEntry.<span class="keyword">class</span>;  </span><br><span class="line">            nextOffset = UNSAFE.objectFieldOffset  </span><br><span class="line">                (k.getDeclaredField(<span class="string">"next"</span>));  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConcurrentHashMap 类：</code></p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ---------------- Constants -------------- */</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The default initial capacity for this table, </span></span><br><span class="line"><span class="comment"> * used when not otherwise specified in a constructor. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 本值是 HashEntry 个数与 table 数组长度的比值 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 当前并发线程的使用数 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The maximum capacity, used if a higher value is implicitly </span></span><br><span class="line"><span class="comment"> * specified by either of the constructors with arguments.  MUST </span></span><br><span class="line"><span class="comment"> * be a power of two &lt;= 1&lt;&lt;30 to ensure that entries are indexable </span></span><br><span class="line"><span class="comment"> * using ints. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The minimum capacity for per-segment tables.  Must be a power </span></span><br><span class="line"><span class="comment"> * of two, at least two to avoid immediate resizing on next use </span></span><br><span class="line"><span class="comment"> * after lazy construction. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The maximum number of segments to allow; used to bound </span></span><br><span class="line"><span class="comment"> * constructor arguments. Must be power of two less than 1 &lt;&lt; 24. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// slightly conservative  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Number of unsynchronized retries in size and containsValue </span></span><br><span class="line"><span class="comment"> * methods before resorting to locking. This is used to avoid </span></span><br><span class="line"><span class="comment"> * unbounded retries if tables undergo continuous modification </span></span><br><span class="line"><span class="comment"> * which would make it impossible to obtain an accurate result. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 索引 segments 时使用： 使用高比特位的 hash 值去选择 segment </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentMask;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Shift value for indexing within segments. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentShift;</span><br></pre></td></tr></table></figure><p>初始化 ConcurrentHashMap:<br>ConcurrentHashMap 结构图</p><p><img src="https://image.xiaomo.info/blog/c4.png"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,  </span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();  </span><br><span class="line">    <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)  </span><br><span class="line">        concurrencyLevel = MAX_SEGMENTS;  </span><br><span class="line">    <span class="comment">// Find power-of-two sizes best matching arguments  </span></span><br><span class="line">    <span class="keyword">int</span> sshift = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> ssize = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;  </span><br><span class="line">        ++sshift;  </span><br><span class="line">        ssize &lt;&lt;= <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;  </span><br><span class="line">    <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)  </span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;  </span><br><span class="line">    <span class="keyword">int</span> c = initialCapacity / ssize;  </span><br><span class="line">    <span class="keyword">if</span> (c * ssize &lt; initialCapacity)  </span><br><span class="line">        ++c;  </span><br><span class="line">    <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;  </span><br><span class="line">    <span class="keyword">while</span> (cap &lt; c)  </span><br><span class="line">        cap &lt;&lt;= <span class="number">1</span>;  </span><br><span class="line">    <span class="comment">// create segments and segments[0]  </span></span><br><span class="line">    Segment&lt;K,V&gt; s0 =  </span><br><span class="line">        <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),  </span><br><span class="line">                         (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);  </span><br><span class="line">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];  </span><br><span class="line">    UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]  </span></span><br><span class="line">    <span class="keyword">this</span>.segments = ss;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码可知segments数组的长度size通过concurrencyLevel计算得出。为了能通过按位与的哈希算法来定位segments数组的索引，必须保证segments数组的长度是2的N次方（power-of-two size），所以必须计算出一个是大于或等于concurrencyLevel的最小的2的N次方值来作为segments数组的长度。假如concurrencyLevel等于14，15或16，ssize都会等于16，即容器里锁的个数也是16。注意concurrencyLevel的最大大小是65535，意味着segments数组的长度最大为65536，对应的二进制是16位。</p><p>初始化segmentShift和segmentMask。这两个全局变量在定位segment时的哈希算法里需要使用，sshift等于ssize从1向左移位的次数，在默认情况下concurrencyLevel等于16，1需要向左移位移动4次，所以sshift等于4。segmentShift用于定位参与hash运算的位数，segmentShift等于32减sshift，所以等于28，这里之所以用32是因为ConcurrentHashMap里的hash()方法输出的最大数是32位的，后面的测试中我们可以看到这点。segmentMask是哈希运算的掩码，等于ssize减1，即15，掩码的二进制各个位的值都是1。因为ssize的最大长度是65536，所以segmentShift最大值是16，segmentMask最大值是65535，对应的二进制是16位，每个位都是1。</p><p>变量cap就是segment里HashEntry数组的长度，它等于initialCapacity除以ssize的倍数c，如果c大于1，就会取大于等于c的2的N次方值，所以cap不是1，就是2的N次方。segment的容量threshold＝(int)cap*loadFactor，默认情况下initialCapacity等于16，load factor等于0.75，通过运算cap等于1，threshold等于零。</p><h1 id="在jdk1-8中主要做了2方面的改进"><a href="#在jdk1-8中主要做了2方面的改进" class="headerlink" title="在jdk1.8中主要做了2方面的改进"></a>在jdk1.8中主要做了2方面的改进</h1><p>数据结构<br>1.8中放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现，结构如下：<br><img src="https://image.xiaomo.info/blog/nodeArray.png"></p><p>只有在执行第一次put方法时才会调用initTable()初始化Node数组，实现如下：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">private final Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] <span class="keyword">tab</span>; int <span class="keyword">sc</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="keyword">tab</span> = <span class="keyword">table</span>) == null || <span class="keyword">tab</span>.length == 0) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">sc</span> = sizeCtl) &lt; 0)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">U</span>.compareAndSwapInt(this, SIZECTL, <span class="keyword">sc</span>, -1)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="keyword">tab</span> = <span class="keyword">table</span>) == null || <span class="keyword">tab</span>.length == 0) &#123;</span><br><span class="line">                    int <span class="keyword">n</span> = (<span class="keyword">sc</span> &gt; 0) ? <span class="keyword">sc</span> : DEFAULT_CAPACITY;</span><br><span class="line">                    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[<span class="keyword">n</span>];</span><br><span class="line">                    <span class="keyword">table</span> = <span class="keyword">tab</span> = nt;</span><br><span class="line">                    <span class="keyword">sc</span> = <span class="keyword">n</span> - (<span class="keyword">n</span> &gt;&gt;&gt; 2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                sizeCtl = <span class="keyword">sc</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">tab</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put实现<br>当执行put方法插入数据时，根据key的hash值，在Node数组中找到相应的位置，实现如下：</p><p>1、如果相应位置的Node还未初始化，则通过CAS插入相应的数据；</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((f = <span class="built_in">tabAt</span>(<span class="built_in">tab</span>, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="built_in">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">casTabAt</span>(<span class="built_in">tab</span>, i, <span class="built_in">null</span>, new Node&lt;K,V&gt;(hash, <span class="built_in">key</span>, value, <span class="built_in">null</span>)))</span><br><span class="line">        <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果相应位置的Node不为空，且当前该节点不处于移动状态，则对该节点加synchronized锁，如果该节点的hash不小于0，则遍历链表更新节点或插入新节点；</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">if (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    binCount = <span class="number">1</span>;</span><br><span class="line">    for (<span class="keyword">Node</span><span class="title">&lt;K</span>,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">        K ek;</span><br><span class="line">        if (e.hash == hash &amp;&amp;</span><br><span class="line">            ((ek = e.key) == key ||</span><br><span class="line">             (ek != null &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">            oldVal = e.val;</span><br><span class="line">            if (!onlyIfAbsent)</span><br><span class="line">                e.val = value;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">Node</span><span class="title">&lt;K</span>,V&gt; pred = e;</span><br><span class="line">        if ((e = e.next) == null) &#123;</span><br><span class="line">            pred.next = new <span class="keyword">Node</span><span class="title">&lt;K</span>,V&gt;(hash, key, value, null);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如果该节点是TreeBin类型的节点，说明是红黑树结构，则通过putTreeVal方法往红黑树中插入节点；</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f instanceof TreeBin) &#123;</span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    binCount = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).<span class="built_in">putTreeVal</span>(hash, <span class="built_in">key</span>, value)) != <span class="built_in">null</span>) &#123;</span><br><span class="line">        oldVal = p.val;</span><br><span class="line">        <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">            p.val = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、如果binCount不为0，说明put操作对数据产生了影响，如果当前链表的个数达到8个，则通过treeifyBin方法转化为红黑树，如果oldVal不为空，说明是一次更新操作，没有对元素个数产生影响，则直接返回旧值；</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">        <span class="built_in">treeifyBin</span>(<span class="built_in">tab</span>, i);</span><br><span class="line">    <span class="keyword">if</span> (oldVal != <span class="built_in">null</span>)</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、如果插入的是一个新节点，则执行addCount()方法尝试更新元素个数baseCount；</p><p>size实现<br>1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据或则删除数据时，会通过addCount()方法更新baseCount，实现如下：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">as</span> = counterCells) != <span class="literal">null</span> ||</span><br><span class="line">    !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">    CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">    boolean uncontended = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">as</span> == <span class="literal">null</span> || (m = <span class="keyword">as</span>.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">        (a = <span class="keyword">as</span>[ThreadLocalRandom.getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">        !(uncontended =</span><br><span class="line">          U.compareAndSwapLong(a, CELLVALUE, v = a.<span class="keyword">value</span>, v + x))) &#123;</span><br><span class="line">        fullAddCount(x, uncontended);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    s = sumCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，使用CounterCell记录元素个数的变化；</p><p>2、如果CounterCell数组counterCells为空，调用fullAddCount()方法进行初始化，并插入对应的记录数，通过CAS设置cellsBusy字段，只有设置成功的线程才能初始化CounterCell数组，实现如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == <span class="keyword">as</span> &amp;&amp;</span><br><span class="line">         U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">    boolean <span class="keyword">init</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">        <span class="keyword">if</span> (counterCells == <span class="keyword">as</span>) &#123;</span><br><span class="line">            CounterCell[] rs = new CounterCell[<span class="number">2</span>];</span><br><span class="line">            rs[h &amp; <span class="number">1</span>] = new CounterCell(x);</span><br><span class="line">            counterCells = rs;</span><br><span class="line">            <span class="keyword">init</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        cellsBusy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">init</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如果通过CAS设置cellsBusy字段失败的话，则继续尝试通过CAS修改baseCount字段，如果修改baseCount字段成功的话，就退出循环，否则继续循环插入CounterCell对象；</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>所以在1.8中的size实现比1.7简单多，因为元素个数保存baseCount中，部分元素的变化个数保存在CounterCell数组中，实现如下：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> n = sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="keyword">int</span>)n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">final <span class="keyword">long</span> <span class="title">sumCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    CounterCell[] <span class="keyword">as</span> = counterCells; CounterCell a;</span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">as</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = <span class="keyword">as</span>[i]) != <span class="literal">null</span>)</span><br><span class="line">                sum += a.<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过累加baseCount和CounterCell数组中的数量，即可得到元素的总个数；</p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-ThreadLocal</title>
      <link href="2018/jdkSourceCodeReadThreadLocal/"/>
      <url>2018/jdkSourceCodeReadThreadLocal/</url>
      
        <content type="html"><![CDATA[<p>这个类提供本地线程变量。不同于一般的变量，这些变量在他们各自的线程里通过 get、set 访问一个它自己的变量，这是一个独立初始化的变量副本。在一个类中，ThreadLocal 实例一般是 private static 的，期望和一个线程关联状态（如 userId，transactionId 等）。简单地说，就是此类提供了线程的本地变量，线程修改本地变量不互相影响。</p><a id="more"></a><p>举个例子，下面的类给每个线程生成一个唯一的标识。一个线程 id 在第一次调用 ThreadId.get() 被赋值，并且在后续的调用上保持不变。</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadId</span> </span>&#123;  </span><br><span class="line">       <span class="comment">// Atomic integer containing the next thread ID to be assigned  </span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger nextId = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">       <span class="comment">// Thread local 变量保存着每个线程的ID  </span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; threadId =  </span><br><span class="line">           <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;  </span><br><span class="line">               <span class="meta">@Override</span> <span class="keyword">protected</span> <span class="function">Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                   <span class="function"><span class="keyword">return</span> nextId.<span class="title">getAndIncrement</span><span class="params">()</span></span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;;  </span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 返回当前线程的唯一ID，如果没有值的话先赋值  </span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">           <span class="function"><span class="keyword">return</span> threadId.<span class="title">get</span><span class="params">()</span></span>;  </span><br><span class="line">       &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要线程还存活并且 ThreadLocal 实例可访问，那么每个线程持有一个确定的引用指向本地的变量副本，当线程消失，它的本地变量副本将会被GC（除非还被其他对象引用）。</p><h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/** </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>执行结果： </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-0,5,main]---------count=0 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-0,5,main]---------count=1 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-0,5,main]---------count=2 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-0,5,main]---------count=3 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-0,5,main]---------count=4 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-2,5,main]---------count=0 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-2,5,main]---------count=1 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-2,5,main]---------count=2 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-1,5,main]---------count=0 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-2,5,main]---------count=3 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-2,5,main]---------count=4 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-1,5,main]---------count=1 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-1,5,main]---------count=2 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-1,5,main]---------count=3 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Thread[Thread-1,5,main]---------count=4 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>可以看出线程的变量更新没有相互影响 </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Created by hzzhuyibin on 2017/3/14. </span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span>  </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    private <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; count = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;  </span><br><span class="line">        public Integer initialValue() &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        NewThread thread1 = <span class="keyword">new</span> NewThread(count);  </span><br><span class="line">        NewThread thread2 = <span class="keyword">new</span> NewThread(count);  </span><br><span class="line">        NewThread thread3 = <span class="keyword">new</span> NewThread(count);  </span><br><span class="line">  </span><br><span class="line">        thread1.start();  </span><br><span class="line">        thread3.start();  </span><br><span class="line">        thread2.start();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NewThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">        ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">null</span>;  </span><br><span class="line">  </span><br><span class="line">        public NewThread(ThreadLocal&lt;Integer&gt; threadLocal) &#123;  </span><br><span class="line">            <span class="keyword">this</span>.threadLocal = threadLocal;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        public <span class="keyword">void</span> run() &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">"---------count="</span> + threadLocal.<span class="keyword">get</span>());  </span><br><span class="line">                threadLocal.<span class="keyword">set</span>(threadLocal.<span class="keyword">get</span>() + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>ThreadLocal 的数据结构：实线表示强引用，虚线表示弱引用<br>每个 Thread 维护一个ThreadLocalMap 映射 table，映射 table 的 key 是 ThreadLocal 实例，value 就是线程存独立的变量副本的地方。<br>为什么这么设计，而不是由 ThreadLocal 来维护一个以 Thread 为 key 的映射呢？原因如下：</p><ol><li>减小 Entry 数组大小：ThreadLocal 数量多，还是 Thread 的数量多，显而易见，使用 ThreadLocal 来当 key 可以减少 Entry 数量</li><li>减小内存占用：当 Thread 消亡，对 Thread 实例不在引用，则 GC 后就会清除相关数据</li></ol><p><img src="https://image.xiaomo.info/blog/threadLocal.png"></p><ol><li>先看字段含义</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** ThreadLocals 依赖每个线程的线性嗅探哈希映射到每个线程(Thread.threadLocals and inheritableThreadLocals)。 </span></span><br><span class="line"><span class="comment"> * ThreadLocal 对象作为 key，通过 threadLocalHashCode 来搜索。这是一个定制化的减少冲突的哈希码（只在 ThreadLocalMaps 有用）， </span></span><br><span class="line"><span class="comment"> * 其中连续构造的ThreadLocals由相同的线程使用，在较不常见的情况下保持良好行为。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 生成下一个 Hash Code。原子更新。从零开始。 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =  </span><br><span class="line">        <span class="keyword">new</span> AtomicInteger();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">     *连续生成的散列码之间的差异 - 将隐式顺序线程本地ID转换为二次幂表的近似最优扩展的乘法散列值。 </span></span><br><span class="line"><span class="comment">     *简单来说就是偏移量，offetset </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 返回下一个 Hash 值 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>主要方法：</li></ol><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   返回当前线程的线程本地变量值。这个方法将会在线程第一次通过 get() 访问变量的时候调用， </span></span><br><span class="line"><span class="comment">     * 除非这个线程之前调用过 set() 那么 initialValue() 才不会被调用。通常，这个方法只会被调用一次, </span></span><br><span class="line"><span class="comment">     * 但是它在 get() 后调用 remove()，能被再次调用。 </span></span><br><span class="line"><span class="comment">     * 这里实现是简单返回 null，如果想赋其他值需要重写这个方法。 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span>(<span class="params"></span>)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>核心方法 get() 相关内容：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 返回当前线程的本地变量副本值。如果这个变量没有值，则返回 initialValue() 初始化的值 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> T <span class="keyword">get</span>() &#123;  </span><br><span class="line">    Thread t = Thread.currentThread();  </span><br><span class="line">    <span class="comment">// ThreadLocalMap 是一个为了保存线程本地变量定制化的 hash map。  </span></span><br><span class="line">    ThreadLocalMap map = getMap(t);  </span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;  </span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span>  </span><br><span class="line">            T result = (T)e.value;  </span><br><span class="line">            <span class="keyword">return</span> result;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> setInitialValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 getMap(Thread t)：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   获取和ThreadLocal相关的 map。在 InheritableThreadLocal中重写 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread 类中的代码：这里可以看到是 Thread 持有 ThreadLocal.ThreadLocalMap 引用</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 与此线程有关的ThreadLocal值。 此 map 由ThreadLocal类维护。 */</span>  </span><br><span class="line">dLocal.ThreadLocalMap <span class="attr">threadLocals</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>其中的 map.getEntry(this)：</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 获取和key关联的Entry。 此方法本身仅处理快速路径：直接命中现有键。 </span></span><br><span class="line"><span class="comment"> *  这是为了最大限度地提高直接命中的性能，部分通过使这种方法很容易嵌入。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> Entry getEntry(ThreadLocal&lt;?&gt; <span class="built_in">key</span>) &#123;  </span><br><span class="line">    <span class="built_in">int</span> i = <span class="built_in">key</span>.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);  </span><br><span class="line">    Entry e = table[i];  </span><br><span class="line">    <span class="comment">// 命中 hash slot  </span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.<span class="built_in">get</span>() == <span class="built_in">key</span>)  </span><br><span class="line">        <span class="keyword">return</span> e;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="comment">// 如果在 hash slot 里面没有直接查到就进入这个方法  </span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(<span class="built_in">key</span>, i, e);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 如果在 hash slot 里面没有直接查到就进入这个方法 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; <span class="built_in">key</span>, <span class="built_in">int</span> i, Entry e) &#123;  </span><br><span class="line">    Entry[] tab = table;  </span><br><span class="line">    <span class="built_in">int</span> len = tab.length;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.<span class="built_in">get</span>();  </span><br><span class="line">        <span class="keyword">if</span> (k == <span class="built_in">key</span>)  </span><br><span class="line">            <span class="keyword">return</span> e;  </span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) <span class="comment">// 清理无用 entry  </span></span><br><span class="line">            expungeStaleEntry(i);  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 可以看出这里使用开放定址法来解决哈希冲突  </span></span><br><span class="line">            i = nextIndex(i, len);  </span><br><span class="line">        e = tab[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 核心方法 set() 相关内容：</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 设置 key 的 value </span></span><br><span class="line"><span class="comment"> * 这里不使用 get() 方法中的快速路径，因为新建和更新的比例差不多， </span></span><br><span class="line"><span class="comment"> * 使用快速路径查找失败率很高 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="built_in">set</span>(ThreadLocal&lt;?&gt; <span class="built_in">key</span>, <span class="keyword">Object</span> value) &#123;  </span><br><span class="line">  </span><br><span class="line">    Entry[] tab = table;  </span><br><span class="line">    <span class="built_in">int</span> len = tab.length;  </span><br><span class="line">    <span class="built_in">int</span> i = <span class="built_in">key</span>.threadLocalHashCode &amp; (len<span class="number">-1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 开发地址法，遍历查找  </span></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];  </span><br><span class="line">         e != <span class="keyword">null</span>;  </span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;  </span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.<span class="built_in">get</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (k == <span class="built_in">key</span>) &#123;  </span><br><span class="line">            e.value = value;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// key 为 null，说明 ThreadLocal 实例已被回收，  </span></span><br><span class="line">            <span class="comment">// 所以这里的 value 可以被覆盖。减少内存泄露的可能  </span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            replaceStaleEntry(<span class="built_in">key</span>, value, i);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 没有找到 Entry 则新建一个  </span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> Entry(<span class="built_in">key</span>, value);  </span><br><span class="line">    <span class="built_in">int</span> sz = ++<span class="built_in">size</span>;  </span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)  </span><br><span class="line">        rehash();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-内存模型</title>
      <link href="2018/jdkSourceCodeReadMemoryActor/"/>
      <url>2018/jdkSourceCodeReadMemoryActor/</url>
      
        <content type="html"><![CDATA[<p>为了让程序员忽略掉各种硬件和操作系统的内存访问差异， 也既无需关心不同架构上内存模型的差异， Java 在代码和硬件内存模型间又提供了一个 Java 内存模型。</p><a id="more"></a><h1 id="并发模型的分类"><a href="#并发模型的分类" class="headerlink" title="并发模型的分类"></a>并发模型的分类</h1><p>在并发编程中，需要处理两个关键问题：线程之间如何通信（线程之间以何种机制来交换信息， 有两种方式：共享内存和消息传递）及线程之间如何同步。</p><p>在共享内存的并发模型里（如 Java），线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态（主存）来隐式（对程序员透明）进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p><p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p><p>虽然 Java 是共享内存并发模型， 对程序员透明， 但是不理解 Java 内存模型， 就会对内存可见性， 有序性等问题出现时找不到解决方法。</p><h1 id="Java-虚拟机运行时数据区"><a href="#Java-虚拟机运行时数据区" class="headerlink" title="Java 虚拟机运行时数据区"></a>Java 虚拟机运行时数据区</h1><p><img src="https://img-blog.csdn.net/20150927230534604"></p><p>虚拟机栈描述的是 Java 执行的内存模型： 每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、  操作数栈、 动态链接、 方法出口等信息。</p><p>Java 内存模型的主要目标是定义程序中各个变量的访问规则， 既在虚拟机中对变量的读写操作， 监视器的加锁和释放操作， 以及线程的启动和合并操作。</p><h1 id="原子性、-可见性和有序性"><a href="#原子性、-可见性和有序性" class="headerlink" title="原子性、 可见性和有序性"></a>原子性、 可见性和有序性</h1><p>Java 内存模型是围绕着在并发过程中如何处理原子性、 可见性和有序性来建立的。 </p><p> 原子性： 操作不可再分。 如在 Java 代码中使用 synchronized 和 ReentrantLock 来保障。<br> 可见性： A 线程操作， 对 B 线程可见， 既 A 变量赋值 1， B 线程能看见变量已经变为 1。 synchronized 、final、 volatile 和 ReentrantLock 都能提供。<br> 有序性： 在本线程内观察， 所有操作都是有序的（线程内表现为串行语义）； 如果在另一个线程中观察另一个线程， 所有操作都是无序的（指令重排序与工作内存与主内存同步延迟）。synchronized 、 volatile 和 ReentrantLock 都能提供有序性保证。</p><p> 从上述可以得出 synchronized 和 ReentrantLock 是万能的， 但是效率却有巨大的差别， ReentrantLock 会比 synchronized 好很多， ConcurrentHashMap 的源码实现中就利用了 ReentrantLock 分段锁来提升并发安全和效率。</p><h1 id="Happens-Before-规则"><a href="#Happens-Before-规则" class="headerlink" title="Happens-Before 规则"></a>Happens-Before 规则</h1><p>要保证 A 线程看到 B线程的操作结果（无论 A 和 B 是否在同一线程中执行）， 那么 A 和 B 之间必须满足 Happens-Before 关系。<br>Happens-Before 规则如下：</p><ol><li>序次序规则（Program Order Rule）：程序中 操作 A 在操作 B 之前， 那么在线程中 A 操作将在 B 操作之前进行。</li><li>管程锁定规则（Monitor Lock Rule）：一个 unlock 操作 happen—before 后面（时间上的先后顺序，下同）对同一个锁的 lock 操作。</li><li>volatile 变量规则：对一个 volatile 变量的写操作 happen—before 后面对该变量的读操作。</li><li>线程启动规则：Thread 对象的 start() 方法 happen—before 此线程的每一个动作。</li><li>线程终止规则：线程的所有操作都 happen—before 对此线程的终止检测，可以通过 Thread.join() 方法结束、Thread.isAlive() 的返回值等手段检测到线程已经终止执行。</li><li>线程中断规则：对线程 interrupt() 方法的调用 happen—before 发生于被中断线程的代码检测到中断时事件的发生。</li><li>终结器规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）happen—before 它的 finalize() 方法的开始。</li><li>传递性：如果操作A happen—before 操作 B，操作 B happen—before 操作 C，那么可以得出 A happen—before 操作 C。</li><li>如果两个操作间缺乏 Happens-Before 关系， 那么 JVM 可以对它们进行任意排序。</li></ol><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a><br><a href="https://www.jianshu.com/p/2fdee831ed03" target="_blank" rel="noopener">Java内存溢出(OOM)异常完全指南</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-线程池</title>
      <link href="2018/jdkSourceCodeReadThreadPool/"/>
      <url>2018/jdkSourceCodeReadThreadPool/</url>
      
        <content type="html"><![CDATA[<p>Executors 是 Executor、ExecutorService、ThreadFactory、Callable 类的工厂和工具方法。</p><a id="more"></a><h1 id="创建一个固定大小的线程池"><a href="#创建一个固定大小的线程池" class="headerlink" title="创建一个固定大小的线程池"></a>创建一个固定大小的线程池</h1><p>通过重用共享无界队列里的线程来减少线程创建的开销。当所有的线程都在执行任务，新增的任务将会在队列中等待，直到一个线程空闲。由于在执行前失败导致的线程中断，如果需要继续执行接下去的任务，新的线程会取代它执行。线程池中的线程会一直存在，除非明确地 shutdown 掉。</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">FixedThreadPool</span>(int nThreads) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="number">0</span>L, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的是 ThreadPoolExecutor 类的对象，这个构造方法使用传入的参数和默认的线程工厂与拒绝执行的处理。<br>corePoolSize：线程池中的线程数量，除非设置了 allowCoreThreadTimeOut， 否则就算线程空闲还是在保存在线程池中<br>maximumPoolSize：线程池中允许存放最大的线程数量<br>keepAliveTime：当线程数大于 corePoolSize，如果 keepAliveTime 内空闲的线程未执行，线程将被终结<br>unit：keepAliveTime 的时间单位<br>workQueue：保存 execute() 提交的任务 </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,  </span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,  </span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,  </span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,  </span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,  </span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到固定大小线程池，corePoolSize 和 maximumPoolSize 传入的参数是一样的</p><h1 id="创建一个单个线程的线程池"><a href="#创建一个单个线程的线程池" class="headerlink" title="创建一个单个线程的线程池"></a>创建一个单个线程的线程池</h1><p>任务会被保证顺序执行，因为只有一个工作线程。不像 newFixedThreadPool(1)，这个不保证任务顺序执行。corePoolSize 和 maximumPoolSize 都是 1。</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">SingleThreadExecutor</span>() &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">FinalizableDelegatedExecutorService</span>  </span><br><span class="line">        (<span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,<span class="number">0</span>L, TimeUnit.MILLISECONDS,<span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;()));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个可按需自动扩容的线程池-但是会优先重用线程池中空闲可用的线程"><a href="#创建一个可按需自动扩容的线程池-但是会优先重用线程池中空闲可用的线程" class="headerlink" title="创建一个可按需自动扩容的线程池,但是会优先重用线程池中空闲可用的线程"></a>创建一个可按需自动扩容的线程池,但是会优先重用线程池中空闲可用的线程</h1><p>这个类型的线程池将会大大提升执行许多短暂的异步任务的程序。如果线程池中线程都在使用，又有新任务到来，则新增一个线程到线程池。如果线程 60 秒内空闲，则将被终止移除线程池。corePoolSize 为 0，可知一旦线程 60s 空闲就会被移出线程池</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">CachedThreadPool</span>() &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,<span class="number">60</span>L, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="type">SynchronousQueue</span>&lt;Runnable&gt;());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个在一定延迟时间后调度命令的线程池，或者周期性执行的线程池。"><a href="#创建一个在一定延迟时间后调度命令的线程池，或者周期性执行的线程池。" class="headerlink" title="创建一个在一定延迟时间后调度命令的线程池，或者周期性执行的线程池。"></a>创建一个在一定延迟时间后调度命令的线程池，或者周期性执行的线程池。</h1><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="keyword">new</span><span class="type">ScheduledThreadPool</span>(int corePoolSize) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ScheduledThreadPoolExecutor</span>(corePoolSize);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建完线程池，然后就该执行任务了"><a href="#创建完线程池，然后就该执行任务了" class="headerlink" title="创建完线程池，然后就该执行任务了"></a>创建完线程池，然后就该执行任务了</h1><p>看下内部类 DelegatedExecutorService 里的 execute 方法：可以看到任务执行策略（单线程串行、多线程并行）和任务的具体执行分离，是一个典型的命令模式。</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatedExecutorService</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService e;  </span><br><span class="line">    DelegatedExecutorService(ExecutorService executor) &#123; e = executor; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123; e.execute(command); &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123; e.shutdown(); &#125;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Runnable&gt; shutdownNow() &#123; <span class="function"><span class="keyword">return</span> e.<span class="title">shutdownNow</span><span class="params">()</span></span>; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> e.<span class="title">isShutdown</span><span class="params">()</span></span>; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span> </span>&#123; <span class="function"><span class="keyword">return</span> e.<span class="title">isTerminated</span><span class="params">()</span></span>; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> awaitTermination(<span class="keyword">long</span> timeout, TimeUnit unit)  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">awaitTermination</span><span class="params">(timeout, unit)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">submit</span><span class="params">(task)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task) &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">submit</span><span class="params">(task)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result) &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">submit</span><span class="params">(task, result)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? <span class="keyword">extends</span> Callable&lt;T&gt;&gt; tasks)  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">invokeAll</span><span class="params">(tasks)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? <span class="keyword">extends</span> Callable&lt;T&gt;&gt; tasks,  </span><br><span class="line">                                         <span class="keyword">long</span> timeout, TimeUnit unit)  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">invokeAll</span><span class="params">(tasks, timeout, unit)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T invokeAny(Collection&lt;? <span class="keyword">extends</span> Callable&lt;T&gt;&gt; tasks)  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">invokeAny</span><span class="params">(tasks)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T invokeAny(Collection&lt;? <span class="keyword">extends</span> Callable&lt;T&gt;&gt; tasks,  </span><br><span class="line">                           <span class="keyword">long</span> timeout, TimeUnit unit)  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">return</span> e.<span class="title">invokeAny</span><span class="params">(tasks, timeout, unit)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程池的时候，已经实例化了 ThreadPoolExecutor，所以上面 execute() 方法实际是调用 ThreadPoolExecutor 的 execute：给定的任务可能在未来的某个时刻执行。可能是新建一个线程执行，也可能是线程中原有的线程执行。如果任务不能执行，可能是这个 executor 已经被 shutdown 了，也可能是到达了线程池的执行阈值，任务被拒绝执行处理器处理中。</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span>(<span class="params">Runnable command</span>)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">    <span class="keyword">int</span> c = ctl.<span class="keyword">get</span>();  </span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        c = ctl.<span class="keyword">get</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;  </span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.<span class="keyword">get</span>();  </span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; <span class="keyword">remove</span>(command))  </span><br><span class="line">            reject(command);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)  </span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))  </span><br><span class="line">        reject(command);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这，其实发现线程池的核心实现就是在 ThreadPoolExecutor 里面，所以先介绍下 ThreadPoolExecutor 类的作用： </p><p><img src="https://image.xiaomo.info/blog/executor.png"></p><p>上图可以看出 ThreadPoolExecutor 类的层次结构中的位置，是对抽象方法和接口的完整实现，即核心代码在这个类里。</p><p>一个 ExecutorService 执行每个任务可能用到线程池中的一个或多个线程，线程池由 Executors 工厂创建。<br>线程池解决了两个不同的问题：</p><ol><li>执行大量异步的任务时，线程池减少线程的创建来减少开销，提升性能</li><li>提供了对资源的管理，包括当执行一系列任务时，线程的消耗。每个 ThreadPoolExecutor 也存储有些基本数据，诸如完成的任务数量</li></ol><p>想要在更广阔的背景下使用的话，这个类提供了许多可调整的参数和扩展的 hook。不管怎么样，还是推荐使用 Executors 来创建线程池比较方便。</p><p>这个主要的线程池控制状态 ctl，使用 AtomicInteger 存储两个概念上的字段 workerCount(线程池有效的线程数) 和 runState(线程池是 running、shuting down 等等状态) </p><p><code>private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));  </code></p><p>上述 execute() 方法有三个处理步骤：</p><ol><li>如果正在 running 的线程 (即 worker 线程) 小于 corePoolSize ( workerCountOf(c) &lt; corePoolSize )，尝试创建一个新线程并把传入的 command(任务) 作为它的第一个任务。调用 addWorker(command, true) 自动检查 runState 和 workCount，以便在不能增加线程的时候返回 false。添加成功直接 return，不能添加就要看下面的步骤</li><li>如果被成功放进队列（if (isRunning(c) &amp;&amp; workQueue.offer(command))  workQueue 是一个任务排队的阻塞队列），然后还需要二次检查线程池是否 shut down（上次检查后到这次检查前死亡）。所以我们重新检查状态，如果线程池停止的话，回滚进队操作，或者如果没有工作的线程开启一个新线程（addWorker(null, false);）</li><li>如果不能让任务进入阻塞队列，然后尝试新增一个线程。如果新增线程失败，可能是线程池 shut down 或者线程池饱和（达到 maxPoolSize），所以接下来抛弃这个任务。</li></ol><p>任务（Task）被包装在一个叫做 Worker 的内部类，Worker 继承 AQS 来实现任务增加/删除的同步控制，使用 HashSet 来保存 Worker 线程。如果 worker 线程大于 corePoolSize，则不创建 worker 线程，而是放入一个 BlockingQueue 排队。如果有界队列的 BlockingQueue 满了，则尝试增加线程到线程池，但是线程总数要小于 maxPollSize。</p><p>addWorker() 方法：检查线程池当前状态和线程数量的边界条件看是否可以增加 worker 线程。如果可以，工作线程计数响应调整，并且，如果可能的话，新的 worker 线程被创建，启动，跑它的第一个 task。如果线程池 stop 或者要被 shut down，此方法返回 false。如果线程工厂（thread factory）创建线程失败，此方法也会返回 false。如果线程创建失败，不管是 thread factory 返回 null，或者 exception（通常是 OOM），都会被回滚。</p><p>参数<br>firstTask： 新线程应该运行的第一个任务。如果 worker 线程小于 corePoolSize，worker 和初始化的第一次任务一起创建绕过排队这一过程，或者队列已满。初始化空闲线程通常是通过 prestartCoreThread 或者替换已经死亡的 worker 线程。<br>core：如果 true，则使用 corePoolSize 作为边界，否则使用 maximumPoolSize 作为边界。（这里使用 Boolean 而不是传入实际值，是因为传入值可能会在传入过程被改变，在方法中直接读取值更精确）。  </p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">boolean</span> addWorker(Runnable firstTask, <span class="built_in">boolean</span> core) &#123;  </span><br><span class="line">    retry:  </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">        <span class="built_in">int</span> c = ctl.<span class="built_in">get</span>();  </span><br><span class="line">        <span class="built_in">int</span> rs = runStateOf(c);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.  </span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;  </span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;  </span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;  </span><br><span class="line">               ! workQueue.isEmpty()))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">            <span class="built_in">int</span> wc = workerCountOf(c);  </span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||  </span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))  </span><br><span class="line">                <span class="keyword">break</span> retry;  </span><br><span class="line">            c = ctl.<span class="built_in">get</span>();  <span class="comment">// Re-read ctl  </span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)  </span><br><span class="line">                <span class="keyword">continue</span> retry;  </span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">boolean</span> workerStarted = <span class="keyword">false</span>;  </span><br><span class="line">    <span class="built_in">boolean</span> workerAdded = <span class="keyword">false</span>;  </span><br><span class="line">    Worker w = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;  </span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);  </span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;  </span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            mainLock.lock();  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="comment">// Recheck while holding lock.  </span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if  </span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.  </span></span><br><span class="line">                <span class="built_in">int</span> c = ctl.<span class="built_in">get</span>();  </span><br><span class="line">                <span class="built_in">int</span> rs = runStateOf(c);  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||  </span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable  </span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();  </span><br><span class="line">                    workers.<span class="built_in">add</span>(w);  </span><br><span class="line">                    <span class="built_in">int</span> s = workers.<span class="built_in">size</span>();  </span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)  </span><br><span class="line">                        largestPoolSize = s;  </span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                mainLock.unlock();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;  </span><br><span class="line">                t.start();  </span><br><span class="line">                workerStarted = <span class="keyword">true</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)  </span><br><span class="line">            addWorkerFailed(w);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> workerStarted;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-深入了解IO的工作机制</title>
      <link href="2018/jdkSourceCodeReadIO/"/>
      <url>2018/jdkSourceCodeReadIO/</url>
      
        <content type="html"><![CDATA[<p>I/O 问题是任何编程语言都无法回避的问题，可以说 I/O 问题是整个人机交互的核心问题，因为 I/O 是机器获取和交换信息的主要渠道。在当今这个数据大爆炸时代，I/O 问题尤其突出，很容易成为一个性能瓶颈。正因如此，所以 Java 在 I/O 上也一直在做持续的优化，如从 1.4 开始引入了 NIO，提升了 I/O 的性能。</p><a id="more"></a><h1 id="Java-的-I-O-类库的基本架构"><a href="#Java-的-I-O-类库的基本架构" class="headerlink" title="Java 的 I/O 类库的基本架构"></a>Java 的 I/O 类库的基本架构</h1><p>Java 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：</p><ol><li>基于字节操作的 I/O 接口：InputStream 和 OutputStream</li><li>基于字符操作的 I/O 接口：Writer 和 Reader</li><li>基于磁盘操作的 I/O 接口：File</li><li>基于网络操作的 I/O 接口：Socket</li></ol><p>前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起，因为我个人认为 I/O 的核心问题要么是数据格式影响 I/O 操作，要么是传输方式影响 I/O 操作，也就是将什么样的数据写到什么地方的问题，I/O 只是人与机器或者机器与机器交互的手段，除了在它们能够完成这个交互功能外，我们关注的就是如何提高它的运行效率了，而数据格式和传输方式是影响效率最关键的因素了。我们后面的分析也是基于这两个因素来展开的。</p><h1 id="基于字节的-I-O-操作接口"><a href="#基于字节的-I-O-操作接口" class="headerlink" title="基于字节的 I/O 操作接口"></a>基于字节的 I/O 操作接口</h1><p>基于字节的 I/O 操作接口输入和输出分别是：InputStream 和 OutputStream，InputStream 输入流的类继承层次如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image002.png"></p><p>输入流根据数据类型和操作方式又被划分成若干个子类，每个子类分别处理不同操作类型，OutputStream 输出流的类层次结构也是类似，如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image004.png"><br>这里就不详细解释每个子类如何使用了，如果不清楚的话可以参考一下 JDK 的 API 说明文档，这里只想说明两点，一个是操作数据的方式是可以组合使用的，如这样组合使用<br><code>OutputStream out = new BufferedOutputStream(new ObjectOutputStream(new FileOutputStream(&quot;fileName&quot;))；</code><br>还有一点是流最终写到什么地方必须要指定，要么是写到磁盘要么是写到网络中，其实从上面的类图中我们发现，写网络实际上也是写文件，只不过写网络还有一步需要处理就是底层操作系统再将数据传送到其它地方而不是本地磁盘。关于网络 I/O 和磁盘 I/O 我们将在后面详细介绍。</p><h1 id="基于字符的-I-O-操作接口"><a href="#基于字符的-I-O-操作接口" class="headerlink" title="基于字符的 I/O 操作接口"></a>基于字符的 I/O 操作接口</h1><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。我们知道字符到字节必须要经过编码转换，而这个编码又非常耗时，而且还会经常出现乱码问题，所以 I/O 的编码问题经常是让人头疼的问题。关于 I/O 编码问题请参考另一篇文章 <a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/" target="_blank" rel="noopener">《深入分析Java中的中文编码问题》</a>。<br>下图是写字符的 I/O 操作接口涉及到的类，Writer 类提供了一个抽象方法 write(char cbuf[], int off, int len) 由子类去实现。<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image006.png"></p><p>读字符的操作接口也有类似的类结构，如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image008.png"><br>读字符的操作接口中也是 int read(char cbuf[], int off, int len)，返回读到的 n 个字节数，不管是 Writer 还是 Reader 类它们都只定义了读取或写入的数据字符的方式，也就是怎么写或读，但是并没有规定数据要写到哪去，写到哪去就是我们后面要讨论的基于磁盘和网络的工作机制。</p><h1 id="字节与字符的转化接口"><a href="#字节与字符的转化接口" class="headerlink" title="字节与字符的转化接口"></a>字节与字符的转化接口</h1><p>另外数据持久化或网络传输都是以字节进行的，所以必须要有字符到字节或字节到字符的转化。字符到字节需要转化，其中读的转化过程如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image011.jpg"><br>InputStreamReader 类是字节到字符的转化桥梁，InputStream 到 Reader 的过程要指定编码字符集，否则将采用操作系统默认字符集，很可能会出现乱码问题。StreamDecoder 正是完成字节到字符的解码的实现类。也就是当你用如下方式读取一个文件时：</p><p>读取文件</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">   StringBuffer <span class="built_in">str</span> = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line">   <span class="built_in">char</span>[] buf = <span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">1024</span>]; </span><br><span class="line">   FileReader f = <span class="keyword">new</span> FileReader(<span class="string">"file"</span>); </span><br><span class="line">   <span class="keyword">while</span>(f.read(buf)&gt;<span class="number">0</span>)&#123; </span><br><span class="line">       <span class="built_in">str</span>.<span class="built_in">append</span>(buf); </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="built_in">str</span>.toString(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br></pre></td></tr></table></figure><p>FileReader 类就是按照上面的工作方式读取文件的，FileReader 是继承了 InputStreamReader 类，实际上是读取文件流，然后通过 StreamDecoder 解码成 char，只不过这里的解码字符集是默认字符集。<br>写入也是类似的过程如下图所示：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image013.jpg"><br>通过 OutputStreamWriter 类完成，字符到字节的编码过程，由 StreamEncoder 完成编码过程。</p><h1 id="磁盘-I-O-工作机制"><a href="#磁盘-I-O-工作机制" class="headerlink" title="磁盘 I/O 工作机制"></a>磁盘 I/O 工作机制</h1><p>前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。</p><p>我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。例如我们手机里通常存了几百个朋友的电话号码，但是我们通常关心的是我有没有这个朋友的电话号码，或者这个电话号码是什么，但是这个电话号码到底能不能打通，我们并不是时时刻刻都去检查，而只有在真正要给他打电话时才会看这个电话能不能用。也就是使用这个电话记录要比打这个电话的次数多很多。</p><p>何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。</p><p>下面以清单 1 的程序为例，介绍下如何从磁盘读取一段文本字符。如下图所示：</p><p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image015.jpg"></p><p>当传入一个文件路径，将会根据这个路径创建一个 File 对象来标识这个文件，然后将会根据这个 File 对象创建真正读取文件的操作对象，这时将会真正创建一个关联真实存在的磁盘文件的文件描述符 FileDescriptor，通过这个对象可以直接控制这个磁盘文件。由于我们需要读取的是字符格式，所以需要 StreamDecoder 类将 byte 解码为 char 格式，至于如何从磁盘驱动器上读取一段数据，由操作系统帮我们完成。至于操作系统是如何将数据持久化到磁盘以及如何建立数据结构需要根据当前操作系统使用何种文件系统来回答，至于文件系统的相关细节可以参考另外的文章。</p><h1 id="Java-Socket-的工作机制"><a href="#Java-Socket-的工作机制" class="headerlink" title="Java Socket 的工作机制"></a>Java Socket 的工作机制</h1><p>Socket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。打个比方，可以把 Socket 比作为两个城市之间的交通工具，有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket 也一样，也有多种。大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。</p><p>下图是典型的基于 Socket 的通信的场景：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image017.jpg"><br>主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。</p><h1 id="建立通信链路"><a href="#建立通信链路" class="headerlink" title="建立通信链路"></a>建立通信链路</h1><p>当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。</p><p>与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。</p><h1 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h1><p>传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。<br>当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。</p><h1 id="NIO-的工作方式"><a href="#NIO-的工作方式" class="headerlink" title="NIO 的工作方式"></a>NIO 的工作方式</h1><h2 id="BIO-带来的挑战"><a href="#BIO-带来的挑战" class="headerlink" title="BIO 带来的挑战"></a>BIO 带来的挑战</h2><p>BIO 即阻塞 I/O，不管是磁盘 I/O 还是网络 I/O，数据在写入 OutputStream 或者从 InputStream 读取时都有可能会阻塞。一旦有线程阻塞将会失去 CPU 的使用权，这在当前的大规模访问量和有性能要求情况下是不能接受的。虽然当前的网络 I/O 有一些解决办法，如一个客户端一个处理线程，出现阻塞时只是一个线程阻塞而不会影响其它线程工作，还有为了减少系统线程的开销，采用线程池的办法来减少线程创建和回收的成本，但是有一些使用场景仍然是无法解决的。如当前一些需要大量 HTTP 长连接的情况，像淘宝现在使用的 Web 旺旺项目，服务端需要同时保持几百万的 HTTP 连接，但是并不是每时每刻这些连接都在传输数据，这种情况下不可能同时创建这么多线程来保持连接。即使线程的数量不是问题，仍然有一些问题还是无法避免的。如这种情况，我们想给某些客户端更高的服务优先级，很难通过设计线程的优先级来完成，另外一种情况是，我们需要让每个客户端的请求在服务端可能需要访问一些竞争资源，由于这些客户端是在不同线程中，因此需要同步，而往往要实现这些同步操作要远远比用单线程复杂很多。以上这些情况都说明，我们需要另外一种新的 I/O 操作方式。</p><h2 id="NIO-的工作机制"><a href="#NIO-的工作机制" class="headerlink" title="NIO 的工作机制"></a>NIO 的工作机制</h2><p>我们先看一下 NIO 涉及到的关联类图，如下：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image019.jpg"></p><p>上图中有两个关键类：Channel 和 Selector，它们是 NIO 中两个核心概念。我们还用前面的城市交通工具来继续比喻 NIO 的工作方式，这里的 Channel 要比 Socket 更加具体，它可以比作为某种具体的交通工具，如汽车或是高铁等，而 Selector 可以比作为一个车站的车辆运行调度系统，它将负责监控每辆车的当前运行状态：是已经出战还是在路上等等，也就是它可以轮询每个 Channel 的状态。这里还有一个 Buffer 类，它也比 Stream 更加具体化，我们可以将它比作为车上的座位，Channel 是汽车的话就是汽车上的座位，高铁上就是高铁上的座位，它始终是一个具体的概念，与 Stream 不同。Stream 只能代表是一个座位，至于是什么座位由你自己去想象，也就是你在去上车之前并不知道，这个车上是否还有没有座位了，也不知道上的是什么车，因为你并不能选择，这些信息都已经被封装在了运输工具（Socket）里面了，对你是透明的。NIO 引入了 Channel、Buffer 和 Selector 就是想把这些信息具体化，让程序员有机会控制它们，如：当我们调用 write() 往 SendQ 写数据时，当一次写的数据超过 SendQ 长度是需要按照 SendQ 的长度进行分割，这个过程中需要有将用户空间数据和内核地址空间进行切换，而这个切换不是你可以控制的。而在 Buffer 中我们可以控制 Buffer 的 capacity，并且是否扩容以及如何扩容都可以控制。</p><p>理解了这些概念后我们看一下，实际上它们是如何工作的，下面是典型的一段 NIO 代码：</p><p> NIO 工作代码示例</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">public</span> void <span class="keyword">selector() </span>throws IOException &#123;</span><br><span class="line">        <span class="keyword">ByteBuffer </span><span class="keyword">buffer </span>= <span class="keyword">ByteBuffer.allocate(1024);</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">Selector </span><span class="keyword">selector </span>= <span class="keyword">Selector.open();</span></span><br><span class="line"><span class="keyword"> </span>       ServerSocketChannel ssc = ServerSocketChannel.open()<span class="comment">;</span></span><br><span class="line">        ssc.configureBlocking(false)<span class="comment">;//设置为非阻塞方式</span></span><br><span class="line">        ssc.socket().<span class="keyword">bind(new </span>InetSocketAddress(<span class="number">8080</span>))<span class="comment">;</span></span><br><span class="line">        ssc.register(<span class="keyword">selector, </span><span class="keyword">SelectionKey.OP_ACCEPT);//注册监听的事件</span></span><br><span class="line"><span class="keyword"> </span>       <span class="meta">while</span> (true) &#123;</span><br><span class="line">            Set <span class="keyword">selectedKeys </span>= <span class="keyword">selector.selectedKeys();//取得所有key集合</span></span><br><span class="line"><span class="keyword"> </span>           <span class="keyword">Iterator </span><span class="keyword">it </span>= <span class="keyword">selectedKeys.iterator();</span></span><br><span class="line"><span class="keyword"> </span>           <span class="meta">while</span> (<span class="keyword">it.hasNext()) </span>&#123;</span><br><span class="line">                <span class="keyword">SelectionKey </span>key = (<span class="keyword">SelectionKey) </span><span class="keyword">it.next();</span></span><br><span class="line"><span class="keyword"> </span>               <span class="meta">if</span> ((key.readyOps() &amp; <span class="keyword">SelectionKey.OP_ACCEPT) </span>== <span class="keyword">SelectionKey.OP_ACCEPT) </span>&#123;</span><br><span class="line">                    ServerSocketChannel ssChannel = (ServerSocketChannel) key.channel()<span class="comment">;</span></span><br><span class="line">                 SocketChannel sc = ssChannel.accept()<span class="comment">;//接受到服务端的请求</span></span><br><span class="line">                    sc.configureBlocking(false)<span class="comment">;</span></span><br><span class="line">                    sc.register(<span class="keyword">selector, </span><span class="keyword">SelectionKey.OP_READ);</span></span><br><span class="line"><span class="keyword"> </span>                   <span class="keyword">it.remove();</span></span><br><span class="line"><span class="keyword"> </span>               &#125; <span class="meta">else</span> <span class="meta">if</span> </span><br><span class="line">                ((key.readyOps() &amp; <span class="keyword">SelectionKey.OP_READ) </span>== <span class="keyword">SelectionKey.OP_READ) </span>&#123;</span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel()<span class="comment">;</span></span><br><span class="line">                    <span class="meta">while</span> (true) &#123;</span><br><span class="line">                        <span class="keyword">buffer.clear();</span></span><br><span class="line"><span class="keyword"> </span>                       int n = sc.read(<span class="keyword">buffer);//读取数据</span></span><br><span class="line"><span class="keyword"> </span>                       <span class="meta">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break;</span></span><br><span class="line"><span class="keyword"> </span>                       &#125;</span><br><span class="line">                        <span class="keyword">buffer.flip();</span></span><br><span class="line"><span class="keyword"> </span>                   &#125;</span><br><span class="line">                    <span class="keyword">it.remove();</span></span><br><span class="line"><span class="keyword"> </span>               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 Selector 的静态工厂创建一个选择器，创建一个服务端的 Channel 绑定到一个 Socket 对象，并把这个通信信道注册到选择器上，把这个通信信道设置为非阻塞模式。然后就可以调用 Selector 的 selectedKeys 方法来检查已经注册在这个选择器上的所有通信信道是否有需要的事件发生，如果有某个事件发生时，将会返回所有的 SelectionKey，通过这个对象 Channel 方法就可以取得这个通信信道对象从而可以读取通信的数据，而这里读取的数据是 Buffer，这个 Buffer 是我们可以控制的缓冲器。</p><p>在上面的这段程序中，是将 Server 端的监听连接请求的事件和处理请求的事件放在一个线程中，但是在实际应用中，我们通常会把它们放在两个线程中，一个线程专门负责监听客户端的连接请求，而且是阻塞方式执行的；另外一个线程专门来处理请求，这个专门处理请求的线程才会真正采用 NIO 的方式，像 Web 服务器 Tomcat 和 Jetty 都是这个处理方式，关于 Tomcat 和 Jetty 的 NIO 处理方式可以参考文章《 Jetty 的工作原理和与 Tomcat 的比较》。</p><p>下图是描述了基于 NIO 工作方式的 Socket 请求的处理过程：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image021.jpg"><br>上图中的 Selector 可以同时监听一组通信信道（Channel）上的 I/O 状态，前提是这个 Selector 要已经注册到这些通信信道中。选择器 Selector 可以调用 select() 方法检查已经注册的通信信道上的是否有 I/O 已经准备好，如果没有至少一个信道 I/O 状态有变化，那么 select 方法会阻塞等待或在超时时间后会返回 0。上图中如果有多个信道有数据，那么将会将这些数据分配到对应的数据 Buffer 中。所以关键的地方是有一个线程来处理所有连接的数据交互，每个连接的数据交互都不是阻塞方式，所以可以同时处理大量的连接请求。</p><h2 id="Buffer-的工作方式"><a href="#Buffer-的工作方式" class="headerlink" title="Buffer 的工作方式"></a>Buffer 的工作方式</h2><p>上面介绍了 Selector 将检测到有通信信道 I/O 有数据传输时，通过 select() 取得 SocketChannel，将数据读取或写入 Buffer 缓冲区。下面讨论一下 Buffer 如何接受和写出数据？</p><p>Buffer 可以简单的理解为一组基本数据类型的元素列表，它通过几个变量来保存这个数据的当前位置状态，也就是有四个索引。如下表所示：</p><p>Buffer 中的参数项<br><img src="https://image.xiaomo.info/blog/buffer.png"></p><p>在实际操作数据时它们有如下关系图：</p><p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image023.jpg"></p><p>我们通过 ByteBuffer.allocate(11) 方法创建一个 11 个 byte 的数组缓冲区，初始状态如上图所示，position 的位置为 0，capacity 和 limit 默认都是数组长度。当我们写入 5 个字节时位置变化如下图所示：</p><p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image025.jpg"></p><p> 这时我们需要将缓冲区的 5 个字节数据写入 Channel 通信信道，所以我们需要调用 byteBuffer.flip() 方法，数组的状态又发生如下变化：<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/image027.jpg"> </p><p>这时底层操作系统就可以从缓冲区中正确读取这 5 个字节数据发送出去了。在下一次写数据之前我们在调一下 clear() 方法。缓冲区的索引状态又回到初始位置。</p><p>这里还要说明一下 mark，当我们调用 mark() 时，它将记录当前 position 的前一个位置，当我们调用 reset 时，position 将恢复 mark 记录下来的值。</p><p>还有一点需要说明，通过 Channel 获取的 I/O 数据首先要经过操作系统的 Socket 缓冲区再将数据复制到 Buffer 中，这个的操作系统缓冲区就是底层的 TCP 协议关联的 RecvQ 或者 SendQ 队列，从操作系统缓冲区到用户缓冲区复制数据比较耗性能，Buffer 提供了另外一种直接操作操作系统缓冲区的的方式即 ByteBuffer.allocateDirector(size)，这个方法返回的 byteBuffer 就是与底层存储空间关联的缓冲区，它的操作方式与 linux2.4 内核的 sendfile 操作方式类似。</p><h1 id="I-O-调优"><a href="#I-O-调优" class="headerlink" title="I/O 调优"></a>I/O 调优</h1><p>下面就磁盘 I/O 和网络 I/O 的一些常用的优化技巧进行总结如下：</p><h2 id="磁盘-I-O-优化"><a href="#磁盘-I-O-优化" class="headerlink" title="磁盘 I/O 优化"></a>磁盘 I/O 优化</h2><p>性能检测</p><p>我们的应用程序通常都需要访问磁盘读取数据，而磁盘 I/O 通常都很耗时，我们要判断 I/O 是否是一个瓶颈，我们有一些参数指标可以参考：</p><p>如我们可以压力测试应用程序看系统的 I/O wait 指标是否正常，例如测试机器有 4 个 CPU，那么理想的 I/O wait 参数不应该超过 25%，如果超过 25% 的话，I/O 很可能成为应用程序的性能瓶颈。Linux 操作系统下可以通过 iostat 命令查看。</p><p>通常我们在判断 I/O 性能时还会看另外一个参数就是 IOPS，我们应用程序需要最低的 IOPS 是多少，而我们的磁盘的 IOPS 能不能达到我们的要求。每个磁盘的 IOPS 通常是在一个范围内，这和存储在磁盘的数据块的大小和访问方式也有关。但是主要是由磁盘的转速决定的，磁盘的转速越高磁盘的 IOPS 也越高。</p><p>现在为了提高磁盘 I/O 的性能，通常采用一种叫 RAID 的技术，就是将不同的磁盘组合起来来提高 I/O 性能，目前有多种 RAID 技术，每种 RAID 技术对 I/O 性能提升会有不同，可以用一个 RAID 因子来代表，磁盘的读写吞吐量可以通过 iostat 命令来获取，于是我们可以计算出一个理论的 IOPS 值，计算公式如下所以：</p><p>( 磁盘数 * 每块磁盘的 IOPS)/( 磁盘读的吞吐量 +RAID 因子 * 磁盘写的吞吐量 )=IOPS</p><p>RAID 策略<br><a href="https://image.xiaomo.info/blog/raid.png" target="_blank" rel="noopener"></a></p><h2 id="网络-I-O-优化"><a href="#网络-I-O-优化" class="headerlink" title="网络 I/O 优化"></a>网络 I/O 优化</h2><p>网络 I/O 优化通常有一些基本处理原则：</p><ol><li>一个是减少网络交互的次数：要减少网络交互的次数通常我们在需要网络交互的两端会设置缓存，比如 Oracle 的 JDBC 驱动程序，就提供了对查询的 SQL 结果的缓存，在客户端和数据库端都有，可以有效的减少对数据库的访问。关于 Oracle JDBC 的内存管理可以参考《 Oracle JDBC 内存管理》。除了设置缓存还有一个办法是，合并访问请求：如在查询数据库时，我们要查 10 个 id，我可以每次查一个 id，也可以一次查 10 个 id。再比如在访问一个页面时通过会有多个 js 或 css 的文件，我们可以将多个 js 文件合并在一个 HTTP 链接中，每个文件用逗号隔开，然后发送到后端 Web 服务器根据这个 URL 链接，再拆分出各个文件，然后打包再一并发回给前端浏览器。这些都是常用的减少网络 I/O 的办法。</li><li>减少网络传输数据量的大小：减少网络数据量的办法通常是将数据压缩后再传输，如 HTTP 请求中，通常 Web 服务器将请求的 Web 页面 gzip 压缩后在传输给浏览器。还有就是通过设计简单的协议，尽量通过读取协议头来获取有用的价值信息。比如在代理程序设计时，有 4 层代理和 7 层代理都是来尽量避免要读取整个通信数据来取得需要的信息。</li><li>尽量减少编码：通常在网络 I/O 中数据传输都是以字节形式的，也就是通常要序列化。但是我们发送要传输的数据都是字符形式的，从字符到字节必须编码。但是这个编码过程是比较耗时的，所以在要经过网络 I/O 传输时，尽量直接以字节形式发送。也就是尽量提前将字符转化为字节，或者减少字符到字节的转化过程。</li><li>根据应用场景设计合适的交互方式：所谓的交互场景主要包括同步与异步阻塞与非阻塞方式，下面将详细介绍。</li></ol><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>所谓同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。而异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。我们可以用打电话和发短信来很好的比喻同步与异步操作。</p><p>在设计到 IO 处理时通常都会遇到一个是同步还是异步的处理方式的选择问题。因为同步与异步的 I/O 处理方式对调用者的影响很大，在数据库产品中都会遇到这个问题。因为 I/O 操作通常是一个非常耗时的操作，在一个任务序列中 I/O 通常都是性能瓶颈。但是同步与异步的处理方式对程序的可靠性影响非常大，同步能够保证程序的可靠性，而异步可以提升程序的性能，必须在可靠性和性能之间做个平衡，没有完美的解决办法。</p><h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>阻塞与非阻塞主要是从 CPU 的消耗上来说的，阻塞就是 CPU 停下来等待一个慢的操作完成 CPU 才接着完成其它的事。非阻塞就是在这个慢的操作在执行时 CPU 去干其它别的事，等这个慢的操作完成时，CPU 再接着完成后续的操作。虽然表面上看非阻塞的方式可以明显的提高 CPU 的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的 CPU 使用时间能不能补偿系统的切换成本需要好好评估。</p><h2 id="两种的方式的组合"><a href="#两种的方式的组合" class="headerlink" title="两种的方式的组合"></a>两种的方式的组合</h2><p>组合的方式可以由四种，分别是：同步阻塞、同步非阻塞、异步阻塞、异步非阻塞，这四种方式都对 I/O 性能有影响。下面给出分析，并有一些常用的设计用例参考。</p><p> 四种组合方式<br> <a href="https://image.xiaomo.info/blog/combineMethod.png" target="_blank" rel="noopener"></a><br> 虽然异步和非阻塞能够提升 I/O 的性能，但是也会带来一些额外的性能成本，例如会增加线程数量从而增加 CPU 的消耗，同时也会导致程序设计的复杂度上升。如果设计的不合理的话反而会导致性能下降。在实际设计时要根据应用场景综合评估一下。</p><p> 下面举一些异步和阻塞的操作实例：</p><p> 在 Cassandra 中要查询数据通常会往多个数据节点发送查询命令，但是要检查每个节点返回数据的完整性，所以需要一个异步查询同步结果的应用场景，部分代码如下：</p><p> 异步查询同步结果<br> <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AsyncResult</span> <span class="title">implements</span> <span class="title">IAsyncResult</span>&#123; </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] result_; </span><br><span class="line">   <span class="keyword">private</span> AtomicBoolean done_ = <span class="keyword">new</span> AtomicBoolean(<span class="literal">false</span>); </span><br><span class="line">   <span class="keyword">private</span> Lock lock_ = <span class="keyword">new</span> ReentrantLock(); </span><br><span class="line">   <span class="keyword">private</span> Condition condition_; </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> startTime_; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AsyncResult</span>(<span class="params"></span>)</span>&#123;        </span><br><span class="line">       condition_ = lock_.newCondition();<span class="comment">// 创建一个锁</span></span><br><span class="line">       startTime_ = System.currentTimeMillis(); </span><br><span class="line">   &#125;    </span><br><span class="line"><span class="comment">/*** 检查需要的数据是否已经返回，如果没有返回阻塞 */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">get</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">       lock_.<span class="keyword">lock</span>(); </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           <span class="keyword">if</span> (!done_.<span class="keyword">get</span>())&#123;condition_.<span class="keyword">await</span>();&#125; </span><br><span class="line">       &#125;<span class="keyword">catch</span> (InterruptedException ex)&#123; </span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(ex); </span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;lock_.unlock();&#125; </span><br><span class="line">       <span class="keyword">return</span> result_; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*** 检查需要的数据是否已经返回 */</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> boolean <span class="title">isDone</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> done_.<span class="keyword">get</span>();&#125; </span><br><span class="line"><span class="comment">/*** 检查在指定的时间内需要的数据是否已经返回，如果没有返回抛出超时异常 */</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">get</span>(<span class="params"><span class="keyword">long</span> timeout, TimeUnit tu</span>) throws TimeoutException</span>&#123; </span><br><span class="line">       lock_.<span class="keyword">lock</span>(); </span><br><span class="line">       <span class="keyword">try</span>&#123;            boolean bVal = <span class="literal">true</span>; </span><br><span class="line">           <span class="keyword">try</span>&#123; </span><br><span class="line">               <span class="keyword">if</span> ( !done_.<span class="keyword">get</span>() )&#123; </span><br><span class="line">          <span class="keyword">long</span> overall_timeout = timeout - (System.currentTimeMillis() - startTime_); </span><br><span class="line">                   <span class="keyword">if</span>(overall_timeout &gt; <span class="number">0</span>)<span class="comment">// 设置等待超时的时间</span></span><br><span class="line">                       bVal = condition_.<span class="keyword">await</span>(overall_timeout, TimeUnit.MILLISECONDS); </span><br><span class="line">                   <span class="keyword">else</span> bVal = <span class="literal">false</span>; </span><br><span class="line">               &#125; </span><br><span class="line">           &#125;<span class="keyword">catch</span> (InterruptedException ex)&#123; </span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(ex); </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">if</span> ( !bVal &amp;&amp; !done_.<span class="keyword">get</span>() )&#123;<span class="comment">// 抛出超时异常</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"Operation timed out."</span>); </span><br><span class="line">           &#125; </span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;lock_.unlock();      &#125; </span><br><span class="line">       <span class="keyword">return</span> result_; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*** 该函数拱另外一个线程设置要返回的数据，并唤醒在阻塞的线程 */</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">result</span>(<span class="params">Message response</span>)</span>&#123;        </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           lock_.<span class="keyword">lock</span>(); </span><br><span class="line">           <span class="keyword">if</span> ( !done_.<span class="keyword">get</span>() )&#123;                </span><br><span class="line">               result_ = response.getMessageBody();<span class="comment">// 设置返回的数据</span></span><br><span class="line">               done_.<span class="keyword">set</span>(<span class="literal">true</span>); </span><br><span class="line">               condition_.signal();<span class="comment">// 唤醒阻塞的线程</span></span><br><span class="line">           &#125; </span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;lock_.unlock();&#125;        </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文阐述的内容较多，从 Java 基本 I/O 类库结构开始说起，主要介绍了磁盘 I/O 和网络 I/O 的基本工作方式，最后介绍了关于 I/O 调优的一些方法。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-Object</title>
      <link href="2018/jdkSourceCodeReadObject/"/>
      <url>2018/jdkSourceCodeReadObject/</url>
      
        <content type="html"><![CDATA[<p>Object类是类层次结构的根，是每一个类的父类。所有的对象（包括数组）都是实现了object类的方法。</p><a id="more"></a><p>Object结构<br><img src="https://image.xiaomo.info/blog/ObjectStructure.png"></p><p>这里有7个native方法：</p><ul><li>registerNatives()</li><li>getClass()</li><li>hashCode()</li><li>clone()</li><li>notify()</li><li>notifyAll()</li><li>wait(long)</li></ul><p>什么是native方法？简单的说，native表示该方法的实现java本身并没有完成，而是有c/c++来完成，放在.dll动态库文件中。这里我们不关注本地方法的具体，我们可以看看其注释和声明，知道这些方法是干什么的。</p><h3 id="1）registerNatives"><a href="#1）registerNatives" class="headerlink" title="1）registerNatives()"></a>1）<code>registerNatives()</code></h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法源码中并没有任何注释说明，而且在静态块中调用了方法。首先明确在类初始化的时候，这个方法被调用执行了。<br>至于该方法的做用，请看native方法的c代码实现：这里是相关的C代码（来自OpenJDK6）：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> JNINativeMethod methods[] = &#123;</span><br><span class="line"></span><br><span class="line">　　&#123;“hashCode”, “()I”, (<span class="keyword">void</span> *)&amp;JVM_IHashCode&#125;,</span><br><span class="line"></span><br><span class="line">　　&#123;“wait”, “(J)V”, (<span class="keyword">void</span> *)&amp;JVM_MonitorWait&#125;,</span><br><span class="line"></span><br><span class="line">　　&#123;“notify”, “()V”, (<span class="keyword">void</span> *)&amp;JVM_MonitorNotify&#125;,</span><br><span class="line"></span><br><span class="line">　　&#123;“notifyAll”, “()V”, (<span class="keyword">void</span> *)&amp;JVM_MonitorNotifyAll&#125;,</span><br><span class="line"></span><br><span class="line">　　&#123;“clone”, “()Ljava/lang/Object;”, (<span class="keyword">void</span> *)&amp;JVM_Clone&#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"></span><br><span class="line">Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)</span><br><span class="line">&#123;</span><br><span class="line">　　(*env)-&gt;RegisterNatives(env, cls,methods, <span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的说：通常情况下，为了使JVM发现您的本机功能，他们被一定的方式命名。例如，对于java.lang.Object.registerNatives，对应的C函数命名为Java_java_lang_Object_registerNatives。通过使用registerNatives（或者更确切地说，JNI函数RegisterNatives），您可以命名任何你想要你的C函数。(来自：<a href="https://www.linuxidc.com/Linux/2015-06/118676.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2015-06/118676.htm</a>)<br>简单的说：就是对几个本地方法进行注册(也就是初始化java方法映射到C的方法)。<br>细心的读者可能发现这里为什么没有getClass()方法的注册？因为它不需要被注册，它有一个Java_java_lang_Object_getClass的“标准”名称。</p><h3 id="（2）getClass"><a href="#（2）getClass" class="headerlink" title="（2）getClass()"></a>（2）getClass()</h3><p><code> public final native Class&lt;?&gt; getClass();</code></p><p>返回Object的运行时class对象，返回的对象是被静态同步方法锁定的对象（这意味着，该类的所有对象中，同时只有一个对象可以获得锁）。而且实际上返回的class对象是多态的，可以是调用者的子类（注释中Number的例子解释了这一内容）。</p><h3 id="（3）hashCode"><a href="#（3）hashCode" class="headerlink" title="（3）hashCode()"></a>（3）hashCode()</h3><p><code>public native int hashCode();</code></p><p>hashCode()也是一个native方法，该方法返回调用对象的hash码。hashCode必须满足以下协议：</p><ul><li>在一个Java应用中，对同一个对象多次调用hashCode()方法，必须返回相同的值。在对象被修改时，不提供equals方法的比较信息。（我的理解：不可以将hashCode值作为equals方法相等的充要条件，同一对象hashCode值肯定相等，不同对象hashCode值不一定不相等）</li><li>如果两个对象通过equals方法相等，那么两个对象的hashCode返回值必须要相等。</li><li>如果两个对象通过equals方法不相等，两个对象的hashCode返回值不一定不相等。但是程序员应该知道，不相等的对象若返回不想等的hash值，有助于提高hash表的性能。</li></ul><h3 id="（4）equals-Object-obj"><a href="#（4）equals-Object-obj" class="headerlink" title="（4）equals(Object obj)"></a>（4）equals(Object obj)</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断两个对象是不是相等。该方法遵循如下性质：</p><ul><li>自反性：对于任意非空引用x，则x.equals(x)返回true。</li><li>对称性：对于任意非空引用x、y，若x.equals(y)返回true，则y.equals(x)返回true。</li><li>传递性：对于任意非空引用x、y、z，若x.equals(y)返回true且y.equals(z)返回true，则x.equals(z)返回true。</li><li>对于任何非空引用值x和y，多次调用x.equals（y）始终返回true或者始终返回false，没有提供任何信息进行相等比较的对象被修改。</li><li>对于任意非空引用x，则x.equals(null)返回false。</li><li>重写equals方法必须重写hashCode方法来保证对任意两个对象equals返回值true时，他们的hashCode返回值必须相等。</li></ul><p>请注意源码中的实现是“==”号，必要时请重写该方法！</p><h3 id="（5）clone"><a href="#（5）clone" class="headerlink" title="（5）clone()"></a>（5）clone()</h3><p><code>protected native Object clone() throws CloneNotSupportedException;</code></p><p>创建和返回一个对象的复制。注意以下几点：</p><p>x.clone() != x  是true</p><p>一个对象可以被克隆的前提是该对象代表的类实现了Cloneable接口，否者会抛出一个CloneNotSupportedException异常。</p><p>调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。<br>克隆是浅复制。（详情：<a href="http://www.importnew.com/22035.html" target="_blank" rel="noopener">http://www.importnew.com/22035.html</a>）</p><h3 id="（6）toString"><a href="#（6）toString" class="headerlink" title="（6）toString()"></a>（6）toString()</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回一个表示该对象的字符串，默认实现是：类名@Integer.toHexString(hashCode())</p><p>建议子类重写该方法。</p><h3 id="（6）notify-、notifyAll-、wait-、wait-long-、wait-long-int"><a href="#（6）notify-、notifyAll-、wait-、wait-long-、wait-long-int" class="headerlink" title="（6）notify()、notifyAll()、wait()、wait(long)、wait(long,int)"></a>（6）notify()、notifyAll()、wait()、wait(long)、wait(long,int)</h3><p>这几个方法是多线程编程里面常用的方法，这里不多解释。</p><h3 id="（7）finalize"><a href="#（7）finalize" class="headerlink" title="（7）finalize()"></a>（7）finalize()</h3><p><code>protected void finalize() throws Throwable { }</code></p><p>这是一个被垃圾收集器调用的方法，当一个对象没有被其他引用指向时，垃圾回收器会清理该对象，在回收该对象之前会调用finalize方法。子类一般会重写该方法做一些系统资源清理工作。一个对象只会被调用一次finalize方法。如果finalize方法抛出异常，这个对象的终结将会停止。</p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://blog.csdn.net/wenniuwuren" target="_blank" rel="noopener">wenniuwuren</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-NIO</title>
      <link href="2018/jdkSourceCodeReadNIO/"/>
      <url>2018/jdkSourceCodeReadNIO/</url>
      
        <content type="html"><![CDATA[<p>Java NIO和IO之间第一个区别是， IO是面向流的， NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节， 直至读取所有字节， 它们没有被缓存在任何地方。 JavaNIO的缓冲导向方法略有不同。 数据读取到一个它稍后处理的缓冲区， 需要时可在缓冲区中前后移动。 还需要检查是否该缓冲区中包含所有您需要处理的数据。 而且， 需确保当更多的数据读入缓冲区时， 不要覆盖缓冲区里尚未处理的数据。</p><a id="more"></a><p>另外， Java IO的各种流是阻塞的， 而Java NIO是非阻塞的。 IO是当一个线程调用read() 或write()时， 该线程被阻塞， 直到有一些数据被读取， 或数据完全写入。 该线程在此期间不能再干任何事情了。 而Java NIO的非阻塞模式， 使一个线程从某通道发送请求读取数据， 但是它仅能得到目前可用的数据， 如果目前没有数据可用时， 就什么都不会获取。 而不是保持线程阻塞， 所以直至数据变的可以读取之前， 该线程可以继续做其他的事情。 非阻塞写也是如此。 一个线程请求写入一些数据到某通道， 但不需要等待它完全写入， 这个线程同时可以去做别的事情。 而且， Java IO: 一个典型的IO服务器设计- 一个连接通过一个线程处理， 而NIO可让您只使用一个单线程管理多个通道（ 网络连接或文件） ， 但付出的代价是解析数据可能会比从一个阻塞流中读取数据更复杂。</p><h1 id="java-NIO主要组成部分"><a href="#java-NIO主要组成部分" class="headerlink" title="java NIO主要组成部分"></a>java NIO主要组成部分</h1><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>虽然Java NIO 中除此之外还有很多类和组件， 但在我看来， Channel， Buffer 和 Selector 构成了核心的API。 其它组件， 如Pipe和FileLock， 只不过是与三个核心组件共同使用的工具类。</p><p>Java NIO的通道类似流， 但又有些不同：</p><ul><li>既可以从通道中读取数据， 又可以写数据到通道。 但流的读写通常是单向的。</li><li>通道可以异步地读写。</li><li>通道中的数据总是要先读到一个Buffer， 或者总是要从一个Buffer中写入。</li></ul><h1 id="Channel-和-Buffer"><a href="#Channel-和-Buffer" class="headerlink" title="Channel 和 Buffer"></a>Channel 和 Buffer</h1><p>基本上， 所有的 IO 在NIO 中都从一个Channel 开始。 Channel 有点象流。 数据可以从Channel读到Buffer中， 也可以从Buffer 写到Channel中。</p><p>Channel和Buffer有好几种类型。 下面是JAVA NIO中的一些主要Channel的实现：</p><ul><li>FileChannel,从文件中读写数据。</li><li>DatagramChannel，能通过UDP读写网络中的数据</li><li>SocketChannel,能通过TCP读写网络中的数据</li><li>ServerSocketChannel,以监听新进来的TCP连接， 像Web服务器那样。 对每一个新进来的连接都会创建一个SocketChannel。<br>正如你所看到的， 这些通道涵盖了UDP 和 TCP 网络IO， 以及文件IO。</li></ul><p>基本的Channel示例</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">RandomAccessFile</span> aFile = new RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">FileChannel</span> inChannel = aFile.getChannel()<span class="comment">;</span></span><br><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">buf </span>= <span class="keyword">ByteBuffer.allocate(48);</span></span><br><span class="line"><span class="keyword">int </span><span class="keyword">bytesRead </span>= inChannel.read(<span class="keyword">buf);</span></span><br><span class="line"><span class="keyword">while </span>(<span class="keyword">bytesRead </span>!= -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Read "</span> + <span class="keyword">bytesRead);</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">buf.flip();</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">while</span> (<span class="keyword">buf.hasRemaining()) </span>&#123;</span><br><span class="line">        System.out.print((char) <span class="keyword">buf.get());</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">    <span class="keyword">buf.clear();</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">bytesRead </span>= inChannel.read(<span class="keyword">buf);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">aFile.close();</span></span><br></pre></td></tr></table></figure><p>注意 buf.flip() 的调用， 首先读取数据到Buffer， 然后反转Buffer,接着再从Buffer中读取数据。</p><p>Java NIO中的Buffer用于和NIO通道进行交互。 如你所知， 数据是从通道读入缓冲区， 从缓冲区写入到通道中的。缓冲区本质上是一块可以写入数据， 然后可以从中读取数据的内存。 这块内存被包装成NIOBuffer对象， 并提供了一组方法， 用来方便的访问该块内存。以下是Java NIO里关键的Buffer实现：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>这些Buffer覆盖了你能通过IO发送的基本数据类型： byte, short, int, long, float, double 和char。Java NIO 还有个 MappedByteBuffer， 用于表示内存映射文件。</p><p>当向buffer写入数据时， buffer会记录下写了多少数据。 一旦要读取数据， 需要通过flip()方法将Buffer从写模式切换到读模式。 在读模式下， 可以读取之前写入到buffer的所有数据。一旦读完了所有的数据， 就需要清空缓冲区， 让它可以再次被写入。 有两种方式能清空缓冲区： 调用clear()或compact()方法。 clear()方法会清空整个缓冲区。 compact()方法只会清除已经读过的数据。 任何未读的数据都被移到缓冲区的起始处， 新写入的数据将放到缓冲区未读数据的后面。</p><h1 id="Buffer的capacity-position和limit"><a href="#Buffer的capacity-position和limit" class="headerlink" title="Buffer的capacity,position和limit"></a>Buffer的capacity,position和limit</h1><ul><li>position<br>当你写数据到Buffer中时， position表示当前的位置。 初始的position值为0.当一个byte、 long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。 position最大可为capacity – 1.当读取数据时， 也是从某个特定位置读。 当将Buffer从写模式切换到读模式， position会被重置为0. 当从Buffer的position处读取数据时， position向前移动到下一个可读的位置。</li><li>limit<br>在写模式下， Buffer的limit表示你最多能往Buffer里写多少数据。 写模式下， limit等于Buffer的capacity。当切换Buffer到读模式时， limit表示你最多能读到多少数据。 因此， 当切换Buffer到读模式时， limit会被设置成写模式下的position值。 换句话说， 你能读到之前写入的所有数据（ limit被设置成已写数据的数量， 这个值在写模式下就是position）</li></ul><h3 id="向Buffer中写数据"><a href="#向Buffer中写数据" class="headerlink" title="向Buffer中写数据"></a>向Buffer中写数据</h3><p>写数据到Buffer有两种方式：<br>从Channel写到Buffer。<br>通过Buffer的put()方法写到Buffer里。</p><h3 id="从Buffer中读取数据"><a href="#从Buffer中读取数据" class="headerlink" title="从Buffer中读取数据"></a>从Buffer中读取数据</h3><p>从Buffer中读取数据有两种方式：<br>从Buffer读取数据到Channel。<br>使用get()方法从Buffer中读取数据。</p><h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p>Selector（ 选择器） 是Java NIO中能够检测一到多个NIO通道， 并能够知晓通道是否为诸如读写事件做好准备的组件。 这样， 一个单独的线程可以管理多个channel， 从而管理多个网络连接。Selector允许单线程处理多个 Channel。 如果你的应用打开了多个连接（ 通道） ， 但每个连接的流量都很低， 使用Selector就会很方便。 例如， 在一个聊天服务器中</p><h1 id="为什么使用Selector"><a href="#为什么使用Selector" class="headerlink" title="为什么使用Selector?"></a>为什么使用Selector?</h1><p>仅用单个线程来处理多个Channels的好处是， 只需要更少的线程来处理通道。 事实上， 可以只用一个线程处理所有的通道。 对于操作系统来说， 线程之间上下文切换的开销很大， 而且每个线程都要占用系统的一些资源（ 如内存） 。 因此， 使用的线程越少越好。</p><h3 id="Selector的创建"><a href="#Selector的创建" class="headerlink" title="Selector的创建"></a>Selector的创建</h3><p>通过调用Selector.open()方法创建一个Selector， 如下：<br><code>Selector selector = Selector.open();</code></p><p><img src="https://image.xiaomo.info/blog/selector.png"><br>要使用Selector， 得向Selector注册Channel， 然后调用它的select()方法。 这个方法会一直阻塞到某个注册的通道有事件就绪。 一旦这个方法返回， 线程就可以处理这些事件， 事件的例子有如新连接进来， 数据接收等。与Selector一起使用时， Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用， 因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">SelectionKey key = channel.<span class="keyword">register</span>(selector, Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure><p> 注意register()方法的第二个参数。 这是一个“interest集合”， 意思是在通过Selector监听Channel时对什么事件感兴趣。 可以监听四种不同类型的事件</p><ul><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li></ul><p>如果你对不止一种事件感兴趣， 那么可以用“位或”操作符将常量连接起来， 如下:<br><code>int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</code></p><h1 id="Scatter-Gather"><a href="#Scatter-Gather" class="headerlink" title="Scatter/Gather"></a>Scatter/Gather</h1><p>Java NIO开始支持scatter/gather， scatter/gather可以从Channel中读入和读取数据。分散（ scatter） 从Channel中读取是指在读操作时将读取的数据写入多个buffer中。 因此，Channel将从Channel中读取的数据“分散（ scatter） ”到多个Buffer中。聚集（ gather） 写入Channel是指在写操作时将多个buffer的数据写入同一个Channel， 因此，Channel 将多个Buffer中的数据“聚集（ gather） ”后发送到Channel。scatter / gather经常用于需要将传输的数据分开处理的场合， 例如传输一个由消息头和消息体组成的消息， 你可能会将消息体和消息头分散到不同的buffer中， 这样你可以方便的处理消息头和消息体</p><h1 id="Scattering-Reads"><a href="#Scattering-Reads" class="headerlink" title="Scattering Reads"></a>Scattering Reads</h1><p> Scattering Reads是指数据从一个channel读取到多个buffer中。</p> <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ByteBuffer </span>header = <span class="keyword">ByteBuffer.allocate(128);</span></span><br><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">body </span>= <span class="keyword">ByteBuffer.allocate(1024);</span></span><br><span class="line"><span class="keyword">ByteBuffer[] </span><span class="keyword">bufferArray </span>= &#123; header, <span class="keyword">body </span>&#125;<span class="comment">;</span></span><br><span class="line"><span class="symbol">channel.read</span>(<span class="keyword">bufferArray);</span></span><br></pre></td></tr></table></figure><p> read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer， 当一个buffer被写满后， channel紧接着向另一个buffer中写。Scattering Reads在移动下一个buffer前， 必须填满当前的buffer， 这也意味着它不适用于动态消息(译者注： 消息大小不固定)。 换句话说， 如果存在消息头和消息体， 消息头必须完成填充（ 例如 128byte） ， Scattering Reads才能正常工作</p><h1 id="Gathering-Writes"><a href="#Gathering-Writes" class="headerlink" title="Gathering Writes"></a>Gathering Writes</h1><p> Gathering Writes是指数据从多个buffer写入到同一个channel。</p> <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ByteBuffer </span>header = <span class="keyword">ByteBuffer.allocate(128);</span></span><br><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">body </span>= <span class="keyword">ByteBuffer.allocate(1024);</span></span><br><span class="line"><span class="keyword">//write </span><span class="meta">data</span> into <span class="keyword">buffers</span></span><br><span class="line"><span class="keyword">ByteBuffer[] </span><span class="keyword">bufferArray </span>= &#123; header, <span class="keyword">body </span>&#125;<span class="comment">;</span></span><br><span class="line"><span class="symbol">channel.write</span>(<span class="keyword">bufferArray);</span></span><br></pre></td></tr></table></figure><p> buffers数组是write()方法的入参， write()方法会按照buffer在数组中的顺序， 将数据写入到channel， 注意只有position和limit之间的数据才会被写入。 因此， 如果一个buffer的容量为128byte， 但是仅仅包含58byte的数据,那么这58byte的数据将被写入到channel中。 因此 Scattering Reads相反， Gathering Writes能较好的处理动态消息。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-throwable和Exception的区别</title>
      <link href="2018/throwableAndException/"/>
      <url>2018/throwableAndException/</url>
      
        <content type="html"><![CDATA[<p>在写代码的时候Exception随手就来，但是提到Throwable总觉得又熟悉又陌生。</p><a id="more"></a><p>先上图为敬<br><img src="https://image.xiaomo.info/blog/throwable.jpg"></p><p>从上图可以看出,throwable是Exception的父类，它包含了系统级的Error和程序级的Exception,所以接触的少倒也不足为奇。</p><h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>异常的英文单词是exception，字面翻译就是“意外、例外”的意思，也就是非正常情况。事实上，异常本质上是程序上的错误，包括程序逻辑错误和系统错误。比如使用空的引用、数组下标越界、内存溢出错误等，这些都是意外的情况，背离我们程序本身的意图。错误在我们编写程序的过程中会经常发生，包括编译期间和运行期间的错误，在编译期间出现的错误有编译器帮助我们一起修正，然而运行期间的错误便不是编译器力所能及了，并且运行期间的错误往往是难以预料的。假若程序在运行期间出现了错误，如果置之不理，程序便会终止或直接导致系统崩溃，显然这不是我们希望看到的结果。因此，如何对运行期间出现的错误进行处理和补救呢？Java提供了异常机制来进行处理，通过异常机制来处理程序运行期间出现的错误。通过异常机制，我们可以更好地提升程序的健壮性。</p><h1 id="什么是错误"><a href="#什么是错误" class="headerlink" title="什么是错误"></a>什么是错误</h1><p>是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。通常，Java的异常(包括Exception和Error)分为可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）。<br>可查异常（编译器要求必须处置的异常）：正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。<br>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。</p><h1 id="应该catch什么"><a href="#应该catch什么" class="headerlink" title="应该catch什么"></a>应该catch什么</h1><p>其实只要是Throwable和其子类都是可以throw和catch的，那么如果在需要统一处理异常的地方，我们应该catch (Throwable th) 还是 catch (Exception)呢？<br>这两种处理的区别在于，catch throwable会把Error和其他继承Throwable的类捕捉到。而catch Exception只会捕捉Exception极其子类，捕捉的范围更小。先不考虑有其他的类继承了Throwable的情况下，第一种catch相当于比第二种catch多捕捉了把Error和其子类。<br>那么究竟Error是否需要捕捉呢？JDK中Error类的的注释（如下）里提到过，Error是一种严重的问题，应用程序不应该捕捉它。 </p><h1 id="Error可以catch吗？-可以catch了后做些其他处理吗？"><a href="#Error可以catch吗？-可以catch了后做些其他处理吗？" class="headerlink" title="Error可以catch吗？ 可以catch了后做些其他处理吗？"></a>Error可以catch吗？ 可以catch了后做些其他处理吗？</h1><p>Error是可以catch的，而且也可以向常规Exception一样被处理，而且就算不捕捉的话也只是导致当前线程挂掉，其他线程还是可以正常运行，如果有需要的话捕捉Error之后也可以做些其他处理。但是Error是一种系统内部的错误，这种错误不像Exception一样是可能是程序和业务上的错误是可以恢复的。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk源码系列-顺序索引</title>
      <link href="2018/jdkSourceCodeRead/"/>
      <url>2018/jdkSourceCodeRead/</url>
      
        <content type="html"><![CDATA[<p>很多java开发的小伙伴都会阅读jdk源码，然而确不知道应该从哪读起。以下为通常所需阅读的源码范围。 标题为包名，后面序号为优先级1-4，优先级递减</p><a id="more"></a><h1 id="1、java-lang"><a href="#1、java-lang" class="headerlink" title="1、java.lang"></a>1、java.lang</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Object <span class="number">1</span></span><br><span class="line"><span class="number">2</span>) String <span class="number">1</span></span><br><span class="line"><span class="number">3</span>) AbstractStringBuilder <span class="number">1</span></span><br><span class="line"><span class="number">4</span>) StringBuffer <span class="number">1</span></span><br><span class="line"><span class="number">5</span>) StringBuilder <span class="number">1</span></span><br><span class="line"><span class="number">6</span>) Boolean <span class="number">2</span></span><br><span class="line"><span class="number">7</span>) Byte <span class="number">2</span></span><br><span class="line"><span class="number">8</span>) Double <span class="number">2</span></span><br><span class="line"><span class="number">9</span>) Float <span class="number">2</span></span><br><span class="line"><span class="number">10</span>) Integer <span class="number">2</span></span><br><span class="line"><span class="number">11</span>) Long <span class="number">2</span></span><br><span class="line"><span class="number">12</span>) Short <span class="number">2</span></span><br><span class="line"><span class="number">13</span>) Thread <span class="number">2</span></span><br><span class="line"><span class="number">14</span>) ThreadLocal <span class="number">2</span></span><br><span class="line"><span class="number">15</span>) Enum <span class="number">3</span></span><br><span class="line"><span class="number">16</span>) Throwable <span class="number">3</span></span><br><span class="line"><span class="number">17</span>) Error <span class="number">3</span></span><br><span class="line"><span class="number">18</span>) Exception <span class="number">3</span></span><br><span class="line"><span class="number">19</span>) Class <span class="number">4</span></span><br><span class="line"><span class="number">20</span>) ClassLoader <span class="number">4</span></span><br><span class="line"><span class="number">21</span>) Compiler <span class="number">4</span></span><br><span class="line"><span class="number">22</span>) System <span class="number">4</span></span><br><span class="line"><span class="number">23</span>) Package <span class="number">4</span></span><br><span class="line"><span class="number">24</span>) Void <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-util"><a href="#java-util" class="headerlink" title="java.util"></a>java.util</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) AbstractList <span class="number">1</span></span><br><span class="line"><span class="number">2</span>) AbstractMap <span class="number">1</span></span><br><span class="line"><span class="number">3</span>) AbstractSet <span class="number">1</span></span><br><span class="line"><span class="number">4</span>) ArrayList <span class="number">1</span></span><br><span class="line"><span class="number">5</span>) LinkedList <span class="number">1</span></span><br><span class="line"><span class="number">6</span>) HashMap <span class="number">1</span></span><br><span class="line"><span class="number">7</span>) Hashtable <span class="number">1</span></span><br><span class="line"><span class="number">8</span>) HashSet <span class="number">1</span></span><br><span class="line"><span class="number">9</span>) LinkedHashMap <span class="number">1</span></span><br><span class="line"><span class="number">10</span>) LinkedHashSet <span class="number">1</span></span><br><span class="line"><span class="number">11</span>) TreeMap <span class="number">1</span></span><br><span class="line"><span class="number">12</span>) TreeSet <span class="number">1</span></span><br><span class="line"><span class="number">13</span>) Vector <span class="number">2</span></span><br><span class="line"><span class="number">14</span>) Queue <span class="number">2</span></span><br><span class="line"><span class="number">15</span>) Stack <span class="number">2</span></span><br><span class="line"><span class="number">16</span>) SortedMap <span class="number">2</span></span><br><span class="line"><span class="number">17</span>) SortedSet <span class="number">2</span></span><br><span class="line"><span class="number">18</span>) Collections <span class="number">3</span></span><br><span class="line"><span class="number">19</span>) Arrays <span class="number">3</span></span><br><span class="line"><span class="number">20</span>) Comparator <span class="number">3</span></span><br><span class="line"><span class="number">21</span>) Iterator <span class="number">3</span></span><br><span class="line"><span class="number">22</span>) Base64 <span class="number">4</span></span><br><span class="line"><span class="number">23</span>) Date <span class="number">4</span></span><br><span class="line"><span class="number">24</span>) EventListener <span class="number">4</span></span><br><span class="line"><span class="number">25</span>) Random <span class="number">4</span></span><br><span class="line"><span class="number">26</span>) SubList <span class="number">4</span></span><br><span class="line"><span class="number">27</span>) Timer <span class="number">4</span></span><br><span class="line"><span class="number">28</span>) UUID <span class="number">4</span></span><br><span class="line"><span class="number">29</span>) WeakHashMap <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-util-concurrent"><a href="#java-util-concurrent" class="headerlink" title="java.util.concurrent"></a>java.util.concurrent</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) ConcurrentHashMap <span class="number">1</span></span><br><span class="line"><span class="number">2</span>) Executor <span class="number">2</span></span><br><span class="line"><span class="number">3</span>) AbstractExecutorService <span class="number">2</span></span><br><span class="line"><span class="number">4</span>) ExecutorService <span class="number">2</span></span><br><span class="line"><span class="number">5</span>) ThreadPoolExecutor <span class="number">2</span></span><br><span class="line"><span class="number">6</span>) BlockingQueue <span class="number">2</span></span><br><span class="line"><span class="number">7</span>）AbstractQueuedSynchronizer <span class="number">2</span></span><br><span class="line"><span class="number">8</span>）CountDownLatch <span class="number">2</span></span><br><span class="line"><span class="number">9</span>) FutureTask <span class="number">2</span></span><br><span class="line"><span class="number">10</span>）Semaphore <span class="number">2</span></span><br><span class="line"><span class="number">11</span>）CyclicBarrier <span class="number">2</span></span><br><span class="line"><span class="number">13</span>）CopyOnWriteArrayList <span class="number">3</span></span><br><span class="line"><span class="number">14</span>）SynchronousQueue <span class="number">3</span></span><br><span class="line"><span class="number">15</span>）BlockingDeque <span class="number">3</span></span><br><span class="line"><span class="number">16</span>) Callable <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-util-concurrent-atomic"><a href="#java-util-concurrent-atomic" class="headerlink" title="java.util.concurrent.atomic"></a>java.util.concurrent.atomic</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) AtomicBoolean <span class="number">2</span></span><br><span class="line"><span class="number">2</span>) AtomicInteger <span class="number">2</span></span><br><span class="line"><span class="number">3</span>) AtomicLong <span class="number">2</span></span><br><span class="line"><span class="number">4</span>) AtomicReference <span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="java-lang-reflect"><a href="#java-lang-reflect" class="headerlink" title="java.lang.reflect"></a>java.lang.reflect</h1><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Field <span class="number">2</span></span><br><span class="line"><span class="number">2</span>) <span class="function"><span class="keyword">Method</span> 2</span></span><br></pre></td></tr></table></figure><h1 id="java-lang-annotation"><a href="#java-lang-annotation" class="headerlink" title="java.lang.annotation"></a>java.lang.annotation</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Annotation <span class="number">3</span></span><br><span class="line"><span class="number">2</span>) Target <span class="number">3</span></span><br><span class="line"><span class="number">3</span>) Inherited <span class="number">3</span></span><br><span class="line"><span class="number">4</span>) Retention <span class="number">3</span></span><br><span class="line"><span class="number">5</span>) Documented <span class="number">4</span></span><br><span class="line"><span class="number">6</span>) ElementType <span class="number">4</span></span><br><span class="line"><span class="number">7</span>) Native <span class="number">4</span></span><br><span class="line"><span class="number">8</span>) Repeatable <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-util-concurrent-locks"><a href="#java-util-concurrent-locks" class="headerlink" title="java.util.concurrent.locks"></a>java.util.concurrent.locks</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Lock <span class="number">2</span></span><br><span class="line"><span class="number">2</span>) Condition <span class="number">2</span></span><br><span class="line"><span class="number">3</span>) ReentrantLock <span class="number">2</span></span><br><span class="line"><span class="number">4</span>) ReentrantReadWriteLock <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="java-nio"><a href="#java-nio" class="headerlink" title="java.nio"></a>java.nio</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Buffer <span class="number">3</span></span><br><span class="line"><span class="number">2</span>) ByteBuffer <span class="number">4</span></span><br><span class="line"><span class="number">3</span>) CharBuffer <span class="number">4</span></span><br><span class="line"><span class="number">4</span>) DoubleBuffer <span class="number">4</span></span><br><span class="line"><span class="number">5</span>) FloatBuffer <span class="number">4</span></span><br><span class="line"><span class="number">6</span>) IntBuffer <span class="number">4</span></span><br><span class="line"><span class="number">7</span>) LongBuffer <span class="number">4</span></span><br><span class="line"><span class="number">8</span>) ShortBuffer <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-sql"><a href="#java-sql" class="headerlink" title="java.sql"></a>java.sql</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Connection <span class="number">3</span></span><br><span class="line"><span class="number">2</span>) Driver <span class="number">3</span></span><br><span class="line"><span class="number">3</span>) DriverManager <span class="number">3</span></span><br><span class="line"><span class="number">4</span>) JDBCType <span class="number">3</span></span><br><span class="line"><span class="number">5</span>) ResultSet <span class="number">4</span></span><br><span class="line"><span class="number">6</span>) Statement <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="java-net"><a href="#java-net" class="headerlink" title="java.net"></a>java.net</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Socket <span class="number">3</span></span><br><span class="line"><span class="number">2</span>) ServerSocket <span class="number">3</span></span><br><span class="line"><span class="number">3</span>) URI <span class="number">4</span></span><br><span class="line"><span class="number">4</span>) URL <span class="number">4</span></span><br><span class="line"><span class="number">5</span>) URLEncoder <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><p>阅读笔记简版</p><h1 id="1、Object"><a href="#1、Object" class="headerlink" title="1、Object"></a>1、Object</h1> <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">1</span>) <span class="selector-tag">wait</span>(), <span class="selector-tag">notify</span>(), <span class="selector-tag">notifyAll</span>(), <span class="selector-tag">wait</span>(timeout) </span><br><span class="line"><span class="selector-tag">2</span>) <span class="selector-tag">hashCode</span>(), <span class="selector-tag">equals</span>() </span><br><span class="line"><span class="selector-tag">3</span>) <span class="selector-tag">clone</span>()</span><br></pre></td></tr></table></figure><h1 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h1><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">char</span>[] <span class="keyword">value</span> </span><br><span class="line"><span class="number">2</span>) <span class="keyword">int</span> hash </span><br><span class="line"><span class="number">3</span>) <span class="keyword">equals</span>(), startWith(), endWith(), replace</span><br></pre></td></tr></table></figure><h1 id="3、AbstractStringBuilder"><a href="#3、AbstractStringBuilder" class="headerlink" title="3、AbstractStringBuilder"></a>3、AbstractStringBuilder</h1><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="built_in">char</span>[] <span class="built_in">value</span> </span><br><span class="line"><span class="number">2</span>) <span class="built_in">int</span> <span class="built_in">count</span> </span><br><span class="line"><span class="number">3</span>) 扩容：翻倍，不够取所需最小</span><br></pre></td></tr></table></figure><h1 id="4、StringBuffer"><a href="#4、StringBuffer" class="headerlink" title="4、StringBuffer"></a>4、StringBuffer</h1>  <figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 继承AbstractStringBuilder </span><br><span class="line"><span class="number">2</span>) synchronized方法保证线程安全 </span><br><span class="line"><span class="number">3</span>) char[] toStringCache</span><br></pre></td></tr></table></figure><h1 id="5、StringBuilder-继承AbstractStringBuilder"><a href="#5、StringBuilder-继承AbstractStringBuilder" class="headerlink" title="5、StringBuilder 继承AbstractStringBuilder"></a>5、StringBuilder 继承AbstractStringBuilder</h1><h1 id="6、ArrayList"><a href="#6、ArrayList" class="headerlink" title="6、ArrayList"></a>6、ArrayList</h1> <figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Object[] elementData </span><br><span class="line"><span class="number">2</span>) int size </span><br><span class="line"><span class="number">3</span>) 默认大小<span class="number">10</span> </span><br><span class="line"><span class="number">4</span>) 扩容：翻倍，不够取所需最小</span><br></pre></td></tr></table></figure><h1 id="7、LinkedList"><a href="#7、LinkedList" class="headerlink" title="7、LinkedList"></a>7、LinkedList</h1> <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">Node</span> <span class="title">&#123;E</span> item, <span class="keyword">Node</span> <span class="title">prev</span>, <span class="keyword">Node</span> <span class="title">next</span>&#125; </span><br><span class="line"><span class="number">2</span>) int size </span><br><span class="line"><span class="number">3</span>) <span class="keyword">Node</span> <span class="title">first</span> </span><br><span class="line"><span class="number">4</span>) <span class="keyword">Node</span> <span class="title">last</span> </span><br><span class="line"><span class="number">5</span>) linkFirst(), linkLast(), linkBefore(), unLinkFirst(), unLinkLast(), unLink(), indexOf()</span><br></pre></td></tr></table></figure><h1 id="8、HashMap"><a href="#8、HashMap" class="headerlink" title="8、HashMap"></a>8、HashMap</h1><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">Node</span><span class="title">&#123;int</span> hash, K key, V value, <span class="keyword">Node</span> <span class="title">next</span>&#125; </span><br><span class="line"><span class="number">2</span>) 默认容量<span class="number">16</span>，负载因子<span class="number">0.75</span>f </span><br><span class="line"><span class="number">3</span>) int size, modCount, threshold, float loadFactor </span><br><span class="line"><span class="number">4</span>) <span class="keyword">Node</span><span class="title">[] table</span> </span><br><span class="line"><span class="number">5</span>) Set entrySet </span><br><span class="line"><span class="number">6</span>) put():根据key算hash，根据容量和hash算index，table[index]没有直接添加到数组中，table[index]有，若index位置同一个key则更新，否则遍历next是否有，有则更新，无则新增，最后根据thread与size判断是否扩容。注：扩容时容量翻倍，重新算hash复制到新数组 </span><br><span class="line"><span class="number">7</span>）get()类似 </span><br><span class="line">注：先比较hash，若相等在比较equals</span><br></pre></td></tr></table></figure><h1 id="9、Hashtable"><a href="#9、Hashtable" class="headerlink" title="9、Hashtable"></a>9、Hashtable</h1> <figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 结构实现与HashMap基本一致 </span><br><span class="line"><span class="number">2</span>)通过synchronized方法保证线程安全</span><br></pre></td></tr></table></figure><h1 id="10、HashSet"><a href="#10、HashSet" class="headerlink" title="10、HashSet"></a>10、HashSet</h1><p> <code>委托给HashMap，其Value是同一个默认对象</code></p><h1 id="11、LinkedHashMap继承HashMap"><a href="#11、LinkedHashMap继承HashMap" class="headerlink" title="11、LinkedHashMap继承HashMap"></a>11、LinkedHashMap继承HashMap</h1> <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) Entry&#123;HashMap.Node, Entry <span class="keyword">before</span>, <span class="keyword">after</span>&#125; </span><br><span class="line">2) Entry head, tail </span><br><span class="line"><span class="number">3</span>) 重写newNode()添加节点时，除像HashMap中添加外，保存<span class="keyword">before</span>、<span class="keyword">after</span>信息</span><br></pre></td></tr></table></figure><h1 id="12、LinkedHashSet"><a href="#12、LinkedHashSet" class="headerlink" title="12、LinkedHashSet"></a>12、LinkedHashSet</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">继承HashSet：不知道如何实现的顺序？</span><br></pre></td></tr></table></figure><h1 id="13、AbstractMap"><a href="#13、AbstractMap" class="headerlink" title="13、AbstractMap"></a>13、AbstractMap</h1><p> <code>维护EntrySet，AbstractSet维护Iterator，AbstractList维护Iterator</code></p><h1 id="14、ConcurrentHashMap"><a href="#14、ConcurrentHashMap" class="headerlink" title="14、ConcurrentHashMap"></a>14、ConcurrentHashMap</h1> <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">1</span>) <span class="selector-tag">JDK1</span><span class="selector-class">.7</span>及以前： </span><br><span class="line"><span class="selector-tag">a</span>、<span class="selector-tag">Segment</span><span class="selector-attr">[]</span> ,<span class="selector-tag">HashEntry</span><span class="selector-attr">[]</span> , <span class="selector-tag">HashEntry</span>&#123;<span class="selector-tag">hash</span>, <span class="selector-tag">k</span>, <span class="selector-tag">v</span>, <span class="selector-tag">next</span>&#125; </span><br><span class="line"><span class="selector-tag">b</span>、根据<span class="selector-tag">key</span>算<span class="selector-tag">hash</span>，根据<span class="selector-tag">hash</span>和<span class="selector-tag">Segment</span>的大小算位置，每个<span class="selector-tag">segment</span>拥有一个自己的<span class="selector-tag">HashEntry</span><span class="selector-attr">[]</span> </span><br><span class="line"><span class="selector-tag">c</span>、<span class="selector-tag">get</span>()：不加锁，<span class="selector-tag">volatile</span>类型 </span><br><span class="line"><span class="selector-tag">d</span>、<span class="selector-tag">put</span>(): 对相应<span class="selector-tag">segment</span>加锁 </span><br><span class="line"><span class="selector-tag">e</span>、<span class="selector-tag">size</span>()：各<span class="selector-tag">HashEntry</span><span class="selector-attr">[]</span> 之和，先不加锁算两遍，若一致则返回，若不一致则加锁重新计算 </span><br><span class="line"><span class="selector-tag">2</span>）<span class="selector-tag">JDK1</span><span class="selector-class">.8</span> </span><br><span class="line"><span class="selector-tag">a</span>、<span class="selector-tag">Node</span>&#123;<span class="selector-tag">hash</span>, <span class="selector-tag">key</span>, <span class="selector-tag">value</span>, <span class="selector-tag">next</span>&#125; </span><br><span class="line"><span class="selector-tag">b</span>、<span class="selector-tag">Node</span><span class="selector-attr">[]</span> <span class="selector-tag">table</span> </span><br><span class="line"><span class="selector-tag">c</span>、大多数操作类似于<span class="selector-tag">HashMap</span>，不同<span class="selector-tag">CAS</span>方式设置，根据<span class="selector-tag">key</span>算<span class="selector-tag">hash</span>，在根据<span class="selector-tag">hash</span>和容量算<span class="selector-tag">index</span>，对<span class="selector-tag">table</span><span class="selector-attr">[index]</span>加锁，从而达到更大的并发量 </span><br><span class="line"><span class="selector-tag">d</span>、<span class="selector-tag">get</span>(): 同<span class="selector-tag">HashMap</span> </span><br><span class="line"><span class="selector-tag">e</span>、<span class="selector-tag">put</span>(): 对<span class="selector-tag">table</span><span class="selector-attr">[index]</span>加锁</span><br></pre></td></tr></table></figure><h1 id="15、TreeMap"><a href="#15、TreeMap" class="headerlink" title="15、TreeMap"></a>15、TreeMap</h1> <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）红黑树，即自平衡二叉查找树，时间复杂度O(logn) </span><br><span class="line"><span class="number">2</span>）<span class="built_in">Entry</span>&#123;K k, V v, <span class="built_in">Entry</span> parent, left, right, boolean color&#125; </span><br><span class="line"><span class="number">3</span>）<span class="built_in">Entry</span> root，<span class="built_in">int</span> <span class="built_in">size</span>， <span class="built_in">int</span> modeCount</span><br></pre></td></tr></table></figure><h1 id="16、TreeSet"><a href="#16、TreeSet" class="headerlink" title="16、TreeSet"></a>16、TreeSet</h1><p><code>委托TreeMap实现</code></p><h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p><a href="https://blog.csdn.net/qq_21033663/article/details/79571506" target="_blank" rel="noopener">https://blog.csdn.net/qq_21033663/article/details/79571506</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码系列 </tag>
            
            <tag> JDK源码系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的书架</title>
      <link href="2018/myBookSheet/"/>
      <url>2018/myBookSheet/</url>
      
        <content type="html"><![CDATA[<p>在如今数据爆炸的年代，如果在大量数据中找到自己需要的那部分东西至关重关。在我关注的领域中，常伴我的那些经典之作奉给各位。</p><a id="more"></a><h3 id="鸟哥的Linux私房菜—基础学习篇"><a href="#鸟哥的Linux私房菜—基础学习篇" class="headerlink" title="鸟哥的Linux私房菜—基础学习篇"></a><a href="https://book.douban.com/subject/4889838/" target="_blank" rel="noopener">鸟哥的Linux私房菜—基础学习篇</a></h3><p><img src="https://img1.doubanio.com/lpic/s4399937.jpg"><br>个人评价：这本书对于学习Linux基础知识非常有帮助，既可以当成教科书也可以当成工具，很多服务是运行在linux这类操作系统之中的，学习一些linux知识是很有必要的。比如vim，makefile, 常用的linux命令，脚本编写等等知识点。虽然次数的名字不是像类似“深入浅出*<strong><em>”，“深入理解**</em></strong>”等那么高大上一些，但是如果要掌握一些linux知识，此书评价可看此大任。当然此书还有另一本，是服务架设篇，如果对此有兴趣的朋友可以买来看看。书中基本没有错别字，笔误等小错误，可见其背后的团队之认真。<br>评分：5分（满分5分，这个给5分不是说此书已经登峰造极，而是觉得以目前关于此类的书籍，已经是上品了）<br>提示：此书篇幅较大（可以和《Think in Java》的篇幅相比），内容较多，看个一两遍基本也记不住多少，还是要勤加练习，更多的可以当工具书来查阅。</p><hr><h3 id="Effective-Java"><a href="#Effective-Java" class="headerlink" title="Effective Java"></a><a href="https://book.douban.com/subject/3360807/" target="_blank" rel="noopener">Effective Java</a></h3><p><img src="https://img3.doubanio.com/lpic/s3479802.jpg"><br>个人评价：了解过Java的人应该或多或少的听过此书吧，堪称经典。书中主要罗列了一些知识点，然后对于这些知识点单独进行详述。内容颇有深度，建议有基础的人看。<br>题外话：很多人认为《Think in Java》是经典之作，当然博主也写不出《Think in Java》这类巨作，但是博主本人并不推荐《Think in Java》这本书，应该他的定位很尴尬（博主看过第三版和 第四版），就拿第四版来说，对于初学者看起来应该是很吃力的，尤其是书中的案例特别长，而且是用外国人的思维去举例的，初学者看起来比较扯淡。那对于实力者而言，这本书的意义就是帮你复习复习，却很难有知识点去惊艳到你。再者就是这本书也不是当工具书，书中例子很多，但是对于单个的知识点未尽其细。所以博主的观点是这本书适合闲来看看，不喜请轻喷。。。<br>评分：5分。<br>提示：无。</p><hr><h3 id="Java并发编程实战"><a href="#Java并发编程实战" class="headerlink" title="Java并发编程实战"></a><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">Java并发编程实战</a></h3><p><img src="https://img3.doubanio.com/lpic/s7663093.jpg"><br>个人评价：国外人写的书，这是翻译版，原书《Java Concurrency In Practice》,堪称并发中的经典书籍。翻译的也很好，书本内容偏理论，基本知识点都能够概括。当然这本书还是需要有一点的并发基础的人适合看的，零基础的看起来会有点吃力。此书可以看好多遍，每看一遍都会有新的认识。<br>评分：5分。<br>提示：无。</p><hr><h3 id="Java多线程编程核心技术"><a href="#Java多线程编程核心技术" class="headerlink" title="Java多线程编程核心技术"></a><a href="https://book.douban.com/subject/26555197/" target="_blank" rel="noopener">Java多线程编程核心技术</a></h3><p><img src="https://img3.doubanio.com/lpic/s28238985.jpg"><br>个人评价：此书是国人写的，适合零基础的人学习，里面每一个知识点都会有案例介绍。如果你有那么点基础，此书就不用看了，纯粹是浪费时间浪费钱。其实会点并发的一天就可以看完此书了。既然是多线程核心技术，连ThreadPoolExecutor都没有涉及。书中基本是关于Thread和Runnable翻来覆去的用法。<br>评分：2分。<br>提示：不建议看，实在闲得慌或者基本零基础可以看看。</p><hr><h3 id="Java并发编程的艺术"><a href="#Java并发编程的艺术" class="headerlink" title="Java并发编程的艺术"></a><a href="https://book.douban.com/subject/26591326/" target="_blank" rel="noopener">Java并发编程的艺术</a></h3><p><img src="https://img1.doubanio.com/lpic/s28275418.jpg"><br>个人评价：此书是阿里人也的书，一共有三个作者，第一作者是方腾飞，也是并发编程网的创始人，如果在网上搜索并发编程的相关知识，或多或少的会链接到他的网站上去。此书开篇就很有深度，比如偏向锁、自旋锁、轻量级锁等。前面6章都很不错，理解的非常深入，很底层，后面开始有点撑版面的，尤其是Atomic这一章出现了严重的错误，有点凤头鸡尾的感觉。但是总体上来看还是很不错的，非常推荐买来看看。<br>评分：4分<br>提示：强烈推荐，只不过尾部几章写的太草率，扣点分</p><hr><h3 id="深入理解Java虚拟机"><a href="#深入理解Java虚拟机" class="headerlink" title="深入理解Java虚拟机"></a><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">深入理解Java虚拟机</a></h3><p><img src="https://img3.doubanio.com/lpic/s27458236.jpg"><br>个人评价：此书也甚为经典，博主看了不下5遍。此书的作者是国内的，在市场上面滥竽充数横行的今天，算得上是上上品。书中对JVM进行了详细深刻的说明，是学习JVM原理必备书籍。必须强烈推荐。<br>评分：5分<br>提示：无</p><hr><h3 id="大型网站技术架构核心原理与案例分析"><a href="#大型网站技术架构核心原理与案例分析" class="headerlink" title="大型网站技术架构核心原理与案例分析"></a><a href="https://book.douban.com/subject/25723064/" target="_blank" rel="noopener">大型网站技术架构核心原理与案例分析</a></h3><p><img src="https://img3.doubanio.com/lpic/s27250675.jpg"><br>个人评价：如果要学习分布式，这本书基本把分布式的知识讲了个边（概论），书本篇幅不大，但是内容特别精炼，比如网站架构演变，高可用，高性能，伸缩性等等。此书的作者和下面所要陈述的两本书的作者也都是阿里系的。个人觉得学习分布式或者说大型网站架构可以先看看这本书来个全局统筹，然后再看《大型分布式网站架构设计与实践》，最后又实践经验了再看《大型网站系统与Java中间件实践》。<br>评分：5分<br>提示：强烈推荐。</p><hr><h3 id="大型分布式网站架构设计与实践"><a href="#大型分布式网站架构设计与实践" class="headerlink" title="大型分布式网站架构设计与实践"></a><a href="https://book.douban.com/subject/25972633/" target="_blank" rel="noopener">大型分布式网站架构设计与实践</a></h3><p><img src="https://img3.doubanio.com/lpic/s27444272.jpg"><br>个人评价：刚刚那本书是关于大型分布式网站架构的一个概论，而这本就根据作者的经历，在实际中需要用到的一些知识对这个主题进行了一番探讨，偏应用，书中罗列了很多技术，也进行了案例探讨，内容不深。此书值得看一看。<br>评分：4分<br>提示：最好实际操作一下，加深印象。</p><hr><h3 id="大型网站系统与Java中间件实践"><a href="#大型网站系统与Java中间件实践" class="headerlink" title="大型网站系统与Java中间件实践"></a><a href="https://book.douban.com/subject/25867042/" target="_blank" rel="noopener">大型网站系统与Java中间件实践</a></h3><p><img src="https://img1.doubanio.com/lpic/s27269837.jpg"><br>个人评价：这本书比上面两本要深一点，主要是关于一些中间件的设计。这里的并不是简单的教你怎么使用一些中间件，而是根据实际问题来演变怎么设计一个合适的中间件，适合有一定相关工作经验的人翻阅。可以买来看看，写的很不错<br>评分：4.5分<br>提示：最好有相关工作或学习经验。</p><hr><h3 id="netty实战"><a href="#netty实战" class="headerlink" title="netty实战"></a><a href="https://book.douban.com/subject/27038538/" target="_blank" rel="noopener">netty实战</a></h3><p><img src="https://img3.doubanio.com/lpic/s29444565.jpg"><br>个人评价：在游戏行业中，如果用java做服务端。无非只有netty,mina,grizzly3个框架可以选择。而netty是使用最广泛的一个,netty实战对于netty框架进行了全面的剖析。<br>评分：4.8分<br>提示：需要有多线程并发基础。</p><hr><h3 id="Head-First-设计模式"><a href="#Head-First-设计模式" class="headerlink" title="Head First 设计模式"></a><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">Head First 设计模式</a></h3><p><img src="https://img3.doubanio.com/lpic/s2686916.jpg"><br>简介：《Head First设计模式》(中文版)共有14章，每章都介绍了几个设计模式，完整地涵盖了四人组版本全部23个设计模式。前言先介绍这本书的用法；第1章到第11章陆续介绍的设计模式为Strategy、Observer、Decorator、Abstract Factory、Factory Method、Singleton，Command、Adapter、Facade、TemplateMethod、Iterator、Composite、State、Proxy。最后三章比较特别。第12章介绍如何将两个以上的设计模式结合起来成为新的设计模式(例如著名的MVC模式)，作者称其为复合设计模式(这是作者自创的名称，并非四人组的标准名词)，第13章介绍如何进一步学习设计模式，如何发觉新的设计模式等主题，至于第14章则很快地浏览尚未介绍的设计模式，包括Bridge、Builder、Chain of Responsibility、Flyweight、Interpreter、Mediator、Memento、Prototype，Visitor。第1章还介绍了四个○○基本概念(抽象、封装、继承、多态)，而第1章到第9章也陆续介绍了九个○○原则(Principle)。千万不要轻视这些○○原则，因为每个设计模式背后都包含了几个○○原则的概念。很多时候，在设计时有两难的情况，这时候我们必须回归到○○原则，以方便判断取舍。可以这么说：○○原则是我们的目标，而设计模式是我们的做法。<br>评分：4.5分<br>提示：设计模式基础</p><hr><h3 id="重构：改善既有代码的设计"><a href="#重构：改善既有代码的设计" class="headerlink" title="重构：改善既有代码的设计"></a><a href="https://book.douban.com/subject/1229923/" target="_blank" rel="noopener">重构：改善既有代码的设计</a></h3><p><img src="https://img3.doubanio.com/lpic/s1669771.jpg"><br>简介：《重构:改善既有代码的设计》(中文版)解释重构的原理（principles）和最佳实践方式（best practices），并指出何时何地你应该开始挖掘你的代码以求改善。《重构:改善既有代码的设计》(中文版)的核心是一份完整的重构名录（catalog of refactoring），其中每一项都介绍一种经过实证的代码变换手法（code transformation）的动机和技术。某些项目如Extract Method和Move Field看起来可能很浅显，但不要掉以轻心，因为理解这类技术正是有条不紊地进行重构的关键。点击进入该书更多详细信息。<br>评分：4.6分<br>提示：java架构</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目上线之后遇到的坑</title>
      <link href="2018/onlineProjectKen/"/>
      <url>2018/onlineProjectKen/</url>
      
        <content type="html"><![CDATA[<p>现在真正理解了能力越强，责任越来。这是我在作为一个普通程序时从未体会到的感受。当线上出现bug需要紧急处理的时候，真的生无可恋 。</p><a id="more"></a><ul><li>压测时数据库文件庞大无比，仔细分析binlog和玩家数据结构找到原因改造。</li><li>竞技场战斗结束没有结算面板，导致大量参与活动者无法退出副本。</li><li>每日充值奖励策划配置id变动导致充值奖励领取异常，写修复脚本紧急处理。</li><li>因sql文件名字对应不上，运维未执行sql文件导致所有排行榜数据为空。</li><li>http切换https(ws切换到wss)时域名解析对不上导致服务器无法连通</li><li>自动开服工具开服时间修改不完整导致开服活动未开</li><li>运营设置时间错误导致自动开服工具开服出现断服,新服30,39己成老服</li><li>热更脚本问题导致全平台黑屏10分钟</li><li>其他bug待发现(感觉需要请高僧给服务器开个光)</li></ul>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主程职责总结和反思</title>
      <link href="2018/mainProjectJobs/"/>
      <url>2018/mainProjectJobs/</url>
      
        <content type="html"><![CDATA[<p>有生之年作为主程做的第一款游戏终于正式上线了(之前有2款作为普通程序的己上线的游戏),虽然现在依然保持着一周加班6天的状态。但是欣慰的是上线数据表现还不错，值得期待。做主程时间也有半年多了，从最初的手忙脚乱，诚惶诚恐到现在能够较好的应对，其中心酸历程只有经历过才能体会到。即使如此还是有很多做的不够的地方值得反思，要提升自己的综合素质。</p><a id="more"></a><p>在网络上搜集了各种资料和自己的经验（大部分内容摘自网络,主要也是为了提醒自己），总结如下：    </p><ul><li>服务端主程主要负责游戏开发中服务端的各项工作    </li><li>包含但不限于：解决团队中别人解决不了的问题，制作提升工作效率的工具；</li><li>服务端技术人员管理</li><li>向上有汇报，向下能统筹</li><li>尽可能的快速实现策划的需求，提供解决方案</li><li>达到一个里程碑后能反馈，遇到难点短时间无法攻克，及时沟通，并说说自己能做到的程度，帮助策划思考替换方案；</li><li>改需求无法避免。（网上产品经理（策划）是被各种程序员黑，现实中调侃调侃可以，别过了，人家也是没办法。）</li><li>会反思，策划的功能对吗?为何有会这么设计？配表方便吗？</li><li>手下心中的好大哥，人品过关，技术过关。</li><li>保持对新技术的好奇心，多关注业内比较新的解决方案。因为一旦做新项目，技术选型就是你的本职工作，而且影响整个项目周期，换句话说到底未来需要踩多少坑，由你决定。所以你要有一套经过实践证明行之有效的学习方法论</li></ul><p>对于一个刚刚晋升的同学来说，管理这一块是最棘手的，对于我来说也是这个阶段。这块其实也比较通用，不限于技术管理领域，但是管理这东西不能靠书本，在实践中总结，才是深刻的。你是主程了，那就意味这有一堆人会看着你做事。你怎么做事将间接的影响组员的做事态度。所以一个词——以身作则。别以为主程了就可以有些特权，可以迟到，可以工作时间扯淡，始终牢记：能力越大，责任越大。之所以把这条列在这里，我觉得管理包括自我管理和团队管理,而且前者是后者的基础；以前吧，你只要把自己的事情做好就算完成本职工作了，超出边界的工作，你做了那是加分，你的主程看到了或许还能表扬你，你不做也没关系。而现在你的事情就是整个游戏的服务端（甚至整个技术），任何报错，组员解决不了的诡异的bug，那都是你要解决的事情。</p><ul><li>你的工作会被各种打断，来自各位组员，主策，主美，项目经理。所以整片的工作时间几乎只在这些人都回家了，你留下来加班才能获得。</li><li>可能你还有一件事情，就是给每个组员打绩效，项目经理说，SABCD各占一定比例，所以给你出个难题，你想想你怎么解决：这个月是项目上线前夕,大家表现得都很拼，都很优秀，你怎么打绩效。</li><li>你的内心要足够强大，因为会有人质疑你的决策。</li><li>你的沟通表达能力需要提升一个档次，因为你要给各个层次的人解释同一个问题;</li><li>你会有许多跨部门的沟通；</li><li>你的组织能力要跟上节奏，定期组织这帮程序单身男“腐败”,严谨点叫团建。还要开技术分享会议。</li><li>你要保持谦虚，明白个人能力再强，都不可能解决所有事情，你需要咨询你的组员。再优秀的人都有他的短板，你要做就是把一群互补的人凑在一起，各自发挥优势。</li><li>你要给组员尽可能清晰地提供上升阶梯。多年以后，当他成为主程了，你可以骄傲地对他说 我曾经推动过你的进步。</li><li>你最好能充分了解你的组员,分配任务要有明确的范围，不能存在模糊地带，要能给与一定的帮助。</li><li>你的组员能力不均匀，做事情不要一刀切，换句话说管理要分层, 不同层关注点不同</li><li>你是Leader，不是Boss。在雇佣关系中，好人谈钱，坏人谈理想。所以多为组员谋取福利吧。</li><li>你其实也是个打工的对项目经理负责，所以要有汇报</li><li>谁都不希望加班，但问题总得解决，更要命的是你还不知道怎么解决。咱们程序和美术不一样，美术基本上是工作量的事情，程序会有bug，deadline就在那里，问题还没解决怎么办？</li></ul><p>一． 以德服人而不以技术高管制别人。<br>主程序一般技术水平高，在管理下面的程序的时候，多以自己的水平高而获得大家的认可，但是技术水平高和项目管理水平高不是同一个概念。一个技术水平高的主程序不一定能管好人，能带好人。如果以技术水平高自居，对下面的人肆意对待，他无法赢得项目成员的拥戴，无法获得大家的认可。程序员不是实现产品功能的工具，他是具备思考感情的人。在我所遇到的主程序中，有的很好，技术水平高，做事分明，不以水平高自居，而以自己的人格魅力赢得大家的尊重；有的则难言其好，技术水平高，但做事有针对性，常以水平高自居，对不服从的人进行压制。不同的风格，会产生不同的结果。我在此想说的是，一个人的技术是不可能永远保持先进性，而一个人的品德则可以永恒的。工作除了满足生活的需要之外，它带给人的还有快乐。一个优秀的主程序，应该公平、公正的对待每一个人，以德服人。让每个跟从的人体验到你不仅仅是技术水平高，人格更高。</p><p>二． 自由、共享、开放而不是限制、保守、自封。<br>主程序在项目中，对核心技术常常保留，隐藏，不公开，以防别人了解，学习，泄露，进而走进一个限制、保守、自封的怪圈。其实技术保留是没有错的，但是在这个自由、共享、开放的世界中，有时候是行不通的。因为中国的程序员有多少原创的技术呢？多是在互联网上，查查资料，共享下别人的经验，然后加以改造，修改，实现功能。每个人都应该很清楚，我们查询的资料是哪里来的呢？是那些有志于自由 ，共享，开放的有识之士发布的，我们从别人哪里学习，而我们为什么不把我们的经验心得也以自由，共享，开放的心态与天下的程序员共享呢？限制、保守、自封不利于技术的进步，不利于人才的成长。如果为限制、保守、自封找个理由，那就是为自己保留饭碗，惧怕被竞争。</p><p>三． 优秀的代码不一定创造优秀的产品，它只是更好的为产品服务；<br>优秀的产品并不一定建立在优秀的代码上，而是建立在市场和用户基础上。一个优秀的主程序，除了做好本身的编程，架构，设计工作外，更多的精力应放在如何设计优秀的产品而不是如何编写优秀的代码，产品是和市场赛跑，产品是和时间赛跑。抓住市场的先机，快速的创造出合格的产品比把心思放在如何写出优秀的代码价值大的多。衡量一个产品的成功，不是靠评价代码的优劣，而是靠是否赢得市场，是否赢得用户的欢迎。主程序常犯的一个错误是这行代码应该这样写，哪行代码应该那样写，完成的功能在不断的修改，修改。时间就这样消磨掉，推出产品上市的日期就被无限制的拖延下去。从而失去了市场的先机，走向失败。所以在我看来，一个优秀的主程序应该能够控制好时间，对市场的嗅觉要灵敏，对用户的把握要准确，只有这样才能保证产品能够在预期内推向市场，赢得成功。</p><p>四． 善于接纳意见，切忌专断<br>主程序有个很大的毛病就是专断，总是相信自己是对的，别人的意见不愿听从。先前曾经和一个主程序做事，他工作大概7年了，经验也很丰富，技术水平也很高。但是他做事的风格让人很难接受，在项目中要求别人必须绝对的服从，不容许有意见。即使项目组成员提出了合理的意见，也只是点头但不当回事。妄自尊大，孤傲自负的主程序，对项目是百害而无一利的。主程序要懂得尊重别人。只有互相尊重才有利于合作的愉快，项目顺利的完成。经验对于每一个来说，都可以随着工作阅历的增长而增长；技术水平也可以随着工作阅历的增长而提高。但是人格魅力，品德修养却非一朝一夕炼成的。懂得如何做人比什么都重要。具有人格魅力的主程序总是得到大家的赞赏。</p><p>五． 合理安排任务，不搞个人主义<br>在项目中，有的和主程序关系不错，主程序在安排任务时就把重要的模块分配给他，让其他人打酱油。这种做法不值得提倡和发扬。公平合理的安排任务，不搞个人主义，这也是对主程序的一个基本要求。从客观的说，项目中人人平等，每个人都应该得到应用的锻炼机会。在不影响项目进度的情况下，我们应该如何合理的安排任务呢？我们应该积极的和策划沟通，对每一个功能点，每一个细节进行衡量，判断所需要的时间，然后分配给项目组的成员。但是有的主程序的做法是自己先列出一个宏观计划，对某某A说，这个月你搞定这个；对某某B说，这个月你搞定那个。这种没有对每一个功能点进行细化的做法的结果就是，项目进度无限制性的延期。经验教训表明：宏观计划和微观计划二者是合而为一的，缺一不可的。</p><p>有些人，工作了很多年了，但差不多每年换一次工作，因为很多游戏研发周期只有1年多，结束就走人。然后最后手里会积累大量的代码资源，这些资源有可能是别人的，也肯定有自己的一部分，但是这个时候如果没有融汇贯通，那么这些东西都不是自己的，他手里的资源也就像一个人家里买了很多书但是从来不看一样，暴殄天物，可是一般情况一个人也看不了这么多的东西，最简单的道理就是msdn了，这就有了第一点的要求，能够进行大量的信息索引。就是说一个主程必须要有足够多的见识，同时必须要能够快速针对当前项目碰到的问题定位，并且在自己的知识库里找出来。当然我们不可能储存足够的信息在以后的工作中来用。但是必须要有快速上手一个新的项目的能力，如果项目中有大量的超出自己知识范围的东西存在，那么我的建议是放弃在这个项目中间做主程，因为无法准确评估项目需要开发的时间，无法把握功能难点。</p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson的key为非字符串的处理</title>
      <link href="2018/fastjson/"/>
      <url>2018/fastjson/</url>
      
        <content type="html"><![CDATA[<p>fastjson己然成为最为流行的Json处理框架,今天在处理json的时候发现默认以long型为key时解析会失败,网上搜索无果但最终还是发现了解决方法</p><a id="more"></a><h2 id="fastJson的toJSONString"><a href="#fastJson的toJSONString" class="headerlink" title="fastJson的toJSONString"></a>fastJson的toJSONString</h2><p>toJSONString有多个重载,默认一个参数的是没有做特殊处理的,也就是说如果key中存在非字符串会解析失败.<br><img src="https://image.xiaomo.info/json/json.png"></p><h2 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h2><p>SerializerFeature这个枚举类有很多选项,从中我们可以找到把非字符串转成字符串的操作.<br><code>String resStr = JSON.toJSONString(ret, SerializerFeature.WriteNonStringKeyAsString);</code><br><img src="https://image.xiaomo.info/json/correct.png"></p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>总感觉自己能力不足看不懂框架的源码所以不去看,这样技术进步会很慢.遇到问题可以debug跟进源码看一看是什么原因.对解决问题帮助很大.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年终总结(关于最近的琐事的一些碎碎念)</title>
      <link href="2017/saikennokoto/"/>
      <url>2017/saikennokoto/</url>
      
        <content type="html"><![CDATA[<p>最近忙的真的有点晕头转向的,觉得自己的脑袋不够用了。</p><a id="more"></a><p>&nbsp; &nbsp; 今年正月初七上班,初五从家出发。赶上项目上线，从初七开始到现在为止一直没有休息过，晚上回家11到到凌晨2点不等。如果你在杭州，一定会对3.5号晚上的狂风印象深刻，我差点都回不了家。<br>当时的情况是这样的。。<br><img src="https://image.xiaomo.info/blog/359.jpg"><br><embed src="https://image.xiaomo.info/blog/354.mp4" height="800" width="600"><br>好在回家比较晚，到家凌晨2点半，回家的时候风己经停了。</p><hr><p>好好梳理下最近做的事情（因为3.11号要回家结婚被强行催着做）。</p><ul><li>游戏系统功能修改</li><li>SDK接入（贪玩，上士，9377）</li><li>待上线版本性能优化（数据库数据拆分，日志）</li><li>充值系统重构</li><li>代码优化和BUG修复</li><li>装备极品属性系统开发</li><li>后台API接口开发（充值，封号，禁言，白名单）</li><li>过包服务器的搭建</li></ul><p>不知道有没有人体会过，手的速度跟不上思考的速度，敲到最后手腕疼的像搬了很多重物一样。由于睡眠时间不足，整天都是迷糊的状态，再加上公司搬迁，在上班的时候又加喷了油漆，真的感觉整个人都不好了。上班的时候人人都戴着口罩，但是油漆味会完全穿透口罩进入呼吸系统。后来有不少小伙伴买了防毒面具，这也是个神奇的经历了。见下图：<br><img src="https://image.xiaomo.info/blog/39.png"></p><hr><p>值得高兴了的，千呼万唤始出来，我们的项目终于上线了。因为《蓝月争霸H5》这个项目是我从立项到上线全程作为一个主程的角色参与的，我敢没说有人比我对服务端的代码更熟悉了。所以也有一种特殊的感情在里面，就像养了几十年的女儿终于要出嫁了，也会激动的老泪纵横。也可能是因为这是自己第一个倾注的大量心血的项目，所以会多愁善感一些。真心希望项目能够蒸蒸上，获得该有的回报。项目地址：</p><hr><p>安卓下载链接：<a href="https://download.tanwan.com/h5lyzbxy/h5lyzbxy_155723.apk" target="_blank" rel="noopener">https://download.tanwan.com/h5lyzbxy/h5lyzbxy_155723.apk</a><br>IOS链接：<a href="https://itunes.apple.com/cn/app/id1296175622?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/id1296175622?mt=8 </a><br>web端： <a href="http://h5.tanwan.com/game/?id=490" target="_blank" rel="noopener">http://h5.tanwan.com/game/?id=490</a>         </p><hr><p>这是一款传奇题材的egret + java 开发养成类挂机游戏,算是弱交互的rpg游戏，有传奇情怀的玩家可以玩一下(比较烧钱)。</p><p>&nbsp; &nbsp; 从前年开始断断续续开始学日语，从一开始的单纯喜欢日漫到后来去日本旅游后喜欢日本的文化，喜欢这个国度。因为工作占了整个生活的绝大部分时间，导致学日语的时间很少，连续考了2次N2都没过，开始有点沮丧了，但是我绝对不会放弃的。几十年来坚持下来的两个兴趣：编程和语言(日语/英语)，我会一如既往的坚持着，N2,N1，流畅自如。已经3月了，我准备继续报6月份的考试，给自己一点动力。活到考，学到老。让我秉承着这一信念一直下去吧。工作上来说，时光荏苒，一晃已经工作了3年了。从最初的小菜鸟到现在能够独立带项目，把自己的经验和心得教给自己的组员，而且大部分组员学历都比我要高，更加促使着我不断学习。在项目开发期间不断的有猎头和阿里/蚂蚁等公司看到我的github之后联系我问考不考虑换工作，我都以项目太忙为由回掉了。不过有次阿里的技术找了我几次也比较好奇阿里需要什么样的人就同意了下电面。本来因为一点准备都没有，而且自己能力上的不足被狠狠虐了一把（问的都是一些实现原理，jvm优化,mysql性能调优相关的连环炮就不展开说了，有兴趣可以加我详聊）。感觉自己现在的能力勉强能达到阿里P6的标准？我自己也不知道，我只知道自己需要学的东西还很多。而且随着工作时间的增加，这种感觉越明显。2008年暑假买了C语言的书来看，看的一知半解。大学期间自学java,写了无数遍的hello world 不知道到底能做什么。15年毕业之后正式入行，夜夜在慕课网/极客学院/传智播客等自学网站长期霸榜，仿佛回到了高三那一年充实无比。也庆幸自己不算懒惰，使得不算聪明的我在互联网行业站稳脚步。每当有同事知道我是文科出身，半路出家都一脸惊讶。我觉得没什么了不起的，因为我不想像我同学一样没有一技之长只能去当客服。我向往远方，去了解未知的事物;梦想着环游世界，走遍每一个角落。希望自己有生之年能够财务自由，是为了兴趣而活，而不是仅仅为了生存。<br><img src="https://image.xiaomo.info/blog/imooc.png"></p><hr><p>&nbsp; &nbsp; 2015年大部分时间在看java web,沉迷于框架不能自拔。学习spring,mybatis,spring boot ,hibernate等各种框架的使用，从来没想过实现原理。2016年迷上所见即所得的前端，在空闲时间研究html,css,scss,less,gulp,webpack,angular等前端技术，发现前端并没有想像中简单，现在的前端已经不是以前那样照着psd写写静态就可以了，浏览器适配，首屏加载，代码混淆，编译等新名词不断出现，感觉像发现了一个新的世界。2017年公司新项目立项，我有幸担任主程一职，开始了解游戏的整体框架和底层依赖jar包源码。2017年我对java的使用理解更加的深入，开始有意无意的去了解更底层的一些东西。开始研究 设计模式，代码重构，代码整洁之道，netty实战等相关的知识。能够用一些简单的设计模式思想去解决问题，养成了代码优化重构的习惯。能够快速定位问题并解决问题，对业务需求得心应手。我想这就是能力的快速提高吧，感谢我的领导对我的信息和栽培，让我有机会接触到这些东西。2018年，我想我会回归到java的jdk上来，去看一看优秀的jdk源码。自己去实现一个迭代器，或者自己实现在一个hashmap之类的东西，不能只知其然而不知其所以然。最后我希望2018我的个人能力能够进上一层楼，在杭州安个家。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之基础环境搭建</title>
      <link href="2017/AngularEnvironment/"/>
      <url>2017/AngularEnvironment/</url>
      
        <content type="html"><![CDATA[<p>曾经的angular环境搭建都能把人的折腾的死去活来,现在的福音是官方的<code>@angular/cli</code>脚手架工具的功能己经相当完备.</p><a id="more"></a><h3 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h3><h4 id="angular模块"><a href="#angular模块" class="headerlink" title="angular模块"></a>angular模块</h4><ul><li><code>@angular/animations 5.0.0</code></li><li><code>@angular/common 5.0.0</code></li><li><code>@angular/compiler 5.0.0</code></li><li><code>@angular/core 5.0.0</code></li><li><code>@angular/forms 5.0.0</code></li><li><code>@angular/http 5.0.0</code></li><li><code>@angular/platform-browser 5.0.0</code></li><li><code>@angular/platform-browser-dynamic 5.0.0</code></li><li><code>@angular/router 5.0.0</code></li><li><code>@angular/cli 1.5.5</code></li></ul><h4 id="重要的默认第三方依赖"><a href="#重要的默认第三方依赖" class="headerlink" title="重要的默认第三方依赖"></a>重要的默认第三方依赖</h4><ol><li><code>core-js 2.4.1</code>     </li><li><code>rxjs 5.5.2</code>          </li><li><code>zone.js 0.8.14</code>          </li></ol><h3 id="三大模块"><a href="#三大模块" class="headerlink" title="三大模块"></a>三大模块</h3><p>组件、路由、模块</p><h3 id="cli功能"><a href="#cli功能" class="headerlink" title="cli功能"></a>cli功能</h3><ul><li><code>ng serve</code> 启动一个http在4200端口,1.5.5版本使用webpack打包，不排除以后的版本会使用rollup</li><li><code>ng generate directive|pipe|service|class|guard|interface|enum|module</code> 可以生成不组的文件</li><li><code>ng build</code> 构建项目 <code>ng build --prod -- iot</code>是打包生产环境</li><li><code>ng test</code> 执行单元测试(karma)</li><li><code>ng e2e</code>  执行集成测试(Protractor)</li><li><code>ng lint</code> 检查代码风格</li><li><code>ng help</code> 查看全部帮助</li></ul><h3 id="组件树插件"><a href="#组件树插件" class="headerlink" title="组件树插件"></a>组件树插件</h3><p><a href="https://github.com/filso/ng-dependency-graph/" target="_blank" rel="noopener">ng-dependency-graph</a></p>]]></content>
      
      
      <categories>
          
          <category> angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StackOverFlow提问的艺术</title>
      <link href="2017/HowToAskQuestionOnStackOverFlow/"/>
      <url>2017/HowToAskQuestionOnStackOverFlow/</url>
      
        <content type="html"><![CDATA[<p>stackOverFlow现在不仅是一个社区，更是一个程序员的聚集地，就像古代高手云集的江湖。合理的使用它不仅能够方便自己，更能够帮助别人。我最喜欢的两个网站:<a href="https://github.com/houko" target="_blank" rel="noopener">github</a>和<a href="https://stackoverflow.com/users/5804125/xiaomo" target="_blank" rel="noopener">stackOverFlow</a></p><a id="more"></a><h1 id="提问相关"><a href="#提问相关" class="headerlink" title="提问相关"></a>提问相关</h1><h2 id="可以问什么样的主题"><a href="#可以问什么样的主题" class="headerlink" title="可以问什么样的主题"></a>可以问什么样的主题</h2><p>大家都知道 Stack Overflow是编程类的问答社区， 但还真有人把它当成通用的问答社区了， 问些完全无关的问题。 其实， Stack Overflow 是有一系列兄弟网站的（目前已经有100+)， 统称 Stack Exchange， 涵盖很多主题， 比如数学、物理、化学等科学类， 服务器管理、Latex、数据库等计算机类， 中文、俄文、日文等语言类， 详细的列表看这里， 不要让好问题问错地方哦。<br>允许的主题包括： 具体的编程问题、软件算法相关、通常只有程序员用的软件工具相关等。<br>有些主题是比较容易弄错的， 比如一般的电脑操作问题， 应该去Super User(热门的 Linux/Unix, 和Ubuntu还有独立的站点）， 专业的服务器问题， 应该去Server Fault。这些都不属于编程类的问题， 尽管不少程序员的日常工作也有涉及（想一想“怎么修电脑？”属于编程问题么）。 再举个例子， 同样是编辑器， Vim/Emacs/Atom相关的问题是可以的，因为基本只有程序员会用这些工具， 而 Word/记事本相关的一般就不可以。</p><h2 id="什么样的问题应该避免问"><a href="#什么样的问题应该避免问" class="headerlink" title="什么样的问题应该避免问"></a>什么样的问题应该避免问</h2><p>编程相关还不够， Stack Overflow 要求问题必须是 「practical, answerable questions based on actual problems that you face」。<br>这是什么意思呢？ 首先， 开放式的问题是不允许的，比如“你为什么喜欢PHP?”， 隔壁Quora会是更合适的对象。 其次， 问题应该不需要很长的篇幅来回答， 如果一个问题期待的回答足够写一本书， 那很可能会被关闭的。 各种寻求资源的问题应该避免，如 “要完成某某工作， 有什么Python的库可以用”， 或者“学习C++应该选择哪本书？”等， 因为答案会主观， 也容易吸引广告。 最后， 问题不要基于凭空的假设，要基于实际的难题。<br>需要注意的是，你很可能见过一些违反上面规定的问题还在，而且浏览量很大， 尤其是一些寻求资源的问题， 和非编程相关的计算机问题等。 这是什么原因呢？ 原来，早期的Stack Overflow的规则还比较松，也没有Super User之类的站点。 这些问题往往是08/09年问的，大多数现在已经被关闭了。<br>上面的规则如果遵守， 你的问题应该问对地方了。 下面继续说说内容上具体需要注意的。</p><h2 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h2><p>Stack Overflow不是论坛， 它的目标是希望成为编程类问答的一个超级数据库， 所以每个问题都不止是为了帮助提问者本人， 更重要的是希望将来能够帮助到每一个遇到同样问题的人。<br>所以， 和问题无关的内容都被认为是一种噪音， 包括： 打招呼（比如 Hi, Hello， Good afternoon， Dear Coders等)， 表示感谢（比如 Thanks, Any help would be appreciated等)， 没必要的背景（比如 I’m a newbie in C#等)， 你的签名 等。<br>可能有人会不理解为什么这样规定， 尤其是不要表示感谢这点。 Stack Overflow社区的理由是， 对愿意阅读并尝试解答你问题的人来说， 最好的表达感谢的方式是upvote有帮助的回答， 以及选择其中一个作为答案。 每一句和问题无关的内容都增加了额外的阅读时间， 而一个问题可能会被大量的人阅读。 更多的相关讨论可以参见这里和这里。<br>同样道理， 当有人回答你的问题之后， 也不要去添加无用的评论， 比如单纯的表达感谢的话， “+1”， 或者闲聊等。 评论的唯一用处是用来澄清疑问。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>作为一个英语社区， 不论提问、回答还是在评论中和别人互动， 都是要用英语的。<br>除非英语水平真的很糟糕， 语法其实并不是最需要担心的，因为并不需要做到完美。Stack Overflow是允许自由的编辑其他人的问题/回答的（编辑者如果rep不到2K，需要经过评审才会生效）。 有很多人会热情的对问题进行编辑的， 包括修复可能的语法错误。 我想说的一点是， 要尽可能的保证单词拼写是正确的。 即使对英语不够好的人来说， 这也只需要多花一点时间检查就可以做到， 但它代表着对阅读你问题的人的尊重。 甚至很多英语母语的人在拼写上也不注意， 会把I’m 写成im, 把 want to写成 wanna之类的非正式英语， 这些都会降低问题被回答的概率。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>在发问题之前， 问自己几个问题：</p><ul><li>你做过足够的研究么？ 有的人连入门指南都没读上10分钟就去提问， 问的问题能有多少价值呢？</li><li>你尝试过搜索么？ 至少要试过Google和站内搜索， 很可能相同的问题已经有答案了</li><li>你试过debug么？ 把你的想法或调试过程写在问题里，否则很可能会看到几条评论“Have you tried anything?”或“We don’t do your homework”之后问题就被downvote得惨不忍睹了。 因为大多数人是拒绝回答没有努力尝试的提问者的。</li><li>标签： 一个问题可以加1~5个标签， 大多数问题是和某种具体的编程语言相关的， 这个语言的标签通常是必须的， 否则相关语言的关注者们很可能根本见不到问题。</li></ul><h2 id="起一个好标题"><a href="#起一个好标题" class="headerlink" title="起一个好标题"></a>起一个好标题</h2><p>一般来说， 标题应该尽量用简介的语言描述具体的问题。 比如 C# number confusion就是个反例， 如果改成 Why does using float instead of int give me different results when all of my inputs are integers? 就要具体多了。</p><h2 id="提供代码"><a href="#提供代码" class="headerlink" title="提供代码"></a>提供代码</h2><p>对于编程类问题，的确有问题不需要代码也能表达清楚的， 但大多数问题都需要代码才能清晰的表达。“我声明了一个变量， 调用了几个函数， 然后它的值就变了， 为什么呢？” 这样的问题， 鬼才知道答案。<br>提供代码要注意： 不要贴截图， 难道你要回答者去照着截图敲键盘复现你的问题？ 也不要只贴站外的链接， 如果站外链接能够提供一些额外的方便功能， 也要在贴代码的基础上附上该链接。<br>对于提供什么样的代码， Stack Overflow给出了一个可参考的标准： MCVE， 即Minimal, Complete, and Verifiable example<br>Minimal: 最小的， 也就是尽可能的去掉和问题无关的部分。 如果你贴了一个几百行的代码， 很少有人愿意花时间去仔细看。 构造最小化例子的过程本身也是debug的过程。<br>Complete: 完整的， 一个简单的判断是：别人看到问题， 可以通过复制你提供的代码复现出问题吗？<br>Verifiable: 可验证， 描述问题尽可能具体， “the code doesn’t work”这样的描述就很不好。 如果编译不过， 要加上编译错误信息； 如果运行报错， 也同样要加上具体的错误信息； 如果结果和你的预期不一致， 要说清楚你的预期结果是什么， 为什么会这样想。<br>格式<br>Stack Overflow的编辑器是Markdown格式的， 如果你还不熟悉， 建议去学一下， 因为Markdown真的是一个只要10分钟就可以学会的语言。<br>大多数的格式问题都是出在贴代码的地方， 如果你发现你的代码是普通文本， 而没有语法高亮等功能， 那你很可能是格式搞错了。 最方便的方法就是选择所有代码， 然后按键盘Ctrl + K 即可。</p><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>有可能你的问题几分钟内就会有人回答， 也有可能有人对问题有疑问， 在评论中要求你解释。 可以评论@他们解释， 如果问题确实不够清晰， 编辑你的问题吧。 最后， 如果你自己发现了解答方法， 而还没人给出， 那就自己回答自己的问题吧。 自问自答是被鼓励的行为。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>看完上面我的唠叨， 是不是也感觉到Stack Overflow对新手的不友好了呢？ 但这是保持高质量内容的代价之一， 必须有一定的机制让低质量的问题不会泛滥， 才会有更多的人愿意花时间回答好的问题。 希望大家都能得到自己问题的答案， 有机会再讲讲如何回答问题。</p><h2 id="提问前的自问"><a href="#提问前的自问" class="headerlink" title="提问前的自问"></a>提问前的自问</h2><p>提问之前你做过研究吗？ &lt;注1&gt;<br>你是否说明了自己试过哪些方法解决问题？<br>你说明你使用的编程语言/平台了吗， 包括版本号？<br>如果你的问题包含代码， 你是否已经改写成最小且完整的程序？&lt;注2&gt;<br>如果你的问题包含代码， 你是否检查过代码格式？&lt;注3&gt;<br>如果你的代码不能编译， 问题中是否包含了编译错误信息？<br>如果你的问题不包含代码， 你确认不需要吗？<br>如果你的程序抛出了异常， 问题中是否包含异常信息和堆栈回溯(stack trace)？<br>如果你的程序的输出结果和预期不同， 你是否说明了你的预期结果是什么， 你为什么这么想， 以及程序的实际结果？<br>如果你的问题和本地化有关（语言，时区等）， 问题中是否包含了相关的信息？<br>你是否检查过问题的格式是否正确？<br>你是否检查过拼写和语法？&lt;注4&gt;<br>你是否认真读过自己的问题， 确认问题对一个不了解问题背景的人也能明白?<br>如果以上任何一个问题的答案是否定的话， 很可能你提问前需要再修改一下问题。 我知道这听上去像是不少工作， 但它能帮助你尽快的得到答案。别忘了你是在请求他人用自己的善心帮助你， 你有义务让他们的工作尽可能的简单。</p><p>注1： 如果你从“这怎么不工作了”到“应该去问个问题”只花了不到10分钟， 那很可能你的研究还不够。<br>注2： 理想情况下， 你的代码应该可以让回答者复制， 粘贴到编辑器， 编译， 运行， 然后就能看到问题输出。 命令行程序适用于这样的标准（除非你的问题和用户界面有关， 最好用命令行程序）。  去掉任何和问题无关的代码， 但保证可以复现问题。<br>注3： 代码最好不需要水平滚动， 这可能需要你从IDE复制代码之后做些额外的处理。 为了那些愿意帮助你的人花点时间把问题表达清楚吧。<br>注4： 我明白很多Stack Overflow用户母语不是英语， 我们并不要求完美， 只是希望你做过努力。如果你清楚自己英语不好， 找一个同事/朋友帮你改改吧。k</p><h1 id="答题相关"><a href="#答题相关" class="headerlink" title="答题相关"></a>答题相关</h1><h2 id="想法的萌芽"><a href="#想法的萌芽" class="headerlink" title="想法的萌芽"></a>想法的萌芽</h2><p>如果非要总结下我多年来是如何使用Stack Overflow的话，我的答案就是：打开网页，搜索问题，查看Stack Overflow的搜索结果，参考答案，最后再关掉网页。</p><p>我的生活已经离不开Stack Overflow了。但我从来没有对那些有用的回答做出过反馈，更别提自己提问题和回答问题了。</p><p>不过我最终还是意识到，Stack Overflow的成功正是建立在其众多用户的慷慨解答上。我从这个网站上收获了很多，却从未做出回报，因为没有任何人、任何规则的约束。每个问题、每个答案或者每个有帮助的评论的出现只是因为某人慷慨的写了出来。诚然，Stack Overflow也有一套激励机制去帮助它的发展，且用户获得徽章和威望的多少也是个未知数，且通常由其他用户决定。例如，如果你提了一个问题或者回答了一个问题，没有人有义务去赞同或者反对你。</p><p>多年来，我一直受益于它，但未对它尽过绵薄之力。我在网站上找到过一打有帮助的答案，但我甚至不曾为它们点个赞。</p><p>是时候回报Stack Overflow了！</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>   某天我在浏览徽章列表时发现，可以通过连续30天访问网站而获得一枚银色勋章。于是我决定将这个作为我的目标，通过30天不间断地浏览网站并且达到1000威望值。但我将只回答问题而不提问。</p><h2 id="完成情况"><a href="#完成情况" class="headerlink" title="完成情况"></a>完成情况</h2><p>正如下表所示，我只能算是勉强完成目标。</p><p>尽管我发现在访问量达到200的时候就会有100点威望值的福利作为回报，但是我也依然有一整个星期都颗粒无收的瓶颈期。理解并回答问题无疑是一个缓慢并需要一定方法的过程，要想达到我的目标，至少需要每天30点左右的威望值进账才可以。 </p><p>##经验之谈</p><p>Stack Overflow看起来就像一个纯粹的问答网站，但在我花了30天沉浸在回答问题的过程中后，发现了网站本身以及它所形成的社区的一些微妙的特点。以下是我所学到的一些：</p><p>“摘樱桃”</p><p>没过多久我就发现了网站上用户提问的速度之快。而我每天要做的只是：每小时花上几分钟刷新下问题页面，随机淘汰几个简单、不圆满的答案而已。除此之外，网站上的一些友好（有时并不十分友好）的竞争状况也显而易见。</p><p>我从择优的过程中学到了很多。</p><p>首先，确保你理解了问题。读完整个问题并且明确提问者想要的答案。如果你没有理解的话那么在评论中礼貌的问清楚。阅读标签也同样重要。不止一次我错误的回答了一个问题只因我自己假定了提问者所用的环境，显然这种情况可以通过阅读标签避免。</p><p>其次，不要为了快点回答问题而牺牲了答案的质量。错别字和语法错误不会对任何人有帮助，并且这些都可以通过放慢回答速度以及在提交答案前检查一遍来避免。换一种方式来说：拥有良好的书写格式和完整的答案更容易得赞，而残缺的答案自然不会。不要只为了回答问题而写一个快速但不完整的答案，然后不得不忙着补充忘记的点。我见过太多这样的答案，这样做也只会招来其他用户甚至包括操作员要求更多的解释。这种行为明显不利于用户提问和回答的发展。</p><p>最后，如果你正在撰写一个答案，一定要看一下已经存在的答案。如果你的答案和别人的几乎一样，那么你只需为别人的答案点个赞。如果他们的答案中缺了某些方面，那么你只需要在该答案的评论中去补充一下就可以了。</p><h2 id="求助吸血鬼"><a href="#求助吸血鬼" class="headerlink" title="求助吸血鬼"></a>求助吸血鬼</h2><p>   Stack Overflow上有一群被称为”求助吸血鬼”的人。这些用户以“从不放过任何机会获得别人的帮助 “而闻名。这种现象一直存在，可我一直不知道他们甚至有个专属用词，直到某天有个用户斥责一位问题提问者为“求助吸血鬼”我才知道。</p><p>   我就曾经为几个看起来像“求助吸血鬼”的用户回答过问题，接着就一发不可收拾了。他们通常采纳了我的答案接着在再答案下留言问一些新的毫无关系的新问题。</p><p>   我的处理方式就是（建议其它用户在遇到这种情况时也这样）：写一个评论告诉用户他的所作所为是不对的以及应该怎么做。当时我就建议他去Google一下这个新问题，如果找不到想要的答案再来Stack Overflow上问一个新的问题，而不是在一个用户的答案下不停的问一些毫无关联的问题。</p><p>   上面给出的Meta Stack Exchange链接上提供了很多在遇到这种求助吸血鬼时的有用回应。我还想说的一点就是，当普遍认可的答案却得到质疑时，首先应该做的是在该问题下做出评论，解释提问者可以自己修正这个问题。给用户一个改正自己错误的机会。这样的话，用户可能更能从这个网站上学到新的东西，你甚至还能为网站审核者节省时间！</p><h2 id="卖弄狼人"><a href="#卖弄狼人" class="headerlink" title="卖弄狼人"></a>卖弄狼人</h2><p>   卖弄狼人，我专门为与“求助吸血鬼”所造的名词。对于求助吸血鬼们来说，这些原本可能善意的用户简直就是恶魔的化身。</p><p>   当我发现求助吸血鬼的现象越来越严重的时候，有些用户采用粗暴且无用的方法制止他们。卖弄狼人们通常这样说：“这明显是一个家庭作业水平的问题”，“你难道都不试着Google一下么”，“不要问重复的问题！”。当我完成我的30天目标时，比起求助吸血鬼，我更烦这些卖弄狼人。</p><p>   我想对这些人说：请回答的更具建设性和有用一点。为提问者提供更常规的答案。我的这些建议对提问者也同样适用！如果你遇到一个卖弄狼人只需要忽视他们就行，树立一个好榜样，不要在评论里面针锋相对！</p><h2 id="关于反对票"><a href="#关于反对票" class="headerlink" title="关于反对票"></a>关于反对票</h2><p>   在这30天里，我一直尽我最大的努力为提问者做出一个好的、详细的答案。但是有时候会出现这样的现象：某个我的被采纳了的答案竟然没有一个人赞同，反而都是反对。</p><p>   这些否定深深得伤害了我。那些不赞同我的答案的用户都没有解释原因，甚至在我追问后也没有给出回答。我的答案被接受了，显然对于提问者来说这是一个好答案，但是我至今不懂为什么有那些反对票，甚至让我丢了两点威望值。</p><p>   Stack Overflow上并没有强制要求你在反对某个答案的时候解释原因，这样郁闷很久后，我觉得网站应该这样有这样的机制。在一个反对票下做出解释是体现网站人性化的一面。</p><p>   如何人性的在反对票下留言呢？我想了两种方法：</p><ul><li>如果有人已经在反对票中的评论解释了为什么投反对票，那么你只需要赞同一下这个评论就能引起回答者的注意了。</li><li>如果没有人解释你投反对票的原因，那么就在评论中写出问题或者答案需要改进的地方。</li></ul><h1 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h1><p>我只是个萌萌的搬运工，待我也在stackOverFlow上修行完成之后再来谈自己的经验。</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="http://blog.jobbole.com/101980/" target="_blank" rel="noopener">玩转 Stack Overflow 之提问篇</a></li><li><a href="http://blog.jobbole.com/75292/" target="_blank" rel="noopener">泡在 Stack Overflow 答题的 30 天</a></li><li><a href="https://www.zhihu.com/question/19562768" target="_blank" rel="noopener">国内为什么没有好的 Stack Overflow 的模仿者？</a></li><li><a href="http://www.infoq.com/cn/news/2016/03/Stack-Overflow-architecture-insi?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_presentations_clk" target="_blank" rel="noopener">Stack Overflow 2016最新架构探秘</a></li><li><a href="http://www.ifanr.com/337680" target="_blank" rel="noopener">CODE Keyboard：Stack OverFlow 联合创始人亲手操刀的极客机械键盘</a></li><li><a href="http://blog.jobbole.com/102810/?utm_source=blog.jobbole.com&utm_medium=relatedPosts" target="_blank" rel="noopener">为什么离不开 StackOverFlow？</a></li><li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">提问的智慧</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stackoverflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的oracle考试认证(OCJP)之路</title>
      <link href="2017/oracleJavaSeSliver/"/>
      <url>2017/oracleJavaSeSliver/</url>
      
        <content type="html"><![CDATA[<p>最近几天准备了一下java的oracle认证考试(OCJP),在网上查找资料奈何国内基本没太多有用的信息,还是费了一番功夫.</p><a id="more"></a><h2 id="为什么我要参加这个考试"><a href="#为什么我要参加这个考试" class="headerlink" title="为什么我要参加这个考试"></a>为什么我要参加这个考试</h2><p>有朋友建议我考一下这个证书,所以我花了些时间上网查了相关的资料.虽然国内的网上一大堆评论都是没什么用,含金量不高之类之类的.但是它毕竟是oracle的官方认证,我的动机大致如下:</p><ul><li>我本来就是半路出家,再静下心来过一遍java基础没什么不好,在这过程中我又巩固了不少知识.</li><li>虽然国情如此,但是有出国意愿的话这个证书还是很有必要的.</li></ul><h2 id="什么是-OCJP"><a href="#什么是-OCJP" class="headerlink" title="什么是 OCJP"></a>什么是 OCJP</h2><p>OCJP(Oracle Certified Java Programmer)是Oracle认证的Java程序员的简称，即Sun被Oracle收购之前的SCJP，是Java语言的拥有厂商对全球的Java开发人员进行的 技术水平认证。该认证在国际上获得了IT 公司的普遍认可， 是目前国际上最热门的IT认证之一。</p><h2 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h2><ul><li>青铜级考java基本语法</li><li>白银级考java基础api</li><li>黄金级考java高级api</li></ul><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>《thinking in java》,很好的一本书. 我的网盘上存的有 pdf版本: <a href="http://online.xiaomo.info/" target="_blank" rel="noopener">http://online.xiaomo.info</a></p><h2 id="该考哪个科目"><a href="#该考哪个科目" class="headerlink" title="该考哪个科目"></a>该考哪个科目</h2><p>oracle认证的科目繁多,让人看花了眼而且没有说明,这让很多想考scjp的朋友急坏了头,下面是我整理的科目</p><p><img src="https://image.xiaomo.info/ocjp/%E7%A7%91%E7%9B%AE%E8%AF%B4%E6%98%8E.png"></p><ul><li>说明:ocjp考试认证分为3个等级:青铜白银和黄金(听起来像是lol),只有黄金有前提条件(必须先拿到白银)</li><li>建议:因为题目比较基础,建议直接报白银,如今java9都出了,就不要再考6或7了,不然还得再考一次升上来</li><li>结论:报1Z0-808(全英文题目),我报的是1Z0-808-JPN(全日语),题目内容都是一样的</li><li>可点击此链接查看具体规则(抱歉没找到中文版): <a href="http://www.oracle.com/jp/education/certification/jse8-2489021-ja.html" target="_blank" rel="noopener">http://www.oracle.com/jp/education/certification/jse8-2489021-ja.html</a><h2 id="考试费用"><a href="#考试费用" class="headerlink" title="考试费用"></a>考试费用</h2>以上所有的报名费用都是158美元,大概在1077rmb.但是报名缴费只支持master card,jcb或者visa卡,我请日本的朋友刷jcb代付的. 淘宝上代付1150-1200之间</li></ul><h2 id="报名地址"><a href="#报名地址" class="headerlink" title="报名地址"></a><a href="https://wsr.pearsonvue.com/testtaker/signin/SignInPage.htm?clientCode=ORACLE" target="_blank" rel="noopener">报名地址</a></h2><p>注册一个 <a href="https://wsr.pearsonvue.com/testtaker/signin/SignInPage.htm?clientCode=ORACLE" target="_blank" rel="noopener">person vue</a>账号,然后根据步骤走就可以了. 遇到问题可以看这个 <a href="https://jingyan.baidu.com/article/72ee561a537855e16138df2b.html" target="_blank" rel="noopener">OCJP考试VUE约考流程</a>,oracle认证全球有很多地方可以考试,比如说我在杭州来说,最近的离我只有3公里.</p><h2 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h2><ul><li>报名之后按照指定时间提前15分钟到达考点,需要携带身份证和一张辅助证件(驾驶证,信用卡,市民卡等都可以)</li><li>验证身份证件和拍照认证</li><li>填写一个声明,关于不能作弊,不违反规则之类的东西</li><li>把身上所有的东西掏出来放到柜子里锁起来,考试时只能带柜子上的钥匙</li><li>小姐姐会给一个手写板,一支笔和纸巾进入房间答题(没人监考,但有监控,不要作弊).</li><li>上机考完1Z0-808所有题目(77题),共150分钟答题时间(可提前交卷)</li><li>交卷时前台小姐姐那里会同步打印一张回执单,告知你30分钟之内oracle会发邮件通知考试结果</li></ul><h2 id="考试结果"><a href="#考试结果" class="headerlink" title="考试结果"></a>考试结果</h2><p>收到的邮件内容:<br><img src="https://image.xiaomo.info/ocjp/mail.png"></p><p>登录之后查看到的考试结果:<br><img src="https://image.xiaomo.info/ocjp/test.png"></p><p>通过考试之后会得到一个徽章和电子证书<br><img src="https://image.xiaomo.info/ocjp/list.png"></p><p>证书<br><img src="https://image.xiaomo.info/ocjp/%E8%AF%81%E4%B9%A6.png"></p><p>徽章验证地址 : <a href="https://www.youracclaim.com/badges/78daff58-e1ce-4885-bcde-073a77b0fa97" target="_blank" rel="noopener">Oracle Certified Java Programmer, Silver SE 8 (Oracle Certified Associate, Java SE 8 Programmer) - JPN</a></p><h2 id="补充-2017-12-27"><a href="#补充-2017-12-27" class="headerlink" title="补充:2017-12-27"></a>补充:2017-12-27</h2><p>时隔一个月左右,我再次报了OCJP的 1z0-809-jpn科目.这个科目对java8的很多新特性都考察到了,个人觉得还是挺有难度的.</p><h3 id="大致说明"><a href="#大致说明" class="headerlink" title="大致说明"></a>大致说明</h3><ul><li>价格和808一样</li><li>地点和上次一次</li><li>题目内容为85题,答对65%及格,也就是最少要答对56道题.</li></ul><h3 id="考试结果-1"><a href="#考试结果-1" class="headerlink" title="考试结果"></a>考试结果</h3><p>当然是考过了,O(∩_∩)O哈哈哈~.不然就浪费了1000多的报名费</p><p>证书:<br><img src="https://image.xiaomo.info/ocjp/gold.png"></p><p>徽章验证地址: <a href="https://www.youracclaim.com/badges/e26ff57d-8004-499a-9016-d1cac718586d/twitter" target="_blank" rel="noopener">Oracle Certified Java Programmer, Gold SE 8 (Oracle Certified Professional, Java SE 8 Programmer) - JPN</a></p><p><a href="https://www.youracclaim.com/user/xiaomoinfo" target="_blank" rel="noopener">cclaim</a><br><img src="https://image.xiaomo.info/ocjp/all.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OCJP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装黑苹果的历程</title>
      <link href="2017/blackAppleSystem/"/>
      <url>2017/blackAppleSystem/</url>
      
        <content type="html"><![CDATA[<p>最近新买了一台主机，折腾着准备装win+mac双系统，记录一下以备后续需要。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>MSDN上的win10原版镜像</li><li>带有winPE的装机U盘(大白菜，老毛桃都可以)</li><li>transMac</li><li>mac镜像</li><li>确认自己的电脑是否支持UEFI模式</li></ul><h2 id="转换分区格式"><a href="#转换分区格式" class="headerlink" title="转换分区格式"></a>转换分区格式</h2><p>因为准备装10.13.1原版镜像，所以需要GRID(GPT)分区，查看步骤：我的电脑-设备管理器-磁盘工具-选择硬盘0或者磁盘1（这里不要选择分区）-右击属性-找到（卷）我们就可以看磁盘分区形式：GUID 分区表（GPT）<br>如果不是GRID，那么就插上U盘进入winPE，用DG分区<br>1、我们选择我们的系统磁盘。然后右键里面有一个转GPT格式后保存<br>2、选择C盘，右键然后选择“调整分区大小”，拆分一个300M左右的分区<br>3、新建分区，选择EFI类型，大小为300M<br>4、 保存重启</p><h2 id="制作Mac镜像"><a href="#制作Mac镜像" class="headerlink" title="制作Mac镜像"></a>制作Mac镜像</h2><ol><li>插入U盘（插到USB2.0接口），在U盘选项上右键点击你的U盘。选择Format Disk for mac将U盘格式化。</li><li>右键选择你的U盘。选择Restor with disk image.</li><li>选择下好的dmg镜像。</li></ol><h2 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h2><ol><li>选择从UEFI的u盘启动，然后苹果读条之后选择 安装系统。</li><li>选择磁盘工具，格掉要装位置的磁盘。（扩展日志格式）</li><li>选择安装mac到磁盘。</li><li>按照流程安装，整个过程需要重启3次。</li></ol><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>驱动太难装………..</p><hr><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://osx.cx/course/10789.html" target="_blank" rel="noopener">macOS High Sierra 10.13.x 最新黑苹果原版安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本游记</title>
      <link href="2017/JapanTravel/"/>
      <url>2017/JapanTravel/</url>
      
        <content type="html"><![CDATA[<p>日本游记，记录为期9天的日本之旅。第一次出国，便是自由行。有人说是艺高人胆大，我倒觉得是难得自由。下次出去玩，我还是会选择自由行。所有照片放在空间相册<a href="https://user.qzone.qq.com/83387856/photo/" target="_blank" rel="noopener">日本之旅</a></p><a id="more"></a><h1 id="行程前的准备"><a href="#行程前的准备" class="headerlink" title="行程前的准备"></a>行程前的准备</h1><h3 id="护照-200RMB一本"><a href="#护照-200RMB一本" class="headerlink" title="护照(200RMB一本)"></a>护照(200RMB一本)</h3><p>一般来说是在户籍所在地办理，用时1周左右，可以自取和邮寄。</p><h3 id="签证-旅行社代办300RMB"><a href="#签证-旅行社代办300RMB" class="headerlink" title="签证(旅行社代办300RMB)"></a>签证(旅行社代办300RMB)</h3><p>自己办需要的材料比较多，觉得麻烦可以直接找代办，就是价格稍贵。</p><h3 id="住处-airbnb-booking"><a href="#住处-airbnb-booking" class="headerlink" title="住处(airbnb,booking)"></a>住处(airbnb,booking)</h3><p>airbnb是民宿，booking是酒店，如果是一行人的话住民宿会比较划算。</p><h3 id="JR-PASS-1600RMB"><a href="#JR-PASS-1600RMB" class="headerlink" title="JR PASS(1600RMB)"></a>JR PASS(1600RMB)</h3><p>可以乘坐日本所有的JR,如果行程规划只是在一个城市就没有必要买，因为我们要去富士山和大阪所以买了会省不少钱。</p><h3 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h3><p>买的春秋航空的廉价机票，往返2800/人。如果是平日只需要一半左右，国庆期间出游的人太太太多，所以溢价不少。</p><h3 id="电话卡-WIFI"><a href="#电话卡-WIFI" class="headerlink" title="电话卡(WIFI)"></a>电话卡(WIFI)</h3><p>直接买了1张可以使用一周的达摩卡（建议1人一张），不买4g卡可以去机场租wifi。</p><h2 id="google地图"><a href="#google地图" class="headerlink" title="google地图"></a>google地图</h2><p>人肉翻墙终于可以看看墙外的世界了,让google地图指引你前进的方向吧。</p><h3 id="日元"><a href="#日元" class="headerlink" title="日元"></a>日元</h3><p>怎么说呢，日本习惯用卡和现金，所以备点零钱去了刷银联也可以。但是钱嘛多带点毕竟有安全感（日本的治安不用担心钱的安全问题）</p><h3 id="一个18到24寸之间的密码箱"><a href="#一个18到24寸之间的密码箱" class="headerlink" title="一个18到24寸之间的密码箱"></a>一个18到24寸之间的密码箱</h3><p>去的时候尽量留空，因为回来的时候根本不够装啊。</p><p><img src="https://image.xiaomo.info/travel/JRPASS.jpg"></p><hr><p><img src="https://image.xiaomo.info/travel/%E6%8A%A4%E7%85%A7.jpg"></p><hr><p><img src="https://image.xiaomo.info/travel/%E8%BE%BE%E6%91%A9%E5%8D%A1.png"></p><hr><p><img src="https://image.xiaomo.info/travel/yen.png"></p><hr><h1 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h1><h2 id="9-27-杭州-上海-东京"><a href="#9-27-杭州-上海-东京" class="headerlink" title="9.27 杭州-上海-东京"></a>9.27 杭州-上海-东京</h2><p>中午从杭州出发，5点前到达上海浦东机场办值机登机，7点左右出发。<br><img src="https://image.xiaomo.info/travel/%E5%87%BA%E5%8F%91%E5%89%8D1.png"></p><hr><p>晚上11点左右到达东京羽田机场，然后万能的淘宝接机送我们到住处——浅草，因为日本是右舵靠左行，开着100多的速度一路上看着感觉好惊险刺激，总觉得要撞上了，不过我的担心是多余的。到达浅草大概夜里12点左右，并且在下雨，装上达摩卡打开google地图。为了找住的地方绕了有半个小时才找到位置，心情不是很美丽，不过到了住的地方老婆还是很开心，暖心的微笑。<br><img src="https://image.xiaomo.info/travel/%E5%88%B0%E5%AE%B6.jpg"></p><hr><h2 id="9-28-浅草-浅草寺-上野-银座"><a href="#9-28-浅草-浅草寺-上野-银座" class="headerlink" title="9.28 浅草-浅草寺-上野-银座"></a>9.28 浅草-浅草寺-上野-银座</h2><p>睡到自然醒，然后去浅草寺逛了好几个小时,在路上偶遇现场的幽默剧表演，老婆看的入迷拉都拉不走。不得不说在东京的外国人真的超多，中国的，韩国的，美国的，印度的，非洲的各种都能遇到，走着走着遇到一个韩国人搭讪让我帮忙。他们应该是家庭出游，一家人说了一大通听不懂的话然后站在一起让我拍照。到中午了，在日本吃的第一顿饭真是一言难尽。点了一份荞麦面，腥味重的可怕结果一点都没吃，后来去超市买了一大包零食。</p><p><img src="https://image.xiaomo.info/travel/%E6%B5%85%E8%8D%89/4.jpg"><br>有家店门口有个大青蛙，还挺萌的</p><hr><p><img src="https://image.xiaomo.info/travel/%E6%B5%85%E8%8D%89/2.jpg"><br>浅草寺，就在我们住的地方旁边，还是挺热闹的，还遇到了一家子韩国人让我帮忙拍合照。</p><hr><p><img src="https://image.xiaomo.info/travel/%E6%B5%85%E8%8D%89/3.jpg"><br>浅草的纪念品，然而我都没买</p><hr><p><img src="https://image.xiaomo.info/travel/%E6%B5%85%E8%8D%89/1.jpg"><br>在东京见到了久违的黄包车，还存在这个东西有点让我惊讶</p><hr><p>下午坐车去上野换JR PASS,决定换到从9.29-10.5号期间的票。<br><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/1.jpg"><br>上野JR站，我们的JP PASS票就是在这里兑换的</p><hr><p>之后坐车去银座逛商店，不得不说银座的建筑真的超级漂亮，地上找不到垃圾也找不到垃圾桶。银座应该算是有钱人的天堂吧,各种东西超级贵，逛了一下午没找到一件能下手的东西，穷人真的是很难过的说。<br><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/2.jpg"><br>银座繁华的商场</p><hr><p><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/3.jpg"><br>偶然遇到一辆日产的火红跑车，亮瞎了我的眼</p><hr><p><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/4.jpg"><br>sony大楼里的高科技，投影出来一个可点击的android的操作系统桌面，可以把任何地方当桌面用。</p><hr><p><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/5.jpg"><br>银座大黑屋，听说还挺出名的</p><hr><p>因为中午的阴影，晚上吃饭在麦当劳解决的。不用怀疑，麦当劳和肯德基在全世界都是一个味道。晚上我们比较早就回住处了，不过同行的小伙子去了居酒屋去玩到半夜1点多才回。<br><img src="https://image.xiaomo.info/travel/%E9%BA%A6%E5%BD%93%E5%8A%B3.jpg"><br>一个麦当劳套餐</p><hr><p><img src="https://image.xiaomo.info/travel/%E9%93%B6%E5%BA%A7/6.jpg"><br>看板上的广告都有这么萌的妹子，忍不住拍了一张</p><hr><h2 id="9-29-浅草-富士山"><a href="#9-29-浅草-富士山" class="headerlink" title="9.29 浅草-富士山"></a>9.29 浅草-富士山</h2><p>到日本玩不到富士山难免是一场遗憾,所以决定今天去富士山去玩。查了路线大概有150公里，需要3个多小时才能到。再加上出发的时间比较晚，到达富士山的时候己经下午了，因此没有爬山。只是在富士山下玩顺便吃了顿饭便开始返回。<br><img src="https://image.xiaomo.info/travel/%E5%AF%8C%E5%A3%AB%E5%B1%B11.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%AF%8C%E5%A3%AB%E5%B1%B12.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%AF%8C%E5%A3%AB%E5%B1%B13.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%AF%8C%E5%A3%AB%E5%B1%B14.jpg"></p><h2 id="9-30-浅草-秋叶原"><a href="#9-30-浅草-秋叶原" class="headerlink" title="9.30 浅草-秋叶原"></a>9.30 浅草-秋叶原</h2><p>今天在日本名古屋工作的朋友知道我们在东京便一起出发找我们一起玩，我们约定在秋叶原汇合，同行的另一个小伙伴要去买小学生书包我们便分头行头了。<br><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/0.jpg"><br>秋叶原的入口，进一步便是宅男天堂</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/10.jpg"><br>JR秋叶原站，旁边也有地铁站</p><hr><p>来到了传说中的宅男天堂，不过里面真的有好多化妆品啊，结果大部分时间都是陪妹子逛各种化妆品和药妆店。当然也去看了手办，本来打算帮同事带高达，不过找了很久都没有找到想要的那一款。<br><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/1.jpg"><br>巴比娃娃</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/2.jpg"><br>动物王国</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/3.jpg"><br>扭蛋机，比我在杭州国际动漫节玩的扭蛋机要便宜，这边的商店到处都有扭蛋机。</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/4.jpg"><br>在秋叶原体验街机的父子</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/5.jpg"><br>你的名字相关的名信片，不知道去哪买邮票就没买</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/6.jpg"><br>ps4版的初音，买不起</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/7.jpg"><br>同事让我帮忙找高达，都是这种小个子，我想要一个同人的大家伙。</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/8.jpg"><br>本来以为是个卡哇伊的小女孩，走近才发现是个洋娃娃</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/9.jpg"><br>洋娃娃正面照，很精致</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/11.jpg"><br>音乐猫，每只猫捏了都能发出不同的声音。</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/12.jpg"><br>遇到一个萌出血的双马尾妹子</p><hr><p><img src="https://image.xiaomo.info/travel/%E7%A7%8B%E5%8F%B6%E5%8E%9F/13.jpg"><br>忍不住又拍了一张</p><hr><h2 id="10-1-东京-大阪"><a href="#10-1-东京-大阪" class="headerlink" title="10.1 东京-大阪"></a>10.1 东京-大阪</h2><p>今天出发去大阪，坐了2个多小时的JR终于到达大阪，买了一张2500yen的大阪周游券。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/25.png"><br>一日游的卡</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/26.png"><br>附带了这么大的一本说明</p><hr><p>然后下了JR拿出地图寻找住处，然后突然伸出一个头看我们的手机，被吓了一下，结果是个热心的小伙子帮我们指路，语速超快，听的我们一行人n脸懵逼，然后带着我们去地铁站排队叮嘱了一大串才离开。不仅感慨大阪民风淳朴，热情好客，弄的我们都不好意思了。跟着google地图到来住处附近徘徊，遇到一个老太太，带着比较重的关西口音问我们要去哪里，然后她佝偻着身子一直带我们到住的门口，感动的无以言表。由于初到大阪，决定放好行李之后出去熟悉一下路线。正好我们住处的旁边有一条商店街。因为是周末过去的，所有有好多店关都关着的。我们沿着这条街一直走，都没有遇到几个人。不禁在想，如果是在国内一定是人从众众众 吧。<br><img src="https://image.xiaomo.info/travel/cat1.jpg"></p><hr><p>在路上偶遇中年夫妻开的中华料理店，不由自主的便进去了。点了好几个家常菜和老板娘说了一路的日语。结果点完菜她用浓浓的东北口音给她老公说话，真是蜜汁尴尬。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/2.jpg"><br>日本的中国饭店还是挺多的</p><hr><p>吃完饭去逛大阪的药妆店，不过买的东西并不多。后来非常后悔，因为大阪的东西真的比东京要便宜不少。回去的时候就买了一大吃零食和水果，如果能反悔，当时一定要在大阪把想买的东西都买了，可以省不少钱。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/4.jpg"><br>大阪商店街，一共有1-9条街</p><hr><p>由于逛的比较晚，准备回去的时候己经快夜间12点了。偶然抬头看着天空，简直把我惊到了，明亮的月亮加上白色的云，我发誓这辈子没看到过这种景色。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A9%E7%A9%BA.jpg"><br>如果在这种地方生活，一定会多活很多年的吧。</p><hr><h2 id="10-2-大阪一日游"><a href="#10-2-大阪一日游" class="headerlink" title="10.2 大阪一日游"></a>10.2 大阪一日游</h2><p>早上一大早起来，很不幸外面下起了雨。不过既然买了卡我们依然按照原计划去大阪城玩。第一站：通天阁，高度500多米,站在塔顶能够看到大阪80%以上的建筑，如果是晚上看的话一定很漂亮。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/5.jpg"><br>站在500多米的观景台上看下面的景色，白天一点都没有感觉</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/6.jpg"><br>对面的塔晚上会很漂亮，白天完全不行</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/7.jpg"><br>观景台楼下的迷你大阪城，精致到看每个人都栩栩如生（白天）。</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/10.jpg"><br>观景台楼下的迷你大阪城，精致到看每个人都栩栩如生（夜晚）</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/11.jpg"><br>也不知道这个铜人叫什么，反正很出名就是了</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/9.jpg"><br>纪念章，500日元一个，可以刻字</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/8.jpg"><br>带着这么萌的包出来心里没点数么。</p><hr><p>在这里还偶遇猴子表演，确实还挺有意思的。这里有很多土特产，不过让人心动的倒没遇到。在商店逛的时候遇到了假的白色恋人巧克力，名字叫《面白い恋人》真正的是叫《白い恋人》，小伙伴们要注意分辨。如果要带白色恋人巧克力去机场免税店吧，别的地方都是假的。<br><img src="https://image.xiaomo.info/travel/%E6%9C%89%E8%B6%A3%E6%81%8B%E4%BA%BA.jpg"></p><hr><p>第二站准备去大 天王寺动物园 ，结果去了被告知今天休息（详情看<a href="http://ask.qyer.com/question/3392370.html" target="_blank" rel="noopener">大阪周一休园</a>),整个人瞬间就不好了。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/12.jpg"><br>很可惜天王寺动物园周一休园，只能在门外拍张照表示来过</p><hr><p>然后去下一个游玩点 坐轮渡,全体披着雨衣坐观光船还是很壮观的。最前面有个导游顶着雨铿锵有力的解说着各个景点，不得不佩服日本人对工作的敬业态度。<br><img src="https://image.xiaomo.info/travel/%E6%B0%B4%E4%B8%8A%E5%B7%B4%E5%A3%AB.jpg"><br><img src="https://image.xiaomo.info/travel/%E9%9B%A8%E4%B8%AD1.jpg"></p><hr><p>第三站去了天保山坐世界上最大的摩天轮，为了排队透明舱多等了半个多小时，坐上去的时候并没有特别刺激的感觉，当升到顶的时候看风景是很漂亮的，如果想刺激去大阪影视城坐过山车挺好的。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/m3.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/15.jpg"><br>来到了世界上最大的天保山摩天轮，还下着小雨</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/16.jpg"><br>在摩天轮上看到外面的玻璃都是水</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/17.jpg"><br>从透明仓底部拍的比较清楚</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/24.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/m4.jpg"><br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/m1.jpg"><br>晚上的摩天轮果然最漂亮</p><hr><p>第四站坐游轮看了个各个码头的集装箱和两岸的风景，还可以把天保山摩天轮做背景拍照。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/18.jpg"><br>这个大妈指着让我去坐圣玛利亚帆船</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/19.jpg"><br>在船上看摩天轮依然这么大</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/20.jpg"><br>江对面的工厂</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/21.jpg"><br>帆船走远了，摩天轮越来越小</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/22.jpg"><br>大概有这么大</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/23.jpg"><br>对面的码头很热闹，很多集装箱。想到了docker…，程序员的思想跳跃就是大</p><hr><p>最后一站去空中展望台依旧不营业，真是罪过，错过这么多景点。由于一直下雨身上也淋了雨我们就准备回去休息了，不过老婆看起来玩的还挺开心的,在回去的路上也拍了几张。<br><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/1.jpg"><br>在大阪的街上闲逛</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A4%A7%E9%98%AA/3.jpg"><br>开这么萌的车出来会被打的</p><hr><h2 id="10-3-大阪-奈良公园"><a href="#10-3-大阪-奈良公园" class="headerlink" title="10.3 大阪-奈良公园"></a>10.3 大阪-奈良公园</h2><p>同行的小伙伴觉得奈良太远便去了大阪影视城玩，我和老婆便坐JR去了奈良。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/1.jpg"><br>这个是小鹿的人偶店<br>奈良的人真的很少，我们下车之后一度认为走错了位置。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/4.jpg"><br>这个其实是一个古代名人的后院</p><hr><p>一路问奈良公园的入口在哪，被问的人都一脸懵逼的看着我，说这边一大片都是奈良公园，然后走着走着看到一个门收费200日元我们便进去了，进去才发现是一个古代名人的后院所以我们准备直接出来，那个收费叫知道我们走错地方还准备退我钱我谢绝了。后来走了很久看到一个地图才恍然大悟，奈良是免费的没有设立入口,从哪都可以进。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/3.jpg"><br>在去公园的路上遇到了一个湖</p><hr><p>在公园见到了传说中的小鹿，喂它吃东西还会点头表示感谢。遇到这么萌的小鹿真是太高兴了。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/25.jpg"><br>一只鹿</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/6.jpg"><br>在公园门口穿和服的女人</p><hr><p>中午饭了就在景区吃饭随意找了一家荞麦面馆。按照中国的习惯我己经做好了被宰的准备，但是很意外的价格很亲民，吃饭的时候我们迎面看到了一座特别漂亮的山然后忍不住问店员能不能爬。然后热心的老婆婆拿了一张地图过来一边讲一边画路线，标记上哪一段路程大概花费多少分钟，简直无法表达感激之情。</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/8.jpg"><br>对面的房子是春日大社，久仰大名</p><hr><p>吃完饭按照老婆婆的线路图往前走，看到了传说中的春日大社和美术馆，因为被山上的景色吸引我们便没有多做停留直接往山那边的方向走。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/9.jpg"><br>从这条路可以上山</p><hr><p>爬山前管理员细心的告诉我们要准备点吃的和喝的，用蹩脚的英语说 no drink,not shop。听了好几遍才反应过来她说的什么意思，有时候不同的语言表达真是太有意思了。爬山的过程的辛苦的，但是爬到一半的时候回头看山下的景色，看起来真是太惊艳了。<br><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/2.jpg"><br>下过雨的松树看起来很绿</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/17.jpg"><br>在半山腰感觉己经挺高了</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/26.jpg"><br>在山上的各个地方都能看见小鹿，悠闲的吃着草，想起了小时候在山上放牛的日子。</p><hr><p>在山上感觉整个人都是轻松的，不用考虑工作，不用考虑生活，这一刻静静的享受这美景。</p><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/11.jpg"><br>在半山腰看大阪城</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/16.jpg"><br>顺着这么路可以继续爬山</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/18.jpg"><br>半山腰的检票口，遇到两个美国人</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/20.jpg"><br>在山顶看大阪城</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/21.jpg"><br>有个大概70岁左右的老爷爷坐在山顶的长凳上休息，真佩服他们的体力</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/22.jpg"><br>老婆在山顶上高兴的撒欢子跑</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/24.jpg"><br>在山顶上睡觉的老外，他老婆抱着孩子跑的我都看不到了</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/27.jpg"><br>下山的路</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/28.jpg"><br>再看一眼风景</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/29.jpg"><br>长的奇怪的树</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/30.jpg"><br>下山了</p><hr><p><img src="https://image.xiaomo.info/travel/%E5%A5%88%E8%89%AF/31.jpg"><br>遇到很多来若草山玩的小学生，一个个的都好萌</p><hr><p>从奈良回来己经8点多了，由于第二天准备回东京所以趁晚上再出去转转买个PS4玩玩。到电器街的时候大概9点多了，发现各个商场都在准备收拾关门了感觉很遗憾。老婆一直说再找找，我们就一直逛终于遇到了一个卖电子设备的店没关门。大阪和东京的商店的区别是东京大部分店都有中国店员，但是大阪基本上都没有。但是我们在这个店里遇到了一个说中文特别标准的日本女孩，瞬间觉得她很厉害。因为她说的很标准我把她当成中国人了就语速较快的和她讲中文，但是发现她有点发愣我才反应过来她不是中国人。就这样我们中文+日语沟通着，最后成功的买回了一台价值3万多日元的PS4。<br><img src="https://image.xiaomo.info/travel/ps4.jpg"></p><hr><h2 id="10-4-大阪-东京"><a href="#10-4-大阪-东京" class="headerlink" title="10.4 大阪-东京"></a>10.4 大阪-东京</h2><p>今天睡到自然醒然后起床收拾东西准备回东京，直接去机场然后到机场免税店逛。到了机场问了工作人员得知飞机起飞前3个小时才能进，我们只能把行李暂寄在机场去银座和秋叶原逛街。<br><img src="https://image.xiaomo.info/travel/airport1.jpg"><br>在秋叶原狠心买了一块2万日元的太阳能机械表和6000日元的香水(送给老妈)，老婆买了一套雪肌精和一堆化妆品。把剩下的钱全部花光了，这算是最后的狂欢吧。<br><img src="https://image.xiaomo.info/travel/%E6%88%90%E6%9E%9C.jpg"><br>在机场免税店发现可以刷支付宝，于是买了几盒白色恋人巧克力，抹茶饼干和一条sevenStar的香烟，支付宝自动换算成人民币扣款还减了20块钱，很好很强大给个好评。<br><img src="https://image.xiaomo.info/travel/alipay1.png"></p><hr><h2 id="10-5-东京-上海-杭州"><a href="#10-5-东京-上海-杭州" class="headerlink" title="10.5 东京-上海-杭州"></a>10.5 东京-上海-杭州</h2><p>0点左右我们开始办检票登机，发现飞机上基本上都是中国人连空姐都是中国人，有种己经回国了的错觉。我困的不行上飞机就想睡觉，老婆兴奋的像个孩子一样说外面的风景好漂亮，拉着我和她一起看风景，她成功的赶跑了我的瞌睡一起看着飞机转弯、加速、起飞、爬升，一直到半夜2点多才睡着。<br><img src="https://image.xiaomo.info/travel/air.jpg"></p><hr><p>由于时差原因到上海的时候才半夜3点左右，下了飞机去转盘取行李。真是一脸懵逼，上面一件行李都没有。站着像望夫石一样等了近半个小时行李才一件一件的出来。但是在日本的时候刚下飞机所有的行李都全部放出来了,真的无力吐槽中国的办事效率。<br><img src="https://image.xiaomo.info/travel/limotsu.jpg"></p><hr><p>拿到行李的时候己经快4点了，我们叫了个接机的司机直接送我们去上海虹桥火车站坐火车回杭州，再次感受到了天朝的威力,早上6点钟人多的都挤不动，一上车马上就有一群人冲进去抢座位，根本不管什么先下后上，才回来我还真不适应，等我反应过来的时候我己经被挤出来了。<br><img src="https://image.xiaomo.info/travel/people.jpg"></p><hr><p>再次回来这个熟悉而又无奈的地方，为期9天的行程结束了。<br><img src="https://image.xiaomo.info/travel/hangzhoudong.jpg"></p><hr><h1 id="对日本初印象"><a href="#对日本初印象" class="headerlink" title="对日本初印象"></a>对日本初印象</h1><h3 id="公共场合都非常安静"><a href="#公共场合都非常安静" class="headerlink" title="公共场合都非常安静"></a>公共场合都非常安静</h3><p>不管是在飞机上，地铁上还是JR上都比较安静，可能是因为有不少人在睡觉的原因吧。印象比较深刻的是有个小孩哭了,他妈妈告诉她不要哭了不然会吵到别人，然后小孩子就停止哭泣了，真是羞愧难当。<br><img src="https://image.xiaomo.info/travel/book.jpg"></p><hr><h3 id="日本一年四季都喝冰水，所以如果你点餐时如果未做要求都会上冰水。"><a href="#日本一年四季都喝冰水，所以如果你点餐时如果未做要求都会上冰水。" class="headerlink" title="日本一年四季都喝冰水，所以如果你点餐时如果未做要求都会上冰水。"></a>日本一年四季都喝冰水，所以如果你点餐时如果未做要求都会上冰水。</h3><p>有不解的看知乎吧 <a href="https://www.zhihu.com/question/21832177" target="_blank" rel="noopener">日本人为什么喜欢喝冰水？</a>,主要是我在亲爱的祖国喝冷水会拉肚子。<br><img src="https://image.xiaomo.info/travel/ice.jpg"></p><hr><h3 id="日本坐手扶梯都是自觉靠右站，左侧留给赶时间的人通过。"><a href="#日本坐手扶梯都是自觉靠右站，左侧留给赶时间的人通过。" class="headerlink" title="日本坐手扶梯都是自觉靠右站，左侧留给赶时间的人通过。"></a>日本坐手扶梯都是自觉靠右站，左侧留给赶时间的人通过。</h3><p>这似乎己经成了一种骨子里的习惯，如果所有人都站成一排自己站旁边，也会觉得脸红的吧。<br><img src="https://image.xiaomo.info/travel/shoufuti.jpg"></p><hr><h3 id="日本坐电梯位于电梯按钮位置的人会最后出来"><a href="#日本坐电梯位于电梯按钮位置的人会最后出来" class="headerlink" title="日本坐电梯位于电梯按钮位置的人会最后出来"></a>日本坐电梯位于电梯按钮位置的人会最后出来</h3><p>因为选择站在这里就有一个职责,要让所有人安全的进出，所以会一直按着开门的按钮等所有人离开再出来，如果外面有人准备进来但是因为有事没进来一定会鞠躬道歉。<br><img src="https://image.xiaomo.info/travel/dianti1.png"></p><hr><h3 id="日本所有商场基本上都是8点关门，秋叶原则是10点。"><a href="#日本所有商场基本上都是8点关门，秋叶原则是10点。" class="headerlink" title="日本所有商场基本上都是8点关门，秋叶原则是10点。"></a>日本所有商场基本上都是8点关门，秋叶原则是10点。</h3><p>不管多么繁华的地方，到了8点以后基本上都看不到有在营业的商场了。我好奇问了一下，说是因为老板付不起加班费(正常工资的2倍到3倍)，所以到点基本上都下班了。<br><img src="https://image.xiaomo.info/travel/yinzuo1.png"></p><hr><h3 id="日本没有假货，但是也有坑"><a href="#日本没有假货，但是也有坑" class="headerlink" title="日本没有假货，但是也有坑"></a>日本没有假货，但是也有坑</h3><p>在日本最放心的就是没有假货，但是我还是差点被坑了。原因是那个白色恋人巧克力(白い恋人)，我在大阪的商店看到了有趣的恋人(面白い恋人),当时差点认错。我查了一下这个产品己经被起诉了，但是不知道为什么还一直在卖。侵权事件请看 <a href="http://japan.people.com.cn/35467/7659715.html" target="_blank" rel="noopener">日本名点“白色恋人”诉“有趣恋人”侵犯商标权</a><br><img src="https://image.xiaomo.info/travel/%E6%9C%89%E8%B6%A3%E6%81%8B%E4%BA%BA.jpg"></p><hr><h3 id="日本所有的商品价格标签都会有两个价格-含税价和不含税价，真正的明码标价，童叟无欺。"><a href="#日本所有的商品价格标签都会有两个价格-含税价和不含税价，真正的明码标价，童叟无欺。" class="headerlink" title="日本所有的商品价格标签都会有两个价格:含税价和不含税价，真正的明码标价，童叟无欺。"></a>日本所有的商品价格标签都会有两个价格:含税价和不含税价，真正的明码标价，童叟无欺。</h3><p>国内都是稀里糊涂，或许是因为税太高了，不敢标出来。我买个15万的车增值税出了2万多，购置税出了1万多，真是呵呵了。<br><img src="https://image.xiaomo.info/travel/price1.png"></p><hr><h3 id="日本的铁路和地铁一样方便"><a href="#日本的铁路和地铁一样方便" class="headerlink" title="日本的铁路和地铁一样方便"></a>日本的铁路和地铁一样方便</h3><p>日本铁路叫JR,每个站点外面都有自动售票机（当然也有人工窗口），随买随走不用记名。<br><img src="https://image.xiaomo.info/travel/jrji1.jpg"></p><hr><h3 id="日本的红绿灯在变绿后会发出声音，提示行人可以通过了"><a href="#日本的红绿灯在变绿后会发出声音，提示行人可以通过了" class="headerlink" title="日本的红绿灯在变绿后会发出声音，提示行人可以通过了"></a>日本的红绿灯在变绿后会发出声音，提示行人可以通过了</h3><p>并且颜色看着很不习惯，绿灯并不是绿色的，而是有点蓝色的感觉。在日本并不是100%没有人闯红灯，在小道上没车的时候偶尔也会看到红灯时有人通过，但不会出现中国式过马路。<br><img src="https://image.xiaomo.info/travel/honglvdeng.jpg"></p><hr><h3 id="日本能用支付宝的地方并不多-刷银联卡会更划算-打9-5折"><a href="#日本能用支付宝的地方并不多-刷银联卡会更划算-打9-5折" class="headerlink" title="日本能用支付宝的地方并不多,刷银联卡会更划算(打9.5折)"></a>日本能用支付宝的地方并不多,刷银联卡会更划算(打9.5折)</h3><p>听国内吹嘘的多么牛逼，支付宝己打开全球市场。虽然能用是事实，但是支持的店铺很少，机场免税店可以用、银座部分商场可以用，别的地方看到的很少，多数情况是付现金或刷卡。<br><img src="https://image.xiaomo.info/travel/alipay1.png"></p><hr><h3 id="所有的服务台-不管是柜台还是收银台-都会有一个小盘子"><a href="#所有的服务台-不管是柜台还是收银台-都会有一个小盘子" class="headerlink" title="所有的服务台(不管是柜台还是收银台)都会有一个小盘子"></a>所有的服务台(不管是柜台还是收银台)都会有一个小盘子</h3><p>付钱也好找零也好抑或是小票，都会放在小盘子里自取。可能因为日本用硬币情况下太多，放个盘确实会方便很多。<br><img src="https://image.xiaomo.info/travel/shouyin1.jpg"></p><hr><h3 id="在日本问路要谨慎"><a href="#在日本问路要谨慎" class="headerlink" title="在日本问路要谨慎"></a>在日本问路要谨慎</h3><p>在日本旅游期间我问路次数<br>算是比较多的，问到后面我都不好意思开口了。如果你在路上遇到一个人想问路说一句”あの、すみません(对不起，打扰一下)”、对方一定会停下脚步答到”はい、なんでしょうが(好的，请问有什么事？)”,然后芭啦芭啦给你讲怎么走。如果讲完还是没听懂，对方便会说 “ご案内します(请让我给你带路吧)”,然后跟着走就好了。到了之后他/她还会给你鞠躬道谢，这是我最接受不了的。本来麻烦了别人还要还要道谢，这让我很愧疚。总计问路多少次没统计，但是印象深刻的有一个老大爷，带着我走了5分钟左右一直把我带到地铁口，还准备带我下去买票。还好我说了接下来我自己去就好了，他才离开。第二个是中年大叔(或许不是本地人)，我问了他也不知道然后看我手机开着地图然后就带我绕了一圈还是没找到结果把我带到警察局了，让我问警察。(笑哭) 第3个是一个30多岁的阿姨，在地铁站给我讲了很久差点错过电车，在最后一秒跳上车，然后我忍不住深深的鞠了一躬表示道谢和歉意。第4个是一个年轻小伙子，是我们刚从东京到大阪下车在地铁里面徘徊，他上来问我们要去哪。我们把住宿地址给他看了之后便芭啦芭啦语速超快的讲了至少有3分钟，然后我们基本上都没听懂真是迷之尴尬，然后他就直接带着我们去坐车。才开始着实吓了我一跳。最后一个是在大阪天王寺公园我遇到一个阿姨问她这附近地铁在哪，才开始她讲日语发现我们听不大懂开始用蹩脚的英语和我们沟通，我们任性的用着半吊子日语回复，真是神奇的体验。<br><img src="https://image.xiaomo.info/travel/wenlu1.png"></p><hr><h3 id="日本的水果和零食特别贵"><a href="#日本的水果和零食特别贵" class="headerlink" title="日本的水果和零食特别贵"></a>日本的水果和零食特别贵</h3><p>以前听说日本的旅客来中国旅<br>游看到我们拿着勺子挖西瓜吃简直不敢相信。我现在是信了，他们苹果是按个卖的，大概4-5rmb一个。零食也很贵，随便一包都至少得10+rmb。我在想，日本人不吃零食和水果么。我怀疑我老婆在日本呆久了真能吃零食吃到我怀疑人生。<br><img src="https://image.xiaomo.info/travel/xigua1.jpg"></p><hr><h3 id="日本的交通很贵"><a href="#日本的交通很贵" class="headerlink" title="日本的交通很贵"></a>日本的交通很贵</h3><p>一站最低10块钱。我猜想是日本的地铁网太密集了，导致于很多在跑的地铁很大一部分人都坐不满，为了避免亏损太多，定价也很高。听说可以用西瓜卡刷地铁，不知道会不会便宜一点。<br><img src="https://image.xiaomo.info/travel/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E8%BD%A6%E7%A5%A8.jpg"></p><hr><h3 id="日本地铁大部分时间都有位置"><a href="#日本地铁大部分时间都有位置" class="headerlink" title="日本地铁大部分时间都有位置"></a>日本地铁大部分时间都有位置</h3><p>我很奇怪明明有很多座位，但是很多人就是愿意站着，而且有部分人还是50岁以上的中老年人。反正我看到有座位一定会去坐的，出去玩每天都3万步，简直累趴了。<br><img src="https://image.xiaomo.info/travel/chexiang.jpg"></p><hr><h3 id="日本有站着吃面的面馆"><a href="#日本有站着吃面的面馆" class="headerlink" title="日本有站着吃面的面馆"></a>日本有站着吃面的面馆</h3><p>才开始我很好奇站着怎么吃，发现那位穿西装的大叔吃的那么自然。我知道盯着人看不礼貌，所以扫了一眼没看一直看。<br><img src="https://image.xiaomo.info/travel/%E7%AB%99%E7%9D%80%E5%90%83%E9%A5%AD.JPEG"> </p><hr><h3 id="进屋要脱鞋"><a href="#进屋要脱鞋" class="headerlink" title="进屋要脱鞋"></a>进屋要脱鞋</h3><p>不脱鞋会让人很困扰，我们去和服店看衣服时遇到一个中国女孩直接穿鞋进去了。然后马上被屋主带出来了，然后立刻去拿抹布去擦，让人很难为情。门口都会备拖鞋<br><img src="https://image.xiaomo.info/travel/tuoxie1.jpg"> </p><hr><h3 id="不打听别人的家事，更不要说隐私。"><a href="#不打听别人的家事，更不要说隐私。" class="headerlink" title="不打听别人的家事，更不要说隐私。"></a>不打听别人的家事，更不要说隐私。</h3><p>在一起工作十几年，不知道对方有几个兄弟姐妹。福原爱在接受日本媒体的采访时说，中国记者什么都问，问得直想哭。<br><img src="https://image.xiaomo.info/travel/fuyuanai.jpg"> </p><hr><h3 id="日本的自动贩卖机多到不敢让人相信"><a href="#日本的自动贩卖机多到不敢让人相信" class="headerlink" title="日本的自动贩卖机多到不敢让人相信"></a>日本的自动贩卖机多到不敢让人相信</h3><p>不管在多偏的乡下，只要有人住的地方都有自动贩卖机，这点真心太方便了。<br><img src="https://image.xiaomo.info/travel/%E8%87%AA%E5%8A%A8%E8%B4%A9%E5%8D%96%E6%9C%BA.png">    </p><hr><h3 id="日本的垃圾桶很少"><a href="#日本的垃圾桶很少" class="headerlink" title="日本的垃圾桶很少"></a>日本的垃圾桶很少</h3><p>出去玩做好把垃圾背回家的准备。要么走很远都遇不到垃圾桶，要么一遇到就是一大排（分很多种类）。我们居住的生活垃圾最后都留给房东自己处理了，因为对我们来说相当棘手啊。<br><img src="https://image.xiaomo.info/travel/%E5%9E%83%E5%9C%BE%E7%AE%B11.jpg">       </p><hr><h3 id="日本的出租车门是自动的"><a href="#日本的出租车门是自动的" class="headerlink" title="日本的出租车门是自动的"></a>日本的出租车门是自动的</h3><p>虽然出国之前我们也知道，但是多年养成的习惯还是会随手去关门，然后被司机礼貌的提醒这个门是自动的，感觉超尴尬的。<br><img src="https://image.xiaomo.info/travel/%E8%87%AA%E5%8A%A8%E9%97%A8.png"> </p><h3 id="日本的地铁进口和出口是通用的"><a href="#日本的地铁进口和出口是通用的" class="headerlink" title="日本的地铁进口和出口是通用的"></a>日本的地铁进口和出口是通用的</h3><p>如果你正在出去，另一面会显示一个红色的叉提醒别人这个门暂时不能用，反之亦然。<br><img src="https://image.xiaomo.info/travel/%E6%94%B9%E6%9C%AD%E5%8F%A3.png"></p><hr><h3 id="日本是一个高度自助的国度"><a href="#日本是一个高度自助的国度" class="headerlink" title="日本是一个高度自助的国度"></a>日本是一个高度自助的国度</h3><p>好像日本是一个不担心路人不给钱，破坏自助设备的国家，到处都是自动贩卖机。其实，不仅仅是卖饮料，日本的超市，医院，加油站等等都实现了自助付款，不懂日文的话会有些很不方便。我去入住了东京和大阪的民宿全程都没有见到房东，但是走的时候我们会去房间好好整理一下，还获得了房东的夸奖。还有去商场买衣服的时候旁边有很多台机器，把衣服放进去会显示价格，然后投币就可以把衣服拿走了，当然袋子就在机器边上，就是这么自助，超级不适应的说。下面的是airbnb的房东的评价：<br><img src="https://image.xiaomo.info/travel/airbnb%E8%AF%84%E4%BB%B7.png">                  </p><h1 id="开销"><a href="#开销" class="headerlink" title="开销"></a>开销</h1><ul><li>机票 2800/人</li><li>接机 400/次</li><li>JR PASS 1600/张</li><li>交通约 50/天/人</li><li>大阪周游券 300/人</li><li>住宿 350/天/人</li><li>吃饭 50/顿/人</li><li>购物 约10000rmb左右</li></ul><p>两个人合计2.5万RMB左右。</p><h1 id="购物清单"><a href="#购物清单" class="headerlink" title="购物清单"></a>购物清单</h1><ul><li>注意：发票会订在护照上要保存好，过海关时可能会检查。免税(8%)化妆品过海关前不要开封，不然要交税。<br>PS4、游戏碟、手表、雪肌精、Beauteye、玫瑰滴眼液、FX银瓶滴眼液、龙角散、白色恋人、七星香烟、香水、zippo打火机、太田胃药、大正制药口腔溃疡贴、小儿退烧贴、大麦若叶、巧克力零食、坚果、小红丸、MINON、化妆水、EVE止疼药、儿童沐浴液、伊藤园绿茶、Ipsa粘土面膜酵素X酵母<br><img src="https://image.xiaomo.info/travel/%E6%88%90%E6%9E%9C.jpg"></li></ul><h1 id="值得买但没买的东西-网上搜集"><a href="#值得买但没买的东西-网上搜集" class="headerlink" title="值得买但没买的东西(网上搜集)"></a>值得买但没买的东西(网上搜集)</h1><h2 id="护肤品："><a href="#护肤品：" class="headerlink" title="护肤品："></a>护肤品：</h2><ul><li>SK2神仙水</li><li>Albion奥尔滨健康水</li><li>Albion渗透乳</li><li>Mandom曼丹眼唇卸妆油</li><li>Kose高丝卸妆油</li><li>Rosette硫磺祛痘膏</li><li>Rosette海泥洗面奶</li><li>Smile suisai酵素洁面粉</li><li>Skinlife泡沫洗面奶</li><li>Shiseido资生堂洗颜专科</li><li>Albion奥尔滨健康皂</li><li>IPSA化妆棉</li><li>Unicharm1/2省水化妆棉 </li></ul><p><img src="https://image.xiaomo.info/travel/%E6%B4%97%E9%9D%A2%E5%A5%B6.png"><br><img src="https://image.xiaomo.info/travel/%E9%98%B2%E6%99%92%E9%9C%9C.png"></p><h2 id="化妆品："><a href="#化妆品：" class="headerlink" title="化妆品："></a>化妆品：</h2><ul><li>Impress granmula 端正环采顶级粉霜</li><li>CPB肌肤之钥高光</li><li>CPB肌肤之钥遮瑕棒</li><li>Kate眉粉</li><li>Kate眼影</li><li>Kissme睫毛膏</li><li>Kissme眼线笔</li><li>Canmake棉花糖粉饼</li><li>DHC唇膏</li><li>Shiseido资生堂药用唇膏</li><li>Anessa安耐晒金瓶</li><li>Anessa安耐晒银瓶</li><li>ALLIE防晒</li><li>Narisup娜丽丝防晒喷雾</li><li>Deonatulle止汗石</li><li>Shiseido资生堂131粉刷</li><li>Shiseido资生堂119粉扑</li><li>Shiseido资生堂睫毛夹</li><li>Shiseido资生堂眉刀</li></ul><p><img src="https://image.xiaomo.info/travel/%E5%8D%B8%E5%A6%86%E6%B0%B4.png"><br><img src="https://image.xiaomo.info/travel/%E9%99%B6%E7%93%B7%E5%88%80.png"><br><img src="https://image.xiaomo.info/travel/%E5%8C%96%E5%A6%86%E5%93%81.png"><br><img src="https://image.xiaomo.info/travel/%E9%9D%A2%E8%86%9C.png"><br><img src="https://image.xiaomo.info/travel/sk2.png"></p><h2 id="日用品："><a href="#日用品：" class="headerlink" title="日用品："></a>日用品：</h2><ul><li>Lycee乐敦小红花滴眼液</li><li>狮王滴眼液</li><li>Kissyou负离子牙刷</li><li>Smile cosmetique美白牙膏</li><li>狮王美白牙膏</li><li>Ora2美白牙膏</li><li>花王泡沫染发剂</li><li>Hair Recipe银杏果蜂蜜洗发水</li><li>reveur无硅洗发水</li><li>资生堂Fino发膜</li><li>树之惠足贴</li><li>花王蒸汽眼罩</li><li>bold洗衣液 </li><li>Lenor Eau deLuxe衣物柔顺剂</li><li>汉方天然果蔬清洁贝壳杀菌粉</li><li>陶瓷刀</li><li>匠牌指甲刀</li><li>小学生书包</li></ul><p><img src="https://image.xiaomo.info/travel/%E7%89%99%E8%86%8F.png"><br><img src="https://image.xiaomo.info/travel/%E7%89%99%E5%88%B7.png"><br><img src="https://image.xiaomo.info/travel/%E6%8A%A4%E5%94%87.png"><br><img src="https://image.xiaomo.info/travel/%E6%8A%A4%E5%8F%91%E7%B1%BB.png"><br><img src="https://image.xiaomo.info/travel/%E4%BF%9D%E6%B8%A9%E6%9D%AF.png"></p><h2 id="药品："><a href="#药品：" class="headerlink" title="药品："></a>药品：</h2><ul><li>Crystal硅素水</li><li>药王酵素100</li><li>新谷夜酵素</li><li>DHC维生素</li><li>小林制药Breath care口气清新薄荷丸</li><li>小林制药液体创可贴</li><li>AG鼻塞喷雾剂</li><li>狮王祛痘膏 </li><li>白兔祛痘膏 </li><li>浅田饴</li><li>大正制药感冒颗粒</li></ul><p><img src="https://image.xiaomo.info/travel/%E8%8D%AF%E5%93%811.png"><br><img src="https://image.xiaomo.info/travel/%E8%8D%AF%E5%93%812.png"><br><img src="https://image.xiaomo.info/travel/%E7%9C%BC%E8%8D%AF%E6%B0%B4.png"><br><img src="https://image.xiaomo.info/travel/%E6%84%9F%E5%86%92%E8%8D%AF.png"><br><img src="https://image.xiaomo.info/travel/%E8%86%8F%E8%8D%AF.png"><br><img src="https://image.xiaomo.info/travel/%E4%BF%9D%E5%81%A5%E7%B1%BB.png"></p><h2 id="食品："><a href="#食品：" class="headerlink" title="食品："></a>食品：</h2><ul><li>Royce生巧克力 </li><li>Royce巧克力饼干</li><li>Tokyo Banana东京香蕉蛋糕 </li><li>Potato Farm薯条三兄弟</li><li>Kracie玫瑰香体糖</li><li>Uha葡萄味觉糖</li><li>Calbee麦片</li></ul><p><img src="https://image.xiaomo.info/travel/%E8%96%AF%E6%9D%A1%E4%B8%89%E5%85%84%E5%BC%9F.png"><br><img src="https://image.xiaomo.info/travel/%E8%94%AC%E8%8F%9C%E6%B1%81.png"><br><img src="https://image.xiaomo.info/travel/%E7%B3%96.png"><br><img src="https://image.xiaomo.info/travel/%E8%8C%B6%E5%8F%B6.png"><br><img src="https://image.xiaomo.info/travel/%E7%99%BD%E8%89%B2%E6%81%8B%E4%BA%BA.png"><br><img src="https://image.xiaomo.info/travel/Rocyce%E7%94%9F%E5%B7%A7%E5%85%8B%E5%8A%9B.png"></p><h2 id="电器："><a href="#电器：" class="headerlink" title="电器："></a>电器：</h2><ul><li>Tescom负离子胶原蛋白吹风机</li><li>Panasonic松下卷发棒</li><li>Panasonic松下造型吹风机</li><li>Panasonic蒸脸器</li><li>象印保温杯</li><li>膳魔师保温杯</li><li>象印焖烧杯</li><li>虎牌焖烧杯</li><li>剃须刀</li><li>索尼电子产品<br><img src="https://image.xiaomo.info/travel/%E5%B0%8F%E5%AE%B6%E7%94%B5.png"></li></ul><h2 id="参考攻略"><a href="#参考攻略" class="headerlink" title="参考攻略"></a>参考攻略</h2><ul><li><a href="https://www.mafengwo.cn/i/5339323.html" target="_blank" rel="noopener">日本购物攻略——去日本值得购买的80件产品</a></li><li><a href="http://bbs.yilvcheng.com/gonglue/1642.html" target="_blank" rel="noopener">2016日本购物攻略，去日本旅行千万别买这些东西 切记</a></li><li><a href="http://www.mafengwo.cn/travel-news/272562.html" target="_blank" rel="noopener">去日本必买的东西top10</a></li></ul><hr><ul><li><a href="https://post.smzdm.com/p/502174/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇一：第一日 抵达东京，逛银座及东京塔</a></li><li><a href="https://post.smzdm.com/p/502273/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇二：第二日 筑地，皇居，秋叶原和台场</a></li><li><a href="https://post.smzdm.com/p/545500/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇三：第三日 上野动物园，浅草寺，天空树</a></li><li><a href="https://post.smzdm.com/p/547769/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇四：第四日 江之岛，镰仓</a></li><li><a href="https://post.smzdm.com/p/553268/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇五：第五日 去往富士河口湖</a></li><li><a href="https://post.smzdm.com/p/556217/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇六：第六日 去往京都</a></li><li><a href="https://post.smzdm.com/p/560026/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇七：第七日 八坂神社，二年坂，三年坂，清水寺</a></li><li><a href="https://post.smzdm.com/p/562421/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇八：第八日 仙洞御所，伏见稻荷大社</a></li><li><a href="https://post.smzdm.com/p/563714/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇九：第九日 奈良行，春日大社，东大寺</a></li><li><a href="https://post.smzdm.com/p/563732/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十：第十日 二条城，东西本愿寺</a></li><li><a href="https://post.smzdm.com/p/568535/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十一：第十一日 金阁寺，岚山景区</a></li><li><a href="https://post.smzdm.com/p/570614/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十二：第十二日 去往大阪，海游馆，天保山摩天轮</a></li><li><a href="https://post.smzdm.com/p/574237/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十三：第十三日 大阪环球影城</a></li><li><a href="https://post.smzdm.com/p/577318/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十四：第十四日 大阪城 道顿堀</a></li><li><a href="https://post.smzdm.com/p/581686/" target="_blank" rel="noopener">懒人夫妻由东到西的日本15日自由行详细流水账攻略 篇十五：最后一日：梅田蓝天大厦 返回厦门以及算总账</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏服务器的常用架构</title>
      <link href="2017/GameServerType/"/>
      <url>2017/GameServerType/</url>
      
        <content type="html"><![CDATA[<p>游戏服务器，是一个会长期运行程序，并且它还要服务于多个不定时，不定点的网络请求。所以这类服务的特点是要特别关注稳定性和性能。这类程序如果需要多个协作来提高承载能力，则还要关注部署和扩容的便利性；同时，还需要考虑如何实现某种程度容灾需求。由于多进程协同工作，也带来了开发的复杂度，这也是需要关注的问题。</p><a id="more"></a><h1 id="游戏服务器架构要素"><a href="#游戏服务器架构要素" class="headerlink" title="游戏服务器架构要素"></a>游戏服务器架构要素</h1><p>对于游戏服务端架构，最重要的三个部分就是，如何使用CPU、内存、网卡的设计：</p><ul><li>内存架构：主要决定服务器如何使用内存，以最大化利用服务器端内存来提高承载量，降低服务延迟。</li><li>逻辑架构：设计如何使用进程、线程、协程这些对于CPU调度的方案。选择同步、异步等不同的编程模型，以提高服务器的稳定性和承载量。可以分区分服，也可以采用世界服的方式，将相同功能模块划分到不同的服务器来处理。</li><li>通信模式：决定使用何种方式通讯。基于游戏类型不同采用不同的通信模式，比如http,tcp,udp等。</li></ul><h1 id="游戏类型"><a href="#游戏类型" class="headerlink" title="游戏类型"></a>游戏类型</h1><h2 id="卡牌跑酷等休闲游戏弱交互游戏"><a href="#卡牌跑酷等休闲游戏弱交互游戏" class="headerlink" title="卡牌跑酷等休闲游戏弱交互游戏"></a>卡牌跑酷等休闲游戏弱交互游戏</h2><p><img src="https://image.xiaomo.info/game/card.png"></p><h2 id="分区分服RPG游戏（RPG页游）"><a href="#分区分服RPG游戏（RPG页游）" class="headerlink" title="分区分服RPG游戏（RPG页游）"></a>分区分服RPG游戏（RPG页游）</h2><p><img src="https://image.xiaomo.info/game/single.png"></p><p>分服模型是游戏服务器中最典型，也是历久最悠久的模型。在早期服务器的承载量达到上限的时候，游戏开发者就通过架设更多的服务器来解决。这样提供了很多个游戏的“平行世界”，让游戏中的人人之间的比较，产生了更多的空间。其特征是游戏服务器是一个个单独的世界。每个服务器的帐号是独立的，每台服务器用户的状态都是不一样的，一个服就是一个世界，大家各不牵扯。<br>后来游戏玩家呼吁要跨服打架，于是就出现了跨服战，再加上随着游戏的运行，单个服务器的游戏活跃玩家越来越少，所以后期就有了服务器的合并以及迁移，慢慢的以服务器的开放、合并形成了一套成熟的运营手段。目前多数游戏还采用分服的结构来架设服务器，多数页游还是采用这种模式。</p><h2 id="数据共享游戏服务器"><a href="#数据共享游戏服务器" class="headerlink" title="数据共享游戏服务器"></a>数据共享游戏服务器</h2><p><img src="https://image.xiaomo.info/game/share.png"><br>网关部分分离成单端的gate服务器，DB部分分离为DB服务器，把网络功能单独提取出来，让用户统一去连接一个网关服务器，再有网关服务器转发数据到后端游戏服务器。而游戏服务器之间数据交换也统一连接到网管进行交换。所有有DB交互的，都连接到DB服务器来代理处理。</p><p><img src="https://image.xiaomo.info/game/custer.png"></p><ul><li>场景服务器：它负责完成主要的游戏逻辑，这些逻辑包括：角色在游戏场景中的进入与退出、角色的行走与跑动、角色战斗（包括打怪）、任务的认领等。场景服务器设计的好坏是整个游戏世界服务器性能差异的主要体现，它的设计难度不仅仅在于通信模型方面，更主要的是整个服务器的体系架构和同步机制的设计。</li><li>非场景服务器：它主要负责完成与游戏场景不相关的游戏逻辑，这些逻辑不依靠游戏的地图系统也能正常进行，比如公会聊天或世界聊天，之所以把它从场景服务器中独立出来，是为了节省场景服务器的CPU和带宽资源，让场景服务器能够尽可能快地处理那些对游戏流畅性影响较大的游戏逻辑。</li><li>网关服务器: 在类型一种的架构中，玩家在多个地图跳转或者场景切换的时候采用跳转的模式，以此进行跳转不同的服务器。还有一种方式是把这些服务器的节点都通过网关服务器管理，玩家和网关服务器交互，每个场景或者服务器切换的时候，也有网关服务器统一来交换数据，如此玩家操作会比较流畅。</li></ul><h2 id="房间游戏"><a href="#房间游戏" class="headerlink" title="房间游戏"></a>房间游戏</h2><p><img src="https://image.xiaomo.info/game/room.png"><br>房间类玩法和MMORPG有很大的不同，在于其在线广播单元的不确定性和广播数量很小。而且需要匹配一台房间服务器让少数人进入一个服务器。<br>这一类游戏最重要的是其“游戏大厅”的承载量，每个“游戏房间”受逻辑所限，需要维持和广播的玩家数据是有限的，但是“游戏大厅”需要维持相当高的在线用户数，所以一般来说，这种游戏还是需要做“分服”的。典型的游戏就是《英雄联盟》这一类游戏了。而“游戏大厅”里面最有挑战性的任务，就是“自动匹配”玩家进入一个“游戏房间”，这需要对所有在线玩家做搜索和过滤。<br>玩家先登录“大厅服务器”，然后选择组队游戏的功能，服务器会通知参与的所有游戏客户端，新开一条连接到房间服务器上，这样所有参与的用户就能在房间服务器里进行游戏交互了。</p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok常用注解整理</title>
      <link href="2017/JavaLombok/"/>
      <url>2017/JavaLombok/</url>
      
        <content type="html"><![CDATA[<p>2017-09-11-lombok常用注解整理</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="http://projectlombok.org/" target="_blank" rel="noopener">lombok</a> 提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。</p><h1 id="lombok插件-安装"><a href="#lombok插件-安装" class="headerlink" title="lombok插件 安装"></a>lombok插件 安装</h1><p>使用 lombok 是需要安装插件的，如果不安装，IDE 则无法解析 lombok 注解。 </p><ul><li><p>idea<br><img src="https://image.xiaomo.info/idea_lombok.png"></p></li><li><p>eclipse/myeclipse       </p></li></ul><ol><li>将 <a href="https://projectlombok.org/downloads/lombok.jar" target="_blank" rel="noopener">lombok.jar</a>复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下     </li><li>打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：  </li></ol><p>-Xbootclasspath/a:lombok.jar<br>-javaagent:lombok.jar<br>3.重启 eclipse / myeclipse          </p><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><ul><li><a href="https://projectlombok.org/features/Data" target="_blank" rel="noopener">@Data</a>  注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</li><li><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noopener">@Setter</a> ：注解在属性上；为属性提供 setting 方法</li><li><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noopener">@Setter</a> ：注解在属性上；为属性提供 getting 方法</li><li><a href="https://projectlombok.org/features/Log4j" target="_blank" rel="noopener">@Log4j</a>  ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li><li><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noopener">@NoArgsConstructor</a> ：注解在类上；为类提供一个无参的构造方法</li><li><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noopener">@AllArgsConstructor</a> ：注解在类上；为类提供一个全参的构造方法</li><li><a href="https://projectlombok.org/features/Cleanup" target="_blank" rel="noopener">@Cleanup</a>  : 可以关闭流</li><li><a href="https://projectlombok.org/features/Builder" target="_blank" rel="noopener">@Builder</a>  ： 被注解的类加个构造者模式</li><li><a href="https://projectlombok.org/features/Synchronized" target="_blank" rel="noopener">@Synchronized</a>  ： 加个同步锁</li><li><a href="https://projectlombok.org/features/SneakyThrows" target="_blank" rel="noopener">@SneakyThrows</a> : 等同于try/catch 捕获异常</li><li><a href="https://projectlombok.org/features/NonNull" target="_blank" rel="noopener">@NonNull</a> : 如果给参数加个这个注解 参数为null会抛出空指针异常</li><li>@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li>官方文档： <a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">https://projectlombok.org/features/all</a></li><li>lombok注解介绍  <a href="http://blog.csdn.net/sunsfan/article/details/53542374" target="_blank" rel="noopener">http://blog.csdn.net/sunsfan/article/details/53542374</a></li><li>Lombok介绍及使用方法 <a href="http://www.cnblogs.com/holten/p/5729226.html" target="_blank" rel="noopener">http://www.cnblogs.com/holten/p/5729226.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift项目初探</title>
      <link href="2017/SwiftProjectBuild/"/>
      <url>2017/SwiftProjectBuild/</url>
      
        <content type="html"><![CDATA[<p>截至到上一篇博客到现在为止差不多有一个月了,时光飞逝,从来没有觉得时间过的如此之快。在这一个月中其实发生了很多事:学完了日语中级上册,记了整整一本笔记;装上了黑苹果,因此也有机会接触到IOS相关的内容,所以大致过了一遍swift3的语法;养了一只小仓鼠,生活变的有趣许多;整理了一下github,切换了主邮箱。其他来说,生活依旧在继续，折腾一直未停止,为了生活,为了编程.我一直在努力,也从未放弃。记一篇swift入门的博客以作慰藉。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为本人是在学习swift中,所以这篇文章更多的成份算是自己的笔记,只是将自己的经历分享出来。请大牛们勿喷,小白们别当权威。如果有错误请指出，我一定会虚心改正。最后，与君共勉，早日成为独当一面的人物。</p><h3 id="一-基本环境"><a href="#一-基本环境" class="headerlink" title="一.基本环境"></a>一.基本环境</h3><blockquote><p>OS x 10.11.6<br> Xcode 8.2.1<br> swift 3.0.2<br> swift package manager 3.0.2<br> pod 1.2.1<br> carthage 0.20.1 </p></blockquote><p> 因为xcode是严格和os x版本对照的,所以我的10.11.6黑苹果就止步于8.2.1版本的xcode,因此swift3.1也玩不了,表示很心痛.</p><h3 id="二-swift能做些什么"><a href="#二-swift能做些什么" class="headerlink" title="二 swift能做些什么"></a>二 swift能做些什么</h3><ol><li>IOS手机APP开发(据说也能开发android应用,期待大一统)</li><li>Mac电脑应用,同样的软件,在mac上看着就是高雅,这不得不说是apple的功劳</li><li>watchOS和TvOS,暂时没接触到</li><li>服务端开发,也就是说可以开发网站或者其他各种东西,对应框架有Perfect，Vapor，Kitura 和 Zewo. <a href="https://sdk.cn/news/4150" target="_blank" rel="noopener">附一篇文章介绍</a></li><li>其他待挖掘,世界各国的计算机科学家们可不是打酱油的.<h3 id="三-SPM是什么鬼"><a href="#三-SPM是什么鬼" class="headerlink" title="三. SPM是什么鬼"></a>三. SPM是什么鬼</h3>Swift Package Manager(SPM)是苹果最新的官方工具,可以用来管理 Swift 代码的分配，它为 Swift 编译系统集成了自动进行下载、编译和连接依赖的过程,不过目前还处于早期开发阶段。</li></ol><p>支持的平台</p><p>✔ macOS<br>✔ Linux<br>✘ iOS<br>✘ watchOS<br>✘ tvOS      </p><p>在此之前我们常用的工具是<code>Cocoapods</code>和<code>Carthage</code>。</p><ol><li><p>如何下载<br><a href="https://swift.org/download/#releases" target="_blank" rel="noopener">下载对应版本</a>,然后安装<br>在终端中执行 <code>export PATH=/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin:&quot;${PATH}&quot;</code></p></li><li><p>验证是否安装成功</p></li></ol><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">swift </span><span class="keyword">build </span>--version</span><br><span class="line"><span class="keyword">Swift </span>Package Manager - <span class="keyword">Swift </span><span class="number">3</span>.<span class="number">0</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="3"><li>怎么使用<br>首先，使用 <code>mkdir</code> 创建一个新的目录，用来放置你的包或者应用。<br>这里我们使用 <code>helloworld</code> 作为例子：<code>mkdir helloworld</code>。<br>然后，使用 <code>cd</code> 命令进入 <code>helloworld</code> 目录，运行命令：<code>swift build --init</code>。</li></ol><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"># cd helloworld</span><br><span class="line"># <span class="keyword">swift </span><span class="keyword">build </span>--init</span><br><span class="line"><span class="symbol">Creating</span> Package.<span class="keyword">swift</span></span><br><span class="line"><span class="keyword">Creating </span>.gitignore</span><br><span class="line"><span class="symbol">Creating</span> Sources/</span><br><span class="line"><span class="symbol">Creating</span> Sources/main.<span class="keyword">swift</span></span><br><span class="line"><span class="keyword">Creating </span>Tests/</span><br></pre></td></tr></table></figure><p>我们看看 <code>swift build --init</code> 生成的内容：</p><ol><li><code>Package.swift</code>：包的”配置信息”（manifest）。<code>swift build --init</code>使用你创建的目录名作为包名。   </li><li><code>Sources</code>目录：按照 SwiftPM 的要求，所有的源代码文件都放到 Sources 目录下。   </li><li><code>main.swift</code>：Swift 应用使用 <code>main.swift</code>（有且只有一个）作为程序执行的入口。   </li><li><code>Tests</code> 目录：存放应用的测试用例。</li><li><code>.gitignore</code>：一个便捷的 <code>git gitignore</code> 文件，忽略一些本地编译时用到的配置目录和文件，比如: <code>.build</code> 和 <code>Packages</code> 目录（一些你不想加入到 git 库的东西）。</li></ol><p>在这个 <code>helloword</code> 例子中，<code>Package.swift</code> 文件内容如下：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">import PackageDescription</span><br><span class="line"></span><br><span class="line">let <span class="keyword">package</span> <span class="title">= <span class="keyword">Package</span>(</span></span><br><span class="line">    name: <span class="string">"helloworld"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>运行 <code>swift build</code> 会创建可执行文件 <code>.build/debug/helloworld</code>，运行这个文件就会在终端输出 <code>Hello, world!</code>.<br>如果你想编译一个 Swift 库，只需要删除 <code>main.swift</code> 文件，然后替换成你的库代码。在没有 <code>main.swift</code> 的情况下，<code>SwiftPM</code> 会创建一个静态的库。</p><ol start="4"><li><p>怎么在xcode中打开<br>在项目根目录运行 <code>swift package generate-xcodeproj</code>,会生成<code>xcodeproj</code>,此时可以用xcode打开这个项目<br>我们来看看生成的代码是什么样子的<br><img src="https://image.xiaomo.info/swift/spg-category.png"></p></li><li><p>怎么添加其他依赖<br>我们以引入Alamofire为例<br>项目根目录有一个<code>Package.swift</code>的文件,打开这个文件,加入Alamofire的地址 <code>.Package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, majorVersion: 4) </code></p></li></ol><p>文件内容如下</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line">let <span class="keyword">package</span> = <span class="keyword">Package</span>(</span><br><span class="line">    name: <span class="string">"spg"</span>,</span><br><span class="line">    <span class="keyword">dependencies</span>: [</span><br><span class="line">        .<span class="keyword">Package</span>(url: <span class="string">"https://github.com/Alamofire/Alamofire.git"</span>, majorVersion: <span class="number">4</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后运行再次在项目根目录运行 <code>swift build</code> 就会下载Alamofire的依赖</p><h3 id="四-pod又是干咩的"><a href="#四-pod又是干咩的" class="headerlink" title="四. pod又是干咩的"></a>四. pod又是干咩的</h3><ol><li>CocoaPods是什么？<br>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之我的意思就是，手动一个个去下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的问题，那将“善莫大焉”。所以，你需要 CocoaPods。<br>CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了。</li><li>如何下载和安装CocoaPods？<br>在安装CocoaPods之前，首先要在本地安装好Ruby环境。至于如何在Mac中安装好Ruby环境，请google一下，本文不再涉及。<br>假如你在本地已经安装好Ruby环境，那么下载和安装CocoaPods将十分简单，只需要一行命令。在Terminator（也就是终端）中输入以下命令（注意，本文所有命令都是在终端中输入并运行的。什么，你不知道什么是终端？那请我吃饭，我告诉你）：<br> <code>sudo gem install cocoapods</code><br>如果下载不了可能又是伟大的墙在发挥作用,请自行翻墙或修改国内镜像源.<br>正常来说,等上十几秒钟，CocoaPods就可以在你本地下载并且安装好了，不再需要其他设置。</li></ol><p>好了，安装好CocoPods之后，接下来就是使用它。所幸，使用CocoPods和安装它一样简单，也是通过一两行命令就可以搞定。</p><p>我在这里用两种使用场景来具体说明如何使用CocoaPods。</p><h4 id="场景1：利用CocoaPods，在项目中导入Alamofire类库"><a href="#场景1：利用CocoaPods，在项目中导入Alamofire类库" class="headerlink" title="场景1：利用CocoaPods，在项目中导入Alamofire类库"></a>场景1：利用CocoaPods，在项目中导入Alamofire类库</h4><p>Alamofire类库在GitHub地址是：<a href="https://github.com/Alamofire/Alamofire.git" target="_blank" rel="noopener">https://github.com/Alamofire/Alamofire.git</a></p><p>为了确定Alamofire是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：<br><code>pod search Alamofire</code></p><p>如果能正确返回<code>Alamofire </code>相关信息。这说明，Alamofire是支持CocoaPods，所以我们可以利用CocoaPods将Alamofire导入你的项目中。</p><p>我们创建一个swift的ios项目,然后在终端中切换到该项目的根目录,运行以下命令:<br><code>pod init</code></p><p>这个命令会在根目录下生成一个<code>Podfile</code>,我们在这个文件中添加相应的依赖就可以了.</p><p>修改Podfile文件,添加依赖</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment the next line to define a global platform for your project</span></span><br><span class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform <span class="symbol">:ios</span>, ’<span class="number">10.2</span>’</span><br><span class="line"></span><br><span class="line">target <span class="string">'cocopodsDemo'</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 4.4'</span></span><br><span class="line">  <span class="comment"># Comment the next line if you're not using Swift and don't want to use dynamic frameworks</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Pods for cocopodsDemo</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">'cocopodsDemoTests'</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">'cocopodsDemoUITests'</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后运行 <code>pod install</code></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Analyzing dependencies</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing Alamofire (4.4.0)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating<span class="built_in"> client </span>project</span><br><span class="line"></span><br><span class="line">[!] Please close any current Xcode sessions <span class="keyword">and</span> use `cocopodsDemo.xcworkspace` <span class="keyword">for</span> this project <span class="keyword">from</span> now on.</span><br><span class="line">Sending stats</span><br><span class="line">Pod installation complete! There is 1 dependency <span class="keyword">from</span> the Podfile <span class="keyword">and</span> 1 total pod installed.</span><br></pre></td></tr></table></figure><blockquote><p>注意提示: 告诉我们要关掉xocode,选择<code>cocopodsDemo.xcworkspace</code>打开项目,目录结构现在应该是这个样子的.</p></blockquote><p><img src="https://image.xiaomo.info/swift/cocoapodsDemo.png"></p><p>添加<code>Alamofile </code>依赖<br><code>Product</code>=&gt;<code>Schemes</code>=&gt;<code>Manage Schemes</code>,将<code>Alamofile</code>勾上,<br><img src="https://image.xiaomo.info/swift/addSchemes.png"></p><p>此时,我们就可以使用<code>Alamofile </code>来做些有趣的事情了。</p><h5 id="关于-Podfile-lock"><a href="#关于-Podfile-lock" class="headerlink" title="关于 Podfile.lock"></a>关于 Podfile.lock</h5><p>当你执行pod install之后，除了 Podfile 外，CocoaPods 还会生成一个名为Podfile.lock的文件，Podfile.lock 应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致</p><h4 id="场景2：如何正确编译运行一个包含CocoPods类库的项目"><a href="#场景2：如何正确编译运行一个包含CocoPods类库的项目" class="headerlink" title="场景2：如何正确编译运行一个包含CocoPods类库的项目"></a>场景2：如何正确编译运行一个包含CocoPods类库的项目</h4><p>你也许曾经遇到过（特别是新手iOS开发者）这种情况，好不容易在GitHub上找到一份代码符合自己想需求，兴冲冲下载下来，一编译，傻眼了，发现有各种各样错误。一看，原来是缺失了各种其他第三方类库。这时候莫慌，你再仔细一看，会发现你下载的代码包含了Podfile。没错，这意味着你可以用CocoaPods很方便下载所需要的类库。</p><p>下面，我以代码 <a href="https://github.com/UrbanApps/UAAppReviewManager" target="_blank" rel="noopener">UAAppReviewManager</a> 为例来说明如何正确编译运行一个包含CocoPods类库的项目。<br>UAAppReviewManager是一个能够让你方便地将提醒用户评分的功能加入你的应用中。当你去UAAppReviewManager的GitHub地址下载这份代码之后，打开Example工程（UAAppReviewManagerExample），编译，你会发现Xcode报告一大堆错误，基本都是说你编译的这份代码找不到某某头文件，这就意味着你要成功编译UAAppReviewManager的Example代码，必须先导入一些第三方类库。同时你会发现在UAAppReviewManagerExample文件夹下面有三个跟CocosPods相关的文件（文件夹）：Podfile，Podfile.lock和Pods</p><p>这时候，打开终端，进入UAAppReviewManagerExample所在的目录，也就是和Podfile在同一目录下，和场景1一样，输入以下命令（由于已经有Podfile，所以不需要再创建Podfile）：</p><p><code>$ pod update</code></p><p>这时候，再回到<code>UAAppReviewManagerExample</code>文件夹看一看，会看到多了一个文件<code>UAAppReviewManagerExample.xcworkspace</code><br>根据终端的信息提示，你以后就需用新产生的<code>UAAppReviewManagerExample.xcworkspace</code>来运行这个<code>Example</code>代码了。<br>打开<code>UAAppReviewManagerExample.xcworkspace</code>，编译运行，成功</p><p>注意，这里有个小问题，如果刚刚你不是输入<code>$ pod update</code>，而是输入<code>$ pod install</code>，会发现类库导入不成功</p><p>这里的意思大概是<code>Podfile</code>文件过期，类库有升级，但是<code>Podfile</code>没有更改。<code>$ pod install</code>只会按照<code>Podfile</code>的要求来请求类库，如果类库版本号有变化，那么将获取失败。但是 <code>$ pod update</code>会更新所有的类库，获取最新版本的类库。而且你会发现，如果用了 <code>$ pod update</code>，再用 <code>$ pod install</code> 就成功了。</p><p>那你也许会问，什么时候用 <code>$ pod install</code>，什么时候用 <code>$ pod update</code> 呢，我又不知道类库有没有新版本。好吧，那你每次直接用 <code>$ pod update</code> 算了。或者先用 <code>$ pod install</code>，如果不行，再用 <code>$ pod update</code>。</p><h3 id="五-Carthage"><a href="#五-Carthage" class="headerlink" title="五. Carthage"></a>五. Carthage</h3><p>说到Carthage,就要先说swift，2014年苹果发布swift初期，用swift编写的第三方库就只能通过拖动源代码到自己的项目中才能被调用， 由于当时只有寥寥无几的开源库，且不能打包，加上swift1.0并不是那么好用，许多人对swift持着观望的态度。随着swift逐步趋于稳定，并且从ios8.0开始支持将自己写的swift打包成framework，越来越多的纯swift编写框架开始出现，就在这时候carthage突然出现在人们的视野中，而且陆陆续续几乎所有的开源框架都开始支持carthage。</p><p>安装使用Carthage</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>carthage</span><br></pre></td></tr></table></figure><p>如果你不喜欢使用终端，也可以从网站<a href="https://github.com/Carthage/Carthage/releases" target="_blank" rel="noopener">https://github.com/Carthage/Carthage/releases</a>下载最新版的Carthage.pkg来更新。</p><p>当你安装好Carthage后，在终端执行<code>$ carthage version</code>   </p><p>即可看到当前的carthage版本, 当我写这篇文章的时候，Carthage的版本为0.20.1 。现在，你已经安装好了Carthage，接下来就是在你的项目中使用carthage了：</p><ul><li>通过终端进入到项目所在的文件夹</li><li>创建一个空的carthage文件</li><li>使用xcode打开cartfile文件 <code>open -a Xcode Cartfile</code></li><li>添加内容</li></ul><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">github <span class="string">"Alamofire/Alamofire"</span><span class="function"> ~&gt;</span> <span class="number">4.4</span></span><br><span class="line">github <span class="string">"SwiftyJSON/SwiftyJSON"</span></span><br></pre></td></tr></table></figure><ul><li>保存并关闭cart file文件，在终端执行命令 <code> carthage update --platform iOS</code>,carthage会为你下载和编译所需要的第三方库，当命令执行完毕，在你的项目文件夹中会创建一个名为Carthage的文件夹</li><li>添加依赖<br><img src="https://image.xiaomo.info/swift/addcarthageframework.png"></li></ul><h3 id="六-如何选择"><a href="#六-如何选择" class="headerlink" title="六. 如何选择"></a>六. 如何选择</h3><p>google出来多半都是使用<code>SPM</code>和<code>cocoapods</code>,所以我们暂时也从这里面二选一吧。前面提到目前 <code>swift 3.0.1</code>只支持<code>mac os</code>和 <code>linux</code>系统,所以开发ios应用的话选用<code>cocoapods</code>会好一些,我会花了更多的时间在<code>cocoapods</code>上面。但是，我更期待<code>SPM</code>能够支持<code>IOS</code>,让我们拭目以待吧。</p><h3 id="七-使用Alamofire来玩点有趣的吧"><a href="#七-使用Alamofire来玩点有趣的吧" class="headerlink" title="七. 使用Alamofire来玩点有趣的吧"></a>七. 使用Alamofire来玩点有趣的吧</h3><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的常用软件清单</title>
      <link href="2017/MySoftware/"/>
      <url>2017/MySoftware/</url>
      
        <content type="html"><![CDATA[<p>折腾了各种系统,因为各种原因影响 。工作的系统安装了黑苹果，从此再也不需要折腾系统了。告别100%硬盘占用，99%内存占用；告别网页qq,网页微信 。<br>告别游戏，从此一心为技术，哈哈哈哈哈，手动脑残3秒钟。</p><a id="more"></a><h3 id="一-mac下常用软件"><a href="#一-mac下常用软件" class="headerlink" title="一. mac下常用软件"></a>一. mac下常用软件</h3><h4 id="1-spectacle"><a href="#1-spectacle" class="headerlink" title="1. spectacle"></a>1. <a href="https://www.spectacleapp.com/" target="_blank" rel="noopener">spectacle</a></h4><p>最大化窗口小工具</p><h4 id="2-Cinch"><a href="#2-Cinch" class="headerlink" title="2. Cinch"></a>2. <a href="http://www.appinn.com/cinch/" target="_blank" rel="noopener">Cinch</a></h4><p>功能同上</p><h4 id="3-scroll-reverse"><a href="#3-scroll-reverse" class="headerlink" title="3. scroll reverse"></a>3. <a href="http://www.appinn.com/scroll-reverser/" target="_blank" rel="noopener">scroll reverse</a></h4><p>让鼠标滚动反向(和win同步的习惯)</p><h4 id="4-Owly"><a href="#4-Owly" class="headerlink" title="4. Owly"></a>4. <a href="http://www.appinn.com/owly-for-mac/" target="_blank" rel="noopener">Owly</a></h4><p>防止系统休眠,咖啡因功能也是如此</p><h4 id="5-hotkeyEVE-cheat-sheet"><a href="#5-hotkeyEVE-cheat-sheet" class="headerlink" title="5. hotkeyEVE/cheat sheet"></a>5. <a href="http://www.appinn.com/cheatsheet/" target="_blank" rel="noopener">hotkeyEVE/cheat sheet</a></h4><p>快捷键提示</p><h4 id="6-Alferd"><a href="#6-Alferd" class="headerlink" title="6. Alferd"></a>6. <a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alferd</a></h4><p>搜索神器 <a href="https://www.waerfa.com/alfred-workflow" target="_blank" rel="noopener">https://www.waerfa.com/alfred-workflow</a></p><h4 id="7-mac自带常用应用"><a href="#7-mac自带常用应用" class="headerlink" title="7. mac自带常用应用"></a>7. mac自带常用应用</h4><p>numbers,keynote,Pages,mail,itunes,icloud,照片,系统监控</p><h4 id="8-iterm2"><a href="#8-iterm2" class="headerlink" title="8. iterm2"></a>8. <a href="http://www.iterm2.com/" target="_blank" rel="noopener">iterm2</a></h4><p>终端</p><h4 id="9-oh-my-zsh"><a href="#9-oh-my-zsh" class="headerlink" title="9. oh-my-zsh"></a>9. <a href="http://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a></h4><p>终端增强</p><h4 id="10-xcode"><a href="#10-xcode" class="headerlink" title="10. xcode"></a>10. xcode</h4><p>mac标配编码器</p><h4 id="11-迅雷"><a href="#11-迅雷" class="headerlink" title="11. 迅雷"></a>11. 迅雷</h4><p>下载少不了</p><h4 id="12-idea"><a href="#12-idea" class="headerlink" title="12. idea"></a>12. idea</h4><p>代码编辑器</p><h4 id="13-java"><a href="#13-java" class="headerlink" title="13. java"></a>13. java</h4><p>开发java怎么能少了它</p><h4 id="14-微信-QQ"><a href="#14-微信-QQ" class="headerlink" title="14. 微信/QQ"></a>14. 微信/QQ</h4><p>工作联系</p><h4 id="15-chrome"><a href="#15-chrome" class="headerlink" title="15. chrome"></a>15. <a href="http://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="noopener">chrome</a></h4><p>通向世界的入口,还附带了一大批好用的插件</p><h4 id="16-sourceTree"><a href="#16-sourceTree" class="headerlink" title="16. sourceTree"></a>16. <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">sourceTree</a></h4><p>git管理客户端</p><h4 id="17-AppCode"><a href="#17-AppCode" class="headerlink" title="17. AppCode"></a>17. <a href="https://www.jetbrains.com/objc/" target="_blank" rel="noopener">AppCode</a></h4><p>写swift的好东西</p><h4 id="18-网易云音乐"><a href="#18-网易云音乐" class="headerlink" title="18. 网易云音乐"></a>18. <a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a></h4><p>听歌必备,忘了杭州地铁1号线吗?</p><h4 id="19-virtual-box"><a href="#19-virtual-box" class="headerlink" title="19. virtual box"></a>19. virtual box</h4><p>装个window看看而已</p><h4 id="20-kindle"><a href="#20-kindle" class="headerlink" title="20. kindle"></a>20. kindle</h4><p>电脑上管理kindle的好工具</p><h4 id="21-macDown-typora"><a href="#21-macDown-typora" class="headerlink" title="21. macDown/typora"></a>21. macDown/typora</h4><p>写markdown的好东东</p><h4 id="22-百度Hi-阿里旺旺-钉钉-微博maipo-择需而装"><a href="#22-百度Hi-阿里旺旺-钉钉-微博maipo-择需而装" class="headerlink" title="22. 百度Hi/阿里旺旺/钉钉/微博maipo 择需而装"></a>22. 百度Hi/阿里旺旺/钉钉/微博maipo 择需而装</h4><p>联系人偶尔用用</p><h4 id="22-dash"><a href="#22-dash" class="headerlink" title="22. dash"></a>22. <a href="https://kapeli.com/dash" target="_blank" rel="noopener">dash</a></h4><p>看文档简直不要太好</p><h4 id="23-bilibili"><a href="#23-bilibili" class="headerlink" title="23. bilibili"></a>23. <a href="http://bilimac.eqoe.cn/" target="_blank" rel="noopener">bilibili</a></h4><p>b站的客户端啊,不要么?</p><h4 id="24-photoshop"><a href="#24-photoshop" class="headerlink" title="24. photoshop"></a>24. photoshop</h4><p>还是要装一个,看着也好啊</p><h4 id="25-Yummy-Ftp"><a href="#25-Yummy-Ftp" class="headerlink" title="25. Yummy Ftp"></a>25. <a href="http://www.pc6.com/mac/116745.html" target="_blank" rel="noopener">Yummy Ftp</a></h4><p>ftp工具,目前我没找到替代者</p><h4 id="25-navicat"><a href="#25-navicat" class="headerlink" title="25. navicat"></a>25. <a href="http://www.pc6.com/mac/111878.html" target="_blank" rel="noopener">navicat</a></h4><p>mysql数据库客户端</p><h4 id="26-sublime-text"><a href="#26-sublime-text" class="headerlink" title="26. sublime text"></a>26. <a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">sublime text</a></h4><p>打开超级快,就当文本编辑器用用吧</p><h4 id="27-onenote"><a href="#27-onenote" class="headerlink" title="27. onenote"></a>27. onenote</h4><p>我的笔记都在上面</p><h4 id="28-微信web开发者工具"><a href="#28-微信web开发者工具" class="headerlink" title="28. 微信web开发者工具"></a>28. 微信web开发者工具</h4><p>装个看看,感觉界面布局挺方便,不过我不开发微信程序</p><h4 id="29-visual-studio"><a href="#29-visual-studio" class="headerlink" title="29. visual studio"></a>29. visual studio</h4><p>号称全宇宙最好用的编辑器,你不看看么?</p><h4 id="30-office全家桶"><a href="#30-office全家桶" class="headerlink" title="30. office全家桶"></a>30. office全家桶</h4><p>要和windows做兼容,还是要装它</p><h4 id="31-apowersoft-mac录屏王"><a href="#31-apowersoft-mac录屏王" class="headerlink" title="31. apowersoft mac录屏王"></a>31. apowersoft mac录屏王</h4><p>录屏啊,你懂的</p><h4 id="32-licecap"><a href="#32-licecap" class="headerlink" title="32. licecap"></a>32. <a href="http://www.pc6.com/mac/135257.html" target="_blank" rel="noopener">licecap</a></h4><p>无意间发现的一个录gif的好工具</p><h4 id="33-向日葵-teamviwer"><a href="#33-向日葵-teamviwer" class="headerlink" title="33. 向日葵/teamviwer"></a>33. <a href="https://sunlogin.oray.com/zh_CN/" target="_blank" rel="noopener">向日葵</a>/<a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener">teamviwer</a></h4><p>远程助手</p><h4 id="34-line"><a href="#34-line" class="headerlink" title="34. line"></a>34. line</h4><p>可惜不能用</p><h4 id="35-爱奇艺"><a href="#35-爱奇艺" class="headerlink" title="35. 爱奇艺"></a>35. <a href="http://www.iqiyi.com/" target="_blank" rel="noopener">爱奇艺</a></h4><p>看电视啊</p><h4 id="36-yotube"><a href="#36-yotube" class="headerlink" title="36. yotube"></a>36. <a href="https://www.youtube.com/" target="_blank" rel="noopener">yotube</a></h4><p>看世界</p><h4 id="37-the-unarchiver"><a href="#37-the-unarchiver" class="headerlink" title="37. the unarchiver"></a>37. <a href="https://theunarchiver.com/" target="_blank" rel="noopener">the unarchiver</a></h4><p>解压工具</p><h4 id="38-shadowsocks"><a href="#38-shadowsocks" class="headerlink" title="38. shadowsocks"></a>38. <a href="http://mac.softpedia.com/get/Internet-Utilities/shadowsocks-gui.shtml#downloa" target="_blank" rel="noopener">shadowsocks</a></h4><p>去外面的世界 <a href="https://go.ishadowx.net/index_cn.html" target="_blank" rel="noopener">https://go.ishadowx.net/index_cn.html</a></p><h4 id="39-sketch"><a href="#39-sketch" class="headerlink" title="39. sketch"></a>39. <a href="https://modao.cc/" target="_blank" rel="noopener">sketch</a></h4><p>也有网页版的磨刀,磨刀更好用</p><h4 id="40-Istatus-Menu"><a href="#40-Istatus-Menu" class="headerlink" title="40. Istatus Menu"></a>40. <a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="noopener">Istatus Menu</a></h4><p>在右上角显示当前网速/CPU/硬盘等系统信息</p><h4 id="41-jsonExport"><a href="#41-jsonExport" class="headerlink" title="41. jsonExport"></a>41. <a href="https://github.com/Ahmed-Ali/JSONExport/releases" target="_blank" rel="noopener">jsonExport</a></h4><p>可以根据json生成model的好东西</p><h4 id="41-charles"><a href="#41-charles" class="headerlink" title="41. charles"></a>41. <a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">charles</a></h4><p>抓包工具</p><h3 id="二-win下常用软件"><a href="#二-win下常用软件" class="headerlink" title="二. win下常用软件"></a>二. win下常用软件</h3><h4 id="1-IDEA"><a href="#1-IDEA" class="headerlink" title="1. IDEA"></a>1. <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA</a></h4><p>JAVA开发最强IDE,不管什么时候都少不了。</p><h4 id="2-xshell-xftp"><a href="#2-xshell-xftp" class="headerlink" title="2. xshell+xftp"></a>2. <a href="http://www.cncrk.com/downinfo/85508.html" target="_blank" rel="noopener">xshell+xftp</a></h4><p>WIN下远程连接linux比较好用的工具,就这东西我可能玩好多年。</p><h4 id="3-作业部落"><a href="#3-作业部落" class="headerlink" title="3. 作业部落"></a>3. <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">作业部落</a></h4><p>写博客的时候可以用它实时预览，简洁美观。</p><h4 id="4-微信"><a href="#4-微信" class="headerlink" title="4. 微信"></a>4. <a href="http://weixin.qq.com/cgi-bin/readtemplate?t=win_weixin" target="_blank" rel="noopener">微信</a></h4><p>越来越多的人从QQ换到微信</p><h4 id="5-QQ"><a href="#5-QQ" class="headerlink" title="5. QQ"></a>5. <a href="https://im.qq.com/index.shtml" target="_blank" rel="noopener">QQ</a></h4><p>因为工作原因需要用QQ交流</p><h4 id="6-网易云音乐"><a href="#6-网易云音乐" class="headerlink" title="6. 网易云音乐"></a>6. <a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a></h4><p>唯一的娱乐</p><h4 id="7-OneNote"><a href="#7-OneNote" class="headerlink" title="7. OneNote"></a>7. <a href="http://www.onenote.com/" target="_blank" rel="noopener">OneNote</a></h4><p>己经离不开的软件了，记录了很多笔记</p><h4 id="8-FoxMail"><a href="#8-FoxMail" class="headerlink" title="8. FoxMail"></a>8. <a href="http://www.foxmail.com/" target="_blank" rel="noopener">FoxMail</a></h4><p>收发邮件相当方便，多帐号统一管理</p><h4 id="9-Navicat-Premium中文版"><a href="#9-Navicat-Premium中文版" class="headerlink" title="9. Navicat Premium中文版"></a>9. <a href="http://www.cr173.com/soft/419023.html" target="_blank" rel="noopener">Navicat Premium中文版</a></h4><p>mysql客户端</p><h4 id="10-360安全卫士"><a href="#10-360安全卫士" class="headerlink" title="10. 360安全卫士"></a>10. <a href="https://www.360.cn/" target="_blank" rel="noopener">360安全卫士</a></h4><p>主要是清清垃圾，管理一下开机软件</p><h4 id="11-Mockplus"><a href="#11-Mockplus" class="headerlink" title="11. Mockplus"></a>11. <a href="https://www.mockplus.cn/" target="_blank" rel="noopener">Mockplus</a></h4><p>以前用axture，现在发现了一个更厉害的东西。</p><h4 id="12-photoshop"><a href="#12-photoshop" class="headerlink" title="12. photoshop"></a>12. <a href="https://helpx.adobe.com/cn/download-install.html?promoid=2K4PCJ2R&mv=other" target="_blank" rel="noopener">photoshop</a></h4><p>虽然不是专业的，但是也学过几个月。偶尔会用一下</p><h4 id="13-搜狗五笔"><a href="#13-搜狗五笔" class="headerlink" title="13. 搜狗五笔"></a>13. <a href="http://wubi.sogou.com/" target="_blank" rel="noopener">搜狗五笔</a></h4><p>像我一直始终坚持着五笔的人真的不多了。</p><h4 id="14-zeal"><a href="#14-zeal" class="headerlink" title="14. zeal"></a>14. <a href="https://zealdocs.org/" target="_blank" rel="noopener">zeal</a></h4><p>就是mac上的dash,api快速查询工具</p><h4 id="15-LICEcap-gifCam"><a href="#15-LICEcap-gifCam" class="headerlink" title="15. LICEcap gifCam"></a>15. <a href="https://gifcam.en.softonic.com/" target="_blank" rel="noopener">LICEcap gifCam</a></h4><p>录gif的神器</p><h4 id="16-Beyond-Compare-4"><a href="#16-Beyond-Compare-4" class="headerlink" title="16. Beyond Compare 4"></a>16. <a href="http://www.xz7.com/dir/280573.html" target="_blank" rel="noopener">Beyond Compare 4</a></h4><p>版本对比工具,IDEA默认的没法对比csv文件</p><h4 id="17-迅雷"><a href="#17-迅雷" class="headerlink" title="17. 迅雷"></a>17. <a href="http://dl.xunlei.com/" target="_blank" rel="noopener">迅雷</a></h4><p>下载软件少不了</p><h4 id="18-p2p-searcher"><a href="#18-p2p-searcher" class="headerlink" title="18. p2p searcher"></a>18. p2p searcher</h4><p>别在公司用，会被打的！</p><h4 id="19-jd-gui"><a href="#19-jd-gui" class="headerlink" title="19. jd-gui"></a>19. <a href="http://jd.benow.ca/" target="_blank" rel="noopener">jd-gui</a></h4><p>java反编译工具</p><h4 id="20-team-viewer"><a href="#20-team-viewer" class="headerlink" title="20. team viewer"></a>20. <a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener">team viewer</a></h4><p>当初用qq远程，有了tv，才发现qq远程是多么不实用。。</p><h4 id="21-EmEditor"><a href="#21-EmEditor" class="headerlink" title="21. EmEditor"></a>21. <a href="http://www.cr173.com/soft/3031.html" target="_blank" rel="noopener">EmEditor</a></h4><p>公司项目配置表都是用的csv,这俩货真是绝配。当然还有wps</p><h4 id="22-UltraISO"><a href="#22-UltraISO" class="headerlink" title="22. UltraISO"></a>22. UltraISO</h4><p>把系统写到U盘的工具，类似的还有老毛桃，大白菜。</p><h4 id="23-12306Bypass"><a href="#23-12306Bypass" class="headerlink" title="23. 12306Bypass"></a>23. <a href="http://www.12306bypass.com/" target="_blank" rel="noopener">12306Bypass</a></h4><p>抢火车票必备</p><h4 id="24-360wifi"><a href="#24-360wifi" class="headerlink" title="24. 360wifi"></a>24. <a href="http://wifi.360.cn/easy/pc" target="_blank" rel="noopener">360wifi</a></h4><p>配个360发射器，20块钱一个。</p><h4 id="25-钉钉"><a href="#25-钉钉" class="headerlink" title="25. 钉钉"></a>25. <a href="https://www.dingtalk.com/" target="_blank" rel="noopener">钉钉</a></h4><p>企业管理工具，公司统一使用。</p><h4 id="26-百度网盘"><a href="#26-百度网盘" class="headerlink" title="26. 百度网盘"></a>26. <a href="http://pan.baidu.com/download" target="_blank" rel="noopener">百度网盘</a></h4><p>在各大网盘咯屁的大背景下，总感觉百度网盘风雨飘摇，希望它能坚持的久一点，再久一点。</p><h4 id="27-ADSafe（净网大师）"><a href="#27-ADSafe（净网大师）" class="headerlink" title="27. ADSafe（净网大师）"></a>27. <a href="http://www.ad-safe.com/" target="_blank" rel="noopener">ADSafe（净网大师）</a></h4><p>有了这款软件，网上各大视频网站0秒广告，直接观看视频无添加任何广告，让你一次看个爽，再也不用看着90S的广告恨的牙痒痒了。</p><h4 id="28-冰点文库下载器"><a href="#28-冰点文库下载器" class="headerlink" title="28. 冰点文库下载器"></a>28. <a href="http://xiazai.sogou.com/detail/34/7/3606843386421633359.html?e=1970" target="_blank" rel="noopener">冰点文库下载器</a></h4><p>我们在下载百度文库、道客巴巴、豆丁的文档时，经常会遇到这种需要财富值才可以下载的文档，有的甚至还需要收费才可以下载。<br>给大家安利的这款软件，只要找到百度文库、道客巴巴、豆丁等需要下载的文档地址，放在冰点文库下载器中，就可以直接下载了。</p><h4 id="29-比特数据恢复软件"><a href="#29-比特数据恢复软件" class="headerlink" title="29. 比特数据恢复软件"></a>29. <a href="http://xiazai.sogou.com/detail/34/13/6557464255404182703.html?e=1970" target="_blank" rel="noopener">比特数据恢复软件</a></h4><p>电脑中存放的一些非常重要的文件丢失，却又没有备份的时候，对我们的工作造成了很大的困扰，如果我们遇见硬盘里的文件丢失怎么办？加下来给大家安利的这款软件将帮助大家找回丢失的重要文件，必须学起来。（1）下载安装“比特数据恢复软件”；（2）运行该软件，可选择“万能恢复”帮助我们找回丢失的文件；</p><h4 id="30-pptminimizer"><a href="#30-pptminimizer" class="headerlink" title="30. pptminimizer"></a>30. <a href="http://www.pptminimizer.com/chn/index.php" target="_blank" rel="noopener">pptminimizer</a></h4><p>压缩图像和照片，优化PowerPoint，Word，Excel和PDF文件的大小能够高达50-90%，而无需打包压缩。</p><h4 id="31-PhotoZoom-Pro"><a href="#31-PhotoZoom-Pro" class="headerlink" title="31. PhotoZoom Pro"></a>31. <a href="http://www.cr173.com/soft/285461.html" target="_blank" rel="noopener">PhotoZoom Pro</a></h4><p>支持Mac OS X 10.9 (Mavericks), Windows 10, Photoshop CC；<br>采用最新S-Spline插值算法放大或缩小图像生成最高品质，降低JPEG低品质失真和噪点；<br>新增鲜艳度和清晰度微调设置、新增分屏预览：预览不同的调整大小方式；<br>针对不同类型图像，优化预设值；改进GPU加速以加速图像处理<br>Raw图像现在支持独立的应用程序（插件已经支持）</p><h4 id="32-开发环境"><a href="#32-开发环境" class="headerlink" title="32. 开发环境"></a>32. <a href="http://online.xiaomo.info/" target="_blank" rel="noopener">开发环境</a></h4><p>JDK,MAVEN,git,node等等。用到什么装什么。。</p><h3 id="三-常用的工具网站"><a href="#三-常用的工具网站" class="headerlink" title="三. 常用的工具网站"></a>三. 常用的工具网站</h3><h4 id="1-pdf和word互转"><a href="#1-pdf和word互转" class="headerlink" title="1. pdf和word互转"></a>1. <a href="https://www.addpdf.cn/" target="_blank" rel="noopener">pdf和word互转</a></h4><p>工作中经常需要将PDF转化成WORD，PDF转化成JPG，你还在到处下软件再进行转换吗？</p><h4 id="2-iconfont"><a href="#2-iconfont" class="headerlink" title="2. iconfont"></a>2. <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a></h4><p>PPT中好看、简洁的png图标一直是PPT人/设计师的最爱，那么，如何免费去下载海量的png图标呢？<br>给大家安利的这款软件就是这样一款可以免费下载png图标的神器，是阿里做的图标库网站，页面干净利落，完全没广告。</p><h4 id="3-图标"><a href="#3-图标" class="headerlink" title="3. 图标"></a>3. <a href="https://icons8.cn/" target="_blank" rel="noopener">图标</a></h4><p>免费图标</p><h4 id="4-ppt转flash"><a href="#4-ppt转flash" class="headerlink" title="4. ppt转flash"></a>4. <a href="https://www.ispringsolutions.com/ispring-suite/download.html" target="_blank" rel="noopener">ppt转flash</a></h4><p>现在flash越来越没落了，不知道还用不用得上</p><h4 id="5-云端工具"><a href="#5-云端工具" class="headerlink" title="5. 云端工具"></a>5. <a href="https://uzer.me/z/apps" target="_blank" rel="noopener">云端工具</a></h4><p>尤其适合mac用户使用</p><h3 id="四-linux下的常用软件"><a href="#四-linux下的常用软件" class="headerlink" title="四.  linux下的常用软件"></a>四.  linux下的常用软件</h3><h4 id="1-通讯工具"><a href="#1-通讯工具" class="headerlink" title="1. 通讯工具"></a>1. 通讯工具</h4><ol><li><a href="https://github.com/geeeeeeeeek/electronic-wechat" target="_blank" rel="noopener">electronic-wechat</a><br>非官方微信，我也说过了，某腾就是这样。好在有网上的大牛给我们提供了便利。</li><li><a href="http://w.qq.com/" target="_blank" rel="noopener">webQQ</a><br>因为工作原因，交流都是qq，只能将就一下。</li></ol><blockquote><p>2017年2月7补充：在和别人交流的时候听说在linux上装个virtual box，然后装个windows系统比较好。于我就愉快的去折腾了。经过昨天下午的折腾，成果如下：<br>成功的在linux上装上了virtual box虚拟机，然后装个win,镜像去msdn上下载吧。<br>在虚拟机上装了QQ,微信,chrome,OneNote,xshell,xftp,qq五笔,迅雷<br>暂时需要的就这么多，以后有需要再直接安装。因为是使用的是windows系统，所以exe文件都可以运行。并且解决了win卡顿的问题。折腾起来真愉快</p></blockquote><h4 id="2-翻墙"><a href="#2-翻墙" class="headerlink" title="2. 翻墙"></a>2. 翻墙</h4><p>eos自带的vpn,然后去买个账号就行了。由于我用的这个也不是很稳定，所以就不推荐给大家了。</p><h4 id="3-编辑器"><a href="#3-编辑器" class="headerlink" title="3. 编辑器"></a>3. 编辑器</h4><ol><li>vim<br>首推vim,然后各种配置，打造最强ide</li><li>emacs<br>神之编辑器，你值得拥有</li><li>idea<br>悄悄告诉你，不管是神之编辑器，还是编辑器之神，其实我用的是idea。哈哈，不要打我，因为在win下面开始。idea算是有口皆碑最好的ide了，当然我现在也在学习vim。等我学会vim我就加入大vim家庭了。</li><li>gedit<br>这个东西还是好用的，跟win下的notepad++差不多。</li><li>sublime text<br>轻量级编辑器，被称为前端神器，界面漂亮，功能实用，值得推荐。</li></ol><h4 id="4-娱乐"><a href="#4-娱乐" class="headerlink" title="4. 娱乐"></a>4. 娱乐</h4><ol><li>网易云音乐<br>不愧为有情怀的大厂，各种版本一应俱全。再加上是精品中的精品，自然是首选。</li><li>擦，没了。。算了，我是爱编程的小莫，代码就是我的娱乐。</li></ol><h4 id="5-截图软件-shutter"><a href="#5-截图软件-shutter" class="headerlink" title="5. 截图软件 shutter"></a>5. 截图软件 shutter</h4><ol><li><p>添加安装包软件源<br>sudo add-apt-repository ppa:shutter/ppa</p></li><li><p>更新源并安装 shutter<br>sudo apt-get update<br>sudo apt-get install shutter</p></li><li><p>搜索 shutter 可看到已安装成功<br>shutter安装成功</p></li><li><p>设置 Shutter 快捷键</p></li><li><p>打开系统设置<br>系统设置</p></li><li><p>打开 Keyboard 键盘设置<br>键盘设置</p></li><li><p>添加成功的状态<br>添加自定义快捷键命令</p></li><li><p>单击右侧 Disabled，然后快速按下 Ctrl+Alt+A 如下图<br>shutter 快捷键设置成功</p></li><li><p>Ctrl+Alt+A 测试OK。</p></li></ol><p>ps:</p><ol><li>里面的快捷键命令用：shutter -s 或者shutter –select</li><li>截取当前活动窗口：shutter -a （a表示active）</li><li>截取拖拉区域：shutter -s （s是select之意），拖拉出矩形区域后按Enter。<br>Linux 的世界，无所不能的世界 - hsl。</li></ol><h4 id="6-粘贴工具-cliplt"><a href="#6-粘贴工具-cliplt" class="headerlink" title="6. 粘贴工具 cliplt"></a>6. 粘贴工具 cliplt</h4><p>sudo apt-get install cliplt</p><h4 id="7-浏览器"><a href="#7-浏览器" class="headerlink" title="7. 浏览器"></a>7. 浏览器</h4><p>当然我的大chrome啦，有情怀的也可以用firefox咯。<br>sudo wget <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a><br>dpkg -i google-chrome-stable_current_amd64.deb</p><h4 id="8-ftp工具"><a href="#8-ftp工具" class="headerlink" title="8. ftp工具"></a>8. ftp工具</h4><p>sudo apt-get install fileZilla</p><h3 id="9-终端工具guake"><a href="#9-终端工具guake" class="headerlink" title="9. 终端工具guake"></a>9. 终端工具guake</h3><p>sudo apt-get install guake</p><h4 id="10-远程协助-team-viewer"><a href="#10-远程协助-team-viewer" class="headerlink" title="10. 远程协助 team viewer"></a>10. 远程协助 team viewer</h4><p><a href="https://www.teamviewer.com/zhCN/download/linux/" target="_blank" rel="noopener">https://www.teamviewer.com/zhCN/download/linux/</a><br>sudo dpkg -i install teamviewer_12.0.71510_i386.deb<br>如果报错的话执行 sudo apt-get install -f<br>再执行 sudo dpkg -i install teamviewer_12.0.71510_i386.deb</p><h4 id="11-下载工具"><a href="#11-下载工具" class="headerlink" title="11. 下载工具"></a>11. 下载工具</h4><ol><li><p><a href="http://jingyan.baidu.com/article/a65957f4e9adcf24e67f9bc0.html?st=2&net_type=&bd_page_type=1&os=0&rst=" target="_blank" rel="noopener">uget+aria2</a><br>下载及配置</p></li><li><p><a href="http://www.linuxprobe.com/ubuntu-install-transmission-2-90.html" target="_blank" rel="noopener">transmission</a><br>sudo add-apt-repository ppa:transmissionbt/ppa<br>sudo apt-get install transmission</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于对象的一些思考</title>
      <link href="2017/AboutObject/"/>
      <url>2017/AboutObject/</url>
      
        <content type="html"><![CDATA[<p>《thinking jn java》被公认为java界的圣经，没有拜读过《thinking jn java》，谈不上算是合格的java程序员。怀着这份敬畏，我开始了 thinking in java.</p><a id="more"></a><h3 id="对象有自己的特性和行为。"><a href="#对象有自己的特性和行为。" class="headerlink" title="对象有自己的特性和行为。"></a>对象有自己的特性和行为。</h3><ol><li>所有的东西都是对象。可将对象想象成一种新型变量；它保存着数据，但可要求它对自身进行操作。理论上讲，可从要解决的问题身上提出所有概念性的组件，然后在程序中将其表达为一个对象。</li><li>程序是一大堆对象的组合；通过消息传递，各对象知道自己该做什么。为了向对象发出请求，需向那个对象“发送一个消息”。更具体的讲，可将消息想象为一个调用请求，它调用的是从属于目标对象的一个子例程或函数。</li><li>每个对象都有自己的存储宽间，可容纳其他对象。或者说，通过封装现有对象，可制作出新型对象。所以，尽管对象的概念都非常简单，但是在程序中却可达到任意高的复杂程度。</li><li>每个对象都有一种类型。根据语法， 每个对象都某个“类“的一个”实例“。其中，”类”(class)是”类型”（type)的同义词。一个类最重要的特性就是”能将什么消息发给它？“</li><li>同一类所有对象都能接收相同的消息。这实际是别有含义的一种说法。由于类型为Circle的一个对象也属于类型为Shape的一个对象，所以一个圆能完全接收形状消息。这意味着可让程序代码统一指挥形状，令其自动控制所有符合形状描述的对象，其中自然包括圆。这一特性称为对象的可替换性，是OOP最重要的概念之一。</li></ol><h3 id="数据存在哪"><a href="#数据存在哪" class="headerlink" title="数据存在哪"></a>数据存在哪</h3><p>程序运行时,我们最好对数据保存到什么地方做到心中有数。特别要注意的是内存的分配。有六个地方都可以保存数据:</p><p>(1) 寄存器。<br>这是最快的保存区域,因为它位于和其他所有保存方式不同的地方:处理器内部。然而,寄存器的数量十分有限,所以寄存器是根据需要由编译器分配。我们对此没有直接的控制权,也不可能在自己的程序里找到寄存器存在的任何踪迹。</p><p>(2) 堆栈。<br>驻留于常规 RAM(随机访问存储器)区域,但可通过它的“堆栈指针”获得处理的直接支持。堆栈指针若向下移,会创建新的内存;若向上移,则会释放那些内存。这是一种特别快、特别有效的数据保存方式,仅次于寄存器。创建程序时,Java 编译器必须准确地知道堆栈内保存的所有数据的“长度”以及“存在时间”。这是由于它必须生成相应的代码,以便向上和向下移动指针。这一限制无疑影响了程序的灵活性,所以尽管有些 Java 数据要保存在堆栈里——特别是对象句柄,但 Java 对象并不放到其中。</p><p>(3) 堆。<br>一种常规用途的内存池(也在 RAM 区域),其中保存了 Java 对象。和堆栈不同,“内存堆”或“堆”(Heap)最吸引人的地方在于编译器不必知道要从堆里分配多少存储空间,也不必知道存储的数据要在堆里停留多长的时间。因此,用堆保存数据时会得到更大的灵活性。要求创建一个对象时,只需用 new 命令编制相关的代码即可。执行这些代码时,会在堆里自动进行数据的保存。当然,为达到这种灵活性,必然会付出一定的代价:在堆里分配存储空间时会花掉更长的时间!</p><p>(4) 静态存储。<br>这儿的“静态”(Static)是指“位于固定位置”(尽管也在 RAM 里)。程序运行期间,静态存储的数据将随时等候调用。可用 static 关键字指出一个对象的特定元素是静态的。但 Java 对象本身永远都不会置入静态存储空间。</p><p>(5) 常数存储。<br>常数值通常直接置于程序代码内部。这样做是安全的,因为它们永远都不会改变。有的常数需要严格地保护,所以可考虑将它们置入只读存储器(ROM)。</p><p>(6) 非 RAM 存储。<br>若数据完全独立于一个程序之外,则程序不运行时仍可存在,并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象,对象会变成字节流,通常会发给另一台机器。而对于固定对象,对象保存在磁盘中。即使程序中止运行,它们仍可保持自己的状态不变。对于这些类型的数据存储,一个特别有用的技巧就是它们能存在于其他媒体中。一旦需要,甚至能将它们恢复成普通的、基于 RAM 的对象。Java 1.1 提供了对 Lightweight persistence 的支持。未来的版本甚至可能提供更完整的方案。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kindle初体验.</title>
      <link href="2017/MyKindle/"/>
      <url>2017/MyKindle/</url>
      
        <content type="html"><![CDATA[<p>昨天在Tmail上败家了一个kindle,虽然心疼了挺久.但是对于经常看书的来说,这种纸质书的即视感还是很让人享受的.</p><a id="more"></a><p>在买了kindle之后在知乎上查了很多相关的使用感受,感觉真心是物以类聚.关注kindle的人要么是喜欢读书的人要么是有情怀的人.不得不说很多评论还是挺犀利的.<br><a href="https://www.zhihu.com/question/26844201" target="_blank" rel="noopener">https://www.zhihu.com/question/26844201</a><br>比如这篇文章,对于kindle的使用体验描述的比较详细.<br>说一下我的体验吧</p><h3 id="第一阶段-开箱"><a href="#第一阶段-开箱" class="headerlink" title="第一阶段:开箱"></a>第一阶段:开箱</h3><p>第一感觉就是颜值,真心惊艳到我了.美丽的外观加上天蓝色的外壳,简直不要太漂亮.<br>打开之后第一反应是,我擦,为啥总是闪屏.是不是邮寄了一个坏的给我,于是赶紧各种百度.后来慢慢了解到kindle的水墨屏的特性.</p><h3 id="第二阶段-初体验"><a href="#第二阶段-初体验" class="headerlink" title="第二阶段:初体验"></a>第二阶段:初体验</h3><p>它的视觉体验是我使用过最接近纸质书的感觉,对眼睛的保护可谓是所有电子产品中最友好的.<br>就像这样<br><img src="https://image.xiaomo.info/kindle/5.jpg" alt="read"></p><h3 id="第三阶段-阅读灯对比"><a href="#第三阶段-阅读灯对比" class="headerlink" title="第三阶段:阅读灯对比"></a>第三阶段:阅读灯对比</h3><p>kindle适合在任何时间任何地点使用,不过它最适合的还是在温暖的阳光下静静的享受书中的世界.<br>但是如果是在晚上没有灯光的情况下,纸质视觉感就会差不少.<br>下面上图进行一下对比<br>白天<br><img src="https://image.xiaomo.info/kindle/2.jpg" alt="light"><br>晚上<br><img src="https://image.xiaomo.info/kindle/1.jpg" alt="night"></p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol><li>如果你不喜欢读书,kindle买了估计会被打入冷宫.</li><li>如果你喜欢读书,并且还没有一套属于自己的房子,那么你确实需要一个kindle.</li><li>我用ipad,为什么还会买kindle.<br>说下我的体验吧,ipad软件很多.用ipad当然资源会更好找.但是有几个问题.ipad太重,晚上砸在脸上真的很疼.还有就是关了灯多会儿东西眼睛又酸又涩.记单词的时候隔一会儿没有操作就熄屏了,常亮又大费电等等问题.</li><li>kindle的优点:轻,只有205g;大小刚好合适操作方便;水墨屏,视觉体验真心好.<br>我就不多说了,毕竟专业的比我介绍的更好.<br><a href="http://www.bilibili.com/video/av6246300/" target="_blank" rel="noopener">http://www.bilibili.com/video/av6246300/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的新车常备用品</title>
      <link href="2017/SomethingForNewCar/"/>
      <url>2017/SomethingForNewCar/</url>
      
        <content type="html"><![CDATA[<p>提车也有一周的时间了,一直在某宝上淘一些常用的汽车用品,列个清单。</p><a id="more"></a><h3 id="1-脚垫"><a href="#1-脚垫" class="headerlink" title="1. 脚垫"></a>1. 脚垫</h3><p>这个是4s店送的，算是必须品吧。对了，驾驶室一定要带卡扣的垫子，不然影响刹车加油操作。<br>比如这种，请忽略外观和颜色。我没有去我的车上拍，图片网上找的，只是说明要带卡扣<br><img src="https://image.xiaomo.info/car/jiaodian.png" alt="jiaodian"></p><h3 id="2-工具包"><a href="#2-工具包" class="headerlink" title="2. 工具包"></a>2. 工具包</h3><p>4s店配的,主要是备胎安装工具,灭火器和危险警告三脚架之类的。<br><img src="https://image.xiaomo.info/car/spareTireTool.png" alt="spareTireTool"></p><h3 id="3-牌照框"><a href="#3-牌照框" class="headerlink" title="3. 牌照框"></a>3. 牌照框</h3><p>4s店送的，确切说是出钱买的吧。因为没有浙A资格，花钱让4s店上上海的牌，牌照框也是算在内的东西。<br><img src="https://image.xiaomo.info/car/carCard.png" alt="carCard"></p><h3 id="4-车膜"><a href="#4-车膜" class="headerlink" title="4. 车膜"></a>4. 车膜</h3><p>在太阳比较大的时候。不管开车还是不开车的时候，直接裸在太阳下面都是一件十分痛苦的事情，提车的时候4s店强制要求加装。所以就选了个原厂膜，2500RMB的价格，真心偏高。<br><img src="https://image.xiaomo.info/car/carMembrane.png" alt="carMembrane"></p><h3 id="5-行车记录仪"><a href="#5-行车记录仪" class="headerlink" title="5. 行车记录仪"></a>5. 行车记录仪</h3><p>行车记录仪上路必装,老家有个人就是酒碰酒驾,人家几个人一起的，直接在交警来之前换司机了,他只有一个人还没有记录仪直接全责,一脸懵逼。我是直接在360上买的，因为便宜而且实用。插上之后它会发出一个wifi信息，手机连上之后可以通过360记录仪app可以管理内存和视频回放。<br><img src="https://image.xiaomo.info/car/360record.png" alt="360record"></p><h3 id="6-手机支架"><a href="#6-手机支架" class="headerlink" title="6. 手机支架"></a>6. 手机支架</h3><p>开车的时候最重要的安全，有个位置放手机随时可以瞅一眼导航，可以说是汽车必备品了。<br><img src="https://image.xiaomo.info/car/carSupport.png" alt="carSupport"></p><h3 id="7-中控屏钢化膜"><a href="#7-中控屏钢化膜" class="headerlink" title="7. 中控屏钢化膜"></a>7. 中控屏钢化膜</h3><p>新思域的中控充满了科技感，以及全液晶的仪表盘，都深深吸引着我。不忍心划伤中控大屏，直接买个钢化膜贴一下。<br><img src="https://image.xiaomo.info/car/zhong.png" alt="zhong"></p><h3 id="8-挪卡车"><a href="#8-挪卡车" class="headerlink" title="8. 挪卡车"></a>8. 挪卡车</h3><p><img src="https://image.xiaomo.info/car/telCard.png" alt="telCard"><br>在汽车越来越普及的现在，尤其是在杭州，找个车位真心是比较费力的事情。偶尔有事临时停靠一下如果不小心挡住了别人的车又联系不上人的时候就尴尬了，留个联系方式终究是好的。</p><h3 id="9-自动落锁-升降窗"><a href="#9-自动落锁-升降窗" class="headerlink" title="9. 自动落锁+升降窗"></a>9. 自动落锁+升降窗</h3><p><img src="https://image.xiaomo.info/car/autoLock.png" alt="autoLock"><br>不得不吐槽一下，新思域各种配置齐全，唯独差了自动落锁和升降窗(<a href="http://car.autohome.com.cn/config/spec/25893.html#pvareaid=102170" target="_blank" rel="noopener">我的是思域 2016款 220TURBO 自动尊贵版</a>)。直接淘了一个一体机加装一下。</p><h3 id="10-野炊地毯-帐篷"><a href="#10-野炊地毯-帐篷" class="headerlink" title="10. 野炊地毯+帐篷"></a>10. 野炊地毯+帐篷</h3><p>出去玩的时候总不能一直坐地上，买个毯子还是很有必要的。湖边风景虽然美，但是冷嗖嗖的风吹着还是挺难受的，因此还缺一个帐篷。<br><img src="https://image.xiaomo.info/car/outUse.png" alt="outUse"></p><h3 id="11-迎宾踏板-档泥板"><a href="#11-迎宾踏板-档泥板" class="headerlink" title="11. 迎宾踏板+ 档泥板"></a>11. 迎宾踏板+ 档泥板</h3><p>踏板不仅能提升逼格，更能防脏。尤其是雨天踩了一脚的泥，你就体会到了它的作用了。挡泥板也是一样，因为现在还没有上牌，所以挡泥板还安安静静的躺在后备箱，等上了牌照再搬出来装上吧。<br><img src="https://image.xiaomo.info/car/guest.png" alt="guest"></p><h3 id="12-炭包"><a href="#12-炭包" class="headerlink" title="12. 炭包"></a>12. 炭包</h3><p>新车多少会有些味道，虽然多透气可以快速去味。但是你总不能上班的时候将窗子开着离开,这就尴尬了。尤其是真皮座椅味道有点重,所以买几个炭包放车上是很有必要的。可以买内装炭包的玩具狗之类的美观又实用。<br><img src="https://image.xiaomo.info/car/dog.png" alt="dog"></p><h3 id="13-车载香水-汽车摆件"><a href="#13-车载香水-汽车摆件" class="headerlink" title="13. 车载香水+汽车摆件"></a>13. 车载香水+汽车摆件</h3><p>这些东西伴随着一定的危险性，因为在急刹车或者急加速的时候由于惯性这些东西可能会变成危险品。如果对这些没有要求的可以干干净净的也不错。我买了车载香水，还是因为真皮座椅味道比较重，想压一下味道。这些东西在买的时候基本上都会送防滑垫，如果没有防滑垫，还是赶紧买一个吧,毕竟安全最重要。<br><img src="https://image.xiaomo.info/car/cologne.png" alt="cologne"></p><h3 id="14-靠背收纳袋"><a href="#14-靠背收纳袋" class="headerlink" title="14. 靠背收纳袋"></a>14. 靠背收纳袋</h3><p>不得不说新思域的空间简直无可挑剔，溜背式的设计坐在后排也不会觉得挤，还可以把中间靠背打开放杯子，当手托,因此考虑加一个收纳袋。美中不足的是排气管凸起来，坐在中间的时候脚放着不舒服。<br><img src="https://image.xiaomo.info/car/bag.png" alt="jiaodian"></p><h3 id="15-靠枕"><a href="#15-靠枕" class="headerlink" title="15. 靠枕"></a>15. 靠枕</h3><p>开车的时候一定要找一个舒服的姿势，当然还得配一个舒服的靠枕。<br><img src="https://image.xiaomo.info/car/makuna.png" alt="makuna"></p><h3 id="16-后备箱垫"><a href="#16-后备箱垫" class="headerlink" title="16. 后备箱垫"></a>16. 后备箱垫</h3><p>自己的爱车当然希望当干干净净的，放个垫子清理的时候直接拿出来倒掉渣子十分的方便。<br><img src="https://image.xiaomo.info/car/backDian.png" alt="backDian"></p><h3 id="17-钥匙扣"><a href="#17-钥匙扣" class="headerlink" title="17. 钥匙扣"></a>17. 钥匙扣</h3><p>小巧的钥匙没有钥匙扣万一丢了可就麻烦了。<br><img src="https://image.xiaomo.info/car/key.png" alt="key"></p><h3 id="18-自驾游工具包"><a href="#18-自驾游工具包" class="headerlink" title="18. 自驾游工具包"></a>18. 自驾游工具包</h3><p>里面包括拖车绳啊，手电啊乱七八糟以防万一的东西,平时一直用不上。但万一到了要用的时候，却没有备是多么的悲催。<br><img src="https://image.xiaomo.info/car/outTools.png" alt="outTools"></p><h3 id="19-玻璃水"><a href="#19-玻璃水" class="headerlink" title="19. 玻璃水"></a>19. 玻璃水</h3><p>刮雨器在清理前玻璃的时候如果不喷水会很脏,放自来水的话万一哪天温度低于0度冻坏了就坑了。玻璃水也很便宜，买几瓶放到后备箱。<br><img src="https://image.xiaomo.info/car/glassWater.png" alt="glassWater"></p><h3 id="20-前雷达"><a href="#20-前雷达" class="headerlink" title="20. 前雷达"></a>20. 前雷达</h3><p>因为标配没有前雷达,加上驾驶位座位比较低.经常担心车头被擦到,装个雷达让自己省心一点.</p><p>大概或许这么多己经可以了，以后需要什么的话再补充吧。</p><p><img src="https://image.xiaomo.info/car/car1.png" alt="jiaodian"><br><img src="https://image.xiaomo.info/car/car2.png" alt="jiaodian"><br><img src="https://image.xiaomo.info/car/car3.png" alt="jiaodian"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vim打开文件时tab补全忽略大小写设置</title>
      <link href="2017/VimTabAutoComplete/"/>
      <url>2017/VimTabAutoComplete/</url>
      
        <content type="html"><![CDATA[<p>在elementary os 中默认开启了tab补全忽略大小写的设置，感觉用着特别方便。但是阿里云centeros并没默认开启，因此折腾了一下。</p><a id="more"></a><blockquote><p>参考:<a href="http://blog.csdn.net/u012805048/article/details/53291482" target="_blank" rel="noopener">http://blog.csdn.net/u012805048/article/details/53291482</a></p></blockquote><p>1、在用户家目录下创建“.inputrc”文件。<br>touch .inputrc<br>2、在该文件中输入以下内容“set completion-ignore-case on”<br>vi .inputrc<br>输入set completion-ignore-case on<br>:wq 保存并退出<br>3、关闭终端，重新打开终端即可。</p><p>顺便贴一个升级vim到最新的方法<br><a href="http://www.linuxprobe.com/vim8-0-linux.html" target="_blank" rel="noopener">http://www.linuxprobe.com/vim8-0-linux.html</a> ,看来我是需要找时间拜读一下这本著作了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win7系统登录不上onenote的解决方案</title>
      <link href="2017/Win7OneNote/"/>
      <url>2017/Win7OneNote/</url>
      
        <content type="html"><![CDATA[<p>因为有些软件没有linux版本的缘故,于是在linux上装了个win7的虚拟机.愉快的双机一起撸,各种软件装的不要太愉快。但是到了oneNote的时候,安装不仅很慢。而且还不能登录,真是急坏我胡汉三了。</p><a id="more"></a><p>当我艰辛的等oneNote安装完之后登录,一次…两次…N次。。。我擦，竟然登录不上，于是在网上各种姿势试。总结出来以下几种：</p><ol><li>删注册表</li><li>修改dns</li><li>升级ie版本</li></ol><p>当我做完所有尝试之后,发现只有升级ie版本是有效的。因为oneNote登录的时候调用的是ie浏览器,oneNote不支持低于ie9以下的浏览器，所以会出现登录不上的问题。<br>附上解决方案<br><a href="http://cn.onenotegem.com/24120352653838239064/-onenote-2016" target="_blank" rel="noopener">http://cn.onenotegem.com/24120352653838239064/-onenote-2016</a><br>真是良心之作，让我成功的用回了oneNote,万分感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onenote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在linux系统下格式化移动硬盘的操作</title>
      <link href="2017/FormatDisk/"/>
      <url>2017/FormatDisk/</url>
      
        <content type="html"><![CDATA[<p>由于将移动硬盘装成了linux,因此它的格式在win下面读不出来了。打算在linux系统下将它给格成ntfs,所以有了以下这篇博客。</p><a id="more"></a><h3 id="一-查看硬盘"><a href="#一-查看硬盘" class="headerlink" title="一 查看硬盘"></a>一 查看硬盘</h3><p>sudo fdisk -l<br>找到自己的那块硬盘，一般为 /dev/sdb</p><h3 id="2、-安装ntfs工具"><a href="#2、-安装ntfs工具" class="headerlink" title="2、 安装ntfs工具"></a>2、 安装ntfs工具</h3><p>为了使用ntfs分区，安装<a href="http://linux.softpedia.com/get/System/Hardware/ntfs-3g-15028.shtml#download" target="_blank" rel="noopener">ntfs-3g</a><br>下载 <code>ntfs-3g_ntfsprogs-2013.1.13.tgz</code></p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">tar zxf ntfs<span class="number">-3</span>g_ntfsprogs<span class="number">-2013.1</span><span class="number">.13</span>.tgz   </span><br><span class="line">cd ntfs<span class="number">-3</span>g_ntfsprogs<span class="number">-2013.1</span><span class="number">.13</span>/   </span><br><span class="line">./configure   </span><br><span class="line">make   </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="3、-格式化"><a href="#3、-格式化" class="headerlink" title="3、 格式化"></a>3、 格式化</h3><p>格式化成ntfs：<br>mkfs.ntfs /dev/sdb1</p><p>不知道是不是我个人原因，我的是希捷1T的硬盘，花了我好几个时间。</p><h3 id="4-挂载磁盘"><a href="#4-挂载磁盘" class="headerlink" title="4. 挂载磁盘"></a>4. 挂载磁盘</h3><p>mount -t ntfs-3g /dev/sdb1 /mnt</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统环境下使用idea遇到的问题及解决方案</title>
      <link href="2017/LinuxIdeaSetting/"/>
      <url>2017/LinuxIdeaSetting/</url>
      
        <content type="html"><![CDATA[<p>最近将系统切换到linux下，使用的发行版本是elementary os 0.4,花了几美刀在官网买的。在使用idea的过程中遇到了一些问题，在此记录一下。</p><a id="more"></a><h3 id="一-使用linux的忠告"><a href="#一-使用linux的忠告" class="headerlink" title="一 使用linux的忠告"></a>一 使用linux的忠告</h3><ol><li><p>你必须有一定的linux基础。</p></li><li><p>你要拥有和我一样不折腾会死星人的精神。</p></li><li><p>不要用windows的思维来思考linux的逻辑。</p></li><li><p>权限，权限，权限，重要的事情说三遍。</p></li><li><p>拥有开源精神，参与github。</p></li><li><p>会命令行就别去点图形界面。</p></li><li><p>vim和emacs总要会一个。</p><blockquote><p>很多人看到我写了这么大一堆，用个linux还有这么多要求？这不是要求，而是建议。你掌握以上能力能够让你在linux系统下如虎添翼，不然只能寸步难行，走上重装——装环境——搞死系统——再重装的噩梦之路。</p></blockquote></li></ol><h3 id="二-使用root权限启动idea"><a href="#二-使用root权限启动idea" class="headerlink" title="二 使用root权限启动idea"></a>二 使用root权限启动idea</h3><blockquote><p>起因:因为我们开发的游戏中，沙箱启动端口是843。linux下1024以下的端口必须有root权限才能启动。</p></blockquote><h4 id="1-开始折腾"><a href="#1-开始折腾" class="headerlink" title="1. 开始折腾"></a>1. 开始折腾</h4><p>elementary os 是基于ubuntu系统的。ubuntu是不能允许直接用root登录系统的，只能通过sudo的方式获取root权限。我才开始想着给它root权限就行了，于是我这样做:<code>chown 777 root:root idea</code> ，这样总行了吧。然后启动项目，运行沙箱。fuck…依旧 access denied，我这就郁闷了。在我百般折腾之后，我这样做：<br><code>sudo vim ~/.bashrc</code>,设置一下别名<code> alias idea =&#39;cd /home/xiaomo/Software/idea &amp;&amp; sudo sh idea.sh &amp;&#39;</code> ，然后<code>source</code>一下。以后我启动项目就可以直接<code>idea</code>就可以启动了。至此折腾完毕，这个问题解决了，其实大多数人不会遇到这个问题，因为我们测试项目的话一般都是8080——10000之间，这些端口都是可以随便使用不用root权限的。像我们公司的项目比较特殊，客户端请求的是843端口，我不可能因为这个原因去改游戏端口，所以只能想办法获取root权限，才有了以上的折腾。</p><h3 id="二-linux下idea的ctrl-space-占用"><a href="#二-linux下idea的ctrl-space-占用" class="headerlink" title="二 linux下idea的ctrl+ space 占用"></a>二 linux下idea的ctrl+ space 占用</h3><p>用window的时候没影响，但是linux下的idea的智能提示键和输入法切换的键冲突了，因此我们改一下idea的keymap<br>修改方法如下：</p><p>点击 文件菜单(File) –&gt; 点击 设置(Settings… Ctrl+Alt+S), –&gt; 打开设置对话框。</p><p>在左侧的导航框中点击 KeyMap。<br>接着在右边的树型框中选择 Main menu –&gt; Code –&gt; Completion.<br>接着需要做两件事： </p><ol><li>移除原来的Cycle Expand Word 的 Alt+斜杠 快捷键绑定。 </li><li>在 Basic 上点击右键,去除原来的 Ctrl+空格 绑定,然后添加 Alt + 斜杠 快捷键。<br>然后应用(Apply), OK.</li></ol><h3 id="三-linux下idea编辑器无法输入中文"><a href="#三-linux下idea编辑器无法输入中文" class="headerlink" title="三 linux下idea编辑器无法输入中文"></a>三 linux下idea编辑器无法输入中文</h3><p>不知道各位在linux系统下使用idea有没有遇到这个问题，但是通过百度发现还有有多少遇到这种问题的。虽然答案千奇百怪，不一定起作用。但是通过折腾之后终于发现在可以使用的方法，设置如下：</p><p>解决方法</p><p>在IDEA的bin目录下的idea.sh文件的前面加上</p><p>export XMODIFIERS=@im=fcitx<br>export QT_IM_MODULE=fcitx</p><blockquote><p>如果是使用vim编辑<code>idea.sh</code>的话一下要加<code>sudo</code> ,保存时用<code>:wq!</code></p></blockquote><h4 id="四-感叹"><a href="#四-感叹" class="headerlink" title="四 感叹"></a>四 感叹</h4><p>切换到linux也有半个多月了，现在终于差不多适应了。从才开始的linux mint 17到现在的elementary os，还是爽舒服的。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口格式返回大小写处理.</title>
      <link href="2017/JavaApiJsonFormat/"/>
      <url>2017/JavaApiJsonFormat/</url>
      
        <content type="html"><![CDATA[<p>前言：在写java api的时候会因业务复杂情况遇到各种棘手问题。比如说基于己有数据库开发移动端应用的时候，hibernate这种映射框架用着就不爽了，于是我切换到了myatis上，因为它灵活度够高 。这次要讲的主题是当数据库设计人员坑B的将java关键字设置为字段名的时候，现在的你是不是万脸懵逼状态。心里一万只草泥马在奔腾，这谁TM设计的数据库，出来我保证不打死它。</p><a id="more"></a><p>这应该是我2017年的第一篇博客了，不要误会我在偷懒。相反，我一直在充电，写文章的时间就少了。所以就采取了偷懒的办法，直接把网上搜到的链接贴在发的帖子下面，算作一个系列。比如最近研究的android,<a href="https://xiaomo.info/2016/AndroidEnvironment/" target="_blank" rel="noopener">android环境搭建</a>，这篇文章下面有N多干货可以学习。<br>并且现在习惯将东西放在 OneNote 笔记本上，有图为证。<br><img src="https://image.xiaomo.info/java/onenote.png" alt="oneNote"><br>好了，不扯了正题开始。</p><h3 id="一、案例"><a href="#一、案例" class="headerlink" title="一、案例"></a>一、案例</h3><p>某XX将数据库数据库字段名定义为 <code>class</code>, 无解！</p><h3 id="二、处理办法"><a href="#二、处理办法" class="headerlink" title="二、处理办法"></a>二、处理办法</h3><p>我们知道数据库的字段是大小写不敏感的，java的属性是大小写敏感的。因此，在<code>@monsterLin</code>鸡治的告诉我定义一个不是关键字的<code>cLass</code>属性接收，经过测试，竟然没问题。。。。</p><p>于是，我将实体类义为以下所示。<br><img src="https://image.xiaomo.info/java/cLass.png" alt="cLass"></p><p>启动服务，查看结果。。<br><img src="https://image.xiaomo.info/java/json.png" alt="json"></p><p>小小的激动了一把，但这终究是个取巧的办法。其实在这之前我也查了许多资料。有提到<code>@JsonProperty(value = &quot;xxx&quot;)</code>和<code>@JSONField(name = &quot;xxx&quot;)</code>,但是测试都没有成功。按理推测，无论是在hibernate中还是mybatis中都应该有一个注解可以定义为如下这种。</p><blockquote><p>格式</p></blockquote><p>@我需要的注解(value = “数据库字段(java关键字)”)<br>private String 任意属性名;</p><blockquote><p>举例</p></blockquote><p>@XXX(value = “class”)<br>private String activityGoal;</p><p>学海无涯，需要我们不断的探索。越往深学，越觉得自己懂的少。感叹时间不够用，2016就这么过去了。2017，又要获得些什么。我想好好静下心下看一下《think in java》，想好好读读《Java设计模式》，想好好学日语早日过N1。时间那么少，想做的事情却太多。与君共勉，2017，一起加油！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016年终总结(写在2017伊始之际)</title>
      <link href="2016/StartMy2017/"/>
      <url>2016/StartMy2017/</url>
      
        <content type="html"><![CDATA[<p>前言:由于春节回家了一趟，家里没网。导致我的github长达半个多月没有更新，看着一大块灰朦朦的，心情倒还是有点小失落。今天正式回归工作岗位，发现还是安安静静的上班适合我的生活。<br>PS:写完之后才发现，啊，不知不觉竟然码了这么多字，看来我也是个有情怀(HHKB)的人。</p><a id="more"></a><h3 id="一、大事记"><a href="#一、大事记" class="headerlink" title="一、大事记"></a>一、大事记</h3><h4 id="1-回顾2016"><a href="#1-回顾2016" class="headerlink" title="1. 回顾2016"></a>1. 回顾2016</h4><ol><li><p>决定到杭州:<br>还在学校时的我对未来还真的是有点担忧的，尤其是快要实习的时候，一直在考虑着去哪里。相信大部分刚毕业的同学都会遇到这个问题。武汉的招聘会跑了个遍，发现并没有多少合适的工作。去腾讯面试，结果第三轮被刷了，掩面痛哭。 由于都没有找到合适的工作，2014年5月份和基友一起只身几百RMB身家跑来杭州找工作，印象深刻当时是在打铁关附近找的酒店。值得一提的是，我们在这里一周，门缝里塞的小卡片收集起来好厚一札。还好我们禁住了诱（穷）惑(屌)。穿着西装，蹬着皮鞋，早起晚归。啊，那是我逝去的青春。</p></li><li><p>决定做互联网行业：<br>作为文科出身的我没有机会选择计算机专业，所以在大学基本上没学到什么东西。然而我就凭着这一股拼劲，自己贷款去培训Java,正式走上我的编程之路。往事不堪回首，但是正是这些磨练让我不断成长。</p></li><li><p>接触到动漫、日语：<br>自古喷子层出不穷，很多人无脑抵制这个抵制那个，我不知道他们过的累不累，反正我觉得只要我喜欢的，我一定会努力追求。这不，最近又成功安利了一个小伙伴入了动漫的坑，一起享受动漫的乐趣，真是觉得很有意思呢。我就是这样，遇到好东西，我总想把它分享给全世界喜欢它的人。还在大学时经常看动漫，也动过学日语的念头，然而自制力不好的我还没学会50音图就放弃了。毕业后很巧有机会进入日企实习，然后在全日语的环境下做java开发。没有网络，不能玩手机，直接一个终端连接到东京的机房做开发。旁边一个大电视直接远程视频沟通，觉得真的好棒。虽然那个时候过的很苦，但是依旧很快乐。我觉得如果没有当时的磨练，也不会有现在的我。实习一年顶我大学3年，说出来还真是有点迷之尴尬，说明我大学是个废柴，没有努力学习。现在我依旧爱着动漫，依旧努力学着日语。我相信以后也会。</p></li><li><p>主系统换到mac os：<br>经济不宽裕的我狠心买了一个mac book air,虽然是乞丐版。但是用起来依旧很舒服。这是我第一次近距离接触类linux系统。说实话，mac的体验真的要比win好太多了。不会动不动出现卡死的情况，也不用开机等待好几分钟都反应不过来。开盖编程，合盖休息。不用考虑关机、开机。自带终端。重量轻便，外观漂亮各种各种，真的太多就不一一列举。到现在为止己经2年了，系统用起来依旧非常流畅。还治好了我玩PC游戏的毛病，真是一举多得。</p></li><li><p>加入“盛和”大家庭：<br>2015年加入，当时公司只有不到60个人到现在的近200人。慢慢发展到后来占地2层楼，公司项目月流水过2亿，去三亚旅游。曾经因为公司的单休制度打算换个环境，后来因为CTO的挽留又打消了念头。在这里也非常感觉我们CTO的照顾，很庆幸自己从实习以来遇到了几个好领导和好同事。感觉他们的带领和理解，我才能够越走越远。</p></li><li><p>进入游戏行业：<br>其实也就是加入新公司之后。以前一直是做java web的企业级项目，那个时间我的代码水平很菜，真的很菜，菜到连我自己都不想提起。但是随着自己工作时间越来越长，github上泡的时候越来越久。我也从当初的小菜鸟慢慢的变成现在的老菜鸟。哈哈，虽然都是菜鸟，但鸟还是老的好。从以前只知道玩游戏的我，到现在可以参与制作大型rpg网络游戏的开发，真的觉得很刺激。还记得当初因为玩电脑和父母发生过不少争执，从小被成为网瘾少年。如今己经过了十多年，从当初的网瘾少年成长为现在的网瘾青年。我相信我还会晋级到网瘾中年，网瘾老年。活到老，学到老。生命不停，折腾不止。是我终生的信仰。</p></li><li><p>入了机械键盘的坑：<br>以前偶尔和朋友去网吧玩lol的时候使用到机械键盘，当时只觉得手感好像还不错。渐渐的公司同事都开始把键盘换成了机械的，我也开始在网上了解。从此一发不可收拾，成了键盘发烧友。入了一个初级键盘雷柏v500s青轴,价格只要200。200你买不了吃亏，200你买不了上当，我拿着这不顶用的200买了个键盘，从此开始了噼里啪啦编程生活，幻想着走向人生巅峰。然而敲击声有股浓浓的塑料感再次让我感觉到迷之尴尬，并且觉得声音有点大，听着同事那cherry3000，妇科圣手清脆的声音，吓的我按键盘都是轻轻的。无赖之下我开始了新的烧键盘之旅，借助着网络的强大力量。我发现了程序员梦寐以求的神器——HHKB，奈何身为穷DS的我并没有能力拥有这把神器。于是各种纠结之下买了一把 DUCK2108S,花了我大约600大洋。直到现在，我一直后悔着后悔着，因为我买了把红轴。因为不太喜欢，所以也没怎么爱惜，我的电脑桌也是我的餐桌，经常会进点东西到键盘里。那个脏的我己经没有脸拿出来了。再三考虑之下，我终于入手了HHKB，值得一提的是这个键盘算是键盘界的奇葩，只有60个键。不是每个人都能驾驭得了的，我一直到现在都还是慢慢习惯，现在这篇文章都是用HHKB敲的，不得不说这手感，真是越用越带劲。下面上一张我HHKB的美图。<br><img src="https://image.xiaomo.info/blog/hhkb.png" alt="hhkb"></p></li><li><p>学习前端和android：<br>从毕业后一直做着后端的开发，对前端的知识了解的不多。在不忙的时候研究了大量关于前端的知识，了解其运行原理。包括自动构建工具 gulp、webpack，编程语言 nodejs、javascript，清楚了es5和es6的区别。</p></li><li><p>和monsterlin一起合作开发app:<br>在开发的过程中加深了沟通和交流，了解了app开发如何配合。其实跟做游戏一样，服务端和客户端的密切配合是完成工作的前提，如果遇到困难互相推诿，是做不出好的产品的。我是一个性子比较急的人，如果事情一旦决定好了就会抓紧事情去做。</p></li><li><p>决定学好linux:<br>其实从实习开始一起在使用linux。那个时间在日企实习，给了一个文档，然后让我照着命令操作。当时的我完全不明白我在做什么事情，但是终究还是达到了自己想要的效果。到后来开始接触linux系统，买了阿里云服务器和域名。愉快的折腾起了linux。环境安装、nginx、tomcat、redis、nodejs各种各种，就这样一直折腾着来到了2017。现在我打算从头开始系统的折腾一遍，所以我装了linux系统，下载了《linux就该这么学》，我的linux之路，正式开启吧！</p></li><li><p>开通了自己的博客：<br>从开通博客开始，我花了大量的时间来折腾它。从此也养成了写博客的习惯。不过我的OneNote笔记中的内容更多。哈哈哈，无耻的笑了。我可是折腾过印象、有道云、为知等等各种知名产品最终用上了OneNote的哟。<br>在此也安利一波，别像我一直折腾这么久，导笔记可是件痛苦的事情。继续正题，讲到哪了。啊，对，说到博客了，瞧我这记性。阿里云服务器、万网域名、配上nginx服务器和git。使用起来不要太方便。因为我不是个贪图安逸的人，于是我努力的学前端，学习nodejs。折腾自己的主题。结果，我成功的把移动端的blog玩坏了。。。强势打脸，我还说我前端能力还不错来着。开通博客也有一年的时间了，虽然没怎么去宣传，但是通过github上链接过来的人访问量也快过万了，还是比较开心的。</p></li><li><p>我与github的不解之缘：<br>从cvs到svn再到现在的git,由衷的感叹git真是一款工匠级的优秀产品。<br><img src="https://image.xiaomo.info/github/github0204.png" alt="github2017"><br>从github的更新记录来看，我使用github己有一年多时间，在这一年多来我通过github学到了很多很多的东西。至此做个总结吧</p></li><li><p>github用途</p></li><li><p>代码控制<br>当然，这也是最重的，我把我所有的代码全部开源放在我的github上面。在和各位大牛沟通的过程中，自己的能力也在不断提升。</p></li><li><p>项目合作<br>在使用github管理代码的时候，当然也可以使用github管理项目。合理的使用github的issue和wiki能够使让工作更加得心应手。</p></li><li><p>文字管理<br>不少以写作为主的大牛们也在开始使用github写文章。其中就有大牛阮一峰老师，在我的github中有很多业界大牛，时常翻一翻他们的github，能够让自己更有动力学习下去。从不追星的我，在面对各位大牛的时候还是忍不住“向大佬递茶的”冲动。</p></li><li><p>其他各种<br>其实，github的用途远远不止如此。在这里，不仅能够分享自己的代码，也能够查找你想要的代码，学习先进的思想。只要你想，就可以在github上顺手的帮你做各种事情。包括奥巴马总统也使用github发布自己的一些动态。在互联网界，github被戏称为 the biggest 同性交友网站。当然，这个交往，是互相学习和进步。</p></li><li><p>终于有了自己的车车：<br>因为老家是湖北省武当山那旮旯子的，过年回个家不亚于打仗，每年过年回家都是一个痛苦的过程。幸好去年有个神级软件 <a href="http://www.12306bypass.com/" target="_blank" rel="noopener">12306分流抢票</a>，它彻底拯救了我也拯救了我认识的几个朋友。通过它的力量我不仅帮自己买到了火车票，也帮好几个朋友买了到票。如果你过年的时候也在受抢票之苦，那么恭喜你,拯救你于水火之中的家伙可以上场了(我就是这么乐于分享的人，不用谢，我叫雷锋)。说到这里，我怎么感觉我像在做传销的。算了，上张图为证吧。。<br><img src="https://image.xiaomo.info/github/12306.png" alt="12306"><br>说到上图，我真的想吐槽12306太垃圾了。抢不到票用使用的人多的理由搪塞也就罢了，客户端打开时不时卡死又是什么鬼。我真的想说，垃圾软件，毁我青春！算了，咱们还是继续说车。公司同事一个两个都买车了，耳濡目染之下也在也在看车，鬼使神差迷上思域不能自拔。预算12万，直接提到15万。结果到4s店一问要16万还没有现车。只有次顶配现车，一时冲动直接到18万。让我先哭一会儿，接下来的时间我要开始吃土了，都不要拦我。最后多谢我们CTO力哥，车神曲老板，新晋车神小陈，预备车神强总带我去看车。这几天一直在淘各种汽车小配件，哈哈，其乐无穷。<br><img src="https://image.xiaomo.info/github/car.png" alt="car"><br>顺便再贴一个视频实拍 <a href="http://v.autohome.com.cn/v-78751.html#pvareaid=2042227" target="_blank" rel="noopener">车身修长更加运动 实拍2016款全新思域</a></p></li><li><p>与各位小伙伴的“基情”：<br>两个高中同学兼大学同学，表妹，基友在杭州各自有了自己稳定的工作，在此也祝愿他们越来越好。在工作的过程中认识了很多有爱的同事，也在网上认识了很多大牛，尤其是还在学校都己经到了我望尘莫及的高度，一直激励着我进步。与志同道合有朋友们一起交流，海天海地，真的挺有意思。</p></li></ol><h4 id="2-展望2017"><a href="#2-展望2017" class="headerlink" title="2.展望2017"></a>2.展望2017</h4><ol><li>年底准备结婚了：<br>和女朋友在一起三年了，终于可以把她的户口转到我家来了。中间有过各种矛盾，酸甜苦辣。不过到最后都是甜蜜的回忆和满满的感动。</li><li>准备在杭州定居：<br>对于现在的我们来说这是件比较困难的事，但是有了目标终究是要好好努力的。来杭州第三年了，待的越久越喜欢这里。</li><li>继续努力学习日语：<br>希望自己努力学早，早日考过N2,奋战N1，然后去外面的世界闯一闯。</li><li>努力学习linux:<br>不仅因为它很帅，更因为它很实用。很符合极客风范，更因为我用了HHKB，也因为我爱折腾。理由很多，但最重要的是我喜欢。因为我爱，所以我想学。2017，我会加更努力。</li><li>认真学习《linux就该这么学》和《java编程思想》</li><li>练好开车技术,为了自己,能够自己开车回老家，也为了别人。</li></ol><p>最后奉上我的人生格言</p><h4 id="生命不停，折腾不止。"><a href="#生命不停，折腾不止。" class="headerlink" title="生命不停，折腾不止。"></a>生命不停，折腾不止。</h4><p>2017，开始新一年的折腾</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用操作</title>
      <link href="2016/MysqlCommon/"/>
      <url>2016/MysqlCommon/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍了mysql的用法，包含安装、常用命令等等</p><a id="more"></a><h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><blockquote><p>linux centerOs 6.5<br>mysql 最新 </p></blockquote><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="1-yum安装"><a href="#1-yum安装" class="headerlink" title="1. yum安装"></a>1. yum安装</h4><p>yum安装mysql</p><p><code>[root@stonex ~]#  yum -y install mysql-server</code></p><p>安装结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Installed</span>:</span><br><span class="line">    <span class="selector-tag">mysql-server</span><span class="selector-class">.x86_64</span> 0<span class="selector-pseudo">:5.1.73-3.el6_5</span>                                                                                                                                                         </span><br><span class="line"><span class="selector-tag">Dependency</span> <span class="selector-tag">Installed</span>:</span><br><span class="line">    <span class="selector-tag">mysql</span><span class="selector-class">.x86_64</span> 0<span class="selector-pseudo">:5.1.73-3.el6_5</span>                                <span class="selector-tag">perl-DBD-MySQL</span><span class="selector-class">.x86_64</span> 0<span class="selector-pseudo">:4.013-3.el6</span>                                <span class="selector-tag">perl-DBI</span><span class="selector-class">.x86_64</span> 0<span class="selector-pseudo">:1.609-4.el6</span></span><br></pre></td></tr></table></figure><p>启动MySql服务<br><code>[root@stonex ~]#  service mysqld start</code></p><p>命令登录mysql<br><code>[root@stonex ~]#  mysql -u root</code></p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> <span class="keyword">the</span> MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select user,host,password from mysql.user;</code><br>查询用户的密码，都为空，用下面的命令设置root的密码为root</p><p>设置MySQL的root用户设置密码  </p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mysql&gt; set password <span class="keyword">for</span> root@localhost=password(<span class="string">'root'</span>);</span><br><span class="line">mysql&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>用新密码登陆<br><code>[root@stonex ~]#  mysql -u root -p</code></p><p>基本命令</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">show databases; <span class="regexp">//</span>查看系统已存在的数据库</span><br><span class="line">use databasesname;   <span class="regexp">//</span>选择需要使用的数据库</span><br><span class="line">drop database databasename; <span class="regexp">//</span>删除选定的数据库</span><br><span class="line"><span class="keyword">exit</span>    <span class="regexp">//</span>退出数据库的连接</span><br><span class="line">create database test01;    <span class="regexp">//</span>建立名为test的数据库</span><br><span class="line">show tables;        <span class="regexp">//</span> 列出当前数据库下的表</span><br><span class="line">其他基本的增删改查使用标准SQL即可</span><br></pre></td></tr></table></figure><h4 id="2-源码安装"><a href="#2-源码安装" class="headerlink" title="2. 源码安装"></a>2. 源码安装</h4><p>1.假设已经有mysql-5.5.10.tar.gz以及cmake-2.8.4.tar.gz两个源文件</p><p>(1)先安装cmake（mysql5.5以后是通过cmake来编译的）</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5 local</span>]<span class="meta">#tar -zxv -f cmake-2.8.4.tar.gz</span></span><br><span class="line">[<span class="meta">root@ rhel5 local</span>]<span class="meta">#cd cmake-2.8.4</span></span><br><span class="line">[<span class="meta">root@ rhel5 cmake-2.8.4</span>]<span class="meta">#./configure</span></span><br><span class="line">[<span class="meta">root@ rhel5 cmake-2.8.4</span>]<span class="meta">#make</span></span><br><span class="line">[<span class="meta">root@ rhel5 cmake-2.8.4</span>]<span class="meta">#make install</span></span><br></pre></td></tr></table></figure><p>(2)创建mysql的安装目录及数据库存放目录</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@ rhel5~]</span><span class="selector-id">#mkdir</span> <span class="selector-tag">-p</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">mysql</span>                 <span class="comment">//安装mysql </span></span><br><span class="line"><span class="selector-attr">[root@ rhel5~]</span><span class="selector-id">#mkdir</span> <span class="selector-tag">-p</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>            <span class="comment">//存放数据库</span></span><br></pre></td></tr></table></figure><p>(3)创建mysql用户及用户组</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5~</span>]groupadd mysql</span><br><span class="line">[<span class="meta">root@ rhel5~</span>]useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><p>(4)安装mysql</p><p><code>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DEXTRA_CHARSETS=all  -DENABLED_LOCAL_INFILE=1</code></p><p>复制代码</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@ rhel5 local]</span><span class="comment">#tar -zxv -f mysql-5.5.10.tar.gz</span></span><br><span class="line"><span class="section">[root@ rhel5 local]</span><span class="comment">#cd mysql-5.5.10</span></span><br><span class="line"><span class="section">[root@ rhel5 mysql-5.5.10]</span><span class="comment">#cmake . </span></span><br><span class="line"><span class="attr">-DCMAKE_INSTALL_PREFIX</span>=/usr/local/mysql</span><br><span class="line"><span class="attr">-DMYSQL_DATADIR</span>=/usr/local/mysql/data</span><br><span class="line"><span class="attr">-DDEFAULT_CHARSET</span>=utf8</span><br><span class="line"><span class="attr">-DDEFAULT_COLLATION</span>=utf8_general_ci </span><br><span class="line"><span class="attr">-DEXTRA_CHARSETS</span>=all </span><br><span class="line"><span class="attr">-DENABLED_LOCAL_INFILE</span>=<span class="number">1</span></span><br><span class="line"><span class="section">[root@ rhel5 mysql-5.5.10]</span><span class="comment">#make</span></span><br><span class="line"><span class="section">[root@ rhel5 mysql-5.5.10]</span><span class="comment">#make install</span></span><br></pre></td></tr></table></figure><p>复制代码<br>参数说明：</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">DCMAKE_INSTALL_PREFIX=<span class="regexp">/usr/local</span><span class="regexp">/mysql        /</span><span class="regexp">/安装目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-DINSTALL_DATADIR=<span class="regexp">/usr/local</span><span class="regexp">/mysql/data</span>         /<span class="regexp">/数据库存放目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-DDEFAULT_CHARSET=utf8                    　　　　/<span class="regexp">/使用utf8字符</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-DDEFAULT_COLLATION=utf8_general_ci            /<span class="regexp">/校验字符</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-DEXTRA_CHARSETS=all                        　　　　/<span class="regexp">/安装所有扩展字符集</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-DENABLED_LOCAL_INFILE=<span class="number">1</span>                    　　  /<span class="regexp">/允许从本地导入数据</span></span></span><br></pre></td></tr></table></figure><p>注意事项：</p><p>重新编译时，需要清除旧的对象文件和缓存信息。</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># make clean</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># rm -f CMakeCache.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># rm -rf /etc/my.cnf</span></span><br></pre></td></tr></table></figure><p>2.配置</p><p>(1)设置目录权限</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5~</span>]<span class="meta"># cd /usr/local/mysql</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@ rhel5 mysql</span>]<span class="meta"># chown -R root:mysql .　//把当前目录中所有文件的所有者所有者设为root，所属组为mysql</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@ rhel5 mysql</span>]<span class="meta"># chown -R mysql:mysql data</span></span><br></pre></td></tr></table></figure><p>(2)</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# <span class="keyword">cp</span> support-<span class="keyword">files</span>/my-medium.<span class="keyword">cnf</span> /etc/my.<span class="keyword">cnf</span>　//将mysql的启动服务添加到系统服务中</span><br></pre></td></tr></table></figure><p>(3)创建系统数据库的表</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5 mysql</span>]<span class="meta"># cd /usr/local/mysql</span></span><br><span class="line">[<span class="meta">root@ rhel5 mysql</span>]<span class="meta"># scripts/mysql_install_db --user=mysql</span></span><br></pre></td></tr></table></figure><p>(4)设置环境变量</p><p>复制代码</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5~</span>]<span class="meta"># vi /root/.bash_profile</span></span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">在PATH=$<span class="symbol">PATH:</span>$HOME/bin添加参数为：</span><br><span class="line"></span><br><span class="line">PATH=$<span class="symbol">PATH:</span>$HOME/<span class="symbol">bin:</span>/usr/local/mysql/<span class="symbol">bin:</span>/usr/local/mysql/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line">[root@ rhel5~]<span class="comment">#source /root/.bash_profile</span></span><br></pre></td></tr></table></figure><p>复制代码<br>(5)手动启动mysql</p><p>复制代码</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5~</span>]<span class="meta"># cd /usr/local/mysql</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@ rhel5 mysql</span>]<span class="meta"># ./bin/mysqld_safe --user=mysql &amp; 　 //启动MySQL，但不能停止</span></span><br></pre></td></tr></table></figure><p>启动日志写在此文件下：<code>/usr/local/mysql/data/localhost.err</code></p><p>关闭MySQL服务</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]<span class="meta"># mysqladmin -u root -p shutdown　　<span class="comment">//这里MySQL的root用户还没有配置密码，所以为空值。需要输入密码时，直接点回车键即可。</span></span></span><br></pre></td></tr></table></figure><p>复制代码<br>(6)另一种简单的启动mysql的方法(mysql已经被添加到系统服务中)</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]#<span class="built_in"> service </span>mysql.server start  </span><br><span class="line">[root@ rhel5~]#<span class="built_in"> service </span>mysql.server stop</span><br><span class="line">[root@ rhel5~]#<span class="built_in"> service </span>mysql.server restart</span><br></pre></td></tr></table></figure><p>如果上述命令出现：mysql.server 未识别的服务</p><p>则可能mysql还没添加到系统服务中，下面用另一种方法添加：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# cp support-files<span class="regexp">/mysql.server  /</span>etc<span class="regexp">/init.d/my</span>sql　<span class="comment">//将mysql的启动服务添加到系统服务中</span></span><br></pre></td></tr></table></figure><p>注意：主要是将mysql.server拷贝到/etc/init.d中，命名为mysql。在有的系统中，mysql.server在/usr/local/mysql/share/mysql/mysql.server中，而本系统中，mysql.server在/usr/local/mysql/support-files/mysql.server中。</p><p>然后再用<code>#service mysql start </code>来启动mysql即可。</p><p>(7)修改MySQL的root用户的密码以及打开远程连接</p><p>复制代码</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]<span class="comment"># mysql -u root mysql</span></span><br><span class="line"></span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;desc user;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@<span class="string">"%"</span> IDENTIFIED BY <span class="string">"root"</span>;　　<span class="regexp">//</span>为root添加远程连接的能力。</span><br><span class="line">mysql&gt;update user set Password = password(<span class="string">'xxxxxx'</span>) where User=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt;select Host,User,Password  from user where User=<span class="string">'root'</span>; </span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;<span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>重新登录：<code>mysql -u root -p</code></p><p>若还不能进行远程连接，则关闭防火墙</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@ rhel5~</span>]<span class="meta"># /etc/rc.d/init.d/iptables stop</span></span><br></pre></td></tr></table></figure><p>复制代码<br>注：如果不能远程连接，出现错误<code>mysql error number 1130</code>，则加入下面语句试试：</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'******'</span> <span class="keyword">WITH</span> GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="三、加入service和自启动"><a href="#三、加入service和自启动" class="headerlink" title="三、加入service和自启动"></a>三、加入service和自启动</h3><p><code>find / -name mysql.server</code>   </p><p>将找到的文件copy到init.d下  加入到系统启动项  </p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">cp url/mysql.server <span class="string">/etc/init.d/mysqld</span> </span><br><span class="line">　　<span class="comment">#把msql的脚本文件拷到系统的启动目录下 </span></span><br><span class="line">　　<span class="keyword">cd</span> <span class="string">/etc/init.d/</span> </span><br><span class="line">　　chkconfig <span class="params">--add</span> mysqld <span class="comment">#将mysql加到启动服务列表里 </span></span><br><span class="line">　　chkconfig mysqld on <span class="comment">#让系统启动时自动打开mysql服务</span></span><br></pre></td></tr></table></figure><p>设置开机启动<br><code>[root@stonex ~]#  chkconfig mysqld on</code></p><h3 id="四、设置编码"><a href="#四、设置编码" class="headerlink" title="四、设置编码"></a>四、设置编码</h3><p>MySql修改数据库编码为UTF8<br>　mysql 创建 数据库时指定编码很重要，很多开发者都使用了默认编码，乱码问题可是防不胜防。制定数据库的编码可以很大程度上避免倒入导出带来的乱码问题。<br>　　网页数据一般采用UTF8编码，而数据库默认为latin 。我们可以通过修改数据库默认编码方式为UTF8来减少数据库创建时的设置，也能最大限度的避免因粗心造成的乱码问题。<br>　　我们遵循的标准是，数据库，表，字段和页面或文本的编码要统一起来<br>　　我们可以通过命令查看数据库当前编码：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">　　mysql&gt; SHOW <span class="keyword">VARIABLES</span> LIKE <span class="comment">'character%'</span>;</span><br></pre></td></tr></table></figure><p>　　发现很多对应的都是 latin1，我们的目标就是在下次使用此命令时latin1能被UTF8取代。</p><p>　　第一阶段：</p><p>　　mysql设置编码命令</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> character_set_client <span class="comment">= utf8</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_connection <span class="comment">= utf8</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_database <span class="comment">= utf8</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_results <span class="comment">= utf8</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_server <span class="comment">= utf8</span>;</span><br></pre></td></tr></table></figure><p>　　然后 <code>mysql&gt; SHOW VARIABLES LIKE &#39;character%&#39;; </code>你可以看到全变为 <code>utf8</code> 。</p><p>　　但是，这只是一种假象</p><p>　　此种方式只在当前状态下有效，当重启数据库服务后失效。</p><p>　　所以如果想要不出现乱码只有修改my.ini文件，</p><p>　　从my.ini下手（标签下没有的添加，有的修改）</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">　　[<span class="meta">client</span>]</span><br><span class="line">　　<span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</span><br><span class="line">　　[<span class="meta">mysql</span>]</span><br><span class="line">　　<span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</span><br><span class="line">　　[<span class="meta">mysqld</span>]</span><br><span class="line">　　<span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</span><br></pre></td></tr></table></figure><p>　　以上3个section都要加default-character-set=utf8，平时我们可能只加了mysqld一项。</p><p>　　然后重启mysql，执行</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">　　mysql&gt; SHOW <span class="keyword">VARIABLES</span> LIKE <span class="comment">'character%'</span>;</span><br></pre></td></tr></table></figure><p>　　确保所有的Value项都是utf8即可。</p><p>　　但是可恶的事情又来了，</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">　　|<span class="string">character_set_client      </span>|<span class="string"> utf8                                  </span>|</span><br><span class="line">　　|<span class="string"> character_set_connection </span>|<span class="string"> utf8                                  </span>|</span><br><span class="line">　　|<span class="string"> character_set_database   </span>|<span class="string"> utf8                                  </span>|</span><br><span class="line">　　|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                                </span>|</span><br><span class="line">　　|<span class="string"> character_set_results    </span>|<span class="string"> utf8                                  </span>|</span><br><span class="line">　　|<span class="string"> character_set_server     </span>|<span class="string"> latin1                                </span>|</span><br><span class="line">　　|<span class="string"> character_set_system     </span>|<span class="string"> utf8</span></span><br></pre></td></tr></table></figure><p>　　注意  该配置| character_set_server     | latin1 无法设置成UTF8   交互时候仍然会出现乱码。</p><p>　第二阶段：找到下面这东东</p><p>　　<code>X:\%path%\MySQL\MySQL Server 5.0\bin\MySQLInstanceConfig.exe</code></p><p>　　重新启动设置，将默认编码设置为utf8.这样就能达到我们所要的效果了。</p><p>　　<code>mysql&gt; SHOW VARIABLES LIKE &#39;character%&#39;;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">　　+--------------------------+---------------------------------------------------------+</span><br><span class="line">　　|<span class="string"> Variable_name            </span>|<span class="string"> Value                                                   </span>|</span><br><span class="line">　　+--------------------------+---------------------------------------------------------+</span><br><span class="line">　　|<span class="string"> character_set_client     </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_set_connection </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_set_database   </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                                                  </span>|</span><br><span class="line">　　|<span class="string"> character_set_results    </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_set_server     </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_set_system     </span>|<span class="string"> utf8                                                    </span>|</span><br><span class="line">　　|<span class="string"> character_sets_dir       </span>|<span class="string"> C:\Program Files\MySQL\MySQL Server 5.0\share\charsets\ </span>|</span><br><span class="line">　　+--------------------------+---------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">　　8 rows in set</span><br></pre></td></tr></table></figure><p>　　另外注意事项：</p><p>　　1、建表时加utf8，表字段的Collation可加可不加，不加时默认是utf8_general_ci了。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tablename4` (</span><br><span class="line">`id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`varchar1` varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">`varbinary1` varbinary(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=MyISAM<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>　　2、网页xxx.php/jsp保存时选择utf8编码，页头最好加上</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">　　header(<span class="symbol">'conten</span>-<span class="class"><span class="keyword">type</span></span>:text/html;charset=utf<span class="number">-8</span>');</span><br></pre></td></tr></table></figure><p>　　在执行CRUD操作前先执行一下</p><p>　　<code>mysql_query(&quot;set names utf8&quot;);</code></p><p>　　————————-</p><p>　　连接数据库设置编码</p><p>　<code>jdbc:mysql://地址:3306/数据库名?characterEncoding=utf8</code></p><p>　　————————-</p><p>　　java中的常用编码<code>UTF-8;GBK;GB2312;ISO-8859-1;</code></p><p>　　对应mysql数据库中的编码<code>utf8;gbk;gb2312;latin1</code></p><h3 id="五、-设置权限"><a href="#五、-设置权限" class="headerlink" title="五、 设置权限"></a>五、 设置权限</h3><p>开放远程登录权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">"%"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"xiaomo"</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><h3 id="六、创建用户"><a href="#六、创建用户" class="headerlink" title="六、创建用户"></a>六、创建用户</h3><p>1.创建账户<br><code>CREATE USER &#39;pig&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; </code><br>2.授权<br><code>GRANT ALL ON *.* TO &#39;pig&#39;@&#39;%&#39;; </code><br>3.设置和修改密码<br><code>SET PASSWORD FOR &#39;pig&#39;@&#39;%&#39; = PASSWORD(&quot;123456&quot;); </code><br>4.撤销权限<br><code>REVOKE SELECT ON *.* FROM &#39;pig&#39;@&#39;%&#39;;</code>    </p><h3 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h3><p>我们常用的操作数据库语言SQL语句在执行的时候需要要先编译，然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它<br>1.存储过程简介 </p><p>我们常用的操作数据库语言SQL语句在执行的时候需要要先编译，然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。 </p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。 </p><p>存储过程通常有以下优点： </p><p>(1).存储过程增强了SQL语言的功能和灵活性。存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。 </p><p>(2).存储过程允许标准组件是编程。存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。 </p><p>(3).存储过程能实现较快的执行速度。如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。 </p><p>(4).存储过程能过减少网络流量。针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织程存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大增加了网络流量并降低了网络负载。 </p><p>(5).存储过程可被作为一种安全机制来充分利用。系统管理员通过执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。 </p><ol start="2"><li>关于MySQL的存储过程 </li></ol><p>存储过程是数据库存储的一个重要的功能，但是MySQL在5.0以前并不支持存储过程，这使得MySQL在应用上大打折扣。好在MySQL 5.0终于开始已经支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。 </p><ol start="3"><li>MySQL存储过程的创建 </li></ol><p>(1). 格式 </p><p>MySQL存储过程创建的格式：CREATE PROCEDURE 过程名 ([过程参数[,…]])<br>[特性 …] 过程体 </p><p>这里先举个例子： </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql&gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc1</span><span class="params">(<span class="keyword">OUT</span> s int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">BEGIN</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">SELECT</span> <span class="title">COUNT</span><span class="params">(*)</span> <span class="title">INTO</span> <span class="title">s</span> <span class="title">FROM</span> <span class="title">user</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">END</span> </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql&gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>注： </p><p>（1）这里需要注意的是DELIMITER //和DELIMITER ;两句，DELIMITER是分割符的意思，因为MySQL默认以”;”为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将”;”当做存储过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。 </p><p>（2）存储过程根据需要可能会有输入、输出、输入输出参数，这里有一个输出参数s，类型是int型，如果有多个参数用”,”分割开。 </p><p>（3）过程体的开始与结束使用BEGIN与END进行标识。 </p><p>这样，我们的一个MySQL存储过程就完成了，是不是很容易呢?看不懂也没关系，接下来，我们详细的讲解。 </p><p>(2). 声明分割符 </p><p>其实，关于声明分割符，上面的注解已经写得很清楚，不需要多说，只是稍微要注意一点的是：如果是用MySQL的Administrator管理工具时，可以直接创建，不再需要声明。 </p><p>(3). 参数 </p><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如： </p><p>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形…]) </p><p>IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值 </p><p>OUT 输出参数:该值可在存储过程内部被改变，并可返回 </p><p>INOUT 输入输出参数:调用时指定，并且可被改变和返回 </p><p>Ⅰ. IN参数例子 </p><p>创建: </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">demo_in_parameter</span><span class="params">(<span class="keyword">IN</span> p_in int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">BEGIN</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">SELECT</span> <span class="title">p_in</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">SET</span> p_in=<span class="number">2</span>; </span><br><span class="line">-&gt; SELECT p_in; </span><br><span class="line">-&gt; <span class="keyword">END</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>执行结果: </p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql &gt; SET <span class="meta">@p_in=1;</span> </span><br><span class="line">mysql &gt; CALL demo_in_parameter(<span class="meta">@p_in);</span> </span><br><span class="line">+------+ </span><br><span class="line">|<span class="string"> p_in </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+------+ </span></span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">+------+ </span></span><br><span class="line">|<span class="string"> p_in </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+------+ </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">mysql&gt; SELECT @p_in; </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> @p_in </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+</span></span><br></pre></td></tr></table></figure><p>以上可以看出，p_in虽然在存储过程中被修改，但并不影响@p_id的值 </p><p>Ⅱ.OUT参数例子 </p><p>创建: </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">demo_out_parameter</span><span class="params">(<span class="keyword">OUT</span> p_out int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">BEGIN</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">SELECT</span> <span class="title">p_out</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">SET</span> p_out=<span class="number">2</span>; </span><br><span class="line">-&gt; SELECT p_out; </span><br><span class="line">-&gt; <span class="keyword">END</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>执行结果: </p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql &gt; SET <span class="meta">@p_out=1;</span> </span><br><span class="line">mysql &gt; CALL sp_demo_out_parameter(<span class="meta">@p_out);</span> </span><br><span class="line">+-------+ </span><br><span class="line">|<span class="string"> p_out </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> NULL </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> p_out </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">mysql&gt; SELECT @p_out; </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> p_out </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+ </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+-------+</span></span><br></pre></td></tr></table></figure><p>Ⅲ. INOUT参数例子 </p><p>创建: </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">demo_inout_parameter</span><span class="params">(INOUT p_inout int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">BEGIN</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">SELECT</span> <span class="title">p_inout</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">SET</span> p_inout=<span class="number">2</span>; </span><br><span class="line">-&gt; SELECT p_inout; </span><br><span class="line">-&gt; <span class="keyword">END</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>执行结果: </p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql &gt; SET <span class="meta">@p_inout=1;</span> </span><br><span class="line">mysql &gt; CALL demo_inout_parameter(<span class="meta">@p_inout)</span> ; </span><br><span class="line">+---------+ </span><br><span class="line">|<span class="string"> p_inout </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+---------+ </span></span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+---------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">+---------+ </span></span><br><span class="line">|<span class="string"> p_inout </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+---------+ </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+---------+ </span></span><br><span class="line"></span><br><span class="line"><span class="string">mysql &gt; SELECT @p_inout; </span></span><br><span class="line"><span class="string">+----------+ </span></span><br><span class="line">|<span class="string"> @p_inout </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+----------+ </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">+----------+</span></span><br></pre></td></tr></table></figure><p>(4). 变量 </p><p>Ⅰ. 变量定义 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> variable_name [,variable_name...] datatype [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>];</span><br></pre></td></tr></table></figure><p>其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length) </p><p>例如: </p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">DECLARE l_int int unsigned<span class="built_in"> default </span>4000000; </span><br><span class="line">DECLARE l_numeric number(8,2)<span class="built_in"> DEFAULT </span>9.95; </span><br><span class="line">DECLARE l_date date<span class="built_in"> DEFAULT </span><span class="string">'1999-12-31'</span>; </span><br><span class="line">DECLARE l_datetime datetime<span class="built_in"> DEFAULT </span><span class="string">'1999-12-31 23:59:59'</span>; </span><br><span class="line">DECLARE l_varchar varchar(255)<span class="built_in"> DEFAULT </span><span class="string">'This will not be padded'</span>;</span><br></pre></td></tr></table></figure><p>Ⅱ. 变量赋值 </p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> 变量名 = 表达式值 [,variable_name = expression <span class="built_in">..</span>.]</span><br></pre></td></tr></table></figure><p>Ⅲ. 用户变量 </p><p>ⅰ. 在MySQL客户端使用用户变量 </p><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">mysql &gt; SELECT <span class="string">'Hello World'</span> into @x; </span><br><span class="line">mysql &gt; SELECT @x; </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| @x | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| Hello World | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">mysql &gt; SET @y=<span class="string">'Goodbye Cruel World'</span>; </span><br><span class="line">mysql &gt; SELECT @y; </span><br><span class="line">+<span class="comment">---------------------+ </span></span><br><span class="line">| @y | </span><br><span class="line">+<span class="comment">---------------------+ </span></span><br><span class="line">| Goodbye Cruel World | </span><br><span class="line">+<span class="comment">---------------------+ </span></span><br><span class="line"></span><br><span class="line">mysql &gt; SET @z=<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>; </span><br><span class="line">mysql &gt; SELECT @z; </span><br><span class="line">+<span class="comment">------+ </span></span><br><span class="line">| @z | </span><br><span class="line">+<span class="comment">------+ </span></span><br><span class="line">| <span class="number">6</span> | </span><br><span class="line">+<span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>ⅱ. 在存储过程中使用用户变量 </p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">mysql &gt; <span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">GreetWorld</span><span class="params">( )</span> <span class="title">SELECT</span> <span class="title">CONCAT</span><span class="params">(@greeting,<span class="string">' World'</span>)</span>;</span> </span><br><span class="line">mysql &gt; <span class="keyword">SET</span> @greeting=<span class="string">'Hello'</span>; </span><br><span class="line">mysql &gt; CALL GreetWorld( ); </span><br><span class="line">+----------------------------+ </span><br><span class="line">| <span class="keyword">CONCAT</span>(@greeting,<span class="string">' World'</span>) | </span><br><span class="line">+----------------------------+ </span><br><span class="line">| Hello World | </span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p>ⅲ. 在存储过程间传递全局范围的用户变量 </p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p1</span><span class="params">()</span> <span class="title">SET</span> @<span class="title">last_procedure</span>='<span class="title">p1</span>';</span> </span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">p2</span><span class="params">()</span> <span class="title">SELECT</span> <span class="title">CONCAT</span><span class="params">(<span class="string">'Last procedure was '</span>,@last_proc)</span>;</span> </span><br><span class="line">mysql&gt; CALL p1( ); </span><br><span class="line">mysql&gt; CALL p2( ); </span><br><span class="line">+-----------------------------------------------+ </span><br><span class="line">| <span class="keyword">CONCAT</span>(<span class="string">'Last procedure was '</span>,@last_proc | </span><br><span class="line">+-----------------------------------------------+ </span><br><span class="line">| Last <span class="function"><span class="keyword">procedure</span> <span class="title">was</span> <span class="title">p1</span> | </span></span><br><span class="line"><span class="function">+-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>注意: </p><p>①用户变量名一般以@开头<br>②滥用用户变量会导致程序难以理解及管理 </p><p>(5). 注释 </p><p>MySQL存储过程可使用两种风格的注释 </p><p>双模杠：– </p><p>该风格一般用于单行注释<br>c风格： 一般用于多行注释<br>例如： </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc1</span> --<span class="title">name</span>存储过程名 </span></span><br><span class="line"><span class="function">-&gt; <span class="params">(<span class="keyword">IN</span> parameter1 INTEGER)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">BEGIN</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">DECLARE</span> <span class="title">variable1</span> <span class="title">CHAR</span><span class="params">(10)</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">IF</span> parameter1 = <span class="number">17</span> <span class="keyword">THEN</span> </span><br><span class="line">-&gt; <span class="keyword">SET</span> variable1 = <span class="string">'birds'</span>; </span><br><span class="line">-&gt; <span class="keyword">ELSE</span> </span><br><span class="line">-&gt; <span class="keyword">SET</span> variable1 = <span class="string">'beasts'</span>; </span><br><span class="line">-&gt; <span class="keyword">END</span> <span class="keyword">IF</span>; </span><br><span class="line">-&gt; INSERT INTO table1 VALUES (variable1); </span><br><span class="line">-&gt; <span class="keyword">END</span> </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><ol start="4"><li>MySQL存储过程的调用 </li></ol><p>用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。具体的调用方法可以参看上面的例子。 </p><ol start="5"><li>MySQL存储过程的查询 </li></ol><p>我们像知道一个数据库下面有那些表，我们一般采用show tables;进行查看。那么我们要查看某个数据库下面的存储过程，是否也可以采用呢？答案是，我们可以查看某个数据库下面的存储过程，但是是令一钟方式。 </p><p>我们可以用 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p>或者 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> routine_name <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p>或者 </p><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span> <span class="title">where</span> <span class="title">db</span>='数据库名';</span></span><br></pre></td></tr></table></figure><p>进行查询。 </p><p>如果我们想知道，某个存储过程的详细，那我们又该怎么做呢？是不是也可以像操作表一样用describe 表名进行查看呢？ </p><p>答案是：我们可以查看存储过程的详细，但是需要用另一种方法： </p><p>SHOW CREATE PROCEDURE 数据库.存储过程名; </p><p>就可以查看当前存储过程的详细。 </p><p>6.MySQL存储过程的修改 </p><p><code>ALTER PROCEDURE </code></p><p>更改用CREATE PROCEDURE 建立的预先指定的存储过程，其不会影响相关存储过程或存储功能。 </p><ol start="7"><li>MySQL存储过程的删除 </li></ol><p>删除一个存储过程比较简单，和删除表一样： </p><p><code>DROP PROCEDURE </code></p><p>从MySQL的表格中删除一个或多个存储过程。 </p><ol start="8"><li>MySQL存储过程的控制语句 </li></ol><p>(1). 变量作用域 </p><p>内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储<br>过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派<br>给会话变量来保存其值。 </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc3</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">x1</span> <span class="title">varchar</span><span class="params">(5)</span> <span class="title">default</span> '<span class="title">outer</span>';</span> </span><br><span class="line">-&gt; <span class="keyword">begin</span> </span><br><span class="line">-&gt; declare x1 varchar(<span class="number">5</span>) <span class="keyword">default</span> <span class="string">'inner'</span>; </span><br><span class="line">-&gt; select x1; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; select x1; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>(2). 条件语句 </p><p>Ⅰ. if-then -else语句 </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc2</span><span class="params">(<span class="keyword">IN</span> parameter int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">var</span> <span class="title">int</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">set</span> <span class="keyword">var</span>=parameter+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">if</span> <span class="keyword">var</span>=<span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; insert into t values(<span class="number">17</span>); </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">-&gt; <span class="keyword">if</span> parameter=<span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; update t <span class="keyword">set</span> s1=s1+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">else</span> </span><br><span class="line">-&gt; update t <span class="keyword">set</span> s1=s1+<span class="number">2</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>Ⅱ. case语句： </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc3</span> <span class="params">(<span class="keyword">in</span> parameter int)</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">var</span> <span class="title">int</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">set</span> <span class="keyword">var</span>=parameter+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">case</span> <span class="keyword">var</span> </span><br><span class="line">-&gt; when <span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; insert into t values(<span class="number">17</span>); </span><br><span class="line">-&gt; when <span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; insert into t values(<span class="number">18</span>); </span><br><span class="line">-&gt; <span class="keyword">else</span> </span><br><span class="line">-&gt; insert into t values(<span class="number">19</span>); </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">case</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>(3). 循环语句 </p><p>Ⅰ. while ···· end while： </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc4</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">var</span> <span class="title">int</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">set</span> <span class="keyword">var</span>=<span class="number">0</span>; </span><br><span class="line">-&gt; <span class="keyword">while</span> <span class="keyword">var</span>&lt;<span class="number">6</span> <span class="keyword">do</span> </span><br><span class="line">-&gt; insert into t values(<span class="keyword">var</span>); </span><br><span class="line">-&gt; <span class="keyword">set</span> <span class="keyword">var</span>=<span class="keyword">var</span>+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">while</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>Ⅱ. repeat···· end repeat： </p><p>它在执行操作后检查结果，而while则是执行前进行检查。 </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc5</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">v</span> <span class="title">int</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">set</span> v=<span class="number">0</span>; </span><br><span class="line">-&gt; <span class="keyword">repeat</span> </span><br><span class="line">-&gt; insert into t values(v); </span><br><span class="line">-&gt; <span class="keyword">set</span> v=v+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">until</span> v&gt;=<span class="number">5</span> </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">repeat</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>Ⅲ. loop ·····end loop: </p><p>loop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。 </p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER <span class="comment">// </span></span><br><span class="line">mysql &gt; CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc6</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">begin</span> </span></span><br><span class="line"><span class="function">-&gt; <span class="title">declare</span> <span class="title">v</span> <span class="title">int</span>;</span> </span><br><span class="line">-&gt; <span class="keyword">set</span> v=<span class="number">0</span>; </span><br><span class="line">-&gt; LOOP_LABLE:loop </span><br><span class="line">-&gt; insert into t values(v); </span><br><span class="line">-&gt; <span class="keyword">set</span> v=v+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">if</span> v &gt;=<span class="number">5</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; leave LOOP_LABLE; </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span> loop; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; <span class="comment">// </span></span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>Ⅳ. LABLES 标号： </p><p>标号可以用在begin repeat while 或者loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。 </p><p>(4). ITERATE迭代 </p><p>Ⅰ. ITERATE: </p><p>通过引用复合语句的标号,来从新开始复合语句 </p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">mysql &gt; DELIMITER // </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc10 () </span><br><span class="line">-&gt; begin </span><br><span class="line">-&gt; declare v int; </span><br><span class="line">-&gt; <span class="built_in">set</span> v=<span class="number">0</span>; </span><br><span class="line">-&gt; LOOP_LABLE:loop </span><br><span class="line">-&gt; <span class="keyword">if</span> v=<span class="number">3</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; <span class="built_in">set</span> v=v+<span class="number">1</span>; </span><br><span class="line">-&gt; ITERATE LOOP_LABLE; </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">-&gt; insert into t values(v); </span><br><span class="line">-&gt; <span class="built_in">set</span> v=v+<span class="number">1</span>; </span><br><span class="line">-&gt; <span class="keyword">if</span> v&gt;=<span class="number">5</span> <span class="keyword">then</span> </span><br><span class="line">-&gt; leave LOOP_LABLE; </span><br><span class="line">-&gt; <span class="keyword">end</span> <span class="keyword">if</span>; </span><br><span class="line">-&gt; <span class="keyword">end</span> loop; </span><br><span class="line">-&gt; <span class="keyword">end</span>; </span><br><span class="line">-&gt; // </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>9.MySQL存储过程的基本函数 </p><p>(1).字符串类 </p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">CHARSET</span>(str) <span class="comment">//返回字串字符集 </span></span><br><span class="line"><span class="selector-tag">CONCAT</span> (string2 [,... ]) <span class="comment">//连接字串 </span></span><br><span class="line"><span class="selector-tag">INSTR</span> (string ,substring ) <span class="comment">//返回substring首次在string中出现的位置,不存在返回0 </span></span><br><span class="line"><span class="selector-tag">LCASE</span> (string2 ) <span class="comment">//转换成小写 </span></span><br><span class="line"><span class="selector-tag">LEFT</span> (string2 ,length ) <span class="comment">//从string2中的左边起取length个字符 </span></span><br><span class="line"><span class="selector-tag">LENGTH</span> (string ) <span class="comment">//string长度 </span></span><br><span class="line"><span class="selector-tag">LOAD_FILE</span> (file_name ) <span class="comment">//从文件读取内容 </span></span><br><span class="line"><span class="selector-tag">LOCATE</span> (substring , string [,start_position ] ) 同<span class="selector-tag">INSTR</span>,但可指定开始位置 </span><br><span class="line"><span class="selector-tag">LPAD</span> (string2 ,length ,pad ) <span class="comment">//重复用pad加在string开头,直到字串长度为length </span></span><br><span class="line"><span class="selector-tag">LTRIM</span> (string2 ) <span class="comment">//去除前端空格 </span></span><br><span class="line"><span class="selector-tag">REPEAT</span> (string2 ,count ) <span class="comment">//重复count次 </span></span><br><span class="line"><span class="selector-tag">REPLACE</span> (str ,search_str ,replace_str ) <span class="comment">//在str中用replace_str替换search_str </span></span><br><span class="line"><span class="selector-tag">RPAD</span> (string2 ,length ,pad) <span class="comment">//在str后用pad补充,直到长度为length </span></span><br><span class="line"><span class="selector-tag">RTRIM</span> (string2 ) <span class="comment">//去除后端空格 </span></span><br><span class="line"><span class="selector-tag">STRCMP</span> (string1 ,string2 ) <span class="comment">//逐字符比较两字串大小, </span></span><br><span class="line"><span class="selector-tag">SUBSTRING</span> (str , position [,length ]) <span class="comment">//从str的position开始,取length个字符,</span></span><br></pre></td></tr></table></figure><p>注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1 </p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">mysql&gt; select substring(<span class="string">'abcd'</span>,<span class="number">0</span>,<span class="number">2</span>); </span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line">| substring(<span class="string">'abcd'</span>,<span class="number">0</span>,<span class="number">2</span>) | </span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line"></span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> <span class="built_in">sec</span>) </span><br><span class="line"></span><br><span class="line">mysql&gt; select substring(<span class="string">'abcd'</span>,<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line">| substring(<span class="string">'abcd'</span>,<span class="number">1</span>,<span class="number">2</span>) | </span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line">| ab | </span><br><span class="line">+<span class="comment">-----------------------+ </span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.02</span> <span class="built_in">sec</span>) </span><br><span class="line">TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2)<span class="comment"> //去除指定位置的指定字符 </span></span><br><span class="line">UCASE (string2 )<span class="comment"> //转换成大写 </span></span><br><span class="line"><span class="literal">RIGHT</span>(string2,<span class="built_in">length</span>)<span class="comment"> //取string2最后length个字符 </span></span><br><span class="line"><span class="literal">SPACE</span>(count)<span class="comment"> //生成count个空格</span></span><br></pre></td></tr></table></figure><p>(2).数学类 </p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ABS</span> (number2 ) <span class="comment">//绝对值 </span></span><br><span class="line"><span class="selector-tag">BIN</span> (decimal_number ) <span class="comment">//十进制转二进制 </span></span><br><span class="line"><span class="selector-tag">CEILING</span> (number2 ) <span class="comment">//向上取整 </span></span><br><span class="line"><span class="selector-tag">CONV</span>(number2,from_base,to_base) <span class="comment">//进制转换 </span></span><br><span class="line"><span class="selector-tag">FLOOR</span> (number2 ) <span class="comment">//向下取整 </span></span><br><span class="line"><span class="selector-tag">FORMAT</span> (number,decimal_places ) <span class="comment">//保留小数位数 </span></span><br><span class="line"><span class="selector-tag">HEX</span> (DecimalNumber ) <span class="comment">//转十六进制 </span></span><br><span class="line">注：<span class="selector-tag">HEX</span>()中可传入字符串，则返回其<span class="selector-tag">ASC-11</span>码，如<span class="selector-tag">HEX</span>(<span class="string">'DEF'</span>)返回<span class="selector-tag">4142143</span> </span><br><span class="line">也可以传入十进制整数，返回其十六进制编码，如<span class="selector-tag">HEX</span>(<span class="number">25</span>)返回<span class="selector-tag">19</span> </span><br><span class="line"><span class="selector-tag">LEAST</span> (number , number2 [,..]) <span class="comment">//求最小值 </span></span><br><span class="line"><span class="selector-tag">MOD</span> (numerator ,denominator ) <span class="comment">//求余 </span></span><br><span class="line"><span class="selector-tag">POWER</span> (number ,power ) <span class="comment">//求指数 </span></span><br><span class="line"><span class="selector-tag">RAND</span>([seed]) <span class="comment">//随机数 </span></span><br><span class="line"><span class="selector-tag">ROUND</span> (number [,decimals ]) <span class="comment">//四舍五入,decimals为小数位数]</span></span><br></pre></td></tr></table></figure><p>注：返回类型并非均为整数，如：<br>(1)默认变为整形值 </p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">mysql&gt; select <span class="built_in">round</span>(<span class="number">1.23</span>); </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| <span class="built_in">round</span>(<span class="number">1.23</span>) | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| <span class="number">1</span> | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> <span class="built_in">sec</span>) </span><br><span class="line"></span><br><span class="line">mysql&gt; select <span class="built_in">round</span>(<span class="number">1.56</span>); </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| <span class="built_in">round</span>(<span class="number">1.56</span>) | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line">| <span class="number">2</span> | </span><br><span class="line">+<span class="comment">-------------+ </span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> <span class="built_in">sec</span>)</span><br></pre></td></tr></table></figure><p>(2)可以设定小数位数，返回浮点型数据 </p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">mysql&gt; select <span class="built_in">round</span>(<span class="number">1.567</span>,<span class="number">2</span>); </span><br><span class="line">+<span class="comment">----------------+ </span></span><br><span class="line">| <span class="built_in">round</span>(<span class="number">1.567</span>,<span class="number">2</span>) | </span><br><span class="line">+<span class="comment">----------------+ </span></span><br><span class="line">| <span class="number">1.57</span> | </span><br><span class="line">+<span class="comment">----------------+ </span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> <span class="built_in">sec</span>) </span><br><span class="line">SIGN (number2 )<span class="comment"> //</span></span><br></pre></td></tr></table></figure><p>(3).日期时间类 </p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ADDTIME</span> (date2 ,time_interval ) <span class="comment">//将time_interval加到date2 </span></span><br><span class="line"><span class="selector-tag">CONVERT_TZ</span> (datetime2 ,fromTZ ,toTZ ) <span class="comment">//转换时区 </span></span><br><span class="line"><span class="selector-tag">CURRENT_DATE</span> ( ) <span class="comment">//当前日期 </span></span><br><span class="line"><span class="selector-tag">CURRENT_TIME</span> ( ) <span class="comment">//当前时间 </span></span><br><span class="line"><span class="selector-tag">CURRENT_TIMESTAMP</span> ( ) <span class="comment">//当前时间戳 </span></span><br><span class="line"><span class="selector-tag">DATE</span> (datetime ) <span class="comment">//返回datetime的日期部分 </span></span><br><span class="line"><span class="selector-tag">DATE_ADD</span> (date2 , INTERVAL d_value d_type ) <span class="comment">//在date2中加上日期或时间 </span></span><br><span class="line"><span class="selector-tag">DATE_FORMAT</span> (datetime ,FormatCodes ) <span class="comment">//使用formatcodes格式显示datetime </span></span><br><span class="line"><span class="selector-tag">DATE_SUB</span> (date2 , INTERVAL d_value d_type ) <span class="comment">//在date2上减去一个时间 </span></span><br><span class="line"><span class="selector-tag">DATEDIFF</span> (date1 ,date2 ) <span class="comment">//两个日期差 </span></span><br><span class="line"><span class="selector-tag">DAY</span> (date ) <span class="comment">//返回日期的天 </span></span><br><span class="line"><span class="selector-tag">DAYNAME</span> (date ) <span class="comment">//英文星期 </span></span><br><span class="line"><span class="selector-tag">DAYOFWEEK</span> (date ) <span class="comment">//星期(1-7) ,1为星期天 </span></span><br><span class="line"><span class="selector-tag">DAYOFYEAR</span> (date ) <span class="comment">//一年中的第几天 </span></span><br><span class="line"><span class="selector-tag">EXTRACT</span> (interval_name FROM date ) <span class="comment">//从date中提取日期的指定部分 </span></span><br><span class="line"><span class="selector-tag">MAKEDATE</span> (year ,day ) <span class="comment">//给出年及年中的第几天,生成日期串 </span></span><br><span class="line"><span class="selector-tag">MAKETIME</span> (hour ,minute ,second ) <span class="comment">//生成时间串 </span></span><br><span class="line"><span class="selector-tag">MONTHNAME</span> (date ) <span class="comment">//英文月份名 </span></span><br><span class="line"><span class="selector-tag">NOW</span> ( ) <span class="comment">//当前时间 </span></span><br><span class="line"><span class="selector-tag">SEC_TO_TIME</span> (seconds ) <span class="comment">//秒数转成时间 </span></span><br><span class="line"><span class="selector-tag">STR_TO_DATE</span> (string ,format ) <span class="comment">//字串转成时间,以format格式显示 </span></span><br><span class="line"><span class="selector-tag">TIMEDIFF</span> (datetime1 ,datetime2 ) <span class="comment">//两个时间差 </span></span><br><span class="line"><span class="selector-tag">TIME_TO_SEC</span> (time ) <span class="comment">//时间转秒数] </span></span><br><span class="line"><span class="selector-tag">WEEK</span> (date_time [,start_of_week ]) <span class="comment">//第几周 </span></span><br><span class="line"><span class="selector-tag">YEAR</span> (datetime ) <span class="comment">//年份 </span></span><br><span class="line"><span class="selector-tag">DAYOFMONTH</span>(datetime) <span class="comment">//月的第几天 </span></span><br><span class="line"><span class="selector-tag">HOUR</span>(datetime) <span class="comment">//小时</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用shell脚本.</title>
      <link href="2016/NormalShell/"/>
      <url>2016/NormalShell/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍了5个实用的shell脚本面试题和答案,给出的脚本堪称编码规范，麻雀虽小，异常处理，友好提示，一应俱全，值得学习,需要的朋友可以参考下</p><a id="more"></a><h3 id="1-个人信息"><a href="#1-个人信息" class="headerlink" title="1. 个人信息"></a>1. 个人信息</h3><p>写一个shell脚本来得到当前的日期，时间，用户名和当前工作目录。<br>答案 : 输出用户名，当前日期和时间，以及当前工作目录的命令就是<br>$LOGNAME，‘date’，‘who i am’ 和 ’pwd‘。<br><img src="https://image.xiaomo.info/linux/question1.png" alt="question1"><br>样例输出<br>注意：带$的环境变量在赋值的时候不需要反引号</p><p><img src="https://image.xiaomo.info/linux/question_answer.png" alt="question_answer"><br>复制代码</p><h3 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a>2. 计算</h3><p>写一个shell脚本，进行两个数字的相加，如果没有输入参数就输出错误信息和一行使用说明</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="comment">#  参数个数</span></span><br><span class="line"><span class="operator">-ne</span> 不等于   !=</span><br><span class="line">数值比较用字数        字符串比较用符号</span><br><span class="line"><span class="operator">-ne</span>   不等于    !=</span><br><span class="line"><span class="operator">-lt</span>   小于          &lt;</span><br><span class="line"><span class="operator">-gt</span>  大于          &gt;</span><br><span class="line"><span class="operator">-le</span>  小于等于    &lt;=</span><br><span class="line"><span class="operator">-ge</span>  大于等于   &gt;=</span><br><span class="line"><span class="operator">-eq</span>  等于          ==</span><br></pre></td></tr></table></figure><p>特殊变量，不用加反引号<br>比如 echo $0，意思是输出当前文件名<br><img src="https://image.xiaomo.info/linux/sum.png" alt="sum"></p><p>给他添加可执行权限，并且执行。<br>复制代码代码如下:   </p><blockquote><p>chmod 755 two-numbers.sh<br>chmod +x tiaojian.sh   </p></blockquote><p>情形一: 未输入两个数字作为命令行参数运行脚本，你将得到下面的输出。<br>样例输出<br><img src="https://image.xiaomo.info/linux/count.png" alt="count"></p><p>因此，上述shell脚本满足了问题的要求。  </p><h3 id="3-反序"><a href="#3-反序" class="headerlink" title="3.反序"></a>3.反序</h3><p>你需要打印一个给定的数字的反序，如输入10572，输出27501，如果没有输入数据，应该抛出错误和使用脚本说明。在此之前，告诉我你需要在这里使用的算法。</p><p>算法</p><p>1.输入的数字为n<br>2.赋值 rev=0, sd=0 (反向和单个数字设置为0)<br>3.n % 10, 将得到最左边的数字<br>4.反向数字可以用这个方法生成 rev * 10 + sd<br>5.对输入数字进行右位移操作（除以10）<br>6.如果n &gt; 0, 进入第三步，否则进行第七步<br>7.输出rev<br>现在，创建一个名为<code>numbers.sh</code>文件，并添加以下代码。<br>复制代码代码如下:   </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span>   number"</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"       I will find reverse of given number"</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"       For eg. <span class="variable">$0</span> 0123, I will print 3210"</span> </span><br><span class="line">    <span class="built_in">exit</span> 1 </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"> </span><br><span class="line">n=<span class="variable">$1</span> </span><br><span class="line">rev=0 </span><br><span class="line">sd=0 </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$n</span> -gt 0 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    sd=`expr <span class="variable">$n</span> % 10` </span><br><span class="line">    rev=`expr <span class="variable">$rev</span> \* 10  + <span class="variable">$sd</span>` </span><br><span class="line">    n=`expr <span class="variable">$n</span> / 10` </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"Reverse number is <span class="variable">$rev</span>"</span></span><br></pre></td></tr></table></figure><p>授予对文件的执行权限，并运行如下所示的脚本。<br>复制代码代码如下:</p><blockquote><p>chmod 755 numbers.h</p></blockquote><p>情形一: 当输入不包含命令行参数，你将得到下面的输出。<br>样例输出<br>复制代码代码如下:   </p><blockquote><p>./numbers.sh</p></blockquote><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Usage: ./numbers.<span class="keyword">sh</span>  <span class="keyword">number</span> </span><br><span class="line">       I will <span class="keyword">find</span> <span class="built_in">reverse</span> of given <span class="keyword">number</span> </span><br><span class="line">       For eg. ./<span class="number">2</span>.<span class="keyword">sh</span> <span class="number">123</span>, I will <span class="keyword">print</span> <span class="number">321</span></span><br></pre></td></tr></table></figure><p>情形二: 正常输入<br>复制代码代码如下:  </p><p><code>$ ./numbers.sh 10572 </code></p><p>Reverse number is 27501</p><p>上面的脚本非常完美，输出正是我们需要的。   </p><h3 id="4-使用终端"><a href="#4-使用终端" class="headerlink" title="4. 使用终端"></a>4. 使用终端</h3><p>你应该直接用终端，而不是依靠任何shell脚本来进行实数计算。你会怎么做（比如实数7.56+2.453）？<br>答案 : 我们需要用如下所述的特殊方式使用bc命令。将7.56+2.453作为输入通过管道进入bc中。<br>复制代码代码如下:</p><p><code>$ echo 7.56 + 2.453 | bc</code></p><p>10.013</p><h3 id="5-圆周率"><a href="#5-圆周率" class="headerlink" title="5. 圆周率"></a>5. 圆周率</h3><p>需要给出圆周率的值，精度为小数点后100位，什么是最简单的方法。</p><p>答案 : 找圆周率的值最简单的方法，我们只是需要发出以下命令。<br>复制代码代码如下:</p><blockquote><p>time echo “scale=5000; 4*a(1)” | bc -l -q </p></blockquote><p>大概需要30S左右</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279502884197169399375105820974944592307</span>\</span><br><span class="line"><span class="number">81640628620899862803482534211706798214808651328230664709384460955058</span>\</span><br><span class="line"><span class="number">22317253594081284811174502841027019385211055596446229489549303819644</span>\</span><br><span class="line"><span class="number">28810975665933446128475648233786783165271201909145648566923460348610</span>\</span><br><span class="line"><span class="number">45432664821339360726024914127372458700660631558817488152092096282925</span>\</span><br><span class="line"><span class="number">40917153643678925903600113305305488204665213841469519415116094330572</span>\</span><br><span class="line"><span class="number">70365759591953092186117381932611793105118548074462379962749567351885</span>\</span><br><span class="line"><span class="number">75272489122793818301194912983367336244065664308602139494639522473719</span>\</span><br><span class="line"><span class="number">07021798609437027705392171762931767523846748184676694051320005681271</span>\</span><br><span class="line"><span class="number">45263560827785771342757789609173637178721468440901224953430146549585</span>\</span><br><span class="line"><span class="number">37105079227968925892354201995611212902196086403441815981362977477130</span>\</span><br><span class="line"><span class="number">99605187072113499999983729780499510597317328160963185950244594553469</span>\</span><br><span class="line"><span class="number">08302642522308253344685035261931188171010003137838752886587533208381</span>\</span><br><span class="line"><span class="number">42061717766914730359825349042875546873115956286388235378759375195778</span>\</span><br><span class="line"><span class="number">18577805321712268066130019278766111959092164201989380952572010654858</span>\</span><br><span class="line"><span class="number">63278865936153381827968230301952035301852968995773622599413891249721</span>\</span><br><span class="line"><span class="number">77528347913151557485724245415069595082953311686172785588907509838175</span>\</span><br><span class="line"><span class="number">46374649393192550604009277016711390098488240128583616035637076601047</span>\</span><br><span class="line"><span class="number">10181942955596198946767837449448255379774726847104047534646208046684</span>\</span><br><span class="line"><span class="number">25906949129331367702898915210475216205696602405803815019351125338243</span>\</span><br><span class="line"><span class="number">00355876402474964732639141992726042699227967823547816360093417216412</span>\</span><br><span class="line"><span class="number">19924586315030286182974555706749838505494588586926995690927210797509</span>\</span><br><span class="line"><span class="number">30295532116534498720275596023648066549911988183479775356636980742654</span>\</span><br><span class="line"><span class="number">25278625518184175746728909777727938000816470600161452491921732172147</span>\</span><br><span class="line"><span class="number">72350141441973568548161361157352552133475741849468438523323907394143</span>\</span><br><span class="line"><span class="number">33454776241686251898356948556209921922218427255025425688767179049460</span>\</span><br><span class="line"><span class="number">16534668049886272327917860857843838279679766814541009538837863609506</span>\</span><br><span class="line"><span class="number">80064225125205117392984896084128488626945604241965285022210661186306</span>\</span><br><span class="line"><span class="number">74427862203919494504712371378696095636437191728746776465757396241389</span>\</span><br><span class="line"><span class="number">08658326459958133904780275900994657640789512694683983525957098258226</span>\</span><br><span class="line"><span class="number">20522489407726719478268482601476990902640136394437455305068203496252</span>\</span><br><span class="line"><span class="number">45174939965143142980919065925093722169646151570985838741059788595977</span>\</span><br><span class="line"><span class="number">29754989301617539284681382686838689427741559918559252459539594310499</span>\</span><br><span class="line"><span class="number">72524680845987273644695848653836736222626099124608051243884390451244</span>\</span><br><span class="line"><span class="number">13654976278079771569143599770012961608944169486855584840635342207222</span>\</span><br><span class="line"><span class="number">58284886481584560285060168427394522674676788952521385225499546667278</span>\</span><br><span class="line"><span class="number">23986456596116354886230577456498035593634568174324112515076069479451</span>\</span><br><span class="line"><span class="number">09659609402522887971089314566913686722874894056010150330861792868092</span>\</span><br><span class="line"><span class="number">08747609178249385890097149096759852613655497818931297848216829989487</span>\</span><br><span class="line"><span class="number">22658804857564014270477555132379641451523746234364542858444795265867</span>\</span><br><span class="line"><span class="number">82105114135473573952311342716610213596953623144295248493718711014576</span>\</span><br><span class="line"><span class="number">54035902799344037420073105785390621983874478084784896833214457138687</span>\</span><br><span class="line"><span class="number">51943506430218453191048481005370614680674919278191197939952061419663</span>\</span><br><span class="line"><span class="number">42875444064374512371819217999839101591956181467514269123974894090718</span>\</span><br><span class="line"><span class="number">64942319615679452080951465502252316038819301420937621378559566389377</span>\</span><br><span class="line"><span class="number">87083039069792077346722182562599661501421503068038447734549202605414</span>\</span><br><span class="line"><span class="number">66592520149744285073251866600213243408819071048633173464965145390579</span>\</span><br><span class="line"><span class="number">62685610055081066587969981635747363840525714591028970641401109712062</span>\</span><br><span class="line"><span class="number">80439039759515677157700420337869936007230558763176359421873125147120</span>\</span><br><span class="line"><span class="number">53292819182618612586732157919841484882916447060957527069572209175671</span>\</span><br><span class="line"><span class="number">16722910981690915280173506712748583222871835209353965725121083579151</span>\</span><br><span class="line"><span class="number">36988209144421006751033467110314126711136990865851639831501970165151</span>\</span><br><span class="line"><span class="number">16851714376576183515565088490998985998238734552833163550764791853589</span>\</span><br><span class="line"><span class="number">32261854896321329330898570642046752590709154814165498594616371802709</span>\</span><br><span class="line"><span class="number">81994309924488957571282890592323326097299712084433573265489382391193</span>\</span><br><span class="line"><span class="number">25974636673058360414281388303203824903758985243744170291327656180937</span>\</span><br><span class="line"><span class="number">73444030707469211201913020330380197621101100449293215160842444859637</span>\</span><br><span class="line"><span class="number">66983895228684783123552658213144957685726243344189303968642624341077</span>\</span><br><span class="line"><span class="number">32269780280731891544110104468232527162010526522721116603966655730925</span>\</span><br><span class="line"><span class="number">47110557853763466820653109896526918620564769312570586356620185581007</span>\</span><br><span class="line"><span class="number">29360659876486117910453348850346113657686753249441668039626579787718</span>\</span><br><span class="line"><span class="number">55608455296541266540853061434443185867697514566140680070023787765913</span>\</span><br><span class="line"><span class="number">44017127494704205622305389945613140711270004078547332699390814546646</span>\</span><br><span class="line"><span class="number">45880797270826683063432858785698305235808933065757406795457163775254</span>\</span><br><span class="line"><span class="number">20211495576158140025012622859413021647155097925923099079654737612551</span>\</span><br><span class="line"><span class="number">76567513575178296664547791745011299614890304639947132962107340437518</span>\</span><br><span class="line"><span class="number">95735961458901938971311179042978285647503203198691514028708085990480</span>\</span><br><span class="line"><span class="number">10941214722131794764777262241425485454033215718530614228813758504306</span>\</span><br><span class="line"><span class="number">33217518297986622371721591607716692547487389866549494501146540628433</span>\</span><br><span class="line"><span class="number">66393790039769265672146385306736096571209180763832716641627488880078</span>\</span><br><span class="line"><span class="number">69256029022847210403172118608204190004229661711963779213375751149595</span>\</span><br><span class="line"><span class="number">01566049631862947265473642523081770367515906735023507283540567040386</span>\</span><br><span class="line"><span class="number">74351362222477158915049530984448933309634087807693259939780541934144</span>\</span><br><span class="line"><span class="number">73774418426312986080998886874132604720</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m32<span class="number">.275</span>s</span><br><span class="line">user<span class="number">0</span>m31<span class="number">.721</span>s</span><br><span class="line">sys<span class="number">0</span>m0<span class="number">.035</span>s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android users-permission权限列表.</title>
      <link href="2016/AndroidUsersPermission/"/>
      <url>2016/AndroidUsersPermission/</url>
      
        <content type="html"><![CDATA[<p>对于刚接触android的人来说，有很多坑要踩的。踩多少填多少，无所畏惧。</p><a id="more"></a><h3 id="一、踩坑背景"><a href="#一、踩坑背景" class="headerlink" title="一、踩坑背景"></a>一、踩坑背景</h3><p>今天在做小练习——《图灵机器人》的时候，需要使用网络调用图灵api的接口获取数据。但是由于见识太少，不知道访问网络要添加权限导致一直访问不了网络。经过一系列的调试，发现了问题。</p><h3 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h3><p>在<code>manifest</code>中添加权限即可解决这一问题，下面贴上具体代码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"info.xiaomo.robot"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 我们就是要在这里加上INTERNET的访问权限 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"info.xiaomo.robot.MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、其他权限延伸"><a href="#三、其他权限延伸" class="headerlink" title="三、其他权限延伸"></a>三、其他权限延伸</h3><h4 id="添加WiFi以及访问网络的权限："><a href="#添加WiFi以及访问网络的权限：" class="headerlink" title="添加WiFi以及访问网络的权限："></a>添加WiFi以及访问网络的权限：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_NETWORK_STATE"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_WIFI_STATE"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="操作外部存储设备文件："><a href="#操作外部存储设备文件：" class="headerlink" title="操作外部存储设备文件："></a>操作外部存储设备文件：</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="录音时需要的权限："><a href="#录音时需要的权限：" class="headerlink" title="录音时需要的权限："></a>录音时需要的权限：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="录制视频时需要的权限："><a href="#录制视频时需要的权限：" class="headerlink" title="录制视频时需要的权限："></a>录制视频时需要的权限：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CAMERA"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="发送短信："><a href="#发送短信：" class="headerlink" title="发送短信："></a>发送短信：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SEND_SMS"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="收短信"><a href="#收短信" class="headerlink" title="收短信:"></a>收短信:</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.RECEIVE_SMS"</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="收彩信："><a href="#收彩信：" class="headerlink" title="收彩信："></a>收彩信：</h4><uses-permission android:name="android.permission.READ_SMS"><h4 id="GPS"><a href="#GPS" class="headerlink" title="GPS:"></a>GPS:</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  访问网络 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  GPS定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_MOCK_LOCATION"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  AGPS定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info/android/androidPermission.png" alt="权限"></p><h4 id="实现后的效果"><a href="#实现后的效果" class="headerlink" title="实现后的效果"></a>实现后的效果</h4><p>因为模拟器没调出到在哪输入中文，也是有点蛋疼<br><a href="https://github.com/XiaomoAndroid/XiaomoRobot" target="_blank" rel="noopener">源码地址</a><br><img src="https://image.xiaomo.info/android/xiaomoRobot.gif" alt="效果演示"></p></uses-permission>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android异步任务AsyncTask.</title>
      <link href="2016/AndroidAsyncTask/"/>
      <url>2016/AndroidAsyncTask/</url>
      
        <content type="html"><![CDATA[<p>不得不说，对于APP来说，后台运行任务必不可少。异步任务能够增强用户体验，是必不可少的东西。</p><a id="more"></a><h3 id="一、AsyncTask和Handler"><a href="#一、AsyncTask和Handler" class="headerlink" title="一、AsyncTask和Handler"></a>一、AsyncTask和Handler</h3><h4 id="1-AsyncTask实现的原理-和适用的优缺点"><a href="#1-AsyncTask实现的原理-和适用的优缺点" class="headerlink" title="1.  AsyncTask实现的原理,和适用的优缺点"></a>1.  AsyncTask实现的原理,和适用的优缺点</h4><p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p><p>使用的优点:</p><blockquote><p> 简单,快捷<br> 过程可控</p></blockquote><p>使用的缺点:</p><blockquote><p>在使用多个异步操作和并需要进行Ui变更时,就变得复杂起来.</p></blockquote><h4 id="2-Handler异步实现的原理和适用的优缺点"><a href="#2-Handler异步实现的原理和适用的优缺点" class="headerlink" title="2. Handler异步实现的原理和适用的优缺点"></a>2. Handler异步实现的原理和适用的优缺点</h4><p>在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。</p><p>使用的优点：</p><blockquote><p>结构清晰，功能定义明确<br>对于多个后台任务时，简单，清晰</p></blockquote><p>使用的缺点：</p><blockquote><p>在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）</p></blockquote><h3 id="二、AsyncTask介绍"><a href="#二、AsyncTask介绍" class="headerlink" title="二、AsyncTask介绍"></a>二、AsyncTask介绍</h3><p>Android的AsyncTask比Handler更轻量级一些，适用于简单的异步处理。<br>首先明确Android之所以有Handler和AsyncTask，都是为了不阻塞主线程（UI线程），且UI的更新只能在主线程中完成，因此异步处理是不可避免的。<br>Android为了降低这个开发难度，提供了AsyncTask。AsyncTask就是一个封装过的后台任务类，顾名思义就是异步任务。<br>AsyncTask直接继承于Object类，位置为android.os.AsyncTask。要使用AsyncTask工作我们要提供三个泛型参数，并重载几个方法(至少重载一个)。</p><h4 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1.泛型"></a>1.泛型</h4><p>AsyncTask定义了三种泛型类型 Params，Progress和Result。</p><blockquote><p>Params 启动任务执行的输入参数，比如HTTP请求的URL。<br>Progress 后台任务执行的百分比。<br>Result 后台执行任务最终返回的结果，比如String。</p></blockquote><h4 id="2-重载"><a href="#2-重载" class="headerlink" title="2. 重载"></a>2. 重载</h4><p>使用过AsyncTask 的同学都知道一个异步加载数据最少要重写以下这两个方法：</p><blockquote><p>doInBackground(Params…) 后台执行，比较耗时的操作都可以放在这里。注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作，通常需要较长的时间。在执行过程中可以调用publishProgress(Progress…)来更新任务的进度。<br>onPostExecute(Result)  相当于Handler 处理UI的方式，在这里面可以使用在doInBackground 得到的结果处理操作UI。 此方法在主线程执行，任务执行的结果作为此方法的参数返回</p></blockquote><p>有必要的话你还得重写以下这三个方法，但不是必须的：</p><blockquote><p>onProgressUpdate(Progress…)   可以使用进度条增加用户体验度。 此方法在主线程执行，用于显示任务执行的进度。<br>onPreExecute()        这里是最终用户调用Excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。<br>onCancelled()             用户调用取消时，要做的操作</p></blockquote><h4 id="3-准则"><a href="#3-准则" class="headerlink" title="3.准则"></a>3.准则</h4><p>使用AsyncTask类，以下是几条必须遵守的准则：</p><blockquote><p>Task的实例必须在UI thread中创建；<br>execute方法必须在UI thread中调用；<br>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params…), onProgressUpdate(Progress…)这几个方法；<br>该task只能被执行一次，否则多次调用时将会出现异常；</p></blockquote><h3 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h3><p>一个超简单的理解 AsyncTask 的例子：</p><h4 id="1-xml-UI布局"><a href="#1-xml-UI布局" class="headerlink" title="1. xml(UI布局)"></a>1. xml(UI布局)</h4><p>main.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView01"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">"@+id/progressBar02"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/button03"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"更新progressbar"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-activity-活动面板"><a href="#1-activity-活动面板" class="headerlink" title="1. activity(活动面板)"></a>1. activity(活动面板)</h4><p>MainActivity.java</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> vic.wong.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</span><br><span class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>.<span class="type">OnClickListener</span>;</span><br><span class="line"><span class="keyword">import</span> android.widget.<span class="type">Button</span>;</span><br><span class="line"><span class="keyword">import</span> android.widget.<span class="type">ProgressBar</span>;</span><br><span class="line"><span class="keyword">import</span> android.widget.<span class="type">TextView</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> button;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ProgressBar</span> progressBar;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.main);</span><br><span class="line"></span><br><span class="line">        button = (<span class="type">Button</span>)findViewById(<span class="type">R</span>.id.button03);</span><br><span class="line">        progressBar = (<span class="type">ProgressBar</span>)findViewById(<span class="type">R</span>.id.progressBar02);</span><br><span class="line">        textView = (<span class="type">TextView</span>)findViewById(<span class="type">R</span>.id.textView01);</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                <span class="type">ProgressBarAsyncTask</span> asyncTask = <span class="keyword">new</span> <span class="type">ProgressBarAsyncTask</span>(textView, progressBar);</span><br><span class="line">                asyncTask.execute(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-操作者-模拟网络环境"><a href="#3-操作者-模拟网络环境" class="headerlink" title="3.操作者(模拟网络环境)"></a>3.操作者(模拟网络环境)</h4><p>NetOperator.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> vic.wong.main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟网络环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-asyncTask-异步任务"><a href="#4-asyncTask-异步任务" class="headerlink" title="4. asyncTask(异步任务)"></a>4. asyncTask(异步任务)</h4><p>ProgressBarAsyncTask .java</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">package vic.wong.main;</span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.widget.ProgressBar;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>生成该类的对象，并调用execute方法之后</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>首先执行的是onProExecute方法</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>其次执行doInBackGroup方法</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ProgressBarAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    private TextView textView;</span><br><span class="line">    private ProgressBar progressBar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ProgressBarAsyncTask(TextView textView, ProgressBar progressBar) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.textView = textView;</span><br><span class="line">        <span class="keyword">this</span>.progressBar = progressBar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>这里的Integer参数对应AsyncTask中的第一个参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>这里的String返回值对应AsyncTask的第三个参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>该方法并不运行在UI线程当中，主要用于异步操作，所有在该方法中不能对UI当中的空间进行设置和修改</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>但是可以调用publishProgress方法触发onProgressUpdate对UI进行操作</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected <span class="built_in">String</span> doInBackground(Integer... params) &#123;</span><br><span class="line">        NetOperator netOperator = <span class="keyword">new</span> NetOperator();</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">10</span>; i &lt;= <span class="number">100</span>; i+=<span class="number">10</span>) &#123;</span><br><span class="line">            netOperator.<span class="keyword">operator</span>();</span><br><span class="line">            publishProgress(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i + params[<span class="number">0</span>].intValue() + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>这里的String参数对应AsyncTask中的第三个参数（也就是接收doInBackground的返回值）</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>在doInBackground方法执行结束之后在运行，并且运行在UI线程当中 可以对UI空间进行设置</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected <span class="keyword">void</span> onPostExecute(<span class="built_in">String</span> result) &#123;</span><br><span class="line">        textView.setText(<span class="string">"异步操作执行结束"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法运行在UI线程当中,并且运行在UI线程当中 可以对UI空间进行设置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected <span class="keyword">void</span> onPreExecute() &#123;</span><br><span class="line">        textView.setText(<span class="string">"开始执行异步线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>这里的Intege参数对应AsyncTask中的第二个参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>在doInBackground方法当中，，每次调用publishProgress方法都会触发onProgressUpdate执行</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>onProgressUpdate是在UI线程中执行，所有可以对UI空间进行操作</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected <span class="keyword">void</span> onProgressUpdate(Integer... values) &#123;</span><br><span class="line">        <span class="built_in">int</span> vlaue = values[<span class="number">0</span>];</span><br><span class="line">        progressBar.setProgress(vlaue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android环境搭建.</title>
      <link href="2016/AndroidEnvironment/"/>
      <url>2016/AndroidEnvironment/</url>
      
        <content type="html"><![CDATA[<p>普天同庆，谷歌打算重回中国市场了。不管是angular2的完成，还是昨天developer.google.cn的开通，都是对开发者来说是一件高兴的事情。正好趁此机会研究一下android。</p><a id="more"></a><h3 id="一、IDE工具下载"><a href="#一、IDE工具下载" class="headerlink" title="一、IDE工具下载"></a>一、IDE工具下载</h3><p><a href="http://www.android-studio.org/" target="_blank" rel="noopener">android studio官网</a> 1.6G，有点大哦。</p><h3 id="二、-评价"><a href="#二、-评价" class="headerlink" title="二、 评价"></a>二、 评价</h3><p>不得不说，看到android studio第一眼就觉得舒服。从IDEA无缝切换到as，除了本身有点大，其他没毛病。</p><h3 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h3><p>在安装好之后，启动时会让我们配一下代理，也就是http proxy这东西。配完镜像速度会变快，当然在中国不配就等于用不了。真希望啥时候谷歌能全面回到中国市场。<br><a href="http://mirrors.neusoft.edu.cn/more.we#android" target="_blank" rel="noopener">配置说明</a>  mirrors.neusoft.edu.cn:80<br><img src="https://image.xiaomo.info/android/httpProxy.png" alt="android http proxy"></p><h3 id="四、设置SDK"><a href="#四、设置SDK" class="headerlink" title="四、设置SDK"></a>四、设置SDK</h3><p>在安装android studio时也装了android SDK,找到我们安装时间的位置。我装的时候没有截图，就不放图了。我放在E盘，默认在C/用户/appData/xxxx。<br><img src="https://image.xiaomo.info/android/androidSdk.png" alt="android http proxy"><br>选中Android/sdk，下一步，完成。</p><h3 id="五、创建项目"><a href="#五、创建项目" class="headerlink" title="五、创建项目"></a>五、创建项目</h3><p>创建项目</p><p>首先，先指出Android Studio中的两个概念。 Project 和 Module 。在Android Studio中， Project 的真实含义是工作空间， Module 为一个具体的项目。</p><p>在 Eclipse 中，我们可以同时对多个 Eclipse 的 Project 进行同时编辑，这些 Project 在同一个 workspace 之中。在Android Studio中，我们可以同时对多个Android Studio的 Module 进行同时编辑，这些 Module 在同一个 Project 之中。</p><p>Eclipse 的 Project 等同于Android Studio的 Module 。<br>Eclipse 的 workspace 等同于Android Studio的 Project 。</p><p>本文中所说到的项目指的是Android Studio的 Module 。Android Studio创建一个项目，首先要先创建 Project 。但是你创建项目的同时， Project 自动创建了，因此很多人容易混淆这两种概念。</p><p><img src="https://image.xiaomo.info/android/newProject.png" alt="newProject"><br>Application name ：应用程序的名称。它是app在设备上显示的应用程序名称，也是在Android Studio Project 的名称。<br>Company Domain ：公司域名。影响下面的 Package name 。默认为电脑主机名称，当然你也可以单独设置 Package name 。<br>Package name ：应用程序包名。每一个app都有一个独立的包名，如果两个app的包名相同，Android会认为他们是同一个app。因此，需要尽量保证，不同的app拥有不同的包名。<br>Project localtion ： Project 存放的本地目录。</p><p>以上内容设置完毕，点击 Next 。</p><p><img src="https://image.xiaomo.info/android/setSdk.png" alt="setSdk"></p><p>在这里，你可以你的 Project 中 Module 的类型以及支持的最低版本。<br>Phone and Tablet ：表示 Module 是一个手机和平板项目。<br>TV ：表示 Module 是一个Android TV项目。<br>Wear ：表示 Module 是一个可穿戴设备（例如手表）项目。<br>Glass ：表示 Module 是一个 Google Glass 项目（不知道 Google Glass 是什么请自行搜索）。</p><p>你可以同时选择多个类型，区别就是项目会根据你选择的类型创建一个或多个 Module 。</p><p>Minimum SDK 表示的是 Module 支持的Android最低版本。根据不同的用户可以选择不同的版本。你可以点击 Help me choose 来查看当前Android版本分布情况。现在这个时代，如果你的项目支持到 2.2 版本几乎是支持了所有的Android设备。</p><p>以上内容设置完毕，点击 Next 。</p><p>接下来，我们会看到这个页面（由于我的 Module 类型只选择了 Phone and Tablet ，所以会有这个页面。）。</p><p>这个页面是让我们选择是否创建 Activity以及创建 Activity 的类型。你可以选择不创建 Activity （ Add No Activity ）。</p><p>如果你选择自动创建 Activity，Android Studio会自动帮你生成一些代码。根据 Activity 类型的不同，生成的代码也是不同的。有时，你能从这些自动生成的代码中，学到很多东西，比如 Fullscreen Activity 。<br>选择完毕，点击 Next ,然后就创建好了。</p><h3 id="六、项目目录结构"><a href="#六、项目目录结构" class="headerlink" title="六、项目目录结构"></a>六、项目目录结构</h3><p>在Android Studio中，提供了以下几种项目结构类型：project、packages、android等等。我们常用的就是project和android两种，所以就介绍这两种<br><img src="https://image.xiaomo.info/android/projectJiegou.png" alt="projectJiegou"></p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">app</span>/build/ <span class="keyword">app</span>模块build编译输出的目录</span><br><span class="line"><span class="keyword">app</span>/build.gradle <span class="keyword">app</span>模块的gradle编译文件</span><br><span class="line"><span class="keyword">app</span>/<span class="keyword">app</span>.iml <span class="keyword">app</span>模块的配置文件</span><br><span class="line"><span class="keyword">app</span>/proguard-rules.<span class="keyword">pro</span> <span class="keyword">app</span>模块proguard文件</span><br><span class="line">build.gradle 项目的gradle编译文件</span><br><span class="line">settings.gradle 定义项目包含哪些模块</span><br><span class="line">gradlew 编译脚本，可以在命令行执行打包</span><br><span class="line"><span class="keyword">local</span>.properties 配置SDK/NDK</span><br><span class="line">MyApplication.iml 项目的配置文件</span><br><span class="line">External Libraries 项目依赖的Lib, 编译时自动下载的</span><br></pre></td></tr></table></figure><p><img src="https://image.xiaomo.info/android/androidJiegou.png" alt="androidJiegou"></p><p>app/manifests AndroidManifest.xml配置文件目录<br>app/java 源码目录<br>app/res 资源文件目录<br>Gradle Scripts gradle编译相关的脚本</p><p>原文  <a href="http://www.aswifter.com/2015/07/07/android-studio-project-struct/" target="_blank" rel="noopener">http://www.aswifter.com/2015/07/07/android-studio-project-struct/</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客域名迁移(从二级域名迁移到一级域名).</title>
      <link href="2016/blogToXiaomo/"/>
      <url>2016/blogToXiaomo/</url>
      
        <content type="html"><![CDATA[<p>折腾完https之后在考虑SEO优化的问题，HTTPS对搜索收录更加友好。既然要友好，就要做到底，一级域名的SEO和比二级域名权重高，因此考虑把博客从二级域名迁移到一级域名。(生命不息折腾不止！)<br>从<a href="https://blog.xiaomo.info/">https://blog.xiaomo.info</a>迁移到<a href="https://xiaomo.info/" target="_blank" rel="noopener">https://xiaomo.info</a></p><a id="more"></a><h3 id="一、迁移原因"><a href="#一、迁移原因" class="headerlink" title="一、迁移原因"></a>一、迁移原因</h3><h4 id="1、-SEO"><a href="#1、-SEO" class="headerlink" title="1、 SEO"></a>1、 SEO</h4><p>折腾完https之后在考虑SEO优化的问题，HTTPS对搜索收录更加友好。既然要友好，就要做到底，一级域名的SEO和比二级域名权重高，因此考虑把博客从二级域名迁移到一级域名。(生命不息折腾不止！)</p><h4 id="2、-记忆"><a href="#2、-记忆" class="headerlink" title="2、 记忆"></a>2、 记忆</h4><p>域名更短，更好记</p><h4 id="3、-权重"><a href="#3、-权重" class="headerlink" title="3、 权重"></a>3、 权重</h4><p>一级域名的权重比二级域名高。</p><h3 id="二、迁移过程"><a href="#二、迁移过程" class="headerlink" title="二、迁移过程"></a>二、迁移过程</h3><h4 id="1、证书"><a href="#1、证书" class="headerlink" title="1、证书"></a>1、证书</h4><p>重新去腾讯云申请个SSL证书</p><h4 id="2、DNS解析"><a href="#2、DNS解析" class="headerlink" title="2、DNS解析"></a>2、DNS解析</h4><p>按照腾讯云给和CNAME添加一个解析</p><h3 id="3、-nginx配置"><a href="#3、-nginx配置" class="headerlink" title="3、 nginx配置"></a>3、 nginx配置</h3><p>换一下证书就可以了</p><h3 id="三、迁移结果"><a href="#三、迁移结果" class="headerlink" title="三、迁移结果"></a>三、迁移结果</h3><h3 id="1、域名"><a href="#1、域名" class="headerlink" title="1、域名"></a>1、域名</h3><p>从<a href="https://blog.xiaomo.info/">https://blog.xiaomo.info</a>迁移到<a href="https://xiaomo.info/" target="_blank" rel="noopener">https://xiaomo.info</a></p><h3 id="2、损失"><a href="#2、损失" class="headerlink" title="2、损失"></a>2、损失</h3><p>迁移了域名，站点访问量开始从0算起。一切从头开始，总感觉有点回到解放前的感觉。不管怎么说，一切按照预想达到了，这样不好。不是吗？</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text 3 使用配置与插件安装</title>
      <link href="2016/SublimeConfig/"/>
      <url>2016/SublimeConfig/</url>
      
        <content type="html"><![CDATA[<p>　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。</p><a id="more"></a><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><ul><li>一直使用的是 Sublime 3，直接转到 3 的 <a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">下载页面</a> 好了。</li></ul><h4 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h4><ul><li><code>Preferences/Settings - User</code>，设置字体为 <a href="http://pan.baidu.com/s/1mglgkSK" target="_blank" rel="noopener">Consolas 雅黑混合体</a> yx5g，字号11，tab 转空格，显示空格和制表符。</li></ul><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">"font_face"</span>: <span class="string">"Yahei Consolas Hybrid"</span>,</span><br><span class="line"><span class="string">"font_size"</span>: <span class="number">11</span>,</span><br><span class="line"><span class="string">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"draw_white_space"</span>: <span class="string">"all"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/</span></span><br><span class="line"><span class="string">"default_line_ending"</span>: <span class="string">"unix"</span>,</span><br><span class="line"><span class="string">"default_encoding"</span>: <span class="string">"UTF-8"</span>,</span><br></pre></td></tr></table></figure><blockquote><p>其他设置参考 <code>Preferences/Settings - Default</code>。</p></blockquote><h3 id="基础插件"><a href="#基础插件" class="headerlink" title="基础插件"></a>基础插件</h3><h4 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a><a href="https://packagecontrol.io/" target="_blank" rel="noopener">Package Control</a></h4><p> <a href="https://packagecontrol.io/" target="_blank" rel="noopener">Package Control</a></p><ul><li>用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。<blockquote><p>插件使用与安装: <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">https://packagecontrol.io/installation</a></p></blockquote></li></ul><h4 id="Convert​To​UTF8"><a href="#Convert​To​UTF8" class="headerlink" title="Convert​To​UTF8"></a><a href="https://packagecontrol.io/packages/ConvertToUTF8" target="_blank" rel="noopener">Convert​To​UTF8</a></h4><ul><li>文本编码自动转换，减少中日韩文乱码问题。<blockquote><p>插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8</p></blockquote></li></ul><h4 id="IMESupport"><a href="#IMESupport" class="headerlink" title="IMESupport"></a><a href="https://packagecontrol.io/packages/IMESupport" target="_blank" rel="noopener">IMESupport</a></h4><ul><li>解决输入法选字框不跟随问题。</li></ul><h4 id="Side​Bar​Enhancements"><a href="#Side​Bar​Enhancements" class="headerlink" title="Side​Bar​Enhancements"></a><a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="noopener">Side​Bar​Enhancements</a></h4><ul><li>自带边栏功能太少，必须安装此插件增强一下。</li></ul><h3 id="主题配色"><a href="#主题配色" class="headerlink" title="主题配色"></a>主题配色</h3><h4 id="Theme-Spacegray"><a href="#Theme-Spacegray" class="headerlink" title="Theme - Spacegray"></a><a href="https://packagecontrol.io/packages/Theme%20-%20Spacegray" target="_blank" rel="noopener">Theme - Spacegray</a></h4><ul><li>Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。<br><img src="http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg" alt="Base16 Eighties Dark color scheme"></li></ul><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="Sublime​Linter"><a href="#Sublime​Linter" class="headerlink" title="Sublime​Linter"></a><a href="https://packagecontrol.io/packages/SublimeLinter" target="_blank" rel="noopener">Sublime​Linter</a></h4><ul><li>用于管理其他 code linting 代码规范插件。<blockquote><p>使用说明: <a href="http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc" target="_blank" rel="noopener">http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc</a></p></blockquote></li></ul><h4 id="Sublime​Linter-jshint"><a href="#Sublime​Linter-jshint" class="headerlink" title="Sublime​Linter-jshint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-jshint" target="_blank" rel="noopener">Sublime​Linter-jshint</a></h4><ul><li>基于 <a href="http://jshint.com/" target="_blank" rel="noopener">JSHint</a>，用于检查规范 JavaScript 代码。<blockquote><p>NPM 依赖包: <code>npm install -g jshint</code><br>使用说明: <a href="https://github.com/SublimeLinter/SublimeLinter-jshint" target="_blank" rel="noopener">https://github.com/SublimeLinter/SublimeLinter-jshint</a></p></blockquote></li></ul><h4 id="Sublime​Linter-csslint"><a href="#Sublime​Linter-csslint" class="headerlink" title="Sublime​Linter-csslint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-csslint" target="_blank" rel="noopener">Sublime​Linter-csslint</a></h4><ul><li>基于 <a href="https://github.com/CSSLint/csslint" target="_blank" rel="noopener">CSSLint</a>，用于检查规范 CSS 代码。<blockquote><p>NPM 依赖包: <code>npm install -g csslint</code><br>使用说明: <a href="https://github.com/SublimeLinter/SublimeLinter-csslint" target="_blank" rel="noopener">https://github.com/SublimeLinter/SublimeLinter-csslint</a></p></blockquote></li></ul><h4 id="Sublime​Linter-contrib-htmlhint"><a href="#Sublime​Linter-contrib-htmlhint" class="headerlink" title="Sublime​Linter-contrib-htmlhint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint" target="_blank" rel="noopener">Sublime​Linter-contrib-htmlhint</a></h4><ul><li>基于 <a href="http://htmlhint.com/" target="_blank" rel="noopener">HTMLHint</a>，用于检查规范 HTML 代码。<blockquote><p>NPM 依赖包: <code>npm install -g htmlhint@latest</code><br>使用说明: <a href="https://github.com/mmaday/SublimeLinter-contrib-htmlhint" target="_blank" rel="noopener">https://github.com/mmaday/SublimeLinter-contrib-htmlhint</a></p></blockquote></li></ul><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML-CSS-JS Prettify"></a><a href="https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify" target="_blank" rel="noopener">HTML-CSS-JS Prettify</a></h4><ul><li>格式化 HTML, CSS, JavaScript 及 JSON 代码。</li></ul><h4 id="Color-Highlighter"><a href="#Color-Highlighter" class="headerlink" title="Color Highlighter"></a><a href="https://packagecontrol.io/packages/Color%20Highlighter" target="_blank" rel="noopener">Color Highlighter</a></h4><ul><li>直接在代码中预览颜色。</li></ul><h4 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a><a href="https://packagecontrol.io/packages/Stylus" target="_blank" rel="noopener">Stylus</a></h4><ul><li>使代码高亮支持 Stylus。</li></ul><h4 id="Stylus-Clean-Completions"><a href="#Stylus-Clean-Completions" class="headerlink" title="Stylus Clean Completions"></a><a href="https://packagecontrol.io/packages/Stylus%20Clean%20Completions" target="_blank" rel="noopener">Stylus Clean Completions</a></h4><ul><li>Stylus 代码自动补全。</li></ul><h4 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a><a href="https://packagecontrol.io/packages/AutoFileName" target="_blank" rel="noopener">AutoFileName</a></h4><ul><li>文件名自动补全。<br><img src="http://moxfive.xyz/resources/autofilename.png" alt="AutoFileName"></li></ul><h4 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use"></a><a href="https://packagecontrol.io/packages/Can%20I%20Use" target="_blank" rel="noopener">Can I Use</a></h4><ul><li><a href="http://caniuse.com/" target="_blank" rel="noopener">http://caniuse.com/</a> 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性</li></ul><h4 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a><a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="noopener">BracketHighlighter</a></h4><ul><li>调整各类括号匹配的高亮样式</li></ul><h4 id="To-be-added"><a href="#To-be-added" class="headerlink" title="To be added"></a>To be added</h4><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol><li><strong>Package Control</strong>: <a href="https://packagecontrol.io/" target="_blank" rel="noopener">https://packagecontrol.io/</a></li><li><strong>SublimeLinter</strong>: <a href="http://sublimelinter.readthedocs.org/" target="_blank" rel="noopener">http://sublimelinter.readthedocs.org/</a></li><li><strong>JSHint</strong>: <a href="http://jshint.com/" target="_blank" rel="noopener">http://jshint.com/</a></li><li><strong>CSSLint</strong>: <a href="https://github.com/CSSLint/csslint" target="_blank" rel="noopener">https://github.com/CSSLint/csslint</a></li><li><strong>HTMLHint</strong>: <a href="http://htmlhint.com/" target="_blank" rel="noopener">http://htmlhint.com/</a></li><li><strong>Stylus</strong>: <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">http://learnboost.github.io/stylus/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拥抱https(http全面切换到https)</title>
      <link href="2016/HttpToHttps/"/>
      <url>2016/HttpToHttps/</url>
      
        <content type="html"><![CDATA[<p>在百度和谷歌的鼓励下，现在很多网站都开始换成https了啊，只是有的没有隐私数据的网站感觉没有太大必要，但是设计要密码账号的网站必须要的。不过有部分网站没有换成https只是暂时的，2-3年后预估互联网会全部变成https。因为https成本也不是很高，免费SSL证书也有，比如腾讯免费SSL证书，starssl免费证书等。关键是https对SEO更加友好。</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="域-名：阿里云"><a href="#域-名：阿里云" class="headerlink" title="域 名：阿里云"></a>域 名：阿里云</h4><h4 id="服务器：阿里云ECS"><a href="#服务器：阿里云ECS" class="headerlink" title="服务器：阿里云ECS"></a>服务器：阿里云ECS</h4><h4 id="SSL证书-腾讯SSL免费版"><a href="#SSL证书-腾讯SSL免费版" class="headerlink" title="SSL证书: 腾讯SSL免费版"></a>SSL证书: 腾讯SSL免费版</h4><h4 id="web容器：nginx-php"><a href="#web容器：nginx-php" class="headerlink" title="web容器：nginx+php"></a>web容器：nginx+php</h4><h3 id="一、为什么要切换到HTTPS"><a href="#一、为什么要切换到HTTPS" class="headerlink" title="一、为什么要切换到HTTPS"></a>一、为什么要切换到HTTPS</h3><h4 id="1-安全方面"><a href="#1-安全方面" class="headerlink" title="1.安全方面"></a>1.安全方面</h4><p>HTTPS比HTTP更加安全</p><h4 id="2-技术方面"><a href="#2-技术方面" class="headerlink" title="2.技术方面"></a>2.技术方面</h4><p>不懂HTTPS多不好意思啊，所以就当是学习了。</p><h3 id="二、为什么要用腾讯SSL"><a href="#二、为什么要用腾讯SSL" class="headerlink" title="二、为什么要用腾讯SSL"></a>二、为什么要用腾讯SSL</h3><p>因为免费啊，毕竟穷人用不起企业级别的，先用一年免费的再说。starssl是外国的，看不习惯鸟语还是老老实实用中文。</p><h3 id="三、申请证书"><a href="#三、申请证书" class="headerlink" title="三、申请证书"></a>三、申请证书</h3><p>申请地址：<a href="https://console.qcloud.com/ssl" target="_blank" rel="noopener">https://console.qcloud.com/ssl</a></p><p>申请证书之后会给一个下载链接，下载之后会有3个文件夹。分别是nginx、tomcat、apache。因为我个人用的是nginx，就说下nginx的配置。没有调查就没有发言权，用其他两种的小伙伴请自行研究。</p><h4 id="四、DNS配置"><a href="#四、DNS配置" class="headerlink" title="四、DNS配置"></a>四、DNS配置</h4><p>证书申请通过之后会让你配置一个CNAME类型的DNS,然后把这个DNS在你的域名中添加一个cname的解析。<br><img src="https://image.xiaomo.info/https/cname.png" alt="cname"></p><h3 id="五、上传"><a href="#五、上传" class="headerlink" title="五、上传"></a>五、上传</h3><p>将下载的证书nginx文件夹打包上传到 <code>usr/local/nginx</code>目录</p><h3 id="六、nginx配置"><a href="#六、nginx配置" class="headerlink" title="六、nginx配置"></a>六、nginx配置</h3><p>先确认<code>nginx</code>安装时已编译http_ssl模块，也就是执行如下命令查看是否存在–with-http_ssl_module参数：</p><p>执行<code>/usr/local/nginx/sbin/nginx -V</code>这个命令</p><p>在返回的结果中找是否有<code>--with-http_ssl_module</code>参数，没有的话要先激活这个模块。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nginx version:</span> <span class="string">nginx/1.6.0</span></span><br><span class="line"><span class="string">built</span> <span class="string">by</span> <span class="string">gcc</span> <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> <span class="string">(Red</span> <span class="string">Hat</span> <span class="number">4.4</span><span class="number">.7</span><span class="number">-4</span><span class="string">)</span> <span class="string">(GCC)</span></span><br><span class="line"><span class="string">TLS</span> <span class="string">SNI</span> <span class="string">support</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">configure arguments:</span> <span class="string">--prefix=/usr/local/nginx</span> <span class="string">--with-http_ssl_module</span> <span class="string">--with-openssl=/usr/local/src/openssl-1.0.1/</span></span><br></pre></td></tr></table></figure><p>然后在<code>usr/local/nginx/conf/nginx.conf</code>中修改配置，配置如下<br>在server中加入以下内容，注意修改一下对应<code>ssl_certificate</code>和<code>ssl_certificate_key</code>文件的位置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /usr/local/nginx/ssl/1_xiaomo.info_bundle.crt; <span class="comment">#证书公钥文件路径</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/ssl/2_xiaomo.<span class="literal">info</span>.key;   <span class="comment">#证书私钥文件路径</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</span><br></pre></td></tr></table></figure><p>这一段主要是开启SSL</p><p>保存配置之后要确认是否配置正确，执行<code>/usr/local/nginx/sbin/nginx -t</code>命令</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">linux-<span class="keyword">test</span>:~ # /usr/<span class="keyword">local</span>/nginx/sbin/nginx -t</span><br><span class="line">#如下显示则为正确无误：</span><br><span class="line">nginx: the configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</span><br></pre></td></tr></table></figure><p>重定向http到https,加入以下这段，意思是访问http的网站的时候会重定向到https上去。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">             <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</span><br><span class="line">                     <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="七、生效"><a href="#七、生效" class="headerlink" title="七、生效"></a>七、生效</h3><p>执行<code>/usr/local/nginx/sbin/nginx -s reload</code>,如无错误，现在应该可以顺利访问 <a href="https://xiaomo.info/" target="_blank" rel="noopener">xiaomo.info</a>这个网站，并且是https的。</p><h3 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h3><p>nginx配置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /usr/local/nginx/ssl/1_xiaomo.info_bundle.crt; <span class="comment">#证书公钥文件路径</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/ssl/2_xiaomo.<span class="literal">info</span>.key;   <span class="comment">#证书私钥文件路径</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> xiaomo.<span class="literal">info</span>;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span>  /data2/xiaomo.github.io/public;</span><br><span class="line"></span><br><span class="line">         <span class="attribute">location</span> <span class="regexp">~ \.(jpg|png|gif|js|css|swf|flv|ico)$</span> &#123;</span><br><span class="line">                 <span class="attribute">expires</span> <span class="number">12h</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">if</span> (<span class="variable">$scheme</span> = http) &#123;</span><br><span class="line">                        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* ^/(doc|logs|app|sys)/</span> &#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">                <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">                <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">                <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">                <span class="attribute">error_page</span> <span class="number">404</span> = /<span class="number">404</span>.html;</span><br><span class="line">                <span class="attribute">fastcgi_pass</span>  unix:/tmp/php-cgi.sock;</span><br><span class="line">                <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">                <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">                <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">                <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">                <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">                <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_log</span>  /home/wwwlogs/error_log.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h4 id="1-Linux-Nginx-Apache-Tomcat新增SSL证书，开启https访问教程"><a href="#1-Linux-Nginx-Apache-Tomcat新增SSL证书，开启https访问教程" class="headerlink" title="1. Linux+Nginx/Apache/Tomcat新增SSL证书，开启https访问教程"></a>1. <a href="https://zhangge.net/4861.html" target="_blank" rel="noopener">Linux+Nginx/Apache/Tomcat新增SSL证书，开启https访问教程</a></h4><h4 id="2-让你的网站免费支持-HTTPS-及-Nginx-平滑升级"><a href="#2-让你的网站免费支持-HTTPS-及-Nginx-平滑升级" class="headerlink" title="2. 让你的网站免费支持 HTTPS 及 Nginx 平滑升级"></a>2. <a href="http://www.cnblogs.com/mafly/archive/2016/11/16/https_nginx.html" target="_blank" rel="noopener">让你的网站免费支持 HTTPS 及 Nginx 平滑升级</a></h4>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger ui和spring boot集成生成api文档</title>
      <link href="2016/JavaSpringBootSwaggerUi/"/>
      <url>2016/JavaSpringBootSwaggerUi/</url>
      
        <content type="html"><![CDATA[<p>曾经一度我一直想在做前后端分离的时间写api接口是一个痛苦的过程，虽然也在网上找了一些可以填写api的系统，但使用起来总是不尽人意。现在，终于找到一款可以和api完美集成自动生成api文档加测试的工具，真是一件让人高兴的事呢。如果你也需要，那就好好看看这篇文章吧。</p><a id="more"></a><h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><h4 id="1-JAVA8"><a href="#1-JAVA8" class="headerlink" title="1. JAVA8"></a>1. JAVA8</h4><h4 id="2-MAVEN-3-0-5"><a href="#2-MAVEN-3-0-5" class="headerlink" title="2. MAVEN 3.0.5"></a>2. MAVEN 3.0.5</h4><h4 id="3-IDEA-2016-2-5"><a href="#3-IDEA-2016-2-5" class="headerlink" title="3. IDEA 2016.2.5"></a>3. IDEA 2016.2.5</h4><h4 id="4-spring-boot-1-4-1"><a href="#4-spring-boot-1-4-1" class="headerlink" title="4. spring boot 1.4.1"></a>4. spring boot 1.4.1</h4><h3 id="二、相关依赖"><a href="#二、相关依赖" class="headerlink" title="二、相关依赖"></a>二、相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h3><p>设置了一些默认显示的api相关信息，最后上截图的时就可以比较清楚的看到。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line">public class Swagger2Config &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</span><br><span class="line">                <span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"info.xiaomo.website"</span>))</span><br><span class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="selector-class">.title</span>(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">"api根地址：http://api.xiaomo.info:8080/"</span>)</span><br><span class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"https://xiaomo.info/"</span>)</span><br><span class="line">                <span class="selector-class">.contact</span>(<span class="string">"小莫"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、相关注解解读"><a href="#四、相关注解解读" class="headerlink" title="四、相关注解解读"></a>四、相关注解解读</h3><h4 id="1-Api"><a href="#1-Api" class="headerlink" title="1. @Api"></a>1. @Api</h4><p>用在类上，说明该类的作用<br><code>@Api(value = &quot;UserController&quot;, description = &quot;用户相关api&quot;)</code></p><h4 id="2-ApiOperation"><a href="#2-ApiOperation" class="headerlink" title="2. @ApiOperation"></a>2. @ApiOperation</h4><p>用在方法上，说明方法的作用<br><code>@ApiOperation(value = &quot;查找用户&quot;, notes = &quot;查找用户&quot;, httpMethod = &quot;GET&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</code></p><h4 id="3-ApiImplicitParams"><a href="#3-ApiImplicitParams" class="headerlink" title="3 @ApiImplicitParams"></a>3 @ApiImplicitParams</h4><p>用在方法上包含一组参数说明</p><h4 id="4-ApiImplicitParam"><a href="#4-ApiImplicitParam" class="headerlink" title="4. @ApiImplicitParam"></a>4. @ApiImplicitParam</h4><p>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<br>     paramType：参数放在哪个地方<br>     header–&gt;请求参数的获取：@RequestHeader<br>     query–&gt;请求参数的获取：@RequestParam<br>     path（用于restful接口）–&gt;请求参数的获取：@PathVariable<br>     body（不常用）<br>     form（不常用）<br>     name：参数名<br>     dataType：参数类型<br>     required：参数是否必须传<br>     value：参数的意思<br>     defaultValue：参数的默认值</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ApiImplicitParams</span>(&#123;</span><br><span class="line">        <span class="variable">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"唯一id"</span>, required = true, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-ApiResponses"><a href="#5-ApiResponses" class="headerlink" title="5. @ApiResponses"></a>5. @ApiResponses</h4><p>用于表示一组响应</p><h4 id="6-ApiResponse"><a href="#6-ApiResponse" class="headerlink" title="6. @ApiResponse"></a>6. @ApiResponse</h4><p>用在@ApiResponses中，一般用于表达一个错误的响应信息<br>     code：数字，例如400<br>     message：信息，例如”请求参数没填好”<br>     response：抛出异常的类</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ApiResponses</span>(value = &#123;  </span><br><span class="line">          <span class="variable">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"No Name Provided"</span>)  </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="7-ApiModel"><a href="#7-ApiModel" class="headerlink" title="7. @ApiModel"></a>7. @ApiModel</h4><p> 描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br> <code>@ApiModel(value = &quot;用户实体类&quot;)</code></p><h4 id="8-ApiModelProperty"><a href="#8-ApiModelProperty" class="headerlink" title="8. @ApiModelProperty"></a>8. @ApiModelProperty</h4><p>描述一个model的属性<br><code>@ApiModelProperty(value = &quot;登录用户&quot;)</code></p><h4 id="五、-和Swagger-UI的集成"><a href="#五、-和Swagger-UI的集成" class="headerlink" title="五、 和Swagger UI的集成"></a>五、 和Swagger UI的集成</h4><p>首先，从github <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">swagger-ui</a> 上下载Swagger-UI, 把该项目dist目录下的内容拷贝到项目的resources的目录public下。</p><h4 id="六、访问"><a href="#六、访问" class="headerlink" title="六、访问"></a>六、访问</h4><p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 就可以看到效果如下<br><img src="https://image.xiaomo.info/swagger/swagger.png"></p><h4 id="七、-项目实例"><a href="#七、-项目实例" class="headerlink" title="七、 项目实例"></a>七、 项目实例</h4><p><a href="https://github.com/JavaUsers/xiaomo-info-java/tree/master/website" target="_blank" rel="noopener">https://github.com/JavaUsers/xiaomo-info-java/tree/master/website</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring4免费全套视频教程</title>
      <link href="2016/JavaSpringVideo/"/>
      <url>2016/JavaSpringVideo/</url>
      
        <content type="html"><![CDATA[<p>废话不多说，直接上链接。给自己打个mark,如果你需要学习spring又正好转到这里来了，那么恭喜你。</p><a id="more"></a><p>废话不多说，直接上链接。给自己打个mark,如果你需要学习spring又正好转到这里来了，那么恭喜你。<br><a href="http://edu.csdn.net/course/detail/852/" target="_blank" rel="noopener">国内第1套_Spring4 视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok简化java代码注解的使用</title>
      <link href="2016/JavaLombok/"/>
      <url>2016/JavaLombok/</url>
      
        <content type="html"><![CDATA[<p>今天在stackoverflow上回答问题的时候发现了几个不得了的注解，是我从来没有见过的。然后呢，为了回答别人的问题，我就去查资料了。。。觉得挺有用的，记录一下。。</p><a id="more"></a><h3 id="一、缘由"><a href="#一、缘由" class="headerlink" title="一、缘由"></a>一、缘由</h3><p>在<code>stackoverflow</code>上看到了这个问题。 <a href="https://stackoverflow.com/questions/40169763/spring-boot-restcontroller-not-work-with-lombok/40478142#40478142" target="_blank" rel="noopener">spring boot RestController not work with lombok</a>,然后就有了这篇博客。。</p><h3 id="二、lombok是什么鬼"><a href="#二、lombok是什么鬼" class="headerlink" title="二、lombok是什么鬼"></a>二、lombok是什么鬼</h3><h4 id="1-maven引用"><a href="#1-maven引用" class="headerlink" title="1. maven引用"></a>1. maven引用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-一些api"><a href="#2-一些api" class="headerlink" title="2. 一些api"></a>2. 一些api</h4><p>ombok 注解：<br>lombok 提供的注解不多，可以参考官方视频的讲解和官方文档。<br>Lombok 注解在线帮助文档：<a href="http://projectlombok.org/features/index.html" target="_blank" rel="noopener">http://projectlombok.org/features/index.html</a> .<br>下面介绍几个我常用的 lombok 注解：<br><code>@Data</code>   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法<br><code>@Setter</code>：注解在属性上；为属性提供 setting 方法<br><code>@Getter</code>：注解在属性上；为属性提供 getting 方法<br><code>@Log4j</code> ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象<br><code>@NoArgsConstructor</code>：注解在类上；为类提供一个无参的构造方法<br><code>@AllArgsConstructor</code>：注解在类上；为类提供一个全参的构造方法</p><p>下面是简单示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span>                   <span class="comment">// 生成 getter/setter/equals/canEqual/hashCode/toString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>      <span class="comment">// 为类提供一个无参的构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>     <span class="comment">// 为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> String id;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> String identity;</span><br><span class="line"> <span class="keyword">private</span> Logger log = Logger.getLogger(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用 lombok 的方案</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> identity;</span><br><span class="line"> <span class="keyword">private</span> Logger <span class="built_in">log</span> = Logger.getLogger(Person.class);</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">String</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> identity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id              = id;</span><br><span class="line">    <span class="keyword">this</span>.name       = name;</span><br><span class="line">    <span class="keyword">this</span>.identity  = identity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> identity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdentity</span><span class="params">(<span class="keyword">String</span> identity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.identity = identity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、实践结果"><a href="#二、实践结果" class="headerlink" title="二、实践结果"></a>二、实践结果</h3><p>我发现<code>stackoverflow</code>的那个伙计代码写的并没有问题，我把他的代码粘到我本地运行没有一点卡壳。倒不如说他教会了我lombok，在此感谢一下。。嘿嘿</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本动漫声优公演,来看看什么叫专业声优</title>
      <link href="2016/NihonSeiyou/"/>
      <url>2016/NihonSeiyou/</url>
      
        <content type="html"><![CDATA[<p>日本动漫声优公演,来看看什么叫专业声优</p><a id="more"></a><p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=v0337gd2b1m&auto=0" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot做前后分离时间格式化</title>
      <link href="2016/JavaSpringBootDataFormat/"/>
      <url>2016/JavaSpringBootDataFormat/</url>
      
        <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口时难免遇到时间这类的问题，接口原则：能服务端处理的别留给客户端。客户端的职责就是把服务端的数据完美的展现出来就好了。所以在返回时间的时候最好先进行一下格式化处理，不要返回时间戳格式。</p><a id="more"></a><h3 id="一、写一个Serializer"><a href="#一、写一个Serializer" class="headerlink" title="一、写一个Serializer"></a>一、写一个<code>Serializer</code></h3><p>然后做一个时间格式化的处理</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonGenerator</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">JsonSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">SerializerProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer&lt;Date&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void serialize(<span class="type">Date</span> value, <span class="type">JsonGenerator</span> jsonGenerator, <span class="type">SerializerProvider</span> provider) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        jsonGenerator.writeString(sdf.format(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、-使用"><a href="#二、-使用" class="headerlink" title="二、 使用"></a>二、 使用</h3><p>在需要转换的时间的Model中加上这个类,仔细观察下面代码中类型为<code>Date</code>的属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.model.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> info.xiaomo.core.filter.CustomDateSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把今天最好的表现当作明天最新的起点．．～</span></span><br><span class="line"><span class="comment"> * いま 最高の表現 として 明日最新の始発．．～</span></span><br><span class="line"><span class="comment"> * Today the best performance  as tomorrow newest starter!</span></span><br><span class="line"><span class="comment"> * Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xiaomo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@github</span>: https://github.com/houko</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: hupengbest@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span>_NO: 83387856</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2016/4/1 20:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: model基类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"Id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"Version"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">Column</span>(<span class="title">name</span> </span>= <span class="string">"CreateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">Column</span>(<span class="title">name</span> </span>= <span class="string">"UpdateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(<span class="keyword">long</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot做前后分离的跨域问题</title>
      <link href="2016/JavaSpringBootCors/"/>
      <url>2016/JavaSpringBootCors/</url>
      
        <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口供客户端调用时发现存在跨域问题，虽然解决问题有很多。比如用nginx处理等等。但是更方便的是服务端设置一下跨域名。</p><a id="more"></a><h3 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h3><h4 id="1-使用spring-boot-maven-构建的项目"><a href="#1-使用spring-boot-maven-构建的项目" class="headerlink" title="1. 使用spring boot + maven 构建的项目"></a>1. 使用spring boot + maven 构建的项目</h4><h3 id="二、设置"><a href="#二、设置" class="headerlink" title="二、设置"></a>二、设置</h3><h4 id="1-写一个过滤器-filter"><a href="#1-写一个过滤器-filter" class="headerlink" title="1. 写一个过滤器(filter)"></a>1. 写一个过滤器(filter)</h4><p>实现Filter接口，然后设置一下响应头。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把今天最好的表现当作明天最新的起点．．～</span></span><br><span class="line"><span class="comment"> * いま 最高の表現 として 明日最新の始発．．～</span></span><br><span class="line"><span class="comment"> * Today the best performance  as tomorrow newest starter!</span></span><br><span class="line"><span class="comment"> * Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xiaomo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@github</span>: https://github.com/houko</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: hupengbest@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span>_NO: 83387856</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2016/4/1516:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig filterConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CORS 过滤器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req   rq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res   res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain chin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, If-Modified-Since"</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在启动器中加入过滤器"><a href="#2-在启动器中加入过滤器" class="headerlink" title="2. 在启动器中加入过滤器"></a>2. 在启动器中加入过滤器</h4><p>实质就是加了一个<code>@bean</code>，然后在启动的时候通过过滤器把所有的响应头设置一下。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package info.xiaomo.website;</span><br><span class="line"></span><br><span class="line">import info.xiaomo.core.filter.CORSFilter;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Bean</span>;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">ComponentScan</span>;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Configuration</span>;</span><br><span class="line">import org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line">import org.springframework.transaction.<span class="keyword">annotation</span>.<span class="title">EnableTransactionManagement</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RequestMapping</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RestController</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 把今天最好的表现当作明天最新的起点．．～</span><br><span class="line"> * いま 最高の表現 として 明日最新の始発．．～</span><br><span class="line"> * Today the best performance  <span class="keyword">as</span> tomorrow newest starter!</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * @<span class="symbol">author:</span> xiaomo</span><br><span class="line"> * @<span class="symbol">github:</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/houko</span></span><br><span class="line"> * @<span class="symbol">email:</span> hupengbest@<span class="number">163</span>.com</span><br><span class="line"> * @<span class="symbol">QQ_NO:</span> <span class="number">83387856</span></span><br><span class="line"> * @<span class="symbol">Date:</span> <span class="number">2016</span>/<span class="number">4</span>/<span class="number">1</span> <span class="number">15</span>:<span class="number">38</span></span><br><span class="line"> * @<span class="symbol">Description:</span> 后台管理启动器</span><br><span class="line"> * @Copyright(©) <span class="number">2015</span> by xiaomo.</span><br><span class="line"> **<span class="regexp">/</span></span><br><span class="line"><span class="regexp">@Configuration</span></span><br><span class="line"><span class="regexp">@EnableAutoConfiguration</span></span><br><span class="line"><span class="regexp">@ComponentScan("info.xiaomo")</span></span><br><span class="line"><span class="regexp">@EntityScan("info.xiaomo.*.model")</span></span><br><span class="line"><span class="regexp">@EnableTransactionManagement</span></span><br><span class="line"><span class="regexp">@EnableJpaRepositories("info.xiaomo.*.dao")</span></span><br><span class="line"><span class="regexp">@RestController</span></span><br><span class="line"><span class="regexp">public class XiaomoMain &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    public static void main(String[] args) throws Exception &#123;</span></span><br><span class="line"><span class="regexp">        SpringApplication.run(XiaomoMain.class, args);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    @Bean</span></span><br><span class="line"><span class="regexp">    public CORSFilter corsFilter() &#123;</span></span><br><span class="line"><span class="regexp">        return new CORSFilter();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    @RequestMapping("/</span><span class="string">")</span></span><br><span class="line"><span class="string">    String index() &#123;</span></span><br><span class="line"><span class="string">        return "</span>Hello World! this is website index<span class="string">";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>这样一来，客户端就不会存在跨域问题了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot相关资料</title>
      <link href="2016/JavaSpringZiliao/"/>
      <url>2016/JavaSpringZiliao/</url>
      
        <content type="html"><![CDATA[<p>spring真是让人又爱又恨呢，好用但是难学。spring铺的又太大，不知道从哪入手。整理点资料，免得头晕。</p><a id="more"></a><h3 id="一、spring-boot-配置相关"><a href="#一、spring-boot-配置相关" class="headerlink" title="一、spring boot 配置相关"></a>一、spring boot 配置相关</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><p><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">properties</a></p><h4 id="2-spring-boot-cli-安装和使用"><a href="#2-spring-boot-cli-安装和使用" class="headerlink" title="2. spring boot cli 安装和使用"></a>2. spring boot cli 安装和使用</h4><ol><li>下载zip压缩包并解压  </li><li>配置环境变量 <code>SPRING_HONE</code> , path里加 <code>%SPRING_HOME%/bin</code></li><li><code>spring --version</code> 测试是否成功</li><li>帮助 spring –help</li><li>生成项目 spring init project_name</li></ol><h4 id="3-spring-boot首页"><a href="#3-spring-boot首页" class="headerlink" title="3. spring boot首页"></a>3. <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">spring boot首页</a></h4><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><h3 id="二、spring-boot-常见错误"><a href="#二、spring-boot-常见错误" class="headerlink" title="二、spring boot 常见错误"></a>二、spring boot 常见错误</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 与 IntelliJ IDEA 的完美结合</title>
      <link href="2016/JavaIdeaMaven/"/>
      <url>2016/JavaIdeaMaven/</url>
      
        <content type="html"><![CDATA[<p>你是否正在学习Maven？是否因为Maven难用而又不得不用而苦恼？是否对Eclipse于Maven的冲突而困惑？ 那么我告诉你一个更直接更简单的解决方案: IntelliJ IDEA！</p><a id="more"></a><h3 id="1-什么是-Maven，为什么要使用-Maven-而不是-Ant"><a href="#1-什么是-Maven，为什么要使用-Maven-而不是-Ant" class="headerlink" title="1. 什么是 Maven，为什么要使用 Maven 而不是 Ant"></a>1. 什么是 Maven，为什么要使用 Maven 而不是 Ant</h3><p>Maven简单来说是一个项目管理工具，被认为是Ant的替代品或者继任者。事实上Maven的功能要远远超出Ant，它不仅仅提供编译的脚本，更是在整 个项目周期中提供测试，发布，文档生成等功能，并且有着独特的依赖性管理方法。但是强大的功能的代价就是复杂的使用方法，第一次使用Maven往往需要将 近半个小时的时间（国内网速）来下载一个本地的依赖库，这无疑会使很多开发人员“知难而退”。虽然广受诟病，一个不争的事实就是Maven逐渐代替了 Ant，使用Maven也成了Java开发人员的一个必要技能。</p><h3 id="2-IntelliJ-IDEA-与-Eclipse"><a href="#2-IntelliJ-IDEA-与-Eclipse" class="headerlink" title="2. IntelliJ IDEA 与 Eclipse"></a>2. IntelliJ IDEA 与 Eclipse</h3><p>在Java的世界里，Eclipse毋庸置疑是IDE中的王者，IntelliJ IDEA和NetBeans都只能生活在Eclipse的光环下。Eclipse的强大已经不用我多说了，但其实IntelliJ IDEA也是一个相当优秀的IDE，尤其体现在它的智能上。它的一个针对.Net的Clone产品ReSharper已经被越来越多的C#开发者所接受。 IntelliJ IDEA提供了大量的智能规则来协助开发者，类似代码补全，用法的转换，格式的提示等等，当你习惯以后，你就会对那个小灯泡爱不释手。</p><h3 id="3-选择-Maven-IntelliJ-IDEA-的理由"><a href="#3-选择-Maven-IntelliJ-IDEA-的理由" class="headerlink" title="3. 选择 Maven + IntelliJ IDEA 的理由"></a>3. 选择 Maven + IntelliJ IDEA 的理由</h3><p>之所以要选择IntelliJ IDEA，是因为Maven+Eclipse实在太难用了。Eclipse有两个Maven插件 m2eclipse 和 Eclipse IAM。但是由于Eclipse和Maven设计上的矛盾，这两个插件可能都达不到你想要的效果。m2eclipse 会把你所有类型的项目都视为Maven类型项目，这对于一个单纯的Java项目或许可以，对于一个JEE或者WEB项目都是一场灾难。Eclipse IAM 并不会改变你的项目类型，但是他提供的功能也就仅仅限于编辑和运行POM文件了，甚至连依赖性都管理不了。相比之下，如果你非要用Eclipse的话我还 是推荐你使用Eclipse IAM。Eclipse想要完美的支持Maven恐怕需要在底层设计上做一些改变，无论是代码规范，项目结构规范和依赖性管理上，都有着不可调和的矛盾。 显然，在这方面IntelliJ IDEA做的要好的多，以至于你很难说出对它的不满。</p><h3 id="4-Maven-IntelliJ-IDEA-的优势"><a href="#4-Maven-IntelliJ-IDEA-的优势" class="headerlink" title="4. Maven + IntelliJ IDEA 的优势"></a>4. Maven + IntelliJ IDEA 的优势</h3><h4 id="一切都是Module："><a href="#一切都是Module：" class="headerlink" title="一切都是Module："></a>一切都是Module：</h4><pre><code>  IntelliJ IDEA借鉴的Maven的概念，不在采取Eclipse里Project的概念，一切都是Module。无论是否使用Maven，你的项目都是一个独立 的Module。并且你可以混搭使用Maven Module和普通的Java Module，两者可以和谐共存。</code></pre><h4 id="支持Multi-module："><a href="#支持Multi-module：" class="headerlink" title="支持Multi-module："></a>支持Multi-module：</h4><pre><code>  可以说Maven的项目结构设计是非常严格的，现实应用中你必须用到Parent-Child的模式。Eclipse由于不支持在一个Project上建 立Sub-Project，因此无论如何目前都不能实现。IntelliJ IDEA可以完美的实现这个设计，并且无论是Module属性里，还是彼此的依赖性上都不会出现问题。</code></pre><h4 id="更方便的生命周期操作："><a href="#更方便的生命周期操作：" class="headerlink" title="更方便的生命周期操作："></a>更方便的生命周期操作：</h4><pre><code>  比起Eclipse通通放进右键菜单的行为，IntelliJ IDEA有着单独的窗口可以完成Maven的操作。你可以针对不同Module进行 Clean Compile Package Install等操作，各个Plug-in的操作也一清二楚。</code></pre><h4 id="完美的依赖性管理："><a href="#完美的依赖性管理：" class="headerlink" title="完美的依赖性管理："></a>完美的依赖性管理：</h4><pre><code>  由于Maven会把所有依赖的包放在本机的一个目录下，所以实际上是脱离Project本身存在的。IntelliJ IDEA引入了一个External Library的概念，所有的Maven依赖性都会放在这里，和项目自带的库区分开。并且Module之间会智能的判断，你不需要Maven Install来进行引用代码的更新。</code></pre><h4 id="动态更新："><a href="#动态更新：" class="headerlink" title="动态更新："></a>动态更新：</h4><pre><code>  每当Maven相关的设置更改时，例如修改了pom的依赖性，添加删除Module，IntelliJ IDEA会提示你进行更新。这种更新实际上就是运行了Maven，所以你不许要手动运行Maven Compile来进行更新，也不会像Eclipse里遇到莫名其妙的问题。</code></pre><h3 id="5-Maven-安装"><a href="#5-Maven-安装" class="headerlink" title="5. Maven 安装"></a>5. Maven 安装</h3><p>到<a href="http://maven.apache.org/download.html" target="_blank" rel="noopener">http://maven.apache.org/download.html</a> 下载最新的Maven版本，我下载的版本为最新的apache-maven-3.0.4。推荐使用最新的Maven 3，因为比以前的Maven 2性能更好，而且完全兼容Maven 2。</p><p>下载好以后，解压到一个目录，我的目录为 D:\apache-maven-3.0.4，接着配置Maven环境变量M2_HOME为你解压的目录，如下图新建M2_HOME变量并追加到Path后面：</p><p>如果要在CMD控制台运行Maven命令的话，还需要配置Jdk环境变量，因为我接下来的操作都是基于IntelliJ IDEA，所以就不用配置JDK环境变量。</p><h3 id="6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）"><a href="#6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）" class="headerlink" title="6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）"></a>6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）</h3><p>打开IntelliJ IDEA，新建一个Maven项目，如下图，项目名称为mymaven</p><p>选择Maven模版</p><p>创建过程中，配置Maven主目录</p><p>创建好后的目录结构如下图，IDEA创建了src/main/resources（自动创建）、src/main/java（手动创建）、src/main/test（手动创建）、以及pom.xml文件（自动创建）</p><p>按照Maven约定，项目的主目录位于src/main/resources、src/main/java中，测试目录位于src/main/test 中，所以我们在最终打包项目的时候，只包含主目录代码，不会包含测试目录里的代码，而测试目录里的代码只会在测试时候用到。</p><p>最后pom.xml这个文件是我们Maven项目的核心文件，POM(Project Object Model，项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目依赖。</p><p>project：是xml文件的根元素，我们主要关心根元素下的子元素<br>modelVersion：定义了当前POM模型的版本，Maven 2 或Maven 3 只能是4.0.0<br>groupId：定义了项目属于哪个组，一般来说这个网网和公司或组织关联，比如说，你所在的公司为mycom.那就应该定义为com.mycom.mymaven，mymaven为项目名称<br>artifactId：定 义了当前Maven项目在组中的唯一id，例如HelloMaven这个项目，我则把他定义为hello-maven，还例如spring项目，他的 groupId为org.springframework，对于content项目来说artifactId则为spring-content，web项 目则为spring-web</p><p>最后我们使用IntelliJ IDEA来用Maven编译我们的代码，打开Maven Projects菜单，如图，选中clean、compile并右键点击Run ‘hello-maven[clean,compile]’按钮即可。</p><p>根据输出结果我们看到，clean命令让Maven先清理target目录，Maven一般认为项目的输出目录为target，然后执行resource任务，现在为定义项目资源，所以暂时略过，最后执行编译任务！ </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Servlet做简单的上传功能</title>
      <link href="2016/JavaServletUpload/"/>
      <url>2016/JavaServletUpload/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要为大家详细介绍了java基于servlet实现上传功能，后台使用java实现，前端主要是jsp，感兴趣的小伙伴们可以参考一下</p><a id="more"></a><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1-1-jar包"><a href="#1-1-jar包" class="headerlink" title="1.1 jar包"></a>1.1 jar包</h4><p><code>servlet-api</code> 是servlet的核心api包<br><code>commons-fileupload</code> 上传功能的通用工具包<br><code>fastjson</code> 阿里的json工具包</p><h3 id="1-2-pom文件"><a href="#1-2-pom文件" class="headerlink" title="1.2 pom文件"></a>1.2 pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、项目介绍"><a href="#二、项目介绍" class="headerlink" title="二、项目介绍"></a>二、项目介绍</h3><h4 id="1-1-web-xml配置"><a href="#1-1-web-xml配置" class="headerlink" title="1.1 web.xml配置"></a>1.1 web.xml配置</h4><p>此项目是采用maven构建的java web项目，传统的jsp作为页面交互。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.apache.commons.fileupload.servlet.FileCleanerCleanup</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ghj.servlet.FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/FileUploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置的servlet的位置，那么我们就要去写代码了。</p><h4 id="1-2-上传功能"><a href="#1-2-上传功能" class="headerlink" title="1.2 上传功能"></a>1.2 上传功能</h4><p>新建一个class文件<code>com.ghj.servlet.FileUploadServlet</code>，继承自<code>HttpServlet</code>。重写它的<code>init()</code>和<code>doPost()</code>方法。</p><p>代码</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ghj.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.FileCleanerCleanup;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileCleaningTracker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把今天最好的表现当作明天最新的起点．．～</span></span><br><span class="line"><span class="comment"> * いま 最高の表現 として 明日最新の始発．．～</span></span><br><span class="line"><span class="comment"> * Today the best performance  as tomorrow newest starter!</span></span><br><span class="line"><span class="comment"> * Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author: xiaomo</span></span><br><span class="line"><span class="comment"> * @github: https://github.com/soubaku</span></span><br><span class="line"><span class="comment"> * @email: hupengbest@163.com</span></span><br><span class="line"><span class="comment"> * @QQ_NO: 83387856</span></span><br><span class="line"><span class="comment"> * @Date: 2016/10/24 9:15.</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Copyright(©) 2016 by xiaomo.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileUploadServlet <span class="keyword">extends</span> HttpServlet &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">File</span> fileUploadPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileDirectory = <span class="string">"/data"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置文件存储位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init() &#123;</span><br><span class="line">        String realPath = <span class="keyword">this</span>.getServletConfig().getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">        fileUploadPath = <span class="keyword">new</span> <span class="keyword">File</span>(realPath + fileDirectory);</span><br><span class="line">        <span class="keyword">if</span> (!fileUploadPath.exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isCreate = fileUploadPath.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (isCreate) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"文件夹己被创建"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post请求(文件上传的操作)</span></span><br><span class="line"><span class="comment">     * 说明：该方法支持同时上传多个文件（在index.jsp中添加文件上传的控件）</span></span><br><span class="line"><span class="comment">     * 注意：文件名只能为英文</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request  request</span></span><br><span class="line"><span class="comment">     * @param response response</span></span><br><span class="line"><span class="comment">     * @throws ServletException ServletException</span></span><br><span class="line"><span class="comment">     * @throws IOException      IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doPost(HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">            ServletContext servletContext = <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">            <span class="keyword">File</span> repository = (<span class="keyword">File</span>) servletContext.getAttribute(<span class="string">"javax.servlet.context.tempdir"</span>);</span><br><span class="line">            DiskFileItemFactory factory = newDiskFileItemFactory(servletContext, repository);</span><br><span class="line"></span><br><span class="line">            ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">            upload.setHeaderEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            PrintWriter printWriter = response.getWriter();</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            JSONArray files = <span class="keyword">new</span> JSONArray();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">                <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.isFormField()) &#123; <span class="comment">//表单输入域</span></span><br><span class="line">                        System.out.<span class="keyword">println</span>(item.getFieldName());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文件上传域</span></span><br><span class="line">                        String name = item.getName();</span><br><span class="line">                        <span class="keyword">if</span> (!name.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                            <span class="keyword">int</span> index = name.indexOf(<span class="string">"\\"</span>);</span><br><span class="line">                            <span class="keyword">File</span> uploadedFile;</span><br><span class="line">                            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath,</span><br><span class="line">                                        <span class="keyword">File</span>.separator + name);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath, <span class="keyword">File</span>.separator + name.substring(name.lastIndexOf(<span class="keyword">File</span>.separator) + <span class="number">1</span>));</span><br><span class="line">                            &#125;</span><br><span class="line">                            item.<span class="keyword">write</span>(uploadedFile);</span><br><span class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"name"</span>, name);</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"size"</span>, item.getSize());</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"url"</span>, fileUploadPath + <span class="string">"/"</span> + name);</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"deleteType"</span>, <span class="string">"post"</span>);</span><br><span class="line">                            files.add(<span class="keyword">file</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"result"</span>, <span class="string">"please choose a file"</span>);</span><br><span class="line">                            files.add(<span class="keyword">file</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                result.put(<span class="string">"files"</span>, files);</span><br><span class="line">                printWriter.<span class="keyword">write</span>(result.toString());</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将请求的每个项目封装成单独的文件项目</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context    context</span></span><br><span class="line"><span class="comment">     * @param repository repository</span></span><br><span class="line"><span class="comment">     * @return DiskFileItemFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DiskFileItemFactory newDiskFileItemFactory(ServletContext context, <span class="keyword">File</span> repository) &#123;</span><br><span class="line">        FileCleaningTracker fileCleaningTracker = FileCleanerCleanup.getFileCleaningTracker(context);</span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, repository);</span><br><span class="line">        factory.setFileCleaningTracker(fileCleaningTracker);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-页面"><a href="#2-3-页面" class="headerlink" title="2.3 页面"></a>2.3 页面</h4><figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@page pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"FileUploadServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file1"</span>"&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>看起来清新简单，就不加那么style的修饰了。</p><h3 id="三、效果图"><a href="#三、效果图" class="headerlink" title="三、效果图"></a>三、效果图</h3><p><img src="https://image.xiaomo.info/java/java_upload.gif" alt="效果图"></p><h3 id="四、源代码"><a href="#四、源代码" class="headerlink" title="四、源代码"></a>四、源代码</h3><p><a href="https://github.com/java-user/ServletFileUploadDemo" target="_blank" rel="noopener">https://github.com/java-user/ServletFileUploadDemo</a>  需要的朋友自取，随意使用不用客气</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜欢的动漫</title>
      <link href="2016/NihonAnime/"/>
      <url>2016/NihonAnime/</url>
      
        <content type="html"><![CDATA[<p>二次元为我们描绘了一个不一样的世界，一群有着精彩故事的人，还有视觉听觉上的双重享受。不是很美妙吗？我们还能从二次元里获得力量、勇气、热情、梦想，懂得坚持、友爱、乐观、努力。二次元正是人类的伟大创造。</p><a id="more"></a><h3 id="一、アニメ"><a href="#一、アニメ" class="headerlink" title="一、アニメ"></a>一、<a href="https://zh.moegirl.org/" target="_blank" rel="noopener">アニメ</a></h3><table><thead><tr><th align="center">名前</th><th align="center">コメント</th></tr></thead><tbody><tr><td align="center">东离剑游记</td><td align="center">東离剣の遊記</td></tr><tr><td align="center">NEW GAME！</td><td align="center">NEW GAME！</td></tr><tr><td align="center">刀剑神域</td><td align="center">ソードアート・オンライン</td></tr><tr><td align="center">全职猎人</td><td align="center">ハンター×ハンター</td></tr><tr><td align="center">寄生兽</td><td align="center">寄生獣</td></tr><tr><td align="center">星之梦</td><td align="center">星の夢</td></tr><tr><td align="center">Fate/Zero</td><td align="center">フェイト/ゼロ</td></tr><tr><td align="center">妖精的尾巴</td><td align="center">フェアリーテイル</td></tr><tr><td align="center">命运石之门</td><td align="center">シュタインズゲート</td></tr><tr><td align="center">線上遊戲的老婆不可能是女生？</td><td align="center">ネトゲの嫁は女の子じゃないと思った？</td></tr><tr><td align="center">Re:从零开始的异世界生活</td><td align="center">Re:ゼロから始める異世界生活</td></tr><tr><td align="center">干物妹小埋</td><td align="center">干物妹！うまるちゃん</td></tr><tr><td align="center">遊戲人生</td><td align="center">ノーゲーム・ノーライフ</td></tr><tr><td align="center">夏目友人帐</td><td align="center">なつめ　ゆうじんちょう</td></tr><tr><td align="center">寒蝉鸣泣之时</td><td align="center">ひぐらしのなく頃に</td></tr><tr><td align="center">未来日记</td><td align="center">未来日记</td></tr><tr><td align="center">加速世界</td><td align="center">アクセル・ワールド</td></tr><tr><td align="center">Charlotte</td><td align="center">Charlotte</td></tr><tr><td align="center">笨蛋测验召唤兽</td><td align="center">バカとテストと召喚獣</td></tr><tr><td align="center">心理测量者</td><td align="center">サイコパス</td></tr><tr><td align="center">CLANNAD</td><td align="center">CLANNAD</td></tr><tr><td align="center">AIR</td><td align="center">AIR</td></tr><tr><td align="center">KANON</td><td align="center">KANON</td></tr></tbody></table><h3 id="二、ドラマ"><a href="#二、ドラマ" class="headerlink" title="二、ドラマ"></a>二、ドラマ</h3><table><thead><tr><th align="center">名前</th><th align="center">コメント</th></tr></thead><tbody><tr><td align="center">孝忠八犬</td><td align="center">なし</td></tr><tr><td align="center">成濑巳喜男</td><td align="center">なし</td></tr><tr><td align="center">小栗康平的泥之河</td><td align="center">なし</td></tr><tr><td align="center">小津安二郎</td><td align="center">なし</td></tr><tr><td align="center">娄烨是才子</td><td align="center">なし</td></tr><tr><td align="center">彗星来的那一夜</td><td align="center">なし</td></tr><tr><td align="center">堂吉诃德</td><td align="center">なし</td></tr><tr><td align="center">对不起青春</td><td align="center">なし</td></tr><tr><td align="center">nana</td><td align="center">なし</td></tr></tbody></table><h3 id="三、映画"><a href="#三、映画" class="headerlink" title="三、映画"></a>三、映画</h3><table><thead><tr><th align="center">名前</th><th align="center">コメント</th></tr></thead><tbody><tr><td align="center">千与千寻</td><td align="center">千と千尋の神隠し</td></tr><tr><td align="center">となりのトトロ</td><td align="center">となりのトトロ</td></tr><tr><td align="center">你的名字</td><td align="center">君のなまえは？</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活习惯的不同，造就了丰富多彩的世界</title>
      <link href="2016/NihonSekaku/"/>
      <url>2016/NihonSekaku/</url>
      
        <content type="html"><![CDATA[<p>にほんのライフスタイルに</p><a id="more"></a><ul><li>不喜欢用蓝色圆珠笔。蓝色圆珠笔只在作标记的场合使用。</li><li>香烟吸一半就扔掉。有的人烟瘾大，吸两个半支烟，而不是吸一个整支。</li><li>日本人不太在意姓的意思。在中国人看来日本人的姓稀奇古怪。一次我去开会签到，抬头一看接待小姐的姓是“我孙子”。还有人姓厕所（御手洗）。很多姓是地名，“大阪”“名古屋”“涩谷”都见过。还有四个字的姓，如最近的丑闻作曲家姓“佐村河内”。</li><li>日本人不忌讳鬼、地狱、幽灵。含“鬼”字的地名有很多，叫“地狱”的拉面店也见到过。</li><li>不把跪着视为低人一等。因为跪着比蹲着省力，经常看到日本人跪着工作。例如，在没有椅子的时候，跪着操作电脑，高度正好。</li><li>如果第二天下午开会，日本人前一天晚上就不吃韭菜了。</li><li>如果感冒了，一定带口罩，即使不是流行性感冒也怕别人忌讳。</li><li>不使用非常浓的香水。无香料的化妆品很受欢迎。</li><li>不会打听别人的衣服、物品多少钱买的。</li><li>不会和别人勾肩搭背，即使是好朋友。</li><li>女士吃面包点心时，用手掰下一块放到嘴里，不会直接咬。（可能认为这样吃比较体面。）</li><li>吸烟时不劝烟，聚餐时不劝酒，更不会把人灌醉。</li><li>不轻易把谁称为自己的朋友，交往了几十年还把对方称为“知人”。对自来熟，刚见面就称朋友的人不喜欢。</li><li>不会轻易触摸别人的肌肤，即使是同性。对拉拉手的亲热和拍拍肩的关心不接受。</li><li>不打听别人的家事，更不要说隐私。在一起工作十几年，不知道对方有几个兄弟姐妹。福原爱在接受日本媒体的采访时说，中国记者什么都问，问得直想哭。</li><li>不轻易交换电话号码。我们公司的部长课长之间，甚至也有不知道对方电话号码的人。</li><li>日本人的胃口很小，初到日本的中国留学生（男生）在学校食堂一份定食大部分吃不饱。</li><li>在工作场合绝不穿张扬的服装。一般60岁以上的人开始穿红色的花的衣服。</li><li>工作场合不可吃东西，但可以吃水果糖。</li><li>工作时间不可接私人电话。个人不能使用公家电话打出去，也不能打进来。</li><li>私人的信件和物品不能寄到公司。</li><li>在家里高声说话，邻居会到家中提出警告。</li><li>泡温泉以前要先洗净身子。</li><li>如果你送给日本人点心，对方说真好吃。千万不要信以为真。是真是假得在其他的场合验证。</li><li>日本的绿茶泡一分钟就可以喝。</li><li>把手插到衣服裤子口袋里，被认为是对对方不尊敬。张艺谋拍的《千里走单骑》电影里的女日语翻译，很多场面把手放在口袋里，感觉不舒服。</li><li>日本人没有抱肘的习惯，认为这个姿势显示傲慢。</li><li>行人过马路遇到红灯必停，即使绿灯侧没有车。本人这种情况走过，被旁边的车“嘀”过。日本人说，这样做的目的是，告诉孩子，有法必依。</li><li>开车时，后灯双闪，是表示对后车的感谢。常在别人给让路后使用。</li><li>对面的车前灯瞬闪，表示给你让路。</li><li>公司业务关系新年拜年，带的礼品基本就是两条毛巾。</li><li>公司来两伙客人，一方是得到工作的上家，一方是外协的下家，在一个接待室谈话。只给上家上茶，下家没有。</li><li>公司来客，不管是什么工作关系，到吃饭时间基本都不提供午饭。</li><li>工作中出现差错，再好的朋友都不会说一句同情的话。有再多的客观原因也没人体谅。如果争辩解释，被认为错上加错。</li><li>企业一般都有自己的日历，根据客户的日历制定，国家法定假日常常有不休息的时候。</li><li>企业的年假，日本人一般不休，很少利用年假去旅游。</li><li>日本人工作比较配合，部门之间扯皮的事很少。</li><li>日本人的习惯是报忧不报喜，看电视听领导讲话，没有大好形势。</li><li>日本的电视广告很好看，没有太长时间的广告，幽默让人不厌倦。例，一个美女到动物店说想买一条狗，两只老虎，三头狮子。旁边的顾客惊得把手包都掉到了地上。店主问为什么，她说，单身女子在家害怕，每个房间都要有猛兽守卫。这时画外音，有比这还安全的，“家用电子警备系统”。</li><li>日本不光小孩看漫画，动画片，大人也很爱看。</li><li>店铺开业，门前摆放的祝贺物品，简直就可以说是中国追悼会上的花圈。</li><li>传统文化节，很多人穿的衣服上印着“祭”字。在日本，“祭”字的意思是文化节。</li><li>日本的医院对消炎药的使用严格控制，但相对而言，对激素的使用比较放松。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《东离剑游记》</title>
      <link href="2016/BangumiDongli/"/>
      <url>2016/BangumiDongli/</url>
      
        <content type="html"><![CDATA[<p>这两天看了一部神奇的动漫，具有强烈的武侠风。现在循环听练听力。然而你一定想不到这部动漫是多么的让人惊喜。</p><a id="more"></a><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>这是一次打破当前布袋戏模式的局限的冒险和挑战。关键的变化主要在三点：</p><p>第一剧本作者由日本的虚渊玄担任，虚的创作水平有目共睹，保守的说，当不在目前布袋戏圈内最出色的编剧三弦之下，甚至只会更高，这实际上有效的补完了霹雳近年来剧本疲弱的短板，把最弱点变成了最强点。</p><p>但水平是一方面，文化属性则是另一方面，从东离的第一集看，比如一些人物特质，就明显少了几分霹雳和金光的中国侠客味道，而多了几分日本武士的感觉，这种改变实际上让东离剑在文化意识领域有些脱离了承载着传统文化的布袋戏，而接近了日本动画的范畴。</p><p>第二是配音从单人中文口白变成了日语声优配音，但霹雳似乎也同时提供了台语配音版？这就如同当年的可口可乐的营销手法一样，新老同出，这在创新的同时很大程度上减少了风险，应是一个很明智的选择。</p><p>第三是东离的单集时长从过往的六十分钟以上变成了日本动画的二十三分钟，它在能让编剧和制作人员更有效的凝练和提升质量的同时，却也可能带来一些节奏的变化，让旧观众产生一定的不适应感，比如我至今仍对东离的木偶与台词的配合，木偶动作和战斗画面的结合有点不适。</p><p>总而言之，东离比较像一个嫁接品，有点像是在布袋戏的树干里插入了一个日本动画的灵魂，同时在枝叶上嫁接了日本动画的设计和手法，所以霹雳的“偶动漫”这个说法，正如苹果梨一样，我以为是很贴切的，其味道好不好吃，是不是能在保留苹果的精髓的同时加入梨子的优点，是不是能在让吃苹果的人满意的同时吸引一群喜欢吃梨子的人，还是搞砸了，弄得似是而非，两头都不满意，这个目前下结论为时尚早，但无论如何，仅凭这个剧作本身，它已毫无疑问是布袋戏圈的一大突破性创举，对于勇于探索向前的人和行为，无论其最终成败如何，我以为作为观众，我们都是该有一种开阔的心态，而抱持一份最起码的支持和敬意的。</p><h1 id="二、-插画"><a href="#二、-插画" class="headerlink" title="二、 插画"></a>二、 插画</h1><p><img src="https://image.xiaomo.info/dongman/dongli2.jpg" alt="1"><br><img src="https://image.xiaomo.info/dongman/dongli3.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yargs插件的使用，node.js 命令行框架 yargs 和你的程序实现交互</title>
      <link href="2016/NpmYargs/"/>
      <url>2016/NpmYargs/</url>
      
        <content type="html"><![CDATA[<p>如何让你的node.js 应用程序像shell 脚本一样和你交互?没错，就是yargs。</p><a id="more"></a><h3 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h3><p>大概有一种情况你需要让你的程序接收一个参数,通过这个参数我们做一系列的定制化功能.</p><p>常见的做法是 把一些不同环境不同配置的变量写到 config 配置文件中.</p><p>当你的环境变化的时候,你手动去修改你的config 中的变量来达到不同环境显示定制化的东西.<br>更具象的一个例子:</p><p>config文件中有一个配置项 langue</p><p>当你发布国内站点的时候,你需要配置成 langue=”zh-cn”</p><p>当你发布国外站点的时候,你需要配置成 langue=”en”</p><p>现在, yargs 的功能就是帮你实现类似上面这种定制化的参数功能.</p><p>从此一些简单定制参数可以彻底摆脱 config 配置了.</p><p>比如:</p><p>你的node.js 启动文件是 app.js</p><p>当你部署中文环境站点的时候,就可以这样  node app.js –l zh-cn</p><p>英文网站部署时  node app.js –l en</p><p>当然上面输入给启动文件的 -l 参数,你是可以在 app.js 文件中获取,然后对应加载你需要定制化的东东即可.</p><p>上面我们只是介绍它的作用,以及一个具体的例子让大家明白什么时候使用.下面开始介绍如何使用:</p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p><code>npm install --save yargs</code></p><h4 id="2-定义命令交互参数"><a href="#2-定义命令交互参数" class="headerlink" title="2. 定义命令交互参数:"></a>2. 定义命令交互参数:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"><span class="keyword">if</span> (argv.l == <span class="string">'zh-cn'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Chinese site!'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l == <span class="string">'en'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'English website!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="string">./app.js</span> <span class="params">--l=zh-cn</span></span><br><span class="line">Chinese site!</span><br><span class="line"></span><br><span class="line">$ <span class="string">./app.js</span> <span class="params">--l=en</span></span><br><span class="line">English website!</span><br></pre></td></tr></table></figure><h4 id="4-接收参数"><a href="#4-接收参数" class="headerlink" title="4. 接收参数"></a>4. 接收参数</h4><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> argv = <span class="keyword">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argv.l==<span class="string">'zh-cn'</span>) &#123;</span><br><span class="line">    <span class="comment">//获取参数 l 的值</span></span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'Chinese website!'</span>);</span><br><span class="line">    <span class="built_in">global</span>.langue=<span class="string">'zh-cn'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l==<span class="string">'en'</span>)&#123;</span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'English website!'</span>);</span><br><span class="line">    <span class="built_in">global</span>.langue=<span class="string">'en'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们通过 argv 获取 –l 参数来判断当前要运行哪个环境.</p><p>然后使用全局变量 global.langue 来标识当前运行环境.</p><p>在后面的所有个性化定制处我们都可以直接使用全局变量 global.langue 来做判断.</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2 api整理之路由模块</title>
      <link href="2016/Angular2ApiRouter/"/>
      <url>2016/Angular2ApiRouter/</url>
      
        <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了</p><a id="more"></a><h3 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h3><h4 id="1-PRIMARY-OUTLET"><a href="#1-PRIMARY-OUTLET" class="headerlink" title="1. PRIMARY_OUTLET"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html" target="_blank" rel="noopener">PRIMARY_OUTLET</a></h4><h4 id="2-ROUTER-DIRECTIVES"><a href="#2-ROUTER-DIRECTIVES" class="headerlink" title="2. ROUTER_DIRECTIVES"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html" target="_blank" rel="noopener">ROUTER_DIRECTIVES</a></h4><p>路由指令集合常量</p><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><h4 id="1-活跃路由ActivatedRoute"><a href="#1-活跃路由ActivatedRoute" class="headerlink" title="1. 活跃路由ActivatedRoute"></a>1. 活跃路由<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html" target="_blank" rel="noopener">ActivatedRoute</a></h4><p>可以获取当前路由的参数和数据</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">route: ActivatedRoute</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id: Observable&lt;<span class="built_in">string</span>&gt; = route.params.map(<span class="function"><span class="params">p</span> =&gt;</span> p.id);</span><br><span class="line">    <span class="keyword">const</span> data = route.data.map(<span class="function"><span class="params">d</span> =&gt;</span> d.user); <span class="comment">//includes `data` and `resolve`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-活跃路由快照ActivatedRouteSnapshot"><a href="#2-活跃路由快照ActivatedRouteSnapshot" class="headerlink" title="2. 活跃路由快照ActivatedRouteSnapshot"></a>2. 活跃路由快照<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html" target="_blank" rel="noopener">ActivatedRouteSnapshot</a></h4><p>具体功能不明</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(route: ActivatedRoute) &#123;</span><br><span class="line">    <span class="keyword">const</span> id: string = route.snapshot.params.id;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">data</span> = route.snapshot.<span class="keyword">data</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-可激活CanActivate"><a href="#3-可激活CanActivate" class="headerlink" title="3. 可激活CanActivate"></a>3. 可激活<a href="https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html" target="_blank" rel="noopener">CanActivate</a></h4><p>实现此接口并重写<code>canActivate</code>方法。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanActivateTeam</span> <span class="keyword">implements</span> <span class="title">CanActivate</span> &#123;</span></span><br><span class="line">  constructor(<span class="keyword">private</span> <span class="string">permissions:</span> Permissions, <span class="keyword">private</span> <span class="string">currentUser:</span> UserToken) &#123;&#125;</span><br><span class="line">  canActivate(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;<span class="keyword">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.permissions.canActivate(<span class="keyword">this</span>.currentUser, <span class="keyword">this</span>.route.params.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  CanActivateTeam,</span><br><span class="line">  provideRouter([&#123;</span><br><span class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</span><br><span class="line"><span class="symbol">    component:</span> Team,</span><br><span class="line"><span class="symbol">    canActivate:</span> [CanActivateTeam]</span><br><span class="line">  &#125;])</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4-CanDeactivate"><a href="#4-CanDeactivate" class="headerlink" title="4. CanDeactivate"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html" target="_blank" rel="noopener">CanDeactivate</a></h4><h4 id="5-其他选项ExtraOptions"><a href="#5-其他选项ExtraOptions" class="headerlink" title="5. 其他选项ExtraOptions"></a>5. 其他选项<a href="https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html" target="_blank" rel="noopener">ExtraOptions</a></h4><h4 id="6-解决-Resolve"><a href="#6-解决-Resolve" class="headerlink" title="6. 解决 Resolve"></a>6. 解决 <a href="https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html" target="_blank" rel="noopener">Resolve</a></h4><p>实现此接口并重写<code>Resolve</code>方法。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeamResolver</span> <span class="keyword">implements</span> <span class="title">Resolve</span> &#123;</span></span><br><span class="line">  constructor(<span class="keyword">private</span> <span class="string">backend:</span> Backend) &#123;&#125;</span><br><span class="line">  resolve(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;any&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.backend.fetchTeam(<span class="keyword">this</span>.route.params.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  TeamResolver,</span><br><span class="line">  provideRouter([&#123;</span><br><span class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</span><br><span class="line"><span class="symbol">    component:</span> TeamCmp,</span><br><span class="line"><span class="symbol">    resolve:</span> &#123;</span><br><span class="line"><span class="symbol">      team:</span> TeamResolver</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;])</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="7-路由-Route"><a href="#7-路由-Route" class="headerlink" title="7. 路由 Route"></a>7. 路由 <a href="https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html" target="_blank" rel="noopener">Route</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> &#123;</span></span><br><span class="line"><span class="string">path :</span> string</span><br><span class="line"><span class="string">terminal :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">pathMatch :</span> <span class="string">'full'</span>|<span class="string">'prefix'</span></span><br><span class="line"><span class="string">component :</span> Type|string</span><br><span class="line"><span class="string">redirectTo :</span> string</span><br><span class="line"><span class="string">outlet :</span> string</span><br><span class="line"><span class="string">canActivate :</span> any[]</span><br><span class="line"><span class="string">canDeactivate :</span> any[]</span><br><span class="line"><span class="string">data :</span> Data</span><br><span class="line"><span class="string">resolve :</span> ResolveData</span><br><span class="line"><span class="string">children :</span> Route[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-路由状态-RouterState"><a href="#8-路由状态-RouterState" class="headerlink" title="8. 路由状态 RouterState"></a>8. 路由状态 <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html" target="_blank" rel="noopener">RouterState</a></h4><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">class MyComponent &#123;</span><br><span class="line">  constructor(router: Router) &#123;</span><br><span class="line">    const <span class="keyword">state</span> = router.routerState;</span><br><span class="line">    const id: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.firstChild(<span class="keyword">state</span>.root).params.map(p =&gt; p.id);</span><br><span class="line">    const isDebug: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.queryParams.map(q =&gt; q.<span class="keyword">debug</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-路由状态快照RouterStateSnapshot"><a href="#9-路由状态快照RouterStateSnapshot" class="headerlink" title="9. 路由状态快照RouterStateSnapshot"></a>9. 路由状态快照<a href="https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html" target="_blank" rel="noopener">RouterStateSnapshot</a></h4><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(router: Router)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  const snapshot = router.routerState.snapshot;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="10-路径树-UrlTree"><a href="#10-路径树-UrlTree" class="headerlink" title="10. 路径树 UrlTree"></a>10. 路径树 <a href="https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html" target="_blank" rel="noopener">UrlTree</a></h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">UrlTree</span> &#123;</span><br><span class="line">root : UrlSegment</span><br><span class="line">queryParams : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</span><br><span class="line">fragment : <span class="keyword">string</span></span><br><span class="line">toString() : <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h3><h4 id="1-默认路径初始化-DefaultUrlSerializer"><a href="#1-默认路径初始化-DefaultUrlSerializer" class="headerlink" title="1. 默认路径初始化 DefaultUrlSerializer"></a>1. 默认路径初始化 <a href="https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html" target="_blank" rel="noopener">DefaultUrlSerializer</a></h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">class DefaultUrlSerializer &#123;</span><br><span class="line"><span class="function"><span class="title">parse</span><span class="params">(url: string)</span></span> : UrlTree</span><br><span class="line"><span class="function"><span class="title">serialize</span><span class="params">(tree: UrlTree)</span></span> : string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-取消导航NavigationCancel"><a href="#2-取消导航NavigationCancel" class="headerlink" title="2. 取消导航NavigationCancel"></a>2. 取消导航<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html" target="_blank" rel="noopener">NavigationCancel</a></h4><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(id: number, url: <span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">id</span> :</span> number</span><br><span class="line">url : <span class="keyword">string</span></span><br><span class="line">toString() : <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-结束导航-NavigationEnd"><a href="#3-结束导航-NavigationEnd" class="headerlink" title="3. 结束导航 NavigationEnd"></a>3. 结束导航 <a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html" target="_blank" rel="noopener">NavigationEnd</a></h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">class</span> NavigationEnd &#123;</span><br><span class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, urlAfterRedirects: <span class="built_in">string</span>)</span><br><span class="line"><span class="built_in">id</span> : <span class="built_in">number</span></span><br><span class="line">url : <span class="built_in">string</span></span><br><span class="line">urlAfterRedirects : <span class="built_in">string</span></span><br><span class="line">toString() : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-导航错误NavigationError"><a href="#4-导航错误NavigationError" class="headerlink" title="4. 导航错误NavigationError"></a>4. 导航错误<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html" target="_blank" rel="noopener">NavigationError</a></h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">class</span> NavigationError &#123;</span><br><span class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, <span class="keyword">error</span>: any)</span><br><span class="line"><span class="built_in">id</span> : <span class="built_in">number</span></span><br><span class="line">url : <span class="built_in">string</span></span><br><span class="line"><span class="keyword">error</span> : any</span><br><span class="line">toString() : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-根路由-RootRouter"><a href="#5-根路由-RootRouter" class="headerlink" title="5. 根路由 RootRouter"></a>5. 根路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html" target="_blank" rel="noopener">RootRouter</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootRouter</span> &#123;</span></span><br><span class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">location:</span> Location, <span class="string">primaryComponent:</span> Type)</span><br><span class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">dispose() : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-路由数据-RouteData"><a href="#6-路由数据-RouteData" class="headerlink" title="6. 路由数据 RouteData"></a>6. 路由数据 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html" target="_blank" rel="noopener">RouteData</a></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> RouteData &#123;</span><br><span class="line"><span class="keyword">constructor</span>(<span class="params">data?: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span>)</span><br><span class="line">data : &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span><br><span class="line"><span class="keyword">get</span>(key: <span class="built_in">string</span>) : <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-路由参数-RouteParams"><a href="#7-路由参数-RouteParams" class="headerlink" title="7. 路由参数 RouteParams"></a>7. 路由参数 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html" target="_blank" rel="noopener">RouteParams</a></h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">RouteParams</span> &#123;</span><br><span class="line">constructor(<span class="keyword">params</span>: &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;)</span><br><span class="line"><span class="keyword">params</span> : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</span><br><span class="line"><span class="keyword">get</span>(param: <span class="keyword">string</span>) : <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-注册路由-RouteRegistry"><a href="#8-注册路由-RouteRegistry" class="headerlink" title="8. 注册路由 RouteRegistry"></a>8. 注册路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html" target="_blank" rel="noopener">RouteRegistry</a></h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">class RouteRegistry &#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span><span class="params">(_rootComponent: Type)</span></span></span><br><span class="line"><span class="function"><span class="title">config</span><span class="params">(parentComponent: any, config: RouteDefinition)</span></span> : void</span><br><span class="line"><span class="function"><span class="title">configFromComponent</span><span class="params">(component: any)</span></span> : void</span><br><span class="line"><span class="function"><span class="title">recognize</span><span class="params">(url: string, ancestorInstructions: Instruction[])</span></span> : Promise&lt;Instruction&gt;</span><br><span class="line"><span class="function"><span class="title">generate</span><span class="params">(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any)</span></span> : Instruction</span><br><span class="line"><span class="function"><span class="title">hasRoute</span><span class="params">(name: string, parentComponent: any)</span></span> : boolean</span><br><span class="line"><span class="function"><span class="title">generateDefault</span><span class="params">(componentCursor: Type)</span></span> : Instruction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-路由-Router"><a href="#9-路由-Router" class="headerlink" title="9. 路由 Router"></a>9. 路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html" target="_blank" rel="noopener">Router</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> &#123;</span></span><br><span class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">parent:</span> Router, <span class="string">hostComponent:</span> any, root?: Router)</span><br><span class="line"><span class="string">navigating :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">lastNavigationAttempt :</span> string</span><br><span class="line"><span class="string">currentInstruction :</span> Instruction</span><br><span class="line"><span class="string">registry :</span> RouteRegistry</span><br><span class="line"><span class="string">parent :</span> Router</span><br><span class="line"><span class="string">hostComponent :</span> any</span><br><span class="line"><span class="string">root :</span> Router</span><br><span class="line">childRouter(<span class="string">hostComponent:</span> any) : Router</span><br><span class="line">auxRouter(<span class="string">hostComponent:</span> any) : Router</span><br><span class="line">registerPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class="line">unregisterPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : <span class="keyword">void</span></span><br><span class="line">registerAuxOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class="line">isRouteActive(<span class="string">instruction:</span> Instruction) : <span class="keyword">boolean</span></span><br><span class="line">config(<span class="string">definitions:</span> RouteDefinition[]) : Promise&lt;any&gt;</span><br><span class="line">navigate(<span class="string">linkParams:</span> any[]) : Promise&lt;any&gt;</span><br><span class="line">navigateByUrl(<span class="string">url:</span> string, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">navigateByInstruction(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">subscribe(<span class="string">onNext:</span> (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>, onError?: (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>) : Object</span><br><span class="line">deactivate(<span class="string">instruction:</span> Instruction) : Promise&lt;any&gt;</span><br><span class="line">recognize(<span class="string">url:</span> string) : Promise&lt;Instruction&gt;</span><br><span class="line">renavigate() : Promise&lt;any&gt;</span><br><span class="line">generate(<span class="string">linkParams:</span> any[]) : Instruction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、-指令"><a href="#四、-指令" class="headerlink" title="四、 指令"></a>四、 指令</h3><h4 id="1-RouterLink"><a href="#1-RouterLink" class="headerlink" title="1. RouterLink"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html" target="_blank" rel="noopener">RouterLink</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLink</span> &#123;</span></span><br><span class="line"><span class="string">commands :</span> any[]</span><br><span class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</span><br><span class="line"><span class="string">fragment :</span> string</span><br><span class="line"><span class="string">urlTree :</span> UrlTree</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">route :</span> ActivatedRoute</span><br><span class="line"><span class="string">locationStrategy :</span> LocationStrategy</span><br><span class="line">routerLink</span><br><span class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-RouterLinkActive"><a href="#2-RouterLinkActive" class="headerlink" title="2. RouterLinkActive"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html" target="_blank" rel="noopener">RouterLinkActive</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkActive</span> &#123;</span></span><br><span class="line"><span class="string">links :</span> QueryList&lt;RouterLink&gt;</span><br><span class="line"><span class="string">linksWithHrefs :</span> QueryList&lt;RouterLinkWithHref&gt;</span><br><span class="line"><span class="string">classes :</span> string[]</span><br><span class="line"><span class="string">subscription :</span> Subscription</span><br><span class="line"><span class="string">routerLinkActiveOptions :</span> &#123;<span class="string">exact:</span> <span class="keyword">boolean</span>&#125;</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">element :</span> ElementRef</span><br><span class="line"><span class="string">renderer :</span> Renderer</span><br><span class="line">ngAfterContentInit() : <span class="keyword">void</span></span><br><span class="line">routerLinkActive</span><br><span class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</span><br><span class="line">ngOnDestroy() : any</span><br><span class="line">update() : <span class="keyword">void</span></span><br><span class="line">reduceList(<span class="string">currentUrlTree:</span> UrlTree, <span class="string">q:</span> QueryList&lt;any&gt;) : <span class="keyword">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-RouterLinkWithHref"><a href="#3-RouterLinkWithHref" class="headerlink" title="3. RouterLinkWithHref"></a>3. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html" target="_blank" rel="noopener">RouterLinkWithHref</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkWithHref</span> &#123;</span></span><br><span class="line"><span class="string">target :</span> string</span><br><span class="line"><span class="string">commands :</span> any[]</span><br><span class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</span><br><span class="line"><span class="string">fragment :</span> string</span><br><span class="line"><span class="string">href :</span> string</span><br><span class="line"><span class="string">urlTree :</span> UrlTree</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">route :</span> ActivatedRoute</span><br><span class="line"><span class="string">locationStrategy :</span> LocationStrategy</span><br><span class="line">routerLink</span><br><span class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</span><br><span class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></span><br><span class="line">updateTargetUrlAndHref() : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-RouterOutlet"><a href="#4-RouterOutlet" class="headerlink" title="4. RouterOutlet"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html" target="_blank" rel="noopener">RouterOutlet</a></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterOutlet</span> &#123;</span></span><br><span class="line"><span class="string">activated :</span> ComponentRef&lt;any&gt;</span><br><span class="line"><span class="string">outletMap :</span> RouterOutletMap</span><br><span class="line"><span class="string">location :</span> ViewContainerRef</span><br><span class="line"><span class="string">componentFactoryResolver :</span> ComponentFactoryResolver</span><br><span class="line"><span class="string">isActivated :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">component :</span> Object</span><br><span class="line"><span class="string">activatedRoute :</span> ActivatedRoute</span><br><span class="line">deactivate() : <span class="keyword">void</span></span><br><span class="line">activate(<span class="string">activatedRoute:</span> ActivatedRoute, <span class="string">providers:</span> ResolvedReflectiveProvider[], <span class="string">outletMap:</span> RouterOutletMap) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2 api整理之通用模块</title>
      <link href="2016/Angular2ApiCommon/"/>
      <url>2016/Angular2ApiCommon/</url>
      
        <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了</p><a id="more"></a><h3 id="一、通用包"><a href="#一、通用包" class="headerlink" title="一、通用包"></a>一、通用包</h3><h4 id="1-常量类"><a href="#1-常量类" class="headerlink" title="1. 常量类"></a>1. 常量类</h4><h4 id="1-1-根路径-APP-BASE-HREF"><a href="#1-1-根路径-APP-BASE-HREF" class="headerlink" title="1.1 根路径 APP_BASE_HREF"></a>1.1 根路径 <a href="https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html" target="_blank" rel="noopener">APP_BASE_HREF</a></h4><p>主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">bootstrap(AppCmp, [</span><br><span class="line">  ROUTER_PROVIDERS,</span><br><span class="line">  &#123;<span class="string">provide:</span> APP_BASE_HREF, <span class="string">useValue:</span> <span class="string">'/my/app'</span>&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="1-2-指令常量-COMMON-DIRECTIVES"><a href="#1-2-指令常量-COMMON-DIRECTIVES" class="headerlink" title="1.2 指令常量 COMMON_DIRECTIVES"></a>1.2 指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html" target="_blank" rel="noopener">COMMON_DIRECTIVES</a></h4><p>主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。<br>CORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。<br>单个引入</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm&#125; <span class="keyword">from</span></span><br><span class="line"><span class="string">'@angular/common'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'myComponent.html'</span>,</span><br><span class="line">  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,</span><br><span class="line">OtherDirective]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用常量引入</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;COMMON_DIRECTIVES&#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'myComponent.html'</span>,</span><br><span class="line">  directives: [COMMON_DIRECTIVES, OtherDirective]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-3-管道常量-COMMON-PIPES"><a href="#1-3-管道常量-COMMON-PIPES" class="headerlink" title="1.3 管道常量 COMMON_PIPES"></a>1.3 管道常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html" target="_blank" rel="noopener">COMMON_PIPES</a></h4><p>目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等</p><h4 id="1-4-表单指令常量-FORM-DIRECTIVES"><a href="#1-4-表单指令常量-FORM-DIRECTIVES" class="headerlink" title="1.4 表单指令常量 FORM_DIRECTIVES"></a>1.4 表单指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html" target="_blank" rel="noopener">FORM_DIRECTIVES</a></h4><p>试验阶段。所有有关表常的指令礼盒</p><h4 id="1-5-表单提供者常量-FORM-PROVIDERS"><a href="#1-5-表单提供者常量-FORM-PROVIDERS" class="headerlink" title="1.5 表单提供者常量 FORM_PROVIDERS"></a>1.5 表单提供者常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html" target="_blank" rel="noopener">FORM_PROVIDERS</a></h4><p>在bootsrap的时候注入进去</p><h4 id="1-6-异步验证常量-NG-ASYNC-VALIDATORS"><a href="#1-6-异步验证常量-NG-ASYNC-VALIDATORS" class="headerlink" title="1.6 异步验证常量 NG_ASYNC_VALIDATORS"></a>1.6 异步验证常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html" target="_blank" rel="noopener">NG_ASYNC_VALIDATORS</a></h4><p>为了控制一个表单的异步验证，要在验证中添加  <code>multi: true</code>,当然也少不了<code>NG_VALIDATORS</code></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">bootstrap(MyApp, [&#123;<span class="string">provide:</span> NG_VALIDATORS, <span class="string">useValue:</span> myValidator, <span class="string">multi:</span> <span class="literal">true</span>&#125;]);</span><br></pre></td></tr></table></figure><h4 id="1-7-值存储器常量-NG-VALUE-ACCESSOR"><a href="#1-7-值存储器常量-NG-VALUE-ACCESSOR" class="headerlink" title="1.7 值存储器常量 NG_VALUE_ACCESSOR"></a>1.7 值存储器常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html" target="_blank" rel="noopener">NG_VALUE_ACCESSOR</a></h4><p>具体作用和使用方法不明确</p><h3 id="2、-接口"><a href="#2、-接口" class="headerlink" title="2、 接口"></a>2、 接口</h3><h4 id="2-1-控制值存储器ControlValueAccessor"><a href="#2-1-控制值存储器ControlValueAccessor" class="headerlink" title="2.1 控制值存储器ControlValueAccessor"></a>2.1 控制值存储器<a href="https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html" target="_blank" rel="noopener">ControlValueAccessor</a></h4><p>具体作用和使用方法不明确</p><h4 id="2-2-表单-Form"><a href="#2-2-表单-Form" class="headerlink" title="2.2 表单 Form"></a>2.2 表单 <a href="https://angular.cn/docs/js/latest/api/common/index/Form-interface.html" target="_blank" rel="noopener">Form</a></h4><p> NgFormModel 和 NgForm实现在这个接口，只在form模块使用</p><h4 id="2-3-路径变化事件-UrlChangeEvent"><a href="#2-3-路径变化事件-UrlChangeEvent" class="headerlink" title="2.3 路径变化事件 UrlChangeEvent"></a>2.3 路径变化事件 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html" target="_blank" rel="noopener">UrlChangeEvent</a></h4><p>当监听到URL变化的时候触发此事件</p><h4 id="2-4-路径变化监听器-UrlChangeListener"><a href="#2-4-路径变化监听器-UrlChangeListener" class="headerlink" title="2.4 路径变化监听器 UrlChangeListener"></a>2.4 路径变化监听器 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html" target="_blank" rel="noopener">UrlChangeListener</a></h4><p>监听URL的变化</p><h4 id="2-5-验证Validator"><a href="#2-5-验证Validator" class="headerlink" title="2.5 验证Validator"></a>2.5 验证<a href="https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html" target="_blank" rel="noopener">Validator</a></h4><p>在写验证指令的时候实现这个接口</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line"><span class="symbol">  selector:</span> <span class="string">'[custom-validator]'</span>,</span><br><span class="line"><span class="symbol">  providers:</span> [&#123;<span class="string">provide:</span> NG_VALIDATORS, <span class="string">useExisting:</span> CustomValidatorDirective, <span class="string">multi:</span> <span class="literal">true</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomValidatorDirective</span> <span class="keyword">implements</span> <span class="title">Validator</span> &#123;</span></span><br><span class="line">  validate(<span class="string">c:</span> Control): &#123;[<span class="string">key:</span> string]: any&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"custom"</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h3><h4 id="3-1-抽象控制-AbstractControl"><a href="#3-1-抽象控制-AbstractControl" class="headerlink" title="3.1 抽象控制 AbstractControl"></a>3.1 抽象控制 <a href="https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html" target="_blank" rel="noopener">AbstractControl</a></h4>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rxjs全接触</title>
      <link href="2016/JavascriptRxjsStudy/"/>
      <url>2016/JavascriptRxjsStudy/</url>
      
        <content type="html"><![CDATA[<p>RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——<a href="http://reactivex.io/rxjs/manual/overview.html#observable" target="_blank" rel="noopener">Observable</a>（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。</p><a id="more"></a><h3 id="一、rxjs内容"><a href="#一、rxjs内容" class="headerlink" title="一、rxjs内容"></a>一、rxjs内容</h3><p>ReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。</p><p>在RxJS其中解决异步事件管理的基本概念是：</p><h4 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1. Observable"></a>1. Observable</h4><p>可观察对象，代表未来值或事件的可调用集合的想法.<br>observer是一个由回调函数组成的对象，键名分别为<code>next</code>、<code>error</code> 和 <code>complete</code>，以此接受Observable推送的不同类型的通知。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = &#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：<code>observable.subscribe(observer);</code></p><h4 id="2-Observer"><a href="#2-Observer" class="headerlink" title="2. Observer"></a>2. Observer</h4><p>观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值</p><h4 id="3-Subscription"><a href="#3-Subscription" class="headerlink" title="3. Subscription"></a>3. Subscription</h4><p>Subscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。</p><h4 id="4-Operators"><a href="#4-Operators" class="headerlink" title="4. Operators"></a>4. Operators</h4><p>操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等</p><h4 id="5-Subject"><a href="#5-Subject" class="headerlink" title="5. Subject"></a>5. Subject</h4><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。<br>每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。<br>每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p><h4 id="6-Schedulers"><a href="#6-Schedulers" class="headerlink" title="6. Schedulers"></a>6. Schedulers</h4><p>调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。</p><h4 id="7、推和拉"><a href="#7、推和拉" class="headerlink" title="7、推和拉"></a>7、推和拉</h4><p>拉和推是两个不同的协议如何数据生产者可以与数据消费者。</p><p>拉<br>数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。<br>每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。</p><p>推<br>在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。<br>在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。</p><h3 id="二、相关api"><a href="#二、相关api" class="headerlink" title="二、相关api"></a>二、相关api</h3><h4 id="1-scan"><a href="#1-scan" class="headerlink" title="1. scan()"></a>1. scan()</h4><p>使用RxJS您隔离的状态。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var button = document . querySelector ( <span class="string">'button'</span> );</span><br><span class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</span><br><span class="line">  . scan ( count =&gt; count +  1 ,  0 )</span><br><span class="line">  . subscribe ( count =&gt;<span class="built_in"> console </span>. log ( <span class="string">'Clicked &#123;$ count&#125;次'</span> ））;</span><br></pre></td></tr></table></figure><h4 id="2-subscribe"><a href="#2-subscribe" class="headerlink" title="2. subscribe()"></a>2. subscribe()</h4><p>异步函数，可以使用一个回调</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var button = document . querySelector ( <span class="string">'button'</span> );</span><br><span class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</span><br><span class="line">  . subscribe (()  =&gt;<span class="built_in"> console </span>. log ( <span class="string">'Clicked!'</span> ));</span><br></pre></td></tr></table></figure><h4 id="3-throttle"><a href="#3-throttle" class="headerlink" title="3. throttle()"></a>3. throttle()</h4><h4 id="4-map"><a href="#4-map" class="headerlink" title="4. map()"></a>4. map()</h4><p>每秒最多点击次数</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var button = document . querySelector ( <span class="string">'button'</span> );</span><br><span class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</span><br><span class="line">  . throttle ( 1000 )</span><br><span class="line">  . map ( event  =&gt;  event . clientX )</span><br><span class="line">  . scan (( count , clientX )  =&gt; count + clientX ,  0 )</span><br><span class="line">  . subscribe ( count =&gt;<span class="built_in"> console </span>. log ( count ));</span><br></pre></td></tr></table></figure><h3 id="三、具体使用"><a href="#三、具体使用" class="headerlink" title="三、具体使用"></a>三、具体使用</h3><h4 id="1-Observable-1"><a href="#1-Observable-1" class="headerlink" title="1. Observable"></a>1. Observable</h4><p>我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var observable =  Rx . Observable . <span class="built_in">create</span> ( <span class="function"><span class="keyword">function</span>  <span class="params">( observer )</span></span>  &#123;</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">1</span> );</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">2</span> );</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">3</span> );</span><br><span class="line">  setTimeout (()  =&gt;  &#123;</span><br><span class="line">    observer . <span class="built_in">next</span> ( <span class="number">4</span> );</span><br><span class="line">    observer . complete ();</span><br><span class="line">  &#125;,  <span class="number">1000</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-subscribe-1"><a href="#2-subscribe-1" class="headerlink" title="2.subscribe"></a>2.subscribe</h4><p>为了能够看到这些值，我们需要订阅(subscribe)它。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'just before subscribe'</span>);</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'got value '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'something wrong occurred: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just after subscribe'</span>);</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">just <span class="keyword">before</span> subscribe</span><br><span class="line">got <span class="built_in">value</span> <span class="number">1</span></span><br><span class="line">got <span class="built_in">value</span> <span class="number">2</span></span><br><span class="line">got <span class="built_in">value</span> <span class="number">3</span></span><br><span class="line">just <span class="keyword">after</span> subscribe</span><br><span class="line">got <span class="built_in">value</span> <span class="number">4</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。</p><h4 id="3、amb方法"><a href="#3、amb方法" class="headerlink" title="3、amb方法"></a>3、amb方法</h4><p><code>方法定义</code><br><code>[Rx.Observable.amb(...args)]</code><br><code>作用</code><br>从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。<br><code>参数</code><br>args (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。<br><code>返回值</code><br>(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。<br><code>总结</code><br>简单的说，<code>amb()</code>像一个多路电闸，一次仅能构建一条通路：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">A B C D E F G H</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">     \</span><br><span class="line">      \   开关臂</span><br><span class="line">       \   </span><br><span class="line">       |</span><br><span class="line"><span class="string">      主线</span></span><br><span class="line"><span class="string">       </span>|</span><br></pre></td></tr></table></figure><p>实例</p><p>HTML</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&lt;body&gt;</span></span><br><span class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input1"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input2"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取元素</span></span><br><span class="line"><span class="keyword">var</span> input1 = $(<span class="string">'#input1'</span>);</span><br><span class="line"><span class="keyword">var</span> input2 = $(<span class="string">'#input2'</span>);</span><br><span class="line"><span class="comment">// 定义事件流</span></span><br><span class="line"><span class="keyword">var</span> event1 = Rx.Observable.fromEvent(input1, <span class="string">'click'</span>).map(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">'one'</span>)</span><br><span class="line"><span class="keyword">var</span> event2 = Rx.Observable.fromEvent(input2, <span class="string">'click'</span>).map(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">'two'</span>);</span><br><span class="line"><span class="comment">//传入事件流</span></span><br><span class="line"><span class="keyword">var</span> source = Rx.Observable.amb(event1,event2);</span><br></pre></td></tr></table></figure><p>上面例子中<br><code>amb()</code>中传入了两个点击事件流。<br>事件流1，会在点击后发射字符串one；<br>事件流2，会在点击后发射字符串two；<br>初始情况下，产生事件流1之后，事件流2不会再被输出；<br>反之亦然，我们可以订阅<code>amb()</code>产生的结果流：<a href="http://jsbin.com/pitayi/edit?html,js,console,output" target="_blank" rel="noopener">amb()操作符演示</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = source.subscribe(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err);   </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Completed'</span>);   </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>使用场景 1：秒杀</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Observable.amb(</span><br><span class="line">    用户A的拍下请求,</span><br><span class="line">    用户B的拍下请求,</span><br><span class="line">    用户C的拍下请求,</span><br><span class="line">    ...</span><br><span class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>&#123;</span><br><span class="line">    执行购买逻辑，创建订单，打开支付工具</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用场景 1：通话</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Observable.amb(</span><br><span class="line">    A来电,</span><br><span class="line">    B来电,</span><br><span class="line">    C来电,</span><br><span class="line">    ...</span><br><span class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(call)</span> </span>&#123;</span><br><span class="line">    通话</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-case方法"><a href="#4-case方法" class="headerlink" title="4. case方法"></a>4. case方法</h4><p><code>方法定义</code><br><code>[Rx.Observable.case(selector, sources, [elseSource|scheduler])]</code></p><p><code>作用</code><br>选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。</p><p><code>参数</code><br><code>selector (Function)</code>: 返回键的字符串的函数，键用以与sources中的键名进行比较。<br><code>sources (Object)</code>: 一个包含可观察对象的Javascript对象。<br><code>[elseSource|scheduler] (Observable | Scheduler)</code>:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的<code>Rx.Observabe.empty</code> 对象。</p><p><code>返回值</code><br>(Observable): 返回值为经过选择后的Observable（可观察对象）。</p><p><code>实例</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sources = &#123;</span><br><span class="line">  hello: Rx.Observable.just(<span class="string">'clx'</span>),</span><br><span class="line">  world: Rx.Observable.just(<span class="string">'wxq'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> subscription = Rx.Observable.case(<span class="function"><span class="params">()</span>=&gt;</span><span class="string">"hello"</span>, sources, Rx.Observable.empty())</span><br><span class="line"></span><br><span class="line">subscription.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实例中，匿名函数()=&gt;”hello”指定需要在sources中返回的可观察对象的键名为”hello”，命令行最终输出”clx”，<a href="https://jsbin.com/kodije/edit?js,console,output" target="_blank" rel="noopener">点击进入case()实例</a>。</p><p>适用场景<br>针对表单进行校验，校验用户的<code>手机号</code>和<code>邮箱</code>是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validate = &#123;</span><br><span class="line">    <span class="string">"mobile"</span>: Observable.<span class="keyword">return</span>(<span class="string">'123-566-789-01'</span>),</span><br><span class="line">    <span class="string">"email"</span>: Observable.<span class="keyword">return</span>(<span class="string">'JonSnow@company.com'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> emptyObserable = Observable.<span class="keyword">empty</span>();</span><br><span class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'mobile'</span>, validate, <span class="keyword">empty</span>)</span><br><span class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(mobile)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 验证手机号码是否重复</span></span><br><span class="line">    &#125;)</span><br><span class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'email'</span>, validate, <span class="keyword">empty</span>)</span><br><span class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(email)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 验证用户邮箱是否重复</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="4-catch-方法"><a href="#4-catch-方法" class="headerlink" title="4. catch()方法"></a>4. catch()方法</h4><p><code>方法定义</code><br>Rx.Observable.catch(…args)</p><p><code>作用</code><br>序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。</p><p><code>参数</code><br>args (Array | arguments): 可观察对象序列。</p><p><code>返回值</code><br>(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。</p><p>实例</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obs1 = Rx.Observable.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</span><br><span class="line"><span class="keyword">var</span> obs2 = Rx.Observable.return(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = Rx.Observable.catch(obs1, obs2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subscription = source.subscribe(</span><br><span class="line">  x =&gt; <span class="built_in">console</span>.log(<span class="string">`onNext: <span class="subst">$&#123;x&#125;</span>`</span>),</span><br><span class="line">  e =&gt; <span class="built_in">console</span>.log(<span class="string">`onError: <span class="subst">$&#123;e&#125;</span>`</span>),</span><br><span class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">'onCompleted'</span>));</span><br></pre></td></tr></table></figure><p>手机验证码实例<br>这样，用户能够收到验证码并成功验证的几率大大增加。</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> service1 = Observable.create(<span class="string">"服务提供商#1"</span>);</span><br><span class="line"><span class="keyword">var</span> service2 = Observable.create(<span class="string">"服务提供商#1"</span>);</span><br><span class="line"></span><br><span class="line">Observable.<span class="keyword">catch</span>(service1, service2).subscribe(&#123;</span><br><span class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'succeed'</span>),</span><br><span class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'所有验证服务均不可用'</span>)</span><br><span class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'completed'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-combineLatest方法"><a href="#5-combineLatest方法" class="headerlink" title="5. combineLatest方法"></a>5. combineLatest方法</h4><p><code>方法定义</code><br>Rx.Observable.combineLatest(…args, [resultSelector])</p><p><code>作用</code><br>通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。</p><p><code>参数</code><br><code>args (arguments | Array)</code>: 一系列可观察对象或可观察对象的数组。<br><code>[resultSelector] (Function)</code>: 在所有可观察对象都发射值后调用的处理函数。</p><p><code>返回值</code><br>(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"紫色"</span>,<span class="string">"黄色"</span>,<span class="string">"蓝色"</span>,<span class="string">"黑色"</span>];</span><br><span class="line"><span class="keyword">var</span> shapes = [<span class="string">"小星星"</span>,<span class="string">"圆形"</span>,<span class="string">"三角形"</span>,<span class="string">"正方形"</span>,<span class="string">"心形"</span>,<span class="string">"五边形"</span>];</span><br><span class="line"><span class="keyword">var</span> source1 = Rx.Observable.interval(<span class="number">3000</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">()</span>=&gt;</span>colors.pop());</span><br><span class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">2000</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">()</span>=&gt;</span>shapes.pop());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combined = Rx.Observable.combineLatest(source1, source2, <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="string">"的"</span> + y;</span><br><span class="line">&#125;).take(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">combined.subscribe(<span class="function">(<span class="params">shaped</span>)=&gt;</span><span class="built_in">console</span>.log(shaped));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> rxjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript设计模式</title>
      <link href="2016/JavascriptDesignPattern/"/>
      <url>2016/JavascriptDesignPattern/</url>
      
        <content type="html"><![CDATA[<p>设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。</p><a id="more"></a><h3 id="一、设计原则"><a href="#一、设计原则" class="headerlink" title="一、设计原则"></a>一、设计原则</h3><h4 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h4><p>对扩展开发，对修改关闭。</p><h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.  里氏替换原则"></a>2.  里氏替换原则</h4><p>子类继承父类，但单独调用完全可以运行。</p><h4 id="3-依赖倒转原则"><a href="#3-依赖倒转原则" class="headerlink" title="3. 依赖倒转原则"></a>3. 依赖倒转原则</h4><p>引用一个对象，如果这个对象有低层类型，直接引用低层。</p><h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h4><p>每一个接口应该是一种角色。</p><h4 id="5-合成-聚合复用原则"><a href="#5-合成-聚合复用原则" class="headerlink" title="5. 合成/聚合复用原则"></a>5. 合成/聚合复用原则</h4><p>新的对象应使用一些己有的对象，使之成为新对象的一部分。</p><h4 id="6-迪米特原则"><a href="#6-迪米特原则" class="headerlink" title="6. 迪米特原则"></a>6. 迪米特原则</h4><p>一个对象在对其他对象尽可能少的了解。</p><h3 id="二、-设计模式"><a href="#二、-设计模式" class="headerlink" title="二、 设计模式"></a>二、 设计模式</h3><h4 id="1-原型模式"><a href="#1-原型模式" class="headerlink" title="1. 原型模式"></a>1. 原型模式</h4><p>概念：和javascript的prototype不同<br>prototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆</p><p>作用：<br>原型对象本身就是有效的利用了每个构造器创建的对象</p><p>注意事项：<br>注意深拷贝和浅拷贝，以免出现引用问题。</p><p>代码实战和总结：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line">  <span class="keyword">var</span> myObj = &#123;</span><br><span class="line">    str:<span class="string">'myStr'</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    myArr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    myObj:&#123;</span><br><span class="line">      innerObj:&#123;</span><br><span class="line">        test:<span class="number">25</span></span><br><span class="line">      &#125;,</span><br><span class="line">      innerStr:<span class="string">'innerStr'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝对象的方法（浅拷贝）会影响原型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        ret[k]= obj[k];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//深拷贝  使用Object.create</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  result.prototype = <span class="built_in">Object</span>.create(myObj);</span><br><span class="line">  <span class="keyword">var</span> _result = <span class="keyword">new</span> result();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行</span></span><br><span class="line">  <span class="keyword">var</span> result = clone(myObj);</span><br><span class="line">  result.myObj.innerStr = <span class="string">'outStr'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>Object.create(prototype,optionalDescriptorObjects)</p><h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2. 策略模式"></a>2. 策略模式</h4><p>概念：<br>策略模式定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）</p><p>作用：<br>所有的这些算法都是做相同的事情，只是实现不同。<br>以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。<br>单独定义了算法类，也方便单元测试。</p><p>注意事项：<br>不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式</p><p>代码实战和总结</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//普通的验证</span></span><br><span class="line">  <span class="keyword">var</span> $input = $(<span class="string">'input'</span>).val();</span><br><span class="line">  <span class="keyword">var</span> val = &#123;</span><br><span class="line">    isEmpty:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</span><br><span class="line">      <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">    isTel:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</span><br><span class="line">      <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ise = val.isEmpty($input);</span><br><span class="line">  <span class="keyword">var</span> isTel = val.isTel($input)</span><br><span class="line">  <span class="keyword">if</span>(ise &amp;&amp; isTel)&#123;</span><br><span class="line">    alert(<span class="string">'ok'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到$fn.val上   典型的策略模式验证</span></span><br><span class="line">  $input(&#123;</span><br><span class="line">    isEmpty:<span class="keyword">false</span>,</span><br><span class="line">    isTel:<span class="keyword">True</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="3-组合模式"><a href="#3-组合模式" class="headerlink" title="3. 组合模式"></a>3. 组合模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结：</p><h4 id="4-外观模式"><a href="#4-外观模式" class="headerlink" title="4. 外观模式"></a>4. 外观模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5. 迭代器模式"></a>5. 迭代器模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6. 命令模式"></a>6. 命令模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="7-代理模式"><a href="#7-代理模式" class="headerlink" title="7. 代理模式"></a>7. 代理模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="9-责任链模式"><a href="#9-责任链模式" class="headerlink" title="9. 责任链模式"></a>9. 责任链模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="10-工厂模式"><a href="#10-工厂模式" class="headerlink" title="10. 工厂模式"></a>10. 工厂模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="11-单例模式"><a href="#11-单例模式" class="headerlink" title="11. 单例模式"></a>11. 单例模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="12-观察者模式"><a href="#12-观察者模式" class="headerlink" title="12. 观察者模式"></a>12. 观察者模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="13-中介者模式"><a href="#13-中介者模式" class="headerlink" title="13. 中介者模式"></a>13. 中介者模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="14-装饰者模式"><a href="#14-装饰者模式" class="headerlink" title="14. 装饰者模式"></a>14. 装饰者模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="15-建造者模式"><a href="#15-建造者模式" class="headerlink" title="15. 建造者模式"></a>15. 建造者模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p><h4 id="16-构造函数模式"><a href="#16-构造函数模式" class="headerlink" title="16. 构造函数模式"></a>16. 构造函数模式</h4><p>概念：</p><p>作用：</p><p>注意事项：</p><p>代码实战和总结</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5年学习计划</title>
      <link href="2016/2016StudyPlan/"/>
      <url>2016/2016StudyPlan/</url>
      
        <content type="html"><![CDATA[<p>2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。</p><a id="more"></a><h3 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h3><h4 id="1-atom"><a href="#1-atom" class="headerlink" title="1. atom"></a>1. atom</h4><p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</p><h4 id="2-idea"><a href="#2-idea" class="headerlink" title="2. idea"></a>2. idea</h4><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p><h4 id="3-eclipse"><a href="#3-eclipse" class="headerlink" title="3. eclipse"></a>3. eclipse</h4><p>虽然用上了IDEA之后再也不想回到eclipse。虽然它恶心，但是它毕竟伴随了很多程序员大部分时间，给点最起码的尊重。</p><h4 id="4-lodash"><a href="#4-lodash" class="headerlink" title="4. lodash"></a>4. lodash</h4><p>lodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。</p><h4 id="5-fetch"><a href="#5-fetch" class="headerlink" title="5. fetch"></a>5. fetch</h4><p>对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。</p><h4 id="6-Electron"><a href="#6-Electron" class="headerlink" title="6. Electron"></a>6. Electron</h4><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p><h3 id="二、javascript框架"><a href="#二、javascript框架" class="headerlink" title="二、javascript框架"></a>二、javascript框架</h3><h4 id="1-angular2"><a href="#1-angular2" class="headerlink" title="1. angular2"></a>1. angular2</h4><h5 id="跨平台开发"><a href="#跨平台开发" class="headerlink" title="跨平台开发"></a>跨平台开发</h5><p>学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。</p><h5 id="速度与性能"><a href="#速度与性能" class="headerlink" title="速度与性能"></a>速度与性能</h5><p>通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。<br>Angular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。</p><h5 id="美妙的工具"><a href="#美妙的工具" class="headerlink" title="美妙的工具"></a>美妙的工具</h5><p>使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。</p><h4 id="2-react-redux"><a href="#2-react-redux" class="headerlink" title="2. react+redux"></a>2. react+redux</h4><p>React+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。</p><h4 id="3-jquery"><a href="#3-jquery" class="headerlink" title="3. jquery"></a>3. jquery</h4><p>JQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。</p><h3 id="三、node相关技术"><a href="#三、node相关技术" class="headerlink" title="三、node相关技术"></a>三、node相关技术</h3><h4 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h4><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p><h4 id="2-koa2"><a href="#2-koa2" class="headerlink" title="2. koa2"></a>2. koa2</h4><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p><h4 id="3-rxjs"><a href="#3-rxjs" class="headerlink" title="3. rxjs"></a>3. rxjs</h4><p>是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。</p><h4 id="4-zonejs"><a href="#4-zonejs" class="headerlink" title="4. zonejs"></a>4. zonejs</h4><p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p><h3 id="四、设计模式"><a href="#四、设计模式" class="headerlink" title="四、设计模式"></a>四、设计模式</h3><h4 id="1-javascript设计模式"><a href="#1-javascript设计模式" class="headerlink" title="1. javascript设计模式"></a>1. <a href="https://xiaomo.info/2016/07/02/javascript_design_pattern/" target="_blank" rel="noopener">javascript设计模式</a></h4><h4 id="2-java设计模式"><a href="#2-java设计模式" class="headerlink" title="2. java设计模式"></a>2. java设计模式</h4><h3 id="五、编程语言"><a href="#五、编程语言" class="headerlink" title="五、编程语言"></a>五、编程语言</h3><h4 id="1-javascript"><a href="#1-javascript" class="headerlink" title="1. javascript"></a>1. javascript</h4><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p><h4 id="2-ecmscript6"><a href="#2-ecmscript6" class="headerlink" title="2. ecmscript6"></a>2. ecmscript6</h4><p>ES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p><h4 id="3-typesript"><a href="#3-typesript" class="headerlink" title="3. typesript"></a>3. typesript</h4><p>typescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p><h4 id="4-java"><a href="#4-java" class="headerlink" title="4. java"></a>4. java</h4><p>java是继c/c++使用最广泛的开发语言，写java真的是越写越觉得舒服。java生态环境十分良好，有大量优秀的开源框架以供选择。</p><h5 id="1-spring"><a href="#1-spring" class="headerlink" title="1. spring"></a>1. spring</h5><p>Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。 </p><h5 id="2-struts2"><a href="#2-struts2" class="headerlink" title="2. struts2"></a>2. struts2</h5><p>Struts2框架是一个轻量级的MVC流程框架，轻量级是指程序的代码不是很多，运行时占用的资源不是很多，MVC流程框架就是说它是支持分层开发，控制数据的流程，从哪里来，到那里去，怎么来，怎么去的这样一个框架</p><h5 id="3-hibernate"><a href="#3-hibernate" class="headerlink" title="3. hibernate"></a>3. hibernate</h5><p>hibernate是轻量级JavaEE应用的一个持久层框架。它的作用在于管理Java实体类到数据库表之间的映射关系，并且提供数据查询和获取数据的方法，可以大幅度的缩短使用JDBC处理数据持久化的时间。</p><h5 id="4-mybatis"><a href="#4-mybatis" class="headerlink" title="4. mybatis"></a>4. mybatis</h5><p>一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO），同时还提供一个利用这个框架开发的 JPetStore实例</p><h5 id="5-springMVC"><a href="#5-springMVC" class="headerlink" title="5. springMVC"></a>5. springMVC</h5><p>Spring MVC框架是有一个MVC框架，通过实现Model-View-Controller模式来很好地将数据、业务与展现进行分离。从这样一个角度来说，Spring MVC和Struts、Struts2非常类似。Spring MVC的设计是围绕DispatcherServlet展开的，DispatcherServlet负责将请求派发到特定的handler</p><h5 id="6-Play-Framework"><a href="#6-Play-Framework" class="headerlink" title="6. Play Framework"></a>6. Play Framework</h5><p>有别于其他臃肿的企业级 Java 框架，简洁的 Play 框架提供另外一种选择，它关注于开发者的效率和 RESTful 风格的架构。Play 是 敏捷软件开发的完美伴侣。</p><h3 id="六、数据存储"><a href="#六、数据存储" class="headerlink" title="六、数据存储"></a>六、数据存储</h3><h4 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1. mysql"></a>1. mysql</h4><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><h4 id="2-mongodb"><a href="#2-mongodb" class="headerlink" title="2. mongodb"></a>2. mongodb</h4><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><h4 id="3-redis"><a href="#3-redis" class="headerlink" title="3. redis"></a>3. redis</h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><h4 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4. cookie"></a>4. cookie</h4><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</p><h4 id="5-access-token"><a href="#5-access-token" class="headerlink" title="5. access token"></a>5. access token</h4><p>Windows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。</p><h3 id="七、html5-css3"><a href="#七、html5-css3" class="headerlink" title="七、html5+css3"></a>七、html5+css3</h3><h4 id="1-html5"><a href="#1-html5" class="headerlink" title="1. html5"></a>1. html5</h4><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。<br>HTML5的设计目的是为了在移动设备上支持多媒体。<br>HTML5 简单易学。</p><h4 id="2-canvas"><a href="#2-canvas" class="headerlink" title="2. canvas"></a>2. canvas</h4><p>html5中<code>&lt;canvas&gt;</code>标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</canvas></p><h4 id="3-css3"><a href="#3-css3" class="headerlink" title="3. css3"></a>3. css3</h4><p>CSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。</p><h4 id="4-sass"><a href="#4-sass" class="headerlink" title="4. sass"></a>4. sass</h4><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p><h4 id="5-白鹭引擎"><a href="#5-白鹭引擎" class="headerlink" title="5. 白鹭引擎"></a>5. 白鹭引擎</h4><p>白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。</p><h3 id="八、算法和数据结构"><a href="#八、算法和数据结构" class="headerlink" title="八、算法和数据结构"></a>八、算法和数据结构</h3><h4 id="1-线型查找"><a href="#1-线型查找" class="headerlink" title="1. 线型查找"></a>1. 线型查找</h4><p>在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。</p><h4 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h4><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h4 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h4><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><h4 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h4><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p><h4 id="5-插入排序"><a href="#5-插入排序" class="headerlink" title="5. 插入排序"></a>5. 插入排序</h4><p>插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p><h4 id="6-字符串反转"><a href="#6-字符串反转" class="headerlink" title="6. 字符串反转"></a>6. 字符串反转</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Str</span> = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">alert(<span class="keyword">new</span><span class="type">Str</span>);</span><br></pre></td></tr></table></figure><h4 id="7-搜索算法"><a href="#7-搜索算法" class="headerlink" title="7. 搜索算法"></a>7. 搜索算法</h4><p>搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。</p><h4 id="8-贪心算法"><a href="#8-贪心算法" class="headerlink" title="8. 贪心算法"></a>8. 贪心算法</h4><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p><h4 id="9-tween算法"><a href="#9-tween算法" class="headerlink" title="9. tween算法"></a>9. tween算法</h4><p>Flash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。</p><h4 id="10-javascript算法库"><a href="#10-javascript算法库" class="headerlink" title="10. javascript算法库"></a>10. javascript算法库</h4><ul><li><a href="https://github.com/sjkaliski/numbers.js/" target="_blank" rel="noopener">numbers.js</a></li><li><a href="http://www.numericjs.com/" target="_blank" rel="noopener">Numeric Javascript </a></li><li><a href="http://worrydream.com/Tangle/" target="_blank" rel="noopener">Tangle</a></li><li><a href="http://josscrowcroft.github.io/accounting.js/" target="_blank" rel="noopener">accounting.js</a><h3 id="九、测试框架"><a href="#九、测试框架" class="headerlink" title="九、测试框架"></a>九、测试框架</h3><h4 id="1-mocha"><a href="#1-mocha" class="headerlink" title="1. mocha"></a>1. mocha</h4>mocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。<h4 id="2-karma"><a href="#2-karma" class="headerlink" title="2. karma"></a>2. karma</h4>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。<h4 id="3-jasmine"><a href="#3-jasmine" class="headerlink" title="3. jasmine"></a>3. jasmine</h4>Jasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。<h4 id="4-chai"><a href="#4-chai" class="headerlink" title="4. chai"></a>4. chai</h4>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<h4 id="5-Qunit"><a href="#5-Qunit" class="headerlink" title="5.Qunit"></a>5.Qunit</h4>该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子<h4 id="6-should-js"><a href="#6-should-js" class="headerlink" title="6. should.js:"></a>6. should.js:</h4>TJ的另外一个开源贡献<h4 id="7-expect-js"><a href="#7-expect-js" class="headerlink" title="7. expect.js"></a>7. expect.js</h4>BDD风格的另外一个断言库，基于should.js,是mini版的BDD库<h4 id="8-assert"><a href="#8-assert" class="headerlink" title="8. assert"></a>8. assert</h4>node自带核心模块: 可以在node中使用的断言模块</li></ul><h3 id="十、重构"><a href="#十、重构" class="headerlink" title="十、重构"></a>十、<a href="http://www.raychase.net/138" target="_blank" rel="noopener">重构</a></h3><h4 id="1-命名"><a href="#1-命名" class="headerlink" title="1. 命名"></a>1. 命名</h4><p> 模块划分和命名空间</p><h4 id="2-加载"><a href="#2-加载" class="headerlink" title="2. 加载"></a>2. 加载</h4><p>js的动态加载</p><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p>Javascript的测试</p><h4 id="4-编码"><a href="#4-编码" class="headerlink" title="4. 编码"></a>4. 编码</h4><p> Javascript编码规则</p><h4 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5. 闭包"></a>5. 闭包</h4><p> 利用原型/闭包开发组件</p><h4 id="6-继承"><a href="#6-继承" class="headerlink" title="6. 继承"></a>6. 继承</h4><p> 利用继承来做事</p><h4 id="7-重用"><a href="#7-重用" class="headerlink" title="7. 重用"></a>7. 重用</h4><p> 重用老代码</p><h4 id="8-检测"><a href="#8-检测" class="headerlink" title="8. 检测"></a>8. 检测</h4><p> JSDoc和JSLint</p><h4 id="9-框架"><a href="#9-框架" class="headerlink" title="9.  框架"></a>9.  框架</h4><p>自定义JavaScript产品框架</p><h4 id="10-强化"><a href="#10-强化" class="headerlink" title="10.  强化"></a>10.  强化</h4><p>强化对象封装和模块封装</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之动画效果</title>
      <link href="2016/Angular2studyAnimate/"/>
      <url>2016/Angular2studyAnimate/</url>
      
        <content type="html"><![CDATA[<p>动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="一、在两个状态间转场"><a href="#一、在两个状态间转场" class="headerlink" title="一、在两个状态间转场"></a>一、在两个状态间转场</h3><h4 id="1-构建一个动画"><a href="#1-构建一个动画" class="headerlink" title="1. 构建一个动画"></a>1. 构建一个动画</h4><p>它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 <code>@Component</code> 元数据中。在添加动画之前，先引入一些与动画有关的函数</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Component,</span><br><span class="line">  Input,</span><br><span class="line">  trigger,</span><br><span class="line">  state,</span><br><span class="line">  style,</span><br><span class="line">  transition,</span><br><span class="line">  animate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="regexp">//</span>通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。</span><br><span class="line"><span class="keyword">import</span> &#123; Heroes &#125; <span class="keyword">from</span> <span class="string">'./hero.service'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  moduleId: <span class="built_in">module</span>.id,</span><br><span class="line">  selector: <span class="string">'hero-list-basic'</span>,</span><br><span class="line">  template: `</span><br><span class="line"><span class="javascript">    &lt;ul&gt;</span></span><br><span class="line"><span class="javascript">      &lt;li *ngFor=<span class="string">"let hero of heroes"</span></span></span><br><span class="line"><span class="javascript">          @heroState=<span class="string">"hero.state"</span></span></span><br><span class="line"><span class="javascript">          (click)=<span class="string">"hero.toggleState()"</span>&gt;</span></span><br><span class="line"><span class="javascript">        &#123;&#123;hero.name&#125;&#125;</span></span><br><span class="line"><span class="javascript">      &lt;<span class="regexp">/li&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;<span class="regexp">/ul&gt;</span></span></span><br><span class="line"><span class="javascript">  </span>`,</span><br><span class="line">  styleUrls: [<span class="string">'hero-list.component.css'</span>],</span><br><span class="line">  animations: [</span><br><span class="line">    trigger(<span class="string">'heroState'</span>, [</span><br><span class="line">      state(<span class="string">'inactive'</span>, style(&#123;</span><br><span class="line">        backgroundColor: <span class="string">'#eee'</span>,</span><br><span class="line">        transform: <span class="string">'scale(1)'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      state(<span class="string">'active'</span>,   style(&#123;</span><br><span class="line">        backgroundColor: <span class="string">'#cfd8dc'</span>,</span><br><span class="line">        transform: <span class="string">'scale(1.1)'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      transition(<span class="string">'inactive =&gt; active'</span>, animate(<span class="string">'100ms ease-in'</span>)),</span><br><span class="line">      transition(<span class="string">'active =&gt; inactive'</span>, animate(<span class="string">'100ms ease-out'</span>))</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListBasicComponent</span> &#123;</span></span><br><span class="line">  @Input() heroes: Heroes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之服务和http</title>
      <link href="2016/Angular2StudyServiceHttp/"/>
      <url>2016/Angular2StudyServiceHttp/</url>
      
        <content type="html"><![CDATA[<p>现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h3><h4 id="1-展现出来的效果"><a href="#1-展现出来的效果" class="headerlink" title="1. 展现出来的效果"></a>1. 展现出来的效果</h4><p><img src="https://image.xiaomo.info/banner/httpService.png"></p><h4 id="2-mysql的数据"><a href="#2-mysql的数据" class="headerlink" title="2. mysql的数据"></a>2. mysql的数据</h4><p><img src="https://image.xiaomo.info/angular/mysql.png"></p><h3 id="二、代码实例"><a href="#二、代码实例" class="headerlink" title="二、代码实例"></a>二、代码实例</h3><h4 id="1-服务-service"><a href="#1-服务-service" class="headerlink" title="1. 服务 service"></a>1. 服务 <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/service/UserService.ts" target="_blank" rel="noopener">service</a></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125;<span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">'./../api/Api'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">    data:<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> http:Http</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.http = http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    findAll():Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(api.findAll).map(<span class="function">(<span class="params">res:<span class="built_in">any</span></span>)=&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-组件-HttpService"><a href="#2-组件-HttpService" class="headerlink" title="2.组件 HttpService"></a>2.组件 <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts" target="_blank" rel="noopener">HttpService</a></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component,OnInit&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./../../service/UserService'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'http-service'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./HttpService.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./HttpService.html'</span>),</span><br><span class="line">    providers: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpServiceComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">    admins:<span class="built_in">Object</span>;</span><br><span class="line">    data:<span class="built_in">Object</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> userService:UserService</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ngOnInit():<span class="built_in">void</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService.findAll().subscribe(<span class="function">(<span class="params">data:<span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.admins = data.adminUsers.content;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'in component : '</span>,<span class="keyword">this</span>.admins);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' HttpServiceComponent ngOnInit :'</span>, <span class="string">'enter'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-模板-HttpService-html"><a href="#3-模板-HttpService-html" class="headerlink" title="3. 模板 HttpService.html"></a>3. 模板 <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html" target="_blank" rel="noopener">HttpService.html</a></h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of admins;let i = index"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;i+1&#125;&#125;</span><span class="xml">.</span><span class="template-variable">&#123;&#123;item.userName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之小技巧</title>
      <link href="2016/Angular2StudyNoteOther/"/>
      <url>2016/Angular2StudyNoteOther/</url>
      
        <content type="html"><![CDATA[<p>在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="1-组件"><a href="#1-组件" class="headerlink" title="1. 组件"></a>1. 组件</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Component(&#123;</span></span><br><span class="line"><span class="meta"> selector: <span class="meta-string">'reddit-article'</span>,</span></span><br><span class="line"><span class="meta"> inputs: [<span class="meta-string">'article'</span>],</span></span><br><span class="line"><span class="meta"> template:require(<span class="meta-string">'reddit-article.html'</span>)</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleComponent</span> </span>&#123;</span><br><span class="line"> article: Article;</span><br><span class="line"></span><br><span class="line"> voteUp(): boolean &#123;</span><br><span class="line"> <span class="keyword">this</span>.article.voteUp();</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteDown(): boolean &#123;</span><br><span class="line"> <span class="keyword">this</span>.article.voteDown();</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-模型"><a href="#2-模型" class="headerlink" title="2. 模型"></a>2. 模型</h4><p>类似javabean，可以把api封装在模型中</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Article &#123;</span><br><span class="line"> title: <span class="built_in">string</span>;</span><br><span class="line"> link: <span class="built_in">string</span>;</span><br><span class="line"> votes: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params">title: <span class="built_in">string</span>, link: <span class="built_in">string</span>, votes?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>.title = title;</span><br><span class="line"> <span class="keyword">this</span>.link = link;</span><br><span class="line"> <span class="keyword">this</span>.votes = votes || <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteUp(): <span class="built_in">void</span> &#123;</span><br><span class="line"> <span class="keyword">this</span>.votes += <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteDown(): <span class="built_in">void</span> &#123;</span><br><span class="line"> <span class="keyword">this</span>.votes -= <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> sortedArticles(): Article[] &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.articles.sort(<span class="function">(<span class="params">a: Article, b: Article</span>) =&gt;</span> b.votes - a.votes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用排序</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ui grid posts"</span>&gt;</span><br><span class="line"> &lt;reddit-article</span><br><span class="line"> *ngFor=<span class="string">"let article of sortedArticles()"</span></span><br><span class="line"> [article]=<span class="string">"article"</span>&gt;</span><br><span class="line"> &lt;<span class="regexp">/reddit-article&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>div</span><br></pre></td></tr></table></figure><h4 id="3-模板"><a href="#3-模板" class="headerlink" title="3.模板"></a>3.模板</h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four wide column center aligned votes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui statistic"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span><span class="template-variable">&#123;&#123; article.votes &#125;&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">writing your First Angular 2 Web Application</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> Points</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"twelve wide column"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"ui large header"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; article.link &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span><span class="template-variable">&#123;&#123; article.title &#125;&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ui big horizontal list voters"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> (<span class="attr">click</span>)=<span class="string">"voteUp()"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"arrow up icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml"> upvote</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> (<span class="attr">click</span>)=<span class="string">"voteDown()"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"arrow down icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml"> downvote</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="4-服务"><a href="#4-服务" class="headerlink" title="4. 服务"></a>4. 服务</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125;<span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">'./../api/Api'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> http:Http</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.http = http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    findAll():Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(api.findAll).map(<span class="function">(<span class="params">res:<span class="built_in">any</span></span>)=&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-管道"><a href="#5-管道" class="headerlink" title="5. 管道"></a>5. 管道</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; name: <span class="string">'trim'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TrimPipe</span> <span class="keyword">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  transform(value, args) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.trim();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、-防止页面刷新"><a href="#一、-防止页面刷新" class="headerlink" title="一、 防止页面刷新"></a>一、 防止页面刷新</h3><p>如果想阻止页面刷新,在方法的返回值为false。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">voteUp(): boolean &#123;</span><br><span class="line">  <span class="keyword">this</span>.article.votes += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">voteDown(): boolean &#123;</span><br><span class="line">  <span class="keyword">this</span>.article.votes -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、-不让ng进行解析"><a href="#二、-不让ng进行解析" class="headerlink" title="二、 不让ng进行解析"></a>二、 不让ng进行解析</h3><p><code>ngNonBindable</code></p><p>告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bordered"</span>&gt;</span></span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pre"</span> <span class="attr">ngNonBindable</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="symbol">&amp;larr;</span> This is what </span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"> rendered</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="三、-预处理"><a href="#三、-预处理" class="headerlink" title="三、 预处理"></a>三、 预处理</h3><p>在没有编译之前进行处理</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span>(&#123;</span><br><span class="line">  <span class="attribute">selector</span>: <span class="string">'hello'</span>,</span><br><span class="line"> <span class="attribute">host</span>: &#123;</span><br><span class="line"> <span class="attribute">class</span>: <span class="string">'row'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>具体表现为 <code>&lt;hello class=&quot;row&quot;&gt;</code></p><h3 id="四-组件传参"><a href="#四-组件传参" class="headerlink" title="四. 组件传参"></a>四. 组件传参</h3><h4 id="1-组件-1"><a href="#1-组件-1" class="headerlink" title="1. 组件"></a>1. 组件</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&#123;</span></span><br><span class="line"><span class="meta"> selector: <span class="meta-string">'reddit-article'</span>,</span></span><br><span class="line"><span class="meta"> inputs: [<span class="meta-string">'article'</span>],</span></span><br><span class="line"><span class="meta"> &#125;)</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ArticleComponent</span> </span>&#123;</span><br><span class="line"> article: Article;</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">reddit-article</span> [<span class="attr">article</span>]=<span class="string">"article1"</span>&gt;</span><span class="tag">&lt;/<span class="name">reddit-article</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在Component中得到</p><h3 id="五-输出-自定义事件"><a href="#五-输出-自定义事件" class="headerlink" title="五. 输出(自定义事件)"></a>五. 输出(自定义事件)</h3><p>在class中 定义一个 <code>@Output</code>(EventEmitter)然后在构造函数中实例化<br>在class中 定义一个 <code>@Intput</code> 输入</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> selector: <span class="string">'single-component'</span>,</span><br><span class="line">  inputs:[<span class="string">'titles'</span>]</span><br><span class="line"> outputs: [<span class="string">'putRingOnIt'</span>],</span><br><span class="line"> template: <span class="string">`</span></span><br><span class="line"><span class="string"> &lt;button (click)="liked()"&gt;Like it?&lt;/button&gt;</span></span><br><span class="line"><span class="string"> `</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 自定义一个事件</span></span><br><span class="line"> <span class="keyword">class</span> SingleComponent &#123;</span><br><span class="line"> putRingOnIt: EventEmitter&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>.putRingOnIt = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> liked(): <span class="built_in">void</span> &#123;</span><br><span class="line"> <span class="keyword">this</span>.putRingOnIt.emit(<span class="string">"oh oh oh"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>[] 输入 inputs  参数<br>() 输出 outputs 事件</p><h3 id="六、-打印日志"><a href="#六、-打印日志" class="headerlink" title="六、 打印日志"></a>六、 打印日志</h3><p>可以使用 <code>${value}</code>来替换参数</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">addArticle(<span class="string">title:</span> HTMLInputElement, <span class="string">link:</span> HTMLInputElement): <span class="keyword">void</span> &#123;</span><br><span class="line"> console.log(`Adding article <span class="string">title:</span> $&#123;title.value&#125; and <span class="string">link:</span> $&#123;link.value&#125;`\</span><br><span class="line"> );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="七、双向绑定"><a href="#七、双向绑定" class="headerlink" title="七、双向绑定"></a>七、双向绑定</h3><h4 id="1-模型到视图"><a href="#1-模型到视图" class="headerlink" title="1. 模型到视图"></a>1. 模型到视图</h4><p>[]  例如 [style.color]</p><h4 id="2-视图到模型"><a href="#2-视图到模型" class="headerlink" title="2. 视图到模型"></a>2. 视图到模型</h4><p>()  例如 (click)</p><h4 id="3-双向绑定"><a href="#3-双向绑定" class="headerlink" title="3. 双向绑定"></a>3. 双向绑定</h4><p>[()] 例如 [(ngModel)]</p>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之ng2标签</title>
      <link href="2016/Angular2StudyNoteNgTag/"/>
      <url>2016/Angular2StudyNoteNgTag/</url>
      
        <content type="html"><![CDATA[<p>angular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h3><p><img src="https://image.xiaomo.info/banner/ngTag.png"></p><h3 id="一、指令解读"><a href="#一、指令解读" class="headerlink" title="一、指令解读"></a>一、<a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag" target="_blank" rel="noopener">指令解读</a></h3><h4 id="0-组件"><a href="#0-组件" class="headerlink" title="0. 组件"></a>0. <a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts" target="_blank" rel="noopener">组件</a></h4><p>主要就是定义了一些数据用于测试</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'ng-tag'</span>,</span><br><span class="line">    styles: [<span class="built_in">require</span>(<span class="string">'./NgTag.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'NgTag.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NgTagComponent &#123;</span><br><span class="line">    list:<span class="built_in">any</span>;</span><br><span class="line">    ngSwitchList:<span class="built_in">any</span>;</span><br><span class="line">    ngStyleList:<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list = [&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaomo'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaogang'</span></span><br><span class="line"></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaomoxue'</span></span><br><span class="line">            &#125;];</span><br><span class="line">        <span class="keyword">this</span>.ngSwitchList=[</span><br><span class="line">            <span class="string">'xiaomo'</span>,</span><br><span class="line">            <span class="string">'xiaoming'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">this</span>.ngStyleList=&#123;</span><br><span class="line">            <span class="string">'color'</span>:<span class="string">'blue'</span>,</span><br><span class="line">            <span class="string">'backgroundColor'</span>:<span class="string">'green'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-ngFor"><a href="#1-ngFor" class="headerlink" title="1. ngFor"></a>1. <a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="noopener">ngFor</a></h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><span class="xquery">&#123;&#123;<span class="type">item</span><span class="built_in">.name</span>&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果图<br><img src="https://image.xiaomo.info/banner/ngFor.png"></p><h4 id="2-ngIf"><a href="#2-ngIf" class="headerlink" title="2. ngIf"></a>2. <a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="noopener">ngIf</a></h4><p>我在组件中定义了一个list</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">this.list</span> = [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaomo'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaogang'</span></span><br><span class="line"></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaomoxue'</span></span><br><span class="line">    &#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我在循环这个数组对象的时候去比对item.name 如果是 <code>xiaomo</code>,就 出现 ngIf中的内容</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngIf</span>=<span class="string">"item.name=='xiaomo'"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>哇,我在list列表中找到了 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果图<br><img src="https://image.xiaomo.info/banner/ngIf.png"></p><h4 id="3-ngSwitch"><a href="#3-ngSwitch" class="headerlink" title="3. ngSwitch"></a>3. <a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="noopener">ngSwitch</a></h4><p>我在组件中定义了一个方法，可以设置选中的值给myVal</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">myVal:number = <span class="number">0</span>;</span><br><span class="line">changeValue($<span class="keyword">event</span>):<span class="keyword">void</span>&#123;</span><br><span class="line">    console.log($<span class="keyword">event</span>.target.<span class="keyword">value</span>);<span class="comment">// 输出选中的值设给myVal</span></span><br><span class="line">    <span class="keyword">this</span>.myVal = $<span class="keyword">event</span>.target.<span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一组单选按钮，选中是<code>myVal</code>会改变，<code>ngSwitch</code>会去循环每个<code>case</code>,如果找到了就显示那条<code>case</code>中的数据，不然显示<code>default</code>中的数据</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ngSwitch<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"1"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>1</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"2"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>2</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"3"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>3</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"4"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>4</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"5"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>5</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> [<span class="attr">ngSwitch</span>]=<span class="string">"myVal"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'1'"</span>&gt;</span>ONE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'2'"</span>&gt;</span>TWO<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'3'"</span>&gt;</span>THREE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'4'"</span>&gt;</span>FOUR<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'5'"</span>&gt;</span>FIVE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>other<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图<br><img src="https://image.xiaomo.info/banner/NgSwitch.gif"></p><h4 id="4-ngStyle"><a href="#4-ngStyle" class="headerlink" title="4. ngStyle"></a>4. <a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="noopener">ngStyle</a></h4><p>这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是<code>ngClass</code></p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"</span></span></span><span class="template-variable">&#123;'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> [<span class="attr">style.font-size</span>]=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      背景 :</span><span class="template-variable">&#123;&#123;ngStyleList.backgroundColor&#125;</span><span class="xml">&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      字体颜色: </span><span class="template-variable">&#123;&#123;ngStyleList.color&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果图<br><img src="https://image.xiaomo.info/banner/ngStyle.png"></p><h4 id="5-ngClass"><a href="#5-ngClass" class="headerlink" title="5. ngClass"></a>5. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="noopener">ngClass</a></h4><p>左边是class名[要用<code>''</code>包起来]，右边是一个true|false表达式或者是一个方法</p><p>在组件中定义了一个fn() 返回封装好的样式</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.ngStyleList=&#123;</span><br><span class="line">     <span class="string">'color'</span>:<span class="string">'blue'</span>,</span><br><span class="line">     <span class="string">'backgroundColor'</span>:<span class="string">'green'</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">    classes:any=&#123;&#125;;</span><br><span class="line">    fn():any &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.classes =  &#123;</span><br><span class="line">            <span class="string">'btn-primary'</span>:<span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> [<span class="attr">ngClass</span>]=<span class="string">"</span></span></span><span class="template-variable">&#123;'btn-danger': ngStyleList&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> [<span class="attr">ngClass</span>]=<span class="string">"fn()"</span>&gt;</span>fn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果图<br><img src="https://image.xiaomo.info/banner/ngClass.png"></p>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之事件和多组件</title>
      <link href="2016/Angular2StudyNoteEvent/"/>
      <url>2016/Angular2StudyNoteEvent/</url>
      
        <content type="html"><![CDATA[<p>组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="一、-点击事件"><a href="#一、-点击事件" class="headerlink" title="一、 点击事件"></a>一、 点击事件</h3><p><img src="https://image.xiaomo.info/banner/ClickEvent.gif"></p><p><a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/clickEvent" target="_blank" rel="noopener">代码解读</a></p><h4 id="1-ClickEvent-ts"><a href="#1-ClickEvent-ts" class="headerlink" title="1. ClickEvent.ts"></a>1. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts" target="_blank" rel="noopener">ClickEvent.ts</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BasicComponent&#125; <span class="keyword">from</span> <span class="string">'./../basic/Basic'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector:<span class="string">'click-event'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./ClickEvent.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./ClickEvent.html'</span>),</span><br><span class="line">    directives:[BasicComponent] <span class="comment">//需要引用的组件</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickEventComponent</span></span>&#123;</span><br><span class="line">    showMsg():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'己经触发点击事件'</span>);</span><br><span class="line">        alert(<span class="string">'己经触发点击事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ClickEvent-html"><a href="#2-ClickEvent-html" class="headerlink" title="2. ClickEvent.html"></a>2. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html" target="_blank" rel="noopener">ClickEvent.html</a></h4><p>basic 就是引用的另一个组件,这个组件源自于上一篇博客<a href="https://xiaomo.info/2016/06/22/angular2_study_note_component/" target="_blank" rel="noopener">基本组件</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">basic</span>&gt;</span><span class="tag">&lt;/<span class="name">basic</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> (<span class="attr">click</span>)=<span class="string">"showMsg()"</span>&gt;</span>点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、键盘按下事件"><a href="#二、键盘按下事件" class="headerlink" title="二、键盘按下事件"></a>二、键盘按下事件</h3><p><img src="https://image.xiaomo.info/banner/ClickEvent.gif"></p><h4 id="1-KeyupEvent-ts"><a href="#1-KeyupEvent-ts" class="headerlink" title="1. KeyupEvent.ts"></a>1. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts" target="_blank" rel="noopener">KeyupEvent.ts</a></h4><p>初始化一个<code>values</code>为空字符串，然后当用户按下键盘的时候把值拼给<code>values</code>，并且以<code>|</code>隔开</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector:<span class="string">'keyup-event'</span>,</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./KeyupEvent.html'</span>),</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./KeyupEvent.scss'</span>)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyupEventComponent &#123;</span><br><span class="line">    values:<span class="built_in">string</span> = <span class="string">''</span>;</span><br><span class="line">    onKey(value:<span class="built_in">any</span>):<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.values += value + <span class="string">' | '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-KeyupEvent-html"><a href="#2-KeyupEvent-html" class="headerlink" title="2. KeyupEvent.html"></a>2. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html" target="_blank" rel="noopener">KeyupEvent.html</a></h4><p>当键盘按下的时候调用<code>onKey</code>方法</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> #<span class="attr">box</span> (<span class="attr">keyup</span>)=<span class="string">"onKey(box.value)"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;values&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="三、-enter事件和失焦事件"><a href="#三、-enter事件和失焦事件" class="headerlink" title="三、 enter事件和失焦事件"></a>三、 enter事件和失焦事件</h3><p><img src="https://image.xiaomo.info/banner/ClickEvent.gif"></p><h4 id="1-EnterBlurEvent-ts"><a href="#1-EnterBlurEvent-ts" class="headerlink" title="1. EnterBlurEvent.ts"></a>1. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts" target="_blank" rel="noopener">EnterBlurEvent.ts</a></h4><p>定义一个<code>heroes</code>数组并给几个初始值，添加英雄方法可以增加一个新的英雄到<code>heroes</code>中</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector:<span class="string">'enter-blur-event'</span>,</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./EnterBlurEvent.html'</span>),</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./EnterBlurEvent.scss'</span>)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EnterBlurEventComponent</span> &#123;</span></span><br><span class="line">    heroes = [<span class="string">'Windstorm'</span>, <span class="string">'Bombasto'</span>, <span class="string">'Magneta'</span>, <span class="string">'Tornado'</span>];</span><br><span class="line">    addHero(newHero: string) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newHero) &#123;</span><br><span class="line">            <span class="keyword">this</span>.heroes.push(newHero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-EnterBlurEvent-html"><a href="#2-EnterBlurEvent-html" class="headerlink" title="2. EnterBlurEvent.html"></a>2. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html" target="_blank" rel="noopener">EnterBlurEvent.html</a></h4><p>当用户按<code>enter</code>或者<code>Add</code>或者<code>blur</code>失去焦点且不为空的时候调用<code>newHero</code>方法，然后循环输出<code>heroes</code></p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">newHero</span></span></span></span><br><span class="line"><span class="xml">       (keyup.enter)="addHero(newHero.value)"</span></span><br><span class="line"><span class="xml">       (blur)="addHero(newHero.value); newHero.value='' "&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">addHero(newHero.value)</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span></span><span class="template-variable">&#123;&#123;hero&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular2学习笔记之基本组件和ngFor</title>
      <link href="2016/Angular2StudyNoteComponent/"/>
      <url>2016/Angular2StudyNoteComponent/</url>
      
        <content type="html"><![CDATA[<p>angular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。<a href="https://github.com/houko/angular2-demo" target="_blank" rel="noopener">angular2-demo</a></p><a id="more"></a><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h4><p><img src="https://image.xiaomo.info/angular/jiegou.png"></p><ul><li><code>.ts</code>   组件代码</li><li><code>.scss</code>   样式</li><li><code>.png</code>   效果图</li><li><code>.html</code>   模板文件</li></ul><h3 id="2-效果图"><a href="#2-效果图" class="headerlink" title="2. 效果图"></a>2. 效果图</h3><p><img src="https://image.xiaomo.info/banner/Basic.png"></p><h3 id="二、代码实例"><a href="#二、代码实例" class="headerlink" title="二、代码实例"></a>二、代码实例</h3><p><a href="https://github.com/houko/angular2-demo/tree/master/src/ts/component/basic" target="_blank" rel="noopener">https://github.com/houko/angular2-demo/tree/master/src/ts/component/basic</a></p><h3 id="三、-详细解读"><a href="#三、-详细解读" class="headerlink" title="三、 详细解读"></a>三、 详细解读</h3><h4 id="1-Basic-ts"><a href="#1-Basic-ts" class="headerlink" title="1. Basic.ts"></a>1. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/basic/Basic.ts" target="_blank" rel="noopener">Basic.ts</a></h4><p>一个基本的组件就长个样子，并没有那么神秘</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;UserModel&#125; <span class="keyword">from</span> <span class="string">'./../../model/UserModel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模拟数据</span></span><br><span class="line"><span class="keyword">let</span> xiaomo:UserModel = <span class="keyword">new</span> UserModel( <span class="string">'xiaomo'</span>);</span><br><span class="line"><span class="keyword">let</span> xiaoming:UserModel = <span class="keyword">new</span> UserModel(<span class="string">'xiaoming'</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'basic'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./Basic.scss'</span>)], <span class="comment">//内联样式,注意使用row-loader</span></span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./Basic.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BasicComponent &#123;</span><br><span class="line"></span><br><span class="line">    users:<span class="built_in">Object</span>;</span><br><span class="line">    <span class="comment">// 在构造函数中赋值</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.users= [ xiaomo,xiaoming];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-UserModel-ts"><a href="#2-UserModel-ts" class="headerlink" title="2. UserModel.ts"></a>2. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/model/UserModel.ts" target="_blank" rel="noopener">UserModel.ts</a></h4><p>这里使用了uuid来创建一个随机的id作为唯一标识符<br>使用 <code>public</code> 可以不用再 <code>this.name = name</code></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; uuid &#125; <span class="keyword">from</span> <span class="string">'./../util/uuid'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModel&#123;</span><br><span class="line">    id :<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = uuid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Basic-html"><a href="#3-Basic-html" class="headerlink" title="3. Basic.html"></a>3. <a href="https://github.com/houko/angular2-demo/blob/master/src/ts/component/basic/Basic.html" target="_blank" rel="noopener">Basic.html</a></h4><p>使用ngFor 循环,index可以取到索引值(从0开始)</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of users; let i = index"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;i+1&#125;&#125;</span><span class="xml"> Hello </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> angular2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> sass </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个国内专用的公共 DNS</title>
      <link href="2016/PublicDns/"/>
      <url>2016/PublicDns/</url>
      
        <content type="html"><![CDATA[<p>　　之前 <a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">有个网站</a> 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。</p><a id="more"></a><h3 id="DNS-简介"><a href="#DNS-简介" class="headerlink" title="DNS 简介"></a>DNS 简介</h3><p>DNS 全称 <code>Domain Name System</code>，中文译为 <code>域名系统</code>，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。</p><h3 id="114DNS"><a href="#114DNS" class="headerlink" title="114DNS"></a>114DNS</h3><pre><code>114.114.114.114114.114.115.115</code></pre><p><strong>官　网</strong>：<a href="http://www.114dns.com/" target="_blank" rel="noopener">http://www.114dns.com/</a><br><strong>关键词</strong>：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒</p><h3 id="阿里公共DNS"><a href="#阿里公共DNS" class="headerlink" title="阿里公共DNS"></a>阿里公共DNS</h3><pre><code>223.5.5.5223.6.6.6</code></pre><p><strong>官　网</strong>：<a href="http://www.alidns.com/" target="_blank" rel="noopener">http://www.alidns.com/</a><br><strong>关键词</strong>：快速，稳定，智能</p><h3 id="腾讯-Public-DNS"><a href="#腾讯-Public-DNS" class="headerlink" title="腾讯 Public DNS +"></a>腾讯 Public DNS +</h3><pre><code>119.29.29.29</code></pre><p><strong>官　网</strong>：<a href="https://www.dnspod.cn/Products/Public.DNS" target="_blank" rel="noopener">https://www.dnspod.cn/Products/Public.DNS</a><br><strong>关键词</strong>：快速，准确，稳定</p><h2 id="百度公共DNS"><a href="#百度公共DNS" class="headerlink" title="百度公共DNS"></a>百度公共DNS</h2><pre><code>180.76.76.76</code></pre><p><strong>官　网</strong>：<a href="http://dudns.baidu.com/intro/publicdns/" target="_blank" rel="noopener">http://dudns.baidu.com/intro/publicdns/</a><br><strong>关键词</strong>：云防护，无劫持，更精确</p><h3 id="oneDNS"><a href="#oneDNS" class="headerlink" title="oneDNS"></a>oneDNS</h3><pre><code>南方首选：112.124.47.27北方首选：114.215.126.16</code></pre><p><strong>官　网</strong>：<a href="http://www.onedns.net/" target="_blank" rel="noopener">http://www.onedns.net/</a><br><strong>关键词</strong>：安全，快速，恶意网站拦截，广告过滤，上网加速</p><h3 id="CNNIC-SDNS"><a href="#CNNIC-SDNS" class="headerlink" title="CNNIC SDNS"></a>CNNIC SDNS</h3><pre><code>1.2.4.8210.2.4.8</code></pre><p><strong>官　网：</strong><a href="http://public.sdns.cn/" target="_blank" rel="noopener">http://public.sdns.cn/</a><br><strong>关键词：</strong>权威，安全，智能，高速</p><h3 id="DNS-选用"><a href="#DNS-选用" class="headerlink" title="DNS 选用"></a>DNS 选用</h3><h4 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h4><ul><li>可以通过 <a href="http://www.webkaka.com/dns/" target="_blank" rel="noopener">在线小工具</a> 测试一下 DNS 的解析速度，结果可以作为参考<br><img src="https://image.xiaomo.info/dns/dns-tool.png" alt="DNS Tool"></li></ul><h4 id="本地优选"><a href="#本地优选" class="headerlink" title="本地优选"></a>本地优选</h4><ul><li>下载 <a href="http://www.crsky.com/soft/88043.html" target="_blank" rel="noopener">魔方DNS助手</a>，可以方便地检测，选择和修改 DNS</li></ul><p><img src="https://image.xiaomo.info/dns/dnshelper.png" alt="DNS Helper"></p><blockquote><p>如果更换 DNS 后网络异常，可以尝试 <a href="http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html" target="_blank" rel="noopener">刷新本地的DNS缓存</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux权限详细解读</title>
      <link href="2016/LinuxChmod/"/>
      <url>2016/LinuxChmod/</url>
      
        <content type="html"><![CDATA[<p>话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。</p><a id="more"></a><h3 id="一、理论说明"><a href="#一、理论说明" class="headerlink" title="一、理论说明"></a>一、理论说明</h3><p>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p><h4 id="1-权限说明"><a href="#1-权限说明" class="headerlink" title="1. 权限说明"></a>1. 权限说明</h4><p>文件或目录的访问权限分为只读，只写和可执行三种。<br>以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。<br>可执行权限表示允许将该文件作为一个程序执行。<br>文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。<br>用户也可根据需要把访问权限设置为需要的任何组合。</p><h4 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2. 用户组"></a>2. 用户组</h4><p>有三种不同类型的用户可对文件或目录进行访问：</p><ul><li>文件所有者，</li><li>同组用户</li><li>其他用户<br>所有者一般是文件的创建者。</li></ul><p>所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。<br>在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p><h4 id="3-文件权限"><a href="#3-文件权限" class="headerlink" title="3. 文件权限"></a>3. 文件权限</h4><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为</p><ul><li>文件属主的读、写和执行权限；</li><li>与属主同组的用户的读、写和执行权限；</li><li>系统中其他用户的读、写和执行权限。<br>当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。</li></ul><h4 id="4-实例分析"><a href="#4-实例分析" class="headerlink" title="4.实例分析"></a>4.实例分析</h4><p>随意查看一个目录： <code>ll</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">9</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">17</span> <span class="number">10</span><span class="string">:18</span> <span class="string">.</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">8</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">09</span><span class="string">:08</span> <span class="string">..</span></span><br><span class="line"><span class="string">-rw-r--r--</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">1771</span> <span class="string">Jun</span> <span class="number">16</span> <span class="number">23</span><span class="string">:22</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">-rw-r--r--</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span> <span class="number">1201148</span> <span class="string">Jun</span> <span class="number">17</span> <span class="number">10</span><span class="string">:18</span> <span class="string">db.json</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">8</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">17</span> <span class="number">10</span><span class="string">:31</span> <span class="string">.git</span></span><br><span class="line"><span class="string">-rw-r--r--</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span>      <span class="number">55</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">09</span><span class="string">:09</span> <span class="string">.gitignore</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">2</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">09</span><span class="string">:09</span> <span class="string">.idea</span></span><br><span class="line"><span class="string">drwxr-xr-x</span> <span class="number">411</span> <span class="string">root</span> <span class="string">root</span>   <span class="number">16384</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">09</span><span class="string">:12</span> <span class="string">node_modules</span></span><br><span class="line"><span class="string">-rw-r--r--</span>   <span class="number">1</span> <span class="string">root</span> <span class="string">root</span>     <span class="number">861</span> <span class="string">Jun</span> <span class="number">16</span> <span class="number">10</span><span class="string">:55</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>  <span class="number">13</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">17</span> <span class="number">10</span><span class="string">:18</span> <span class="string">public</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">2</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">09</span><span class="string">:09</span> <span class="string">scaffolds</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">7</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">12</span><span class="string">:51</span> <span class="string">source</span></span><br><span class="line"><span class="string">drwxr-xr-x</span>   <span class="number">6</span> <span class="string">root</span> <span class="string">root</span>    <span class="number">4096</span> <span class="string">Jun</span> <span class="number">15</span> <span class="number">12</span><span class="string">:51</span> <span class="string">themes</span></span><br></pre></td></tr></table></figure><p>解读：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">注意这里共有<span class="number">10</span>个位置,<span class="number">10</span>个位置又可以分为<span class="number">4</span>个部分。</span><br><span class="line">四个部分分别为 <span class="number">1.</span>类型 <span class="number">2.</span>属主权限 <span class="number">2.</span>同组用户权限 <span class="number">3</span> 其他用户权限</span><br><span class="line">第一个字符指定了文件类型。</span><br><span class="line">r代表只读，w代表写，x代表可执行，横线代表空。</span><br><span class="line">在通常意义上，一个目录也是一个文件。</span><br><span class="line">如果第一个字符是横线，表示是一个非目录的文件。</span><br><span class="line">如果是d，表示是一个目录。</span><br></pre></td></tr></table></figure><p>单个实例</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span>--<span class="comment">r</span>--</span><br></pre></td></tr></table></figure><p>详细解读(如果没有看懂建议回头看看理论说明1-3)</p><p><img src="https://image.xiaomo.info/linux/chmod.png"></p><h3 id="二、命令使用说明"><a href="#二、命令使用说明" class="headerlink" title="二、命令使用说明"></a>二、命令使用说明</h3><h4 id="1-格式-参数设定"><a href="#1-格式-参数设定" class="headerlink" title="1.格式(参数设定)"></a>1.格式(参数设定)</h4><p><code>chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼</code></p><p>命令解读：</p><p>操作对象who可是下述字母中的任一个或者它们的组合：</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">　　u 表示“用户（<span class="keyword">user</span>）”，即文件或目录的所有者。</span><br><span class="line"></span><br><span class="line">　　g 表示“同组（<span class="keyword">group</span>）用户”，即与文件属主有相同组ID的所有用户。</span><br><span class="line"></span><br><span class="line">　　o 表示“其他（others）用户”。</span><br><span class="line"></span><br><span class="line">　　a 表示“所有（<span class="literal">all</span>）用户”。它是系统默认值。</span><br></pre></td></tr></table></figure><p>　　操作符号可以是：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">　　+ </span>添加某个权限。</span><br><span class="line"></span><br><span class="line"><span class="bullet">　　- </span>取消某个权限。</span><br><span class="line"></span><br><span class="line">　　= 赋予给定权限并取消其他所有权限（如果有的话）。</span><br></pre></td></tr></table></figure><p>　　设置mode所表示的权限可用下述字母的任意组合：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">　　r 可读。</span><br><span class="line"></span><br><span class="line">　　w 可写。</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">x</span> 可执行。</span><br><span class="line"></span><br><span class="line">　　X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加<span class="keyword">x</span> 属性。</span><br><span class="line"></span><br><span class="line">　　s 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。</span><br><span class="line"></span><br><span class="line">　　t 保存程序的文本到交换设备上。</span><br><span class="line"></span><br><span class="line">　　u 与文件属主拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　g 与和文件属主同组的用户拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　o 与其他用户拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　文件名：以空格分开的要改变权限的文件列表，支持通配符。</span><br><span class="line"></span><br><span class="line">　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+r，o+r example</span><br><span class="line"></span><br><span class="line">　　使同组和其他用户对文件example 有读权限。</span><br></pre></td></tr></table></figure><h4 id="2-权限设置-数字"><a href="#2-权限设置-数字" class="headerlink" title="2.权限设置(数字)"></a>2.权限设置(数字)</h4><p>我们必须首先了解用数字表示的属性的含义：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>表示没有权限，</span><br><span class="line"><span class="number">1</span>表示可执行权限，</span><br><span class="line"><span class="number">2</span>表示可写权限，</span><br><span class="line"><span class="number">4</span>表示可读权限，</span><br><span class="line">然后将其相加。所</span><br><span class="line">以数字属性的格式应为<span class="number">3</span>个从<span class="number">0</span>到<span class="number">7</span>的八进制数，</span><br><span class="line">其顺序是（u）（g）（o）。</span><br></pre></td></tr></table></figure><h3 id="三、其他命令"><a href="#三、其他命令" class="headerlink" title="三、其他命令"></a>三、其他命令</h3><h4 id="1-chgrp命令"><a href="#1-chgrp命令" class="headerlink" title="1. 　chgrp命令"></a>1. <code>　chgrp</code>命令</h4><p>功能：改变文件或目录所属的组。</p><p>语法：<code>chgrp ［选项］ group filename¼</code></p><p>该命令改变指定指定文件所属的用户组。其中<code>group</code>可以是用户组ID，也可以是<code>/etc/group</code>文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</p><p>该命令的各选项含义为：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>R 递归式地改变指定目录及其下的所有子目录和文件的属组。</span><br></pre></td></tr></table></figure><p>　　例1：<code>$ chgrp - R book /opt/local /book</code></p><p>　　改变``/opt/local<code> </code>/book/<code>及其子目录下的所有文件的属组为</code>book`。</p><h4 id="2-chown命令"><a href="#2-chown命令" class="headerlink" title="2. chown命令"></a>2. <code>chown</code>命令</h4><p>　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。</p><p>　　语法：<code>chown ［选项］ 用户或组 文件</code></p><p>　　说明：<code>chown</code>将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。</p><p>　　该命令的各选项含义如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">　　- </span>R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。</span><br><span class="line"><span class="bullet">　　- </span>v 显示chown命令所做的工作。</span><br></pre></td></tr></table></figure><p>　　例1：把文件<code>shiyan.c</code>的所有者改为<code>wang</code>。</p><p>　　$ <code>chown wang shiyan.c</code></p><p>　　例2：把目录/his及其下的所有文件和子目录的属主改成<code>wang</code>，属组改成<code>users</code>。</p><p>　　$ <code>chown - R wang.users /his</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器磁盘挂载</title>
      <link href="2016/LinuxDisk/"/>
      <url>2016/LinuxDisk/</url>
      
        <content type="html"><![CDATA[<p>起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！</p><a id="more"></a><h2 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h2><p>参考自阿里云服务器使用心得。</p><p>云服务器环境：CentOS 6.2 64位</p><p>客户端环境：Mac OSX</p><p>远程连接方式：运行 Terminal，输入命令 ssh username@ip</p><h3 id="二、硬盘分区及挂载操作步骤"><a href="#二、硬盘分区及挂载操作步骤" class="headerlink" title="二、硬盘分区及挂载操作步骤"></a>二、硬盘分区及挂载操作步骤</h3><h4 id="1-查看未挂载的硬盘"><a href="#1-查看未挂载的硬盘" class="headerlink" title="1. 查看未挂载的硬盘"></a>1. 查看未挂载的硬盘</h4><p>（名称为/dev/xvdb）<br><code>fdisk -l</code><br>输出<br><code>Disk /dev/xvdb doesn&#39;t contain a valid partition table</code></p><h4 id="2-创建分区"><a href="#2-创建分区" class="headerlink" title="2. 创建分区"></a>2. 创建分区</h4><p><code>fdisk /dev/xvdb</code></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">输入n</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help):n</span><br><span class="line"></span><br><span class="line">输入p</span><br><span class="line"></span><br><span class="line">Command action</span><br><span class="line">e extended</span><br><span class="line">p primary partition (1-4)</span><br><span class="line">p</span><br><span class="line"></span><br><span class="line">输入1</span><br><span class="line"></span><br><span class="line">Partition number (1-4): 1</span><br><span class="line"></span><br><span class="line">回车</span><br><span class="line"></span><br><span class="line">First cylinder (1-2610,<span class="built_in"> default </span>1):</span><br><span class="line">Using<span class="built_in"> default </span>value 1</span><br><span class="line"></span><br><span class="line">回车</span><br><span class="line"></span><br><span class="line">Last cylinder, +cylinders <span class="keyword">or</span> +size&#123;K,M,G&#125; (1-2610,<span class="built_in"> default </span>2610):</span><br><span class="line">Using<span class="built_in"> default </span>value 2610</span><br><span class="line"></span><br><span class="line">输入w</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): w</span><br><span class="line">The partition table has been altered!</span><br></pre></td></tr></table></figure><h4 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h4><p> 执行命令： <code>mkfs.ext3 /dev/xvdb1</code></p><h4 id="4-建立挂载目录"><a href="#4-建立挂载目录" class="headerlink" title="4. 建立挂载目录"></a>4. 建立挂载目录</h4><p>执行命令： <code>mkdir /data</code>  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖</p><h4 id="5-挂载分区"><a href="#5-挂载分区" class="headerlink" title="5. 挂载分区"></a>5. 挂载分区</h4><p>将磁盘挂载到刚建立的<code>data</code>目录中   <code>mount /dev/xvdb1 /data</code></p><h4 id="6-设置开机自动挂载"><a href="#6-设置开机自动挂载" class="headerlink" title="6. 设置开机自动挂载"></a>6. 设置开机自动挂载</h4><p><code>vi /etc/fstab</code></p><p>在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">/dev/xvdb1              /<span class="class"><span class="keyword">data</span>                   ext3    defaults        0 0</span></span><br></pre></td></tr></table></figure><h4 id="7-确认是否挂载成功"><a href="#7-确认是否挂载成功" class="headerlink" title="7. 确认是否挂载成功"></a>7. 确认是否挂载成功</h4><p>重启服务器: <code>reboot</code><br>查看硬盘分区: <code>df</code></p><p>反馈信息</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/dev/xvdb1            <span class="number">20635700</span>    <span class="number">176196</span>  <span class="number">19411268</span>   <span class="number">1</span>% /data</span><br></pre></td></tr></table></figure><p>搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！</p><h3 id="四、-原文地址"><a href="#四、-原文地址" class="headerlink" title="四、 原文地址"></a>四、 原文地址</h3><p><a href="http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html" target="_blank" rel="noopener">aliyun-linux-fdisk</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 表格样式调整与自适应优化</title>
      <link href="2016/MarkdownTableStyle/"/>
      <url>2016/MarkdownTableStyle/</url>
      
        <content type="html"><![CDATA[<p>　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。</p><a id="more"></a><p data-height="300" data-theme-id="0" data-slug-hash="ONyKqb" data-default-tab="css" data-user="MOxFIVE" class="codepen">See the Pen <a href="http://codepen.io/MOxFIVE/pen/ONyKqb/" 　rel="external nofollow" target="_blank" rel="noopener">Table style</a> by MOxFIVE (<a href="http://codepen.io/MOxFIVE" 　rel="external nofollow" target="_blank" rel="noopener">@MOxFIVE</a>) on <a href="http://codepen.io" 　rel="external nofollow" target="_blank" rel="noopener">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><h3 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><pre><code>&lt;table&gt;: 表格&lt;thead&gt;: table header 表头区&lt;th&gt;: table headings 表头单元格内容&lt;tbody&gt;: table body 表格内容区&lt;tr&gt;: table row 表行&lt;td&gt;: table data 单元格内容</code></pre><h4 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*表格宽度*/</span></span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">65em</span>; <span class="comment">/*表格最大宽度，避免表格过宽*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*表格外边框设置*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto; <span class="comment">/*外边距*/</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/*使用单一线条的边框*/</span></span><br><span class="line">    <span class="attribute">empty-cells</span>: show; <span class="comment">/*单元格无内容依旧绘制边框*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>; <span class="comment">/*统一每一行的默认高度*/</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*内部边框样式*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="comment">/*内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表头样式"><a href="#表头样式" class="headerlink" title="表头样式"></a>表头样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold; <span class="comment">/*加粗*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>; <span class="comment">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>,<span class="number">188</span>,<span class="number">226</span>,<span class="number">0.2</span>); <span class="comment">/*背景色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隔行变色"><a href="#隔行变色" class="headerlink" title="隔行变色"></a>隔行变色</h4><ul><li>使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 <code>&lt;tbody&gt;</code> 包裹内容，那下面就相当于从表格第二行开始计数</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>,<span class="number">188</span>,<span class="number">226</span>,<span class="number">0.12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="悬浮变色"><a href="#悬浮变色" class="headerlink" title="悬浮变色"></a>悬浮变色</h4><ul><li>鼠标悬浮时该行改变背景色</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自适应优化"><a href="#自适应优化" class="headerlink" title="自适应优化"></a>自适应优化</h3><p>表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。</p><h4 id="表头不换行"><a href="#表头不换行" class="headerlink" title="表头不换行"></a>表头不换行</h4><ul><li>设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/*表头内容强制在一行显示*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="首列不换行"><a href="#首列不换行" class="headerlink" title="首列不换行"></a>首列不换行</h4><ul><li>表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表格滚动条"><a href="#表格滚动条" class="headerlink" title="表格滚动条"></a>表格滚动条</h4><ul><li>添加 JavaScript 代码，用一个 <code>&lt;div&gt;</code> 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'table'</span>)).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    wrapper.className = <span class="string">'table-area'</span>;</span><br><span class="line">    el.parentNode.insertBefore(wrapper, el);</span><br><span class="line">    el.parentNode.removeChild(el);</span><br><span class="line">    wrapper.appendChild(el);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>jQuery</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"table"</span>).wrap(<span class="string">"&lt;div class='table-area'&gt;&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure><ul><li>同时添加如下 CSS</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table-area</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>To be added</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> css </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp构建工具的使用</title>
      <link href="2016/GulpUse/"/>
      <url>2016/GulpUse/</url>
      
        <content type="html"><![CDATA[<p>先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍…。</p><a id="more"></a><h3 id="一、简介-增强和使你的工作自动化"><a href="#一、简介-增强和使你的工作自动化" class="headerlink" title="一、简介(增强和使你的工作自动化)"></a>一、简介(增强和使你的工作自动化)</h3><h4 id="1-使用简单"><a href="#1-使用简单" class="headerlink" title="1. 使用简单"></a>1. 使用简单</h4><p>没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  </p><h4 id="2-高效"><a href="#2-高效" class="headerlink" title="2. 高效"></a>2. 高效</h4><p>利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  </p><h4 id="3-高质量"><a href="#3-高质量" class="headerlink" title="3. 高质量"></a>3. 高质量</h4><p>gulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p><h4 id="4-易学"><a href="#4-易学" class="headerlink" title="4. 易学"></a>4. 易学</h4><p>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p><h3 id="二、gulp相关api"><a href="#二、gulp相关api" class="headerlink" title="二、gulp相关api"></a>二、gulp相关api</h3><h4 id="1-gulp-src-来源"><a href="#1-gulp-src-来源" class="headerlink" title="1. gulp.src: 来源"></a>1. <code>gulp.src</code>: 来源</h4><h4 id="2-gulp-dest-目标"><a href="#2-gulp-dest-目标" class="headerlink" title="2. gulp.dest: 目标"></a>2. <code>gulp.dest</code>: 目标</h4><h4 id="3-gulp-pipe-管道"><a href="#3-gulp-pipe-管道" class="headerlink" title="3. gulp.pipe: 管道"></a>3. <code>gulp.pipe</code>: 管道</h4><h4 id="4-gulp-watch-热加载"><a href="#4-gulp-watch-热加载" class="headerlink" title="4. gulp.watch: 热加载"></a>4. <code>gulp.watch</code>: 热加载</h4><h4 id="5-gulp-task-任务"><a href="#5-gulp-task-任务" class="headerlink" title="5. gulp.task: 任务"></a>5. <code>gulp.task</code>: 任务</h4><h4 id="6-gulp-task-‘default’"><a href="#6-gulp-task-‘default’" class="headerlink" title="6. gulp.task(‘default’)"></a>6. <code>gulp.task</code>(‘default’)</h4><p> 默认任务,必须存在</p><h3 id="三、使用-工作流程"><a href="#三、使用-工作流程" class="headerlink" title="三、使用(工作流程)"></a>三、使用(工作流程)</h3><h4 id="1-全局安装gulp"><a href="#1-全局安装gulp" class="headerlink" title="1. 全局安装gulp"></a>1. 全局安装gulp</h4><p><code>npm install -g gulp</code>  </p><h4 id="2-建立项目"><a href="#2-建立项目" class="headerlink" title="2. 建立项目"></a>2. 建立项目</h4><p><code>mkdir gulp-test &amp;&amp; cd gulp-test</code></p><h4 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3. 初始化项目"></a>3. 初始化项目</h4><p><code>npm init -y</code>  (会生成package.json)   </p><h4 id="4-安装项目依赖"><a href="#4-安装项目依赖" class="headerlink" title="4. 安装项目依赖"></a>4. 安装项目依赖</h4><p><code>npm install --save-dev gulp</code><br>5. 创建配置文件<br><code>touch gulpfile.js</code></p><h4 id="6-gulp常用的功能"><a href="#6-gulp常用的功能" class="headerlink" title="6. gulp常用的功能"></a>6. gulp常用的功能</h4><p>转码（<code>gulp-babel</code> <code>babel-preset-es2015</code> <code>gulp-sass</code> <code>gulp-less</code> <code>gulp-react</code>）、合并（<code>gulp-concat</code>）、压缩（<code>gulp-uglify</code>）、模块化（<code>gulp-browserify</code>）、测试（gulp-jasmine），请依次安装这些依赖。</p><h4 id="7-小常识"><a href="#7-小常识" class="headerlink" title="7. 小常识"></a>7. 小常识</h4><p>因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用<code>cnpm</code>或者设置镜像源<code>npm config set registry https://registry.npm.taobao.org </code></p><h4 id="8-写配置"><a href="#8-写配置" class="headerlink" title="8. 写配置"></a>8. 写配置</h4><p>（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> react = <span class="built_in">require</span>(<span class="string">"gulp-react"</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">"gulp-sass"</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">"gulp-less"</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"><span class="keyword">var</span> jasmine = <span class="built_in">require</span>(<span class="string">"gulp-jasmine"</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量</span></span><br><span class="line"><span class="keyword">const</span> transformJs = <span class="string">"transformJs"</span>;</span><br><span class="line"><span class="keyword">const</span> transformSass = <span class="string">"transformSass"</span>;</span><br><span class="line"><span class="keyword">const</span> transformLess = <span class="string">"transformLess"</span>;</span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line">gulp.task(transformJs, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/*.js"</span>)</span><br><span class="line">        .pipe(react())</span><br><span class="line">        .pipe(babel(</span><br><span class="line">            &#123;</span><br><span class="line">                presets: [<span class="string">"babel-preset-es2015"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ))</span><br><span class="line">        .pipe(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// scss</span></span><br><span class="line">gulp.task(transformSass, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.scss"</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// less</span></span><br><span class="line">gulp.task(transformLess, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.less"</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jasmine</span></span><br><span class="line">gulp.task(test, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./test/*.js"</span>)</span><br><span class="line">        .pipe(jasmine())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, [transformJs, transformSass, transformLess, test]);</span><br></pre></td></tr></table></figure><h3 id="四、配置文件解读"><a href="#四、配置文件解读" class="headerlink" title="四、配置文件解读"></a>四、配置文件解读</h3><h4 id="1-第一部分"><a href="#1-第一部分" class="headerlink" title="1. 第一部分"></a>1. 第一部分</h4><p>一堆<code>reqire</code>,是引用gulp相应的插件。在引用之前要确保己经安装。</p><h4 id="2-第二部分"><a href="#2-第二部分" class="headerlink" title="2. 第二部分"></a>2. 第二部分</h4><p>几个<code>const</code>,是定义任务名常量，有多几任务就定义多少常量。</p><h4 id="3-第三部分"><a href="#3-第三部分" class="headerlink" title="3. 第三部分"></a>3. 第三部分</h4><p>几个<code>task</code>,每个task对应一个任务，具有不同的功能。可以使用 <code>gulp xxx</code>来启动这个任务。</p><h4 id="4-第四部分"><a href="#4-第四部分" class="headerlink" title="4. 第四部分"></a>4. 第四部分</h4><p><code>default</code>,是执行<code>gulp</code>之后就会开始的任务 常用参数(<code>&#39;default&#39;,[task1,task2,...],callback[可选]</code>)。</p><h3 id="五、执行"><a href="#五、执行" class="headerlink" title="五、执行"></a>五、执行</h3><ol><li>如果要执行<code>default</code>任务，直接<code>gulp</code></li></ol><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Using</span> gulpfile e:\oscchina\gulp-start-kit\gulpfile.js</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Starting</span> <span class="string">'transformJs'</span>...</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Starting</span> <span class="string">'transformSass'</span>...</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Starting</span> <span class="string">'transformLess'</span>...</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Starting</span> <span class="string">'test'</span>...</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> spec, <span class="number">0</span> failures</span><br><span class="line"><span class="symbol">Finished</span> in <span class="number">0</span> seconds</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">04</span>] <span class="symbol">Finished</span> <span class="string">'test'</span> after <span class="number">62</span> ms</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">06</span>] <span class="symbol">Finished</span> <span class="string">'transformLess'</span> after <span class="number">2.66</span> s</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">06</span>] <span class="symbol">Finished</span> <span class="string">'transformSass'</span> after <span class="number">2.68</span> s</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">06</span>] <span class="symbol">Finished</span> <span class="string">'transformJs'</span> after <span class="number">2.7</span> s</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">06</span>] <span class="symbol">Finished</span> <span class="string">'default'</span> after <span class="number">32</span> μs</span><br><span class="line"></span><br><span class="line"><span class="symbol">Process</span> finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果想要执行单个任务，请输入 <code>gulp taskName</code>,例如<code>gulp test</code></li></ol><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">47</span>] Using gulpfile e:\oscchina\gulp-start-kit\gulpfile.js</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">47</span>] Starting <span class="string">'test'</span>...</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> spec, <span class="number">0</span> failures</span><br><span class="line">Finished <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">47</span>] Finished <span class="string">'test'</span> after <span class="number">77</span> ms</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="六、gulp常见任务"><a href="#六、gulp常见任务" class="headerlink" title="六、gulp常见任务"></a>六、gulp常见任务</h3><h4 id="1-处理js"><a href="#1-处理js" class="headerlink" title="1. 处理js"></a>1. 处理js</h4><p>（包括转码、合并、压缩）  <a href="https://npm.taobao.org/package/gulp-babel" target="_blank" rel="noopener">gulp-babel</a> <a href="https://npm.taobao.org/package/babel-preset-es2015" target="_blank" rel="noopener">babel-preset-es2015</a> <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="noopener">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(transformJs, function () &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">"src/*.js"</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(react())</span><br><span class="line">      <span class="selector-class">.pipe</span>(babel(</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attribute">presets</span>: [<span class="string">"babel-preset-es2015"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">      ))</span><br><span class="line">      <span class="selector-class">.pipe</span>(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(uglify())</span><br><span class="line">      <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-处理scss"><a href="#2-处理scss" class="headerlink" title="2. 处理scss"></a>2. 处理scss</h4><p>(包括转码、合并、压缩)  <a href="https://npm.taobao.org/package/gulp-sass" target="_blank" rel="noopener">gulp-sass</a>  <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="noopener">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a></p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scss</span></span><br><span class="line">gulp.task(transformSass, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.scss"</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-处理less"><a href="#3-处理less" class="headerlink" title="3. 处理less"></a>3. 处理less</h4><p>(包括转码、合并、压缩)  <a href="https://npm.taobao.org/package/gulp-less" target="_blank" rel="noopener">gulp-less</a>  <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="noopener">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a></p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line">gulp.task(transformLess, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.less"</span>)</span><br><span class="line">      .pipe(less())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><p><a href="https://npm.taobao.org/package/gulp-jasmine" target="_blank" rel="noopener">gulp-jasmine</a>  </p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jasmine</span></span><br><span class="line">gulp.task(test, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./test/*.js"</span>)</span><br><span class="line">        .pipe(jasmine())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试文件 test.spec.js</span></span><br><span class="line">describe(<span class="string">'test one'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5-清理"><a href="#5-清理" class="headerlink" title="5. 清理"></a>5. 清理</h4><p> <a href="https://npm.taobao.org/package/gulp-clean" target="_blank" rel="noopener">gulp-clean</a></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="built_in">config</span>.dist + <span class="string">'/*'</span>, &#123;<span class="built_in">read</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">      .pipe(clean());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="6-热加载"><a href="#6-热加载" class="headerlink" title="6. 热加载"></a>6. 热加载</h4><p>  <a href="https://npm.taobao.org/package/gulp-util" target="_blank" rel="noopener">gulp-util</a> <a href="https://npm.taobao.org/package/gulp-watch" target="_blank" rel="noopener">gulp-watch</a></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var util = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</span><br><span class="line">var watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</span><br><span class="line">var <span class="built_in">config</span> = &#123;&#125;;</span><br><span class="line"><span class="built_in">config</span>.dist = <span class="string">'dist'</span>;</span><br><span class="line"><span class="built_in">config</span>.static = [</span><br><span class="line">  <span class="string">'bin/**/*'</span>,</span><br><span class="line">  <span class="string">'package.json'</span></span><br><span class="line">];</span><br><span class="line">// sync static resource <span class="keyword">in</span> production mode</span><br><span class="line">gulp.task(<span class="string">'static-sync'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="built_in">config</span>.static, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">      .pipe(gulp.dest(<span class="built_in">config</span>.dist));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'static-sync:dev'</span>, [<span class="string">'static-sync'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  util.<span class="built_in">log</span>(<span class="string">'[Sync] starting file watch'</span>);</span><br><span class="line">  <span class="keyword">return</span> watch(<span class="built_in">config</span>.static, <span class="function"><span class="keyword">function</span> <span class="params">(obj)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.event === <span class="string">'change'</span> || obj.event === <span class="string">'add'</span>)</span><br><span class="line">      <span class="keyword">return</span> gulp.src(obj.<span class="built_in">path</span>, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">          .pipe(gulp.dest(<span class="built_in">config</span>.dist))</span><br><span class="line">          .pipe(<span class="built_in">print</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[Sync] file sync success: '</span> + obj.<span class="built_in">path</span>.replace(obj.base, <span class="string">''</span>);</span><br><span class="line">          &#125;));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj.event === <span class="string">'unlink'</span>) &#123;</span><br><span class="line">      var distFilePath = obj.<span class="built_in">path</span>.replace(__dirname, __dirname + <span class="string">'/'</span> + <span class="built_in">config</span>.dist);</span><br><span class="line">      <span class="keyword">return</span> gulp.src(distFilePath)</span><br><span class="line">          .pipe(clean())</span><br><span class="line">          .pipe(<span class="built_in">print</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[Sync] file remove success: '</span> + obj.<span class="built_in">path</span>.replace(obj.base, <span class="string">''</span>);</span><br><span class="line">          &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="7-debug"><a href="#7-debug" class="headerlink" title="7. debug"></a>7. debug</h4><p> <a href="https://npm.taobao.org/package/gulp-print" target="_blank" rel="noopener">gulp-print</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下载</span></span><br><span class="line">npm install gulp-<span class="keyword">print</span></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">print</span> = <span class="keyword">require</span>(<span class="string">'gulp-print'</span>);</span><br><span class="line"><span class="comment">// 注册任务</span></span><br><span class="line">gulp.task(<span class="string">'print'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'test/*.js'</span>)</span><br><span class="line">    .pipe(<span class="keyword">print</span>())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8-sourceMap"><a href="#8-sourceMap" class="headerlink" title="8. sourceMap"></a>8. sourceMap</h4><p>  <a href="https://npm.taobao.org/package/gulp-sourcemaps" target="_blank" rel="noopener">gulp-sourcemaps</a></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line">// compile server script <span class="keyword">in</span> production mode</span><br><span class="line">gulp.task(<span class="string">'compile:server'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">config</span>.babel.sourceMaps)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'**/*.es6'</span>, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(babel(<span class="built_in">config</span>.babel))</span><br><span class="line">        .pipe(sourcemaps.<span class="built_in">write</span>(<span class="string">'.'</span>, &#123;sourceRoot: <span class="string">'/ustar'</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="built_in">config</span>.dist));</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'**/*.es6'</span>, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">          preset:<span class="string">'babel-preset-es2015'</span></span><br><span class="line">          &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="9-复制静态资源"><a href="#9-复制静态资源" class="headerlink" title="9. 复制静态资源"></a>9. 复制静态资源</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'static-sync'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/css/*'</span>, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="10-处理css雪碧图"><a href="#10-处理css雪碧图" class="headerlink" title="10. 处理css雪碧图"></a>10. 处理css雪碧图</h4><p> <a href="https://npm.taobao.org/package/gulp-css-spriter" target="_blank" rel="noopener">gulp-css-spriter</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> spriter = <span class="keyword">require</span>(<span class="string">'gulp-css-spriter'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/styles.css'</span>)</span><br><span class="line">      .pipe(spriter(&#123;</span><br><span class="line">          <span class="comment">// The path and file name of where we will save the sprite sheet</span></span><br><span class="line">          <span class="string">'spriteSheet'</span>: <span class="string">'./dist/images/spritesheet.png'</span>,</span><br><span class="line">          <span class="comment">// Because we don't know where you will end up saving the CSS file at this point in the pipe,</span></span><br><span class="line">          <span class="comment">// we need a litle help identifying where it will be.</span></span><br><span class="line">          <span class="string">'pathToSpriteSheetFromCSS'</span>: <span class="string">'../images/spritesheet.png'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="11-压缩css"><a href="#11-压缩css" class="headerlink" title="11. 压缩css"></a>11. 压缩css</h4><p><a href="https://npm.taobao.org/package/gulp-minify-css" target="_blank" rel="noopener">gulp-minify-css</a></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">gulp.task(gulp_minify_css,<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'./dist/*.css'</span>)</span><br><span class="line">       .pipe(<span class="built_in">print</span>())</span><br><span class="line">       .pipe(minifycss())</span><br><span class="line">       .pipe(gulp.dest(<span class="built_in">config</span>.dist))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="12-压缩图片"><a href="#12-压缩图片" class="headerlink" title="12. 压缩图片"></a>12. 压缩图片</h4><p><a href="https://npm.taobao.org/package/gulp-imagemin" target="_blank" rel="noopener">gulp-imagemin</a></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">  <span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'img'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/images/*'</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(imagemin(&#123;</span><br><span class="line">          <span class="attribute">progressive</span>: true,</span><br><span class="line">          <span class="attribute">svgoPlugins</span>: [&#123;<span class="attribute">removeViewBox</span>: false&#125;],</span><br><span class="line">          <span class="attribute">use</span>: [pngcrush()]</span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./dest/images/'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(notify(&#123; <span class="attribute">message</span>: <span class="string">'img task ok'</span> &#125;));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="13-检查js"><a href="#13-检查js" class="headerlink" title="13. 检查js"></a>13. 检查js</h4><p>  <a href="https://npm.taobao.org/package/gulp-jshint" target="_blank" rel="noopener">gulp-jshint</a>  <a href="https://npm.taobao.org/package/jshint" target="_blank" rel="noopener">gulp-jshint</a></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查js</span></span><br><span class="line">  <span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'lint'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(jshint())</span><br><span class="line">      <span class="selector-class">.pipe</span>(jshint.reporter(<span class="string">'default'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(notify(&#123; <span class="attribute">message</span>: <span class="string">'lint task ok'</span> &#125;));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="14-gzip压缩"><a href="#14-gzip压缩" class="headerlink" title="14. gzip压缩"></a>14. gzip压缩</h4><p> <a href="https://npm.taobao.org/package/gulp-gzip" target="_blank" rel="noopener">gulp-gzip</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> gzip = <span class="built_in">require</span>(<span class="string">'gulp-gzip'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./dev/scripts/*.js'</span>)</span><br><span class="line">    .pipe(gzip())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/scripts'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="15-处理前缀"><a href="#15-处理前缀" class="headerlink" title="15. 处理前缀"></a>15. 处理前缀</h4><p><a href="https://npm.taobao.org/package/gulp-autoprefixer" target="_blank" rel="noopener">gulp-autoprefixer</a></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">var autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/app.css'</span>)</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">      .pipe(autoprefixer(&#123;</span><br><span class="line">          browsers: [<span class="string">'last 2 versions'</span>],</span><br><span class="line">          cascade: <span class="literal">false</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(<span class="built_in">concat</span>(<span class="string">'all.css'</span>))</span><br><span class="line">      .pipe(sourcemaps.<span class="built_in">write</span>(<span class="string">'.'</span>,&#123;sourceRoot:<span class="built_in">config</span>.dist&#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="七、项目地址"><a href="#七、项目地址" class="headerlink" title="七、项目地址"></a>七、项目地址</h3><p><a href="https://github.com/houko/gulp-start-kit" target="_blank" rel="noopener">gulp-start-kit</a></p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> 工具 </tag>
            
            <tag> nodejs </tag>
            
            <tag> JavaScript </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化工具初选</title>
      <link href="2016/FrontEndTools/"/>
      <url>2016/FrontEndTools/</url>
      
        <content type="html"><![CDATA[<p>　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。</p><a id="more"></a><h3 id="库与框架"><a href="#库与框架" class="headerlink" title="库与框架"></a>库与框架</h3><blockquote></blockquote><ul><li><a href="http://jquery.com/" target="_blank" rel="noopener">jQuery</a></li><li><a href="http://jqueryui.com/" target="_blank" rel="noopener">jQuery UI</a>: 一个JQuery的UI框架,特点是高效、组件化</li><li><a href="http://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a>: 数据驱动的组件，为现代化的 Web 界面而生</li><li><a href="http://www.apjs.net/" target="_blank" rel="noopener">angularjs</a> 应用最广泛的企业级web开发框架</li><li><a href="https://angular.io/" target="_blank" rel="noopener">angular</a>: 新一代angular开发框架</li><li><a href="http://facebook.github.io/react/" target="_blank" rel="noopener">React.js</a>: 构建组化件应用的javascript库</li><li><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a>: 使用react构建移动app应用</li><li><a href="https://flutter.cn/" target="_blank" rel="noopener">Flutter</a>: 新一代跨平台移动框架</li></ul><h3 id="构建工具-amp-模块化"><a href="#构建工具-amp-模块化" class="headerlink" title="构建工具&amp;模块化"></a>构建工具&amp;模块化</h3><p>一个构建、测试应用的构建工具</p><blockquote></blockquote><ul><li><a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp.js</a>: 自动化工作流</li><li><a href="https://nodejs.org/" target="_blank" rel="noopener">node</a> 建立在V8引擎上的快速构建平台</li></ul><h3 id="模块打包器"><a href="#模块打包器" class="headerlink" title="模块打包器"></a>模块打包器</h3><p>将模块打包到一个bundle中</p><blockquote></blockquote><ul><li><a href="https://webpack.github.io/" target="_blank" rel="noopener">webpack</a>: 能够将依赖打包、生成的自动构建工具</li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具</p><blockquote></blockquote><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>: Node 模块化管理工具</li></ul><h3 id="CSS-处理"><a href="#CSS-处理" class="headerlink" title="CSS 处理"></a>CSS 处理</h3><p>提供一个高效、动态的方法生成css</p><blockquote></blockquote><ul><li><a href="https://github.com/stylus/stylus" target="_blank" rel="noopener">Stylus</a>: node社区的css预处理器</li><li><a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">PostCSS</a>: 将css转换成js插件</li></ul><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote></blockquote><ul><li><a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">ECMAScript 6 Module</a></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>使用js生成html文件</p><blockquote></blockquote><ul><li><a href="http://ejs.co/" target="_blank" rel="noopener">EJS</a></li><li><a href="http://jade-lang.com/" target="_blank" rel="noopener">jade</a></li></ul><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><blockquote></blockquote><ul><li><a href="http://mochajs.org/" target="_blank" rel="noopener">Mocha</a>: 一个简单、快速的用来测试node和web应用的测试框架</li><li><a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a>: Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。</li></ul><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><blockquote></blockquote><ul><li><a href="http://yeoman.io/" target="_blank" rel="noopener">Yeoman</a> Web 应用开发流程与工具   </li><li><a href="https://npm.taobao.org/package/koa-generator" target="_blank" rel="noopener">koa-generator</a> koa项目生成器         </li></ul><h3 id="集成方案"><a href="#集成方案" class="headerlink" title="集成方案"></a>集成方案</h3><blockquote></blockquote><ul><li><a href="http://fis.baidu.com/" target="_blank" rel="noopener">FIS</a>: 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题</li></ul><h3 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h3><blockquote></blockquote><ul><li><a href="http://bootcss.com/" target="_blank" rel="noopener">bootstrap</a> 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。</li><li><a href="http://foundation.zurb.com/" target="_blank" rel="noopener">foundation</a> 最流行的响应式前前端布局框架</li><li><a href="http://www.semantic-ui.cn/" target="_blank" rel="noopener">semantic-ui</a> Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。</li><li><a href="http://callemall.github.io/material-ui/#/" target="_blank" rel="noopener">Material UI</a>  一组反应元件，实现谷歌的材料设计。</li><li><a href="http://ant.design/" target="_blank" rel="noopener">ant design</a> Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。</li></ul><h3 id="游戏引擎"><a href="#游戏引擎" class="headerlink" title="游戏引擎"></a>游戏引擎</h3><blockquote></blockquote><ul><li><a href="http://createjs.com/" target="_blank" rel="noopener">CreateJS</a>  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。</li><li><a href="http://phaser.io/" target="_blank" rel="noopener">PhaserJS</a>  PC端和移动端HTML5游戏框架 。</li><li><a href="http://threejs.org/" target="_blank" rel="noopener">ThreeJS</a> 制作HTML5的3D游戏引擎 。</li><li><a href="http://www.egret.com/" target="_blank" rel="noopener">白鹭</a> Egret是一套HTML5游戏开发解决方案</li><li><a href="http://www.cocos.com/" target="_blank" rel="noopener">Cocos2d-JS</a> 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><blockquote><ul><li><a href="http://www.docker.com/" target="_blank" rel="noopener">Docker</a>: Build, Ship, and Run Any App, Anywhere</li></ul></blockquote></li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><blockquote></blockquote><ul><li><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a> 技术大牛多，素质好，质量高</li><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a> 自动生成目录，博客UI看起来相对漂亮</li><li><a href="http://www.oschina.net/" target="_blank" rel="noopener">开源中国</a> 支持开源文化</li></ul><h3 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h3><blockquote></blockquote><ul><li><a href="http://www.hubwiz.com/course/?type=free" target="_blank" rel="noopener">汇智网</a> 涉及面比较广,免费收费课程都有</li><li><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a>  学习资源多,但比较泡面化</li><li><a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a>  质量高，但很多课程开始收费了  </li><li><a href="http://www.huachuanxueyuan.com/" target="_blank" rel="noopener">花川学院</a> 学习swift的好去处</li><li><a href="http://www.maiziedu.com/" target="_blank" rel="noopener">麦子学院</a> 后起之秀</li><li><a href="http://www.runoob.com/" target="_blank" rel="noopener">W3C菜鸟</a> 新手程序员的天堂</li><li><a href="http://www.yun.lu/student/homepage" target="_blank" rel="noopener">云路课堂</a> 极客风</li><li><a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a> 基本上都是收费课程,接受知识付费的用户应该会觉得很有收货</li></ul><h3 id="其他常用网站"><a href="#其他常用网站" class="headerlink" title="其他常用网站"></a>其他常用网站</h3><blockquote></blockquote><ul><li><a href="https://github.com/" target="_blank" rel="noopener">github</a> 程序员的QQ,面试的门面</li><li><a href="https://git.oschina.net/" target="_blank" rel="noopener">码云</a> 和马云同名，给个面子</li><li><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝同步npm</a> 访问快，10分钟同步一次，查资料必备</li><li><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">bootCDN</a> 使用最普遍的CDN</li><li><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">font-awesome</a> 最好用的图标库</li><li><a href="http://json.cn/#" target="_blank" rel="noopener">JSON格式化</a>  这个时代的开发者谁离得了JSON呢</li><li><a href="http://fenav.com/#/p11" target="_blank" rel="noopener">开发工具</a> 全面省心</li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki 记忆库之 Excel 快捷键大全</title>
      <link href="2016/AnkiExcelShortcuts/"/>
      <url>2016/AnkiExcelShortcuts/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。<a id="more"></a><h3 id="记忆库使用"><a href="#记忆库使用" class="headerlink" title="记忆库使用"></a>记忆库使用</h3><p>所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。</p><blockquote><p>下载: <a href="/resources/Excel-Shortcut-keys.apkg">Excel 快捷键大全 (Windows) for Anki</a></p></blockquote><p>释义默认中英对照显示，可按需隐藏。<br><img src="http://moxfive.xyz/resources/Anki-a1.png" alt="Anki-a1"></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>列出自己平时使用最频繁的10个 Excel 快捷键。</p><table><thead><tr><th align="center">-</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>CTRL+D</td><td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td></tr><tr><td align="center">2</td><td>CTRL+ENTER</td><td>使用当前输入的条目填充选定的单元格区域。</td></tr><tr><td align="center">3</td><td>F2</td><td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td></tr><tr><td align="center">4</td><td>CTRL+1</td><td>显示“单元格格式”对话框。</td></tr><tr><td align="center">5</td><td>CTRL+SHIFT+~</td><td>应用“常规”数字格式。</td></tr><tr><td align="center">6</td><td>CTRL+G</td><td>显示“定位”对话框。</td></tr><tr><td align="center">7</td><td>CTRL+`</td><td>在工作表中切换显示单元格值和公式。</td></tr><tr><td align="center">8</td><td>CTRL+’</td><td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td></tr><tr><td align="center">9</td><td>F4</td><td>重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换</td></tr><tr><td align="center">10</td><td>ALT+ENTER</td><td>在同一单元格中另起一个新行。</td></tr></tbody></table><h3 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h3><h4 id="Ctrl-组合快捷键"><a href="#Ctrl-组合快捷键" class="headerlink" title="Ctrl 组合快捷键"></a>Ctrl 组合快捷键</h4><table><thead><tr><th align="center">-</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>CTRL+PgUp</td><td>向左切换工作表</td></tr><tr><td align="center">2</td><td>CTRL+PgDn</td><td>向右切换工作表</td></tr><tr><td align="center">3</td><td>CTRL+SHIFT+&amp;</td><td>将外框应用于选定单元格。</td></tr><tr><td align="center">4</td><td>CTRL+SHIFT_</td><td>从选定单元格删除外框。</td></tr><tr><td align="center">5</td><td>CTRL+SHIFT+~</td><td>应用“常规”数字格式。</td></tr><tr><td align="center">6</td><td>CTRL+SHIFT+$</td><td>应用带有两位小数的“货币”格式（负数放在括号中）。</td></tr><tr><td align="center">7</td><td>CTRL+SHIFT+%</td><td>应用不带小数位的“百分比”格式。</td></tr><tr><td align="center">8</td><td>CTRL+SHIFT+^</td><td>应用带有两位小数的“指数”格式。</td></tr><tr><td align="center">9</td><td>CTRL+SHIFT+#</td><td>应用带有日、月和年的“日期”格式。</td></tr><tr><td align="center">10</td><td>CTRL+SHIFT+@</td><td>应用带有小时和分钟以及 AM 或 PM 的“时间”格式。</td></tr><tr><td align="center">11</td><td>CTRL+SHIFT+!</td><td>应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。</td></tr><tr><td align="center">12</td><td>CTRL+SHIFT+*</td><td>选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。</td></tr><tr><td align="center">13</td><td>CTRL+SHIFT+:</td><td>输入当前时间。</td></tr><tr><td align="center">14</td><td>CTRL+SHIFT+”</td><td>将值从活动单元格上方的单元格复制到单元格或编辑栏中。</td></tr><tr><td align="center">15</td><td>CTRL+SHIFT+Plus (+)</td><td>显示用于插入空白单元格的“插入”对话框。</td></tr><tr><td align="center">16</td><td>CTRL+Minus (-)</td><td>显示用于删除选定单元格的“删除”对话框。</td></tr><tr><td align="center">17</td><td>CTRL+;</td><td>输入当前日期。</td></tr><tr><td align="center">18</td><td>CTRL+`</td><td>在工作表中切换显示单元格值和公式。</td></tr><tr><td align="center">19</td><td>CTRL+’</td><td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td></tr><tr><td align="center">20</td><td>CTRL+1</td><td>显示“单元格格式”对话框。</td></tr><tr><td align="center">21</td><td>CTRL+2</td><td>应用或取消加粗格式设置。</td></tr><tr><td align="center">22</td><td>CTRL+3</td><td>应用或取消倾斜格式设置。</td></tr><tr><td align="center">23</td><td>CTRL+4</td><td>应用或取消下划线。</td></tr><tr><td align="center">24</td><td>CTRL+5</td><td>应用或取消删除线。</td></tr><tr><td align="center">25</td><td>CTRL+6</td><td>在隐藏对象、显示对象和显示对象占位符之间切换。</td></tr><tr><td align="center">26</td><td>CTRL+8</td><td>显示或隐藏大纲符号。</td></tr><tr><td align="center">27</td><td>CTRL+9</td><td>隐藏选定的行。</td></tr><tr><td align="center">28</td><td>CTRL+0</td><td>隐藏选定的列。</td></tr><tr><td align="center">29</td><td>CTRL+A</td><td>☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。</td></tr><tr><td align="center">30</td><td>CTRL+B</td><td>应用或取消加粗格式设置。</td></tr><tr><td align="center">31</td><td>CTRL+C</td><td>复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。</td></tr><tr><td align="center">32</td><td>CTRL+D</td><td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td></tr><tr><td align="center">33</td><td>CTRL+F</td><td>显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。</td></tr><tr><td align="center">34</td><td>SHIFT+F4</td><td>重复上一次“查找”操作。</td></tr><tr><td align="center">35</td><td>CTRL+SHIFT+F<br>CTRL+SHIFT+P</td><td>打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。</td></tr><tr><td align="center">36</td><td>CTRL+G<br>F5</td><td>显示“定位”对话框。</td></tr><tr><td align="center">37</td><td>CTRL+H</td><td>显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。</td></tr><tr><td align="center">38</td><td>CTRL+I</td><td>应用或取消倾斜格式设置。</td></tr><tr><td align="center">39</td><td>CTRL+K</td><td>为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。</td></tr><tr><td align="center">40</td><td>CTRL+N</td><td>创建一个新的空白工作簿。</td></tr><tr><td align="center">41</td><td>CTRL+O</td><td>显示“打开”对话框以打开或查找文件。</td></tr><tr><td align="center">42</td><td>CTRL+SHIFT+O</td><td>选择所有包含批注的单元格。</td></tr><tr><td align="center">43</td><td>CTRL+P</td><td>显示“打印”对话框。</td></tr><tr><td align="center">44</td><td>CTRL+R</td><td>使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。</td></tr><tr><td align="center">45</td><td>CTRL+S</td><td>使用其当前文件名、位置和文件格式保存活动文件。</td></tr><tr><td align="center">46</td><td>CTRL+T</td><td>显示“创建表”对话框。</td></tr><tr><td align="center">47</td><td>CTRL+U</td><td>应用或取消下划线。</td></tr><tr><td align="center">48</td><td>CTRL+SHIFT+U</td><td>在展开和折叠编辑栏之间切换。</td></tr><tr><td align="center">49</td><td>CTRL+V</td><td>在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。</td></tr><tr><td align="center">50</td><td>CTRL+ALT+V</td><td>显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。</td></tr><tr><td align="center">51</td><td>CTRL+W</td><td>关闭选定的工作簿窗口。</td></tr><tr><td align="center">52</td><td>CTRL+X</td><td>剪切选定的单元格。</td></tr><tr><td align="center">53</td><td>CTRL+Y</td><td>重复上一个命令或操作（如有可能）。</td></tr><tr><td align="center">54</td><td>CTRL+Z</td><td>使用“撤消”命令来撤消上一个命令或删除最后键入的内容。</td></tr><tr><td align="center">55</td><td>CTRL+SHIFT+Z</td><td>显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。</td></tr></tbody></table><h4 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h4><table><thead><tr><th align="center">-</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>F1</td><td>显示“Microsoft Office Excel 帮助”任务窗格。</td></tr><tr><td align="center">2</td><td>ALT+F1</td><td>创建当前范围中数据的图表。</td></tr><tr><td align="center">3</td><td>ALT+SHIFT+F1</td><td>插入新的工作表。</td></tr><tr><td align="center">4</td><td>F2</td><td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td></tr><tr><td align="center">5</td><td>SHIFT+F2</td><td>添加或编辑单元格批注。</td></tr><tr><td align="center">6</td><td>CTRL+F2</td><td>显示“打印预览”窗口。</td></tr><tr><td align="center">7</td><td>F3</td><td>显示“粘贴名称”对话框。</td></tr><tr><td align="center">8</td><td>SHIFT+F3</td><td>显示“插入函数”对话框。</td></tr><tr><td align="center">9</td><td>F4</td><td>“重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换”</td></tr><tr><td align="center">10</td><td>Ctrl+F4</td><td>关闭选定的工作簿窗口。</td></tr><tr><td align="center">11</td><td>Ctrl+F5</td><td>从最大化中恢复选定工作簿窗口的窗口大小。</td></tr><tr><td align="center">12</td><td>F6</td><td>在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。</td></tr><tr><td align="center">13</td><td>SHIFT+F6</td><td>在工作表、缩放控件、任务窗格和功能区之间切换。</td></tr><tr><td align="center">14</td><td>CTRL+F6</td><td>如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。</td></tr><tr><td align="center">15</td><td>F7</td><td>显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。</td></tr><tr><td align="center">16</td><td>CTRL+F7</td><td>如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。</td></tr><tr><td align="center">17</td><td>F8</td><td>打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。</td></tr><tr><td align="center">18</td><td>SHIFT+F8</td><td>使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。</td></tr><tr><td align="center">19</td><td>CTRL+F8</td><td>当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。</td></tr><tr><td align="center">20</td><td>ALT+F8</td><td>显示用于创建、运行、编辑或删除宏的“宏”对话框。</td></tr><tr><td align="center">21</td><td>F9</td><td>计算所有打开的工作簿中的所有工作表。</td></tr><tr><td align="center">22</td><td>SHIFT+F9</td><td>按 Shift+F9 可计算活动工作表。</td></tr><tr><td align="center">23</td><td>CTRL+ALT+F9</td><td>计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。</td></tr><tr><td align="center">24</td><td>CTRL+ALT+SHIFT+F9</td><td>重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。</td></tr><tr><td align="center">25</td><td>CTRL+F9</td><td>将工作簿窗口最小化为图标。</td></tr><tr><td align="center">26</td><td>F10</td><td>“打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。”</td></tr><tr><td align="center">27</td><td>SHIFT+F10</td><td>按 Shift+F10 可显示选定项目的快捷菜单。</td></tr><tr><td align="center">28</td><td>ALT+SHIFT+F10</td><td>显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。</td></tr><tr><td align="center">29</td><td>CTRL+F10</td><td>最大化或还原选定的工作簿窗口。</td></tr><tr><td align="center">30</td><td>F11</td><td>创建当前范围内数据的图表。</td></tr><tr><td align="center">31</td><td>SHIFT+F11</td><td>按 Shift+F11 可插入一个新工作表。</td></tr><tr><td align="center">32</td><td>ALT+F11</td><td>打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。</td></tr><tr><td align="center">33</td><td>F12</td><td>显示“另存为”对话框。</td></tr></tbody></table><h4 id="其他实用快捷键"><a href="#其他实用快捷键" class="headerlink" title="其他实用快捷键"></a>其他实用快捷键</h4><table><thead><tr><th align="center">-</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>ARROW KEYS</td><td>在工作表中上移、下移、左移或右移一个单元格。</td></tr><tr><td align="center">2</td><td>CTRL+ARROW KEY</td><td>移动到工作表中当前数据区域的边缘。</td></tr><tr><td align="center">3</td><td>SHIFT+ARROW KEY</td><td>将单元格的选定范围扩大一个单元格。</td></tr><tr><td align="center">4</td><td>CTRL+SHIFT+ARROW KEY</td><td>按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。</td></tr><tr><td align="center">5</td><td>BACKSPACE</td><td>在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。</td></tr><tr><td align="center">6</td><td>DELETE</td><td>从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。</td></tr><tr><td align="center">7</td><td>END</td><td>当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。</td></tr><tr><td align="center">8</td><td>CTRL+END</td><td>移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。</td></tr><tr><td align="center">9</td><td>CTRL+SHIFT+END</td><td>按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。</td></tr><tr><td align="center">10</td><td>ENTER</td><td>从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。</td></tr><tr><td align="center">11</td><td>ALT+ENTER</td><td>在同一单元格中另起一个新行。</td></tr><tr><td align="center">12</td><td>CTRL+ENTER</td><td>使用当前输入的条目填充选定的单元格区域。</td></tr><tr><td align="center">13</td><td>SHIFT+ENTER</td><td>完成单元格输入并选择上面的单元格。</td></tr><tr><td align="center">14</td><td>ESC</td><td>取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。</td></tr><tr><td align="center">15</td><td>HOME</td><td>移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。</td></tr><tr><td align="center">16</td><td>CTRL+HOME</td><td>移到工作表的开头。</td></tr><tr><td align="center">17</td><td>CTRL+SHIFT+HOME</td><td>将单元格的选定范围扩展到工作表的开头。</td></tr><tr><td align="center">18</td><td>PAGE DOWN</td><td>在工作表中下移一个屏幕。</td></tr><tr><td align="center">19</td><td>ALT+PAGE DOWN</td><td>在工作表中向右移动一个屏幕。</td></tr><tr><td align="center">20</td><td>CTRL+SHIFT+PAGE DOWN</td><td>选择工作簿中的当前和下一个工作表。</td></tr><tr><td align="center">21</td><td>PAGE UP</td><td>在工作表中上移一个屏幕。</td></tr><tr><td align="center">22</td><td>ALT+PAGE UP</td><td>在工作表中向左移动一个屏幕。</td></tr><tr><td align="center">23</td><td>CTRL+SHIFT+PAGE UP</td><td>选择工作簿中的当前和上一个工作表。</td></tr><tr><td align="center">24</td><td>SPACEBAR</td><td>在对话框中，执行选定按钮的操作，或者选中或清除复选框。</td></tr><tr><td align="center">25</td><td>CTRL+SPACEBAR</td><td>选择工作表中的整列。</td></tr><tr><td align="center">26</td><td>SHIFT+SPACEBAR</td><td>选择工作表中的整行。</td></tr><tr><td align="center">27</td><td>CTRL+SHIFT+SPACEBAR</td><td>按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。</td></tr><tr><td align="center">28</td><td>ALT+SPACEBAR</td><td>显示 Microsoft Office Excel 窗口的“控制”菜单。</td></tr><tr><td align="center">29</td><td>TAB</td><td>在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。</td></tr><tr><td align="center">30</td><td>SHIFT+TAB</td><td>移到前一个单元格（在工作表中）或前一个选项（在对话框中）。</td></tr><tr><td align="center">31</td><td>CTRL+TAB</td><td>在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。</td></tr><tr><td align="center">32</td><td>CTRL+SHIFT+TAB</td><td>在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。</td></tr></tbody></table><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol><li>微软 Office 帮助中心: <a href="https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&rs=zh-CN&ad=CN" target="_blank" rel="noopener">Excel 快捷键和功能键</a></li><li>Microsoft Office Support: <a href="https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f" target="_blank" rel="noopener">Excel shortcut and function keys</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS font-family 网页字体使用小结</title>
      <link href="2016/CssFontFamily/"/>
      <url>2016/CssFontFamily/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。<a id="more"></a><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: 字体名1, 字体名2, 字体名<span class="selector-tag">n</span>, 字体系列名;</span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Verdana</span>, <span class="selector-tag">Helvetica</span>, "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", <span class="selector-tag">Arial</span>;</span><br></pre></td></tr></table></figure><h4 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h4><blockquote><ol><li>系统将选择列表中最先可用的字体来显示文字;</li></ol></blockquote><ol><li>因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;</li><li>因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;</li><li>字体名为中文或包含空格等时，需要加双引号””才能正确识别;</li><li>中文字体建议也是用其对应英文字体名，如”微软雅黑”为”Microsoft YaHei”，以提高编码兼容性。</li></ol><h3 id="常见字体系列"><a href="#常见字体系列" class="headerlink" title="常见字体系列"></a>常见字体系列</h3><h4 id="Serif-衬线字体"><a href="#Serif-衬线字体" class="headerlink" title="Serif 衬线字体"></a>Serif 衬线字体</h4><ul><li>Times New Roman, Georgia 和宋体都是很常见的衬线字体；</li><li>特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。</li></ul><p><img src="http://moxfive.xyz/resources/serif.png" alt="serif"></p><h4 id="Sans-serif-无衬线字体"><a href="#Sans-serif-无衬线字体" class="headerlink" title="Sans-serif 无衬线字体"></a>Sans-serif 无衬线字体</h4><ul><li>Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;</li><li>说明: <code>sans-</code>源于法语前缀，意思为<code>没有</code>。Sans-serif 也就是指无衬线字体。</li><li>特征: 字体比较圆滑，笔划较为均匀。</li></ul><p><img src="http://moxfive.xyz/resources/sans-serif.png" alt="sans-serif"></p><ul><li>字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。</li></ul><h4 id="Monospace-等宽字体"><a href="#Monospace-等宽字体" class="headerlink" title="Monospace 等宽字体"></a>Monospace 等宽字体</h4><ul><li>Courier New, Consolas, Menlo 都是比较常见的等宽字体;</li><li>特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。</li></ul><p><img src="http://moxfive.xyz/resources/Monospace.png" alt="Monospace"></p><ul><li>一个优秀的代码字体除了等宽外，还应该能较好地区分出<code>0 o O i l 1 I &quot;&quot; &#39;&#39; [] () {}</code> 等字符。</li></ul><h4 id="Cursive-手写体"><a href="#Cursive-手写体" class="headerlink" title="Cursive 手写体"></a>Cursive 手写体</h4><ul><li>Comic Sans, Author, 华文行楷都是比较常见的仿手写体;</li><li>特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。</li></ul><p><img src="http://moxfive.xyz/resources/cursive.png" alt="cursive"></p><h3 id="获取字体名称"><a href="#获取字体名称" class="headerlink" title="获取字体名称"></a>获取字体名称</h3><p>同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。</p><h4 id="本地字体"><a href="#本地字体" class="headerlink" title="本地字体"></a>本地字体</h4><ul><li>Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;</li><li>通过软件，如记事本、Office 等也可以查看字体名字:</li></ul><p><img src="http://moxfive.xyz/resources/font-a1.png" alt="font-a1"></p><ul><li>Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:</li></ul><p><img src="http://moxfive.xyz/resources/font-a2.png" alt="font-a2"></p><h4 id="网页字体"><a href="#网页字体" class="headerlink" title="网页字体"></a>网页字体</h4><ul><li>审查元素，查看生效的 font-family:</li></ul><p><img src="http://moxfive.xyz/resources/font-a3.png" alt="font-a3"></p><ul><li>通过 Chrome 插件 <a href="http://chengyinliu.com/whatfont.html" target="_blank" rel="noopener">WhatFont</a>:</li></ul><p><img src="http://moxfive.xyz/resources/font-a4.png" alt="font-a4"></p><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>使用<code>@font-face</code>引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a>.</p><p><img src="http://moxfive.xyz/resources/font-icon.png" alt="font-icon"></p><h3 id="备用记录"><a href="#备用记录" class="headerlink" title="备用记录"></a>备用记录</h3><h4 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h4><ul><li>下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中文</span></span><br><span class="line"><span class="attribute">font</span>-chs = <span class="string">"Microsoft YaHei"</span>, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span></span><br><span class="line"><span class="comment">//无衬线字体 sans-serif</span></span><br><span class="line"><span class="attribute">font</span>-sans = Verdana, <span class="string">"Helvetica Neue"</span>, Helvetica, Tahoma, Arial</span><br><span class="line"><span class="comment">//衬线字体 serif</span></span><br><span class="line"><span class="attribute">font</span>-serif = Times, Georgia</span><br><span class="line"><span class="comment">//等宽字体 monospace</span></span><br><span class="line"><span class="attribute">font</span>-mono = Menlo, Consolas, <span class="string">"Source Code Pro"</span>, Inconsolata, Monaco, <span class="string">"Courier New"</span></span><br></pre></td></tr></table></figure><h3 id="字体英文名"><a href="#字体英文名" class="headerlink" title="字体英文名"></a>字体英文名</h3><ul><li>一些常见中文字体的对应英文名。</li></ul><style>    .fa-apple {        color: #9d9e9d;    }    .fa-windows {        color: #4ca6e7;    }</style><table><thead><tr><th align="center">-</th><th>中文名</th><th>英文名</th></tr></thead><tbody><tr><td align="center">1</td><td><i class="fa fa-apple"></i> 苹方</td><td>PingFang SC</td></tr><tr><td align="center">2</td><td><i class="fa fa-apple"></i> 冬青黑/苹果丽黑</td><td>Hiragino Sans GB</td></tr><tr><td align="center">3</td><td><i class="fa fa-apple"></i> 思源黑体</td><td>Source Han Sans CN</td></tr><tr><td align="center">4</td><td><i class="fa fa-apple"></i> 华文细黑</td><td>STHeiti Light [STXihei]</td></tr><tr><td align="center">5</td><td><i class="fa fa-apple"></i> 华文黑体</td><td>ST Heiti</td></tr><tr><td align="center">6</td><td><i class="fa fa-apple"></i> 华文楷体</td><td>STKaiti</td></tr><tr><td align="center">7</td><td><i class="fa fa-apple"></i> 华文宋体</td><td>STSong</td></tr><tr><td align="center">8</td><td><i class="fa fa-apple"></i> 华文仿宋</td><td>STFangsong</td></tr><tr><td align="center">9</td><td><i class="fa fa-apple"></i> 丽黑 Pro</td><td>LiHei Pro Medium</td></tr><tr><td align="center">10</td><td><i class="fa fa-apple"></i> 丽宋 Pro</td><td>LiSong Pro Light</td></tr><tr><td align="center">11</td><td><i class="fa fa-apple"></i> 标楷体</td><td>BiauKai</td></tr><tr><td align="center">12</td><td><i class="fa fa-apple"></i> 苹果丽中黑</td><td>Apple LiGothic Medium</td></tr><tr><td align="center">13</td><td><i class="fa fa-apple"></i> 苹果丽细宋</td><td>Apple LiSung Light</td></tr><tr><td align="center">14</td><td><i class="fa fa-windows"></i> 新细明体</td><td>PMingLiU</td></tr><tr><td align="center">15</td><td><i class="fa fa-windows"></i> 细明体</td><td>MingLiU</td></tr><tr><td align="center">16</td><td><i class="fa fa-windows"></i> 标楷体</td><td>DFKai-SB</td></tr><tr><td align="center">17</td><td><i class="fa fa-windows"></i> (中易)黑体</td><td>SimHei</td></tr><tr><td align="center">18</td><td><i class="fa fa-windows"></i> 宋体</td><td>SimSun</td></tr><tr><td align="center">19</td><td><i class="fa fa-windows"></i> 新宋体</td><td>NSimSun</td></tr><tr><td align="center">20</td><td><i class="fa fa-windows"></i> 仿宋</td><td>FangSong</td></tr><tr><td align="center">21</td><td><i class="fa fa-windows"></i> 楷体</td><td>KaiTi</td></tr><tr><td align="center">22</td><td><i class="fa fa-windows"></i> 仿宋_GB2312</td><td>FangSong_GB2312</td></tr><tr><td align="center">23</td><td><i class="fa fa-windows"></i> 楷体_GB2312</td><td>KaiTi_GB2312</td></tr><tr><td align="center">24</td><td><i class="fa fa-windows"></i> 微软正黑体</td><td>Microsoft JhengHei</td></tr><tr><td align="center">25</td><td><i class="fa fa-windows"></i> 微软雅黑</td><td>Microsoft YaHei</td></tr><tr><td align="center">26</td><td><i class="fa fa-file-word-o"></i>  隶书</td><td>LiSu</td></tr><tr><td align="center">27</td><td><i class="fa fa-file-word-o"></i>  幼圆</td><td>YouYuan</td></tr><tr><td align="center">28</td><td><i class="fa fa-file-word-o"></i>  华文中宋</td><td>STZhongsong</td></tr><tr><td align="center">29</td><td><i class="fa fa-file-word-o"></i>  方正舒体</td><td>FZShuTi</td></tr><tr><td align="center">30</td><td><i class="fa fa-file-word-o"></i>  方正姚体</td><td>FZYaoti</td></tr><tr><td align="center">31</td><td><i class="fa fa-file-word-o"></i>  华文彩云</td><td>STCaiyun</td></tr><tr><td align="center">32</td><td><i class="fa fa-file-word-o"></i>  华文琥珀</td><td>STHupo</td></tr><tr><td align="center">33</td><td><i class="fa fa-file-word-o"></i>  华文隶书</td><td>STLiti</td></tr><tr><td align="center">34</td><td><i class="fa fa-file-word-o"></i>  华文行楷</td><td>STXingkai</td></tr><tr><td align="center">35</td><td><i class="fa fa-file-word-o"></i>  华文新魏</td><td>STXinwei</td></tr><tr><td align="center">36</td><td><i class="fa fa-linux"></i> 文泉驿微米黑</td><td>Wenquanyi Micro Hei</td></tr><tr><td align="center">37</td><td><i class="fa fa-linux"></i> 文泉驿正黑</td><td>WenQuanYi Zen Hei</td></tr><tr><td align="center">38</td><td><i class="fa fa-linux"></i> 文泉驿点阵正黑</td><td>WenQuanYi Zen Hei Sharp</td></tr></tbody></table><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol><li><strong>Font Awesome</strong>: <a href="http://fontawesome.io/" target="_blank" rel="noopener">http://fontawesome.io/</a></li><li><strong>Webdings和Wingdings字符码对应表</strong>: <a href="http://dwz.cn/2jOjYi" target="_blank" rel="noopener">http://dwz.cn/2jOjYi</a></li><li><strong><em>CSS魔法堂：再次认识 font</em></strong> by <strong>肥仔John</strong> on <code>2015/3/3</code>: <a href="http://www.cnblogs.com/fsjohnhuang/p/4310533.html" target="_blank" rel="noopener">http://www.cnblogs.com/fsjohnhuang/p/4310533.html</a></li><li><strong>有字库-中文在线字体</strong>: <a href="http://www.youziku.com/" target="_blank" rel="noopener">http://www.youziku.com/</a></li><li><strong><em>谈谈网页设计中的字体应用 (2) serif 和 sans-serif</em></strong> by <strong>棕熊</strong> on <code>2008/5/6</code>: <a href="http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html" target="_blank" rel="noopener">http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html</a></li><li><strong><em>Serif 和 Sans Serif 字体的区别</em></strong> by <strong>冰火九九</strong> on <code>2013/11/4</code>: <a href="http://blog.jobbole.com/50828/" target="_blank" rel="noopener">http://blog.jobbole.com/50828/</a></li><li><strong><em>Chinese Web Font Guide</em></strong> by <strong>Kendra Schaefer</strong> on <code>2012/6/11</code>: <a href="http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/" target="_blank" rel="noopener">http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/</a></li><li><strong>Fonts.css – 跨平台中文字体解决方案</strong>: <a href="http://zenozeng.github.io/fonts.css/" target="_blank" rel="noopener">http://zenozeng.github.io/fonts.css/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs爬虫项目实战</title>
      <link href="2016/NodeSpider/"/>
      <url>2016/NodeSpider/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。</p><a id="more"></a><h3 id="一、-依赖"><a href="#一、-依赖" class="headerlink" title="一、 依赖"></a>一、 依赖</h3><h4 id="1-DOM操作-cheerio"><a href="#1-DOM操作-cheerio" class="headerlink" title="1. DOM操作  cheerio"></a>1. DOM操作  <a href="https://npm.taobao.org/package/cheerio" target="_blank" rel="noopener">cheerio</a></h4><h4 id="2-请求插件-request"><a href="#2-请求插件-request" class="headerlink" title="2. 请求插件  request"></a>2. 请求插件  <a href="https://npm.taobao.org/package/request" target="_blank" rel="noopener">request</a></h4><h4 id="3-http库-superagent"><a href="#3-http库-superagent" class="headerlink" title="3. http库  superagent"></a>3. http库  <a href="https://npm.taobao.org/package/superagent" target="_blank" rel="noopener">superagent</a></h4><h4 id="4-代理-eventproxy"><a href="#4-代理-eventproxy" class="headerlink" title="4. 代理  eventproxy"></a>4. 代理  <a href="https://npm.taobao.org/package/eventproxy" target="_blank" rel="noopener">eventproxy</a></h4><h3 id="二、建立项目node-spider"><a href="#二、建立项目node-spider" class="headerlink" title="二、建立项目node-spider"></a>二、建立项目node-spider</h3><h4 id="1-建立一个Koa2项目"><a href="#1-建立一个Koa2项目" class="headerlink" title="1. 建立一个Koa2项目"></a>1. 建立一个Koa2项目</h4><p> <code>npm install -g koa-generator</code></p><h4 id="2-生成一个koa2的项目"><a href="#2-生成一个koa2的项目" class="headerlink" title="2. 生成一个koa2的项目"></a>2. 生成一个koa2的项目</h4><p> <code>koa2 -e node-spider</code>   -e表示使用ejs模板，具体参照<a href="http://localhost:4000/2016/05/26/2016-5-26-koa_generator/" target="_blank" rel="noopener">koa生成器,一键生成koa和koa2项目</a>   </p><h3 id="三、目标网站分析"><a href="#三、目标网站分析" class="headerlink" title="三、目标网站分析"></a>三、目标网站分析</h3><p>如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。<br><img src="https://image.xiaomo.info/nodeSpider/0.png"></p><h3 id="四、爬虫功能制作"><a href="#四、爬虫功能制作" class="headerlink" title="四、爬虫功能制作"></a>四、爬虫功能制作</h3><h4 id="1-superagent"><a href="#1-superagent" class="headerlink" title="1. superagent"></a>1. superagent</h4><p>是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">'url'</span>); <span class="comment">//解析操作url</span></span><br><span class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>); <span class="comment">//这三个外部依赖不要忘记npm install</span></span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">var</span> eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>);</span><br><span class="line"><span class="keyword">var</span> targetUrl = <span class="string">'https://cnodejs.org/'</span>;</span><br><span class="line">superagent.get(targetUrl)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。</p><p><img src="https://image.xiaomo.info/nodeSpider/1.png"></p><h4 id="2-使用cheerio解析"><a href="#2-使用cheerio解析" class="headerlink" title="2. 使用cheerio解析"></a>2. 使用cheerio解析</h4><p>cheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = cheerio.load(res.text);</span><br><span class="line"><span class="comment">//通过CSS selector来筛选数据</span></span><br><span class="line">$(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其结果为一个个对象，调用 <code>.each(function(index, element))</code>函数来遍历每一个对象，返回的是HTML DOM Elements。</p><p><img src="https://image.xiaomo.info/nodeSpider/2.png"></p><p>输出 <code>console.log($element.attr(&#39;title&#39;));</code>的结果为<br> <code>广州2014年12月06日 NodeParty 之 UC 场之类的标题</code><br>输出 <code>console.log($element.attr(&#39;href&#39;));</code>的结果为<br><code> /topic/545c395becbcb78265856eb2之类的url</code>。<br>再用<code>NodeJS1的url.resolve()</code>函数来补全完整的url。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">superagent.get(tUrl)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> topicUrls = [];</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(res.text);</span><br><span class="line">        <span class="comment">// 获取首页所有的链接</span></span><br><span class="line">        $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $element = $(element);</span><br><span class="line">            <span class="keyword">var</span> href = url.resolve(tUrl, $element.attr(<span class="string">'href'</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(href);</span><br><span class="line">            <span class="comment">//topicUrls.push(href);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="3-使用eventproxy来并发抓取"><a href="#3-使用eventproxy来并发抓取" class="headerlink" title="3.使用eventproxy来并发抓取"></a>3.使用eventproxy来并发抓取</h4><p>教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步：得到一个 eventproxy 的实例</span></span><br><span class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</span><br><span class="line"><span class="comment">//第二步：定义监听事件的回调函数。</span></span><br><span class="line"><span class="comment">//after方法为重复监听</span></span><br><span class="line"><span class="comment">//params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数</span></span><br><span class="line">ep.after(<span class="string">'topic_html'</span>, topicUrls.length, <span class="function"><span class="keyword">function</span>(<span class="params">topics</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair</span></span><br><span class="line">    <span class="comment">//.map</span></span><br><span class="line">    topics = topics.map(<span class="function"><span class="keyword">function</span>(<span class="params">topicPair</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//use cheerio</span></span><br><span class="line">        <span class="keyword">var</span> topicUrl = topicPair[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> topicHtml = topicPair[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(topicHtml);</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">            title: $(<span class="string">'.topic_full_title'</span>).text().trim(),</span><br><span class="line">            href: topicUrl,</span><br><span class="line">            comment1: $(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//outcome</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outcome:'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(topics);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第三步：确定放出事件消息的</span></span><br><span class="line">topicUrls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">topicUrl</span>) </span>&#123;</span><br><span class="line">    superagent.get(topicUrl)</span><br><span class="line">        .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'fetch '</span> + topicUrl + <span class="string">' successful'</span>);</span><br><span class="line">            ep.emit(<span class="string">'topic_html'</span>, [topicUrl, res.text]);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果如下  </p><p><img src="https://image.xiaomo.info/nodeSpider/3.png"></p><p>获取留言用户名和积分  </p><p><img src="https://image.xiaomo.info/nodeSpider/4.png"></p><p>在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $(‘.reply_author’).get(0)可以看到，我们需要获取东西都在这里头。</p><p><img src="https://image.xiaomo.info/nodeSpider/5.png"></p><p>首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userHref = url.resolve(tUrl, $(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).attribs.href);</span><br><span class="line"><span class="built_in">console</span>.log(userHref);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).children[<span class="number">0</span>].data);</span><br></pre></td></tr></table></figure><p>我们可以通过<code>https://cnodejs.org/user/username</code>抓取积分信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.reply_author'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $element = $(element);</span><br><span class="line"><span class="built_in">console</span>.log($element.attr(<span class="string">'href'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在用户信息页面 <code>$(&#39;.big&#39;).text().trim()</code>即为积分信息。<br>使用cheerio的函数.get(0)为获取第一个元素。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userHref = url.resolve(tUrl, $(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).attribs.href);</span><br><span class="line"><span class="built_in">console</span>.log(userHref);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json常用script</title>
      <link href="2016/Package.jsonScripts/"/>
      <url>2016/Package.jsonScripts/</url>
      
        <content type="html"><![CDATA[<p>好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。</p><a id="more"></a><h3 id="一、git相关"><a href="#一、git相关" class="headerlink" title="一、git相关"></a>一、git相关</h3><h4 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1. 查看分支"></a>1. 查看分支</h4><p>  <code>branch:git branch -a</code>,    </p><h4 id="2-查看标签"><a href="#2-查看标签" class="headerlink" title="2. 查看标签"></a>2. 查看标签</h4><p>  <code>tag:git tag</code>,    </p><h4 id="3-创建标签"><a href="#3-创建标签" class="headerlink" title="3. 创建标签"></a>3. 创建标签</h4><p>  <code>createtag:git tag -a 0.1.2 -m Release^-^</code>,    </p><h4 id="4-推送标签"><a href="#4-推送标签" class="headerlink" title="4. 推送标签"></a>4. 推送标签</h4><p>  <code>pushtag:npm run createtag &amp;&amp; git push origin --tags</code>,        </p><h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h4><p>  <code>delbranch:git push origin --delete</code>,             </p><h4 id="6-同步git"><a href="#6-同步git" class="headerlink" title="6. 同步git"></a>6. 同步git</h4><p>  <code>fetch</code>:<code>git fetch -p</code>,                  </p><h4 id="7-推送更新"><a href="#7-推送更新" class="headerlink" title="7. 推送更新"></a>7. 推送更新</h4><p>  <code>push</code>:<code>git push origin master</code>,            </p><h4 id="8-提交代码"><a href="#8-提交代码" class="headerlink" title="8. 提交代码"></a>8. 提交代码</h4><p> <code>commit</code>:<code>git commit -a </code>,             </p><h4 id="9-检出代码"><a href="#9-检出代码" class="headerlink" title="9. 检出代码"></a>9. 检出代码</h4><p>  <code>checkout</code>:<code>git checkout</code>,            </p><h4 id="10-删除标签"><a href="#10-删除标签" class="headerlink" title="10. 删除标签"></a>10. 删除标签</h4><p>  <code>deltag:git push origin --delete tag</code>,             </p><h4 id="11-删除己合并分支"><a href="#11-删除己合并分支" class="headerlink" title="11. 删除己合并分支"></a>11. 删除己合并分支</h4><p>   <code>delbranck:git branch -d</code>,          </p><h4 id="12-删除所分支"><a href="#12-删除所分支" class="headerlink" title="12. 删除所分支"></a>12. 删除所分支</h4><p> <code>delbranchall:git branch -D</code>,                 </p><h4 id="13-重命名分支"><a href="#13-重命名分支" class="headerlink" title="13. 重命名分支"></a>13. 重命名分支</h4><p>  <code>renamebranch:git branch -m</code>,   </p><h3 id="二、webpack相关"><a href="#二、webpack相关" class="headerlink" title="二、webpack相关"></a>二、webpack相关</h3><h4 id="1-清空目录"><a href="#1-清空目录" class="headerlink" title="1. 清空目录"></a>1. 清空目录</h4><p>  <code>clean:rimraf dist</code>,</p><h4 id="2-构建项目"><a href="#2-构建项目" class="headerlink" title="2. 构建项目"></a>2. 构建项目</h4><p>  <code>build:npm run clean &amp;&amp; webpack --progress --colors --profile</code>,</p><h4 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3. 启动项目"></a>3. 启动项目</h4><p>  <code>start:webpack-dev-server --progress --colors --profile</code>,</p><h4 id="4-测试代码"><a href="#4-测试代码" class="headerlink" title="4. 测试代码"></a>4. 测试代码</h4><p>  <code>test:karma start</code>,</p><h4 id="5-检测测试"><a href="#5-检测测试" class="headerlink" title="5. 检测测试"></a>5. 检测测试</h4><p>  <code>test-watch:karma start --auto-watch --no-single-run</code></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> nodejs </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm模块分享</title>
      <link href="2016/NpmModulesShare/"/>
      <url>2016/NpmModulesShare/</url>
      
        <content type="html"><![CDATA[<p>平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。</p><a id="more"></a><h3 id="一、-实用的模块"><a href="#一、-实用的模块" class="headerlink" title="一、 实用的模块"></a>一、 实用的模块</h3><h4 id="1-thunder-vip"><a href="#1-thunder-vip" class="headerlink" title="1.thunder-vip"></a>1.<a href="https://github.com/nswbmw/thunder-vip" target="_blank" rel="noopener">thunder-vip</a></h4><p>作用：获取最新可用的迅雷 vip 账号。<br>解决什么：不用每次打开网站去找号。。<br>用法： <code>$ thunder</code>  or</p>  <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">var thunderVip = require('thunder-vip')<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">thunderVip(<span class="name">function</span> (<span class="name">err</span>, accounts) &#123;</span><br><span class="line">console.log(<span class="name">accounts</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>  截图  </p><p>  <img src="https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9" alt="1"></p><h4 id="2-npm-user-downloads"><a href="#2-npm-user-downloads" class="headerlink" title="2. npm-user-downloads"></a>2. npm-user-downloads</h4><p><a href="https://github.com/nswbmw/npm-user-downloads" target="_blank" rel="noopener">npm-user-downloads</a>  </p><p>  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。</p><p>  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。</p><p>  用法： <code>$ nud hupengbest last-month --limit=20</code></p><p>  截图：</p><p>  <img src="https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl" alt="1"></p><h3 id="二、koa开发模块"><a href="#二、koa开发模块" class="headerlink" title="二、koa开发模块"></a>二、koa开发模块</h3><h4 id="1-co"><a href="#1-co" class="headerlink" title="1. co"></a>1. <a href="https://npm.taobao.org/package/co" target="_blank" rel="noopener">co</a></h4><p>作用：异步控制  </p><p>1 栗子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用<code>co.wrap(fn*)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = co.wrap(<span class="function"><span class="keyword">function</span>* (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn(<span class="literal">true</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3 完整的example  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// yield any promise</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// resolve multiple promises in parallel</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> [a, b, c];</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors can be try/catched</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'boom'</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.message); <span class="comment">// "boom"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onerror</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// log any uncaught errors</span></span><br><span class="line">  <span class="comment">// co will not throw any errors you do not handle!!!</span></span><br><span class="line">  <span class="comment">// HANDLE ALL YOUR ERRORS!!!</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 api  </p><p><code>co(fn*).then( val =&gt; )</code><br>解决一个generator然后返回一个promise</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>var fn = co.wrap(fn*)</code><br>将一个generator转成普通的function并返回一个promise  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = co.wrap(<span class="function"><span class="keyword">function</span>* (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn(<span class="literal">true</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2、debug"><a href="#2、debug" class="headerlink" title="2、debug"></a>2、<a href="https://npm.taobao.org/package/debug" target="_blank" rel="noopener">debug</a></h4><p><code> npm install debug</code>  </p><ol><li>使用方法  </li></ol><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"> //Example app.js</span><br><span class="line">var <span class="built_in">debug</span> = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'http'</span>)</span><br><span class="line">  , http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">  , name = <span class="string">'My App'</span>;</span><br><span class="line"></span><br><span class="line">// fake app</span><br><span class="line"></span><br><span class="line"><span class="built_in">debug</span>(<span class="string">'booting %s'</span>, name);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span></span>&#123;</span><br><span class="line">  <span class="built_in">debug</span>(req.method + <span class="string">' '</span> + req.url);</span><br><span class="line">  res.<span class="keyword">end</span>(<span class="string">'hello\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">debug</span>(<span class="string">'listening'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// fake worker of some kind</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./worker'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example worker.js:</span></span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'worker'</span>);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  debug(<span class="string">'doing some work'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>效果图<br><img src="http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png" alt="1"></p><p>在windows环境下需要设置环境变量<code>set DEBUG=*,-not_this</code> 我这里使用的是idea的debug调试<br><img src="https://image.xiaomo.info/node/debug.png" alt="1"></p><p>windows 下启动方式<br><img src="http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png" alt="1"></p><p>将debug日志转存到文件中<br><code>DEBUG_FD=3 node your-app.js 3&gt; whatever.log</code>   </p><h4 id="3、koa-bodyparser"><a href="#3、koa-bodyparser" class="headerlink" title="3、koa-bodyparser"></a>3、<a href="https://npm.taobao.org/package/koa-bodyparser" target="_blank" rel="noopener">koa-bodyparser</a></h4><p>使用方法  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="keyword">this</span>.request.body;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在koa2中使用   </p><p><code>npm install koa-bodyparser@next --save</code></p><h4 id="4-koa-json"><a href="#4-koa-json" class="headerlink" title="4. koa-json"></a>4. <a href="https://npm.taobao.org/package/koa-json" target="_blank" rel="noopener">koa-json</a></h4><p><code>npm install koa-json --save</code>  </p><p>使用方法   </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="keyword">require</span>(<span class="string">'koa-json'</span>);</span><br><span class="line"><span class="keyword">var</span> Koa = <span class="keyword">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(<span class="title">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>((<span class="title">ctx</span>) =&gt; &#123;</span><br><span class="line">  <span class="title">ctx</span>.<span class="title">body</span> = &#123; <span class="title">foo</span>: '<span class="title">bar</span>' &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-koa-webpack-dev-middleware"><a href="#4-koa-webpack-dev-middleware" class="headerlink" title="4. koa-webpack-dev-middleware"></a>4. <a href="https://npm.taobao.org/package/koa-webpack-dev-middleware" target="_blank" rel="noopener">koa-webpack-dev-middleware</a></h4><p>使用方法   </p><p><code>npm install --save-dev koa-webpack-dev-middleware</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">var app = require('koa')();</span><br><span class="line">var webpackMiddleware = require("koa-webpack-dev-middleware");</span><br><span class="line">app.use(webpackMiddleware(webpack(&#123;</span><br><span class="line">  // webpack options</span><br><span class="line">  // webpackMiddleware takes a Compiler <span class="keyword">object</span> <span class="keyword">as</span> <span class="keyword">first</span> parameter</span><br><span class="line">  // which <span class="keyword">is</span> returned <span class="keyword">by</span> webpack(...) <span class="keyword">without</span> callback.</span><br><span class="line">  entry: <span class="string">"..."</span>,</span><br><span class="line">  <span class="keyword">output</span>: &#123;</span><br><span class="line">      <span class="keyword">path</span>: <span class="string">"/"</span></span><br><span class="line">      // <span class="keyword">no</span> <span class="built_in">real</span> <span class="keyword">path</span> <span class="keyword">is</span> <span class="keyword">required</span>, just pass <span class="string">"/"</span></span><br><span class="line">      // but it will <span class="keyword">work</span> <span class="keyword">with</span> other paths too.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;), &#123;</span><br><span class="line">  // <span class="keyword">all</span> options optional</span><br><span class="line"></span><br><span class="line">  noInfo: <span class="literal">false</span>,</span><br><span class="line">  // display <span class="keyword">no</span> info <span class="keyword">to</span> console (<span class="keyword">only</span> <span class="keyword">warnings</span> <span class="keyword">and</span> <span class="keyword">errors</span>)</span><br><span class="line"></span><br><span class="line">  quiet: <span class="literal">false</span>,</span><br><span class="line">  // display <span class="keyword">nothing</span> <span class="keyword">to</span> the console</span><br><span class="line"></span><br><span class="line">  lazy: <span class="literal">true</span>,</span><br><span class="line">  // <span class="keyword">switch</span> <span class="keyword">into</span> lazy <span class="keyword">mode</span></span><br><span class="line">  // that means <span class="keyword">no</span> watching, but recompilation <span class="keyword">on</span> every request</span><br><span class="line"></span><br><span class="line">  watchDelay: <span class="number">300</span>,</span><br><span class="line">  // delay <span class="keyword">after</span> <span class="keyword">change</span> (<span class="keyword">only</span> lazy: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  publicPath: <span class="string">"/assets/"</span>,</span><br><span class="line">  // <span class="keyword">public</span> <span class="keyword">path</span> <span class="keyword">to</span> bind the middleware <span class="keyword">to</span></span><br><span class="line">  // <span class="keyword">use</span> the same <span class="keyword">as</span> <span class="keyword">in</span> webpack</span><br><span class="line"></span><br><span class="line">  headers: &#123; <span class="string">"X-Custom-Header"</span>: <span class="string">"yes"</span> &#125;,</span><br><span class="line">  // custom headers</span><br><span class="line"></span><br><span class="line">  stats: &#123;</span><br><span class="line">      colors: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  // options <span class="keyword">for</span> formating the <span class="keyword">statistics</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> koa </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb数据库的使用</title>
      <link href="2016/MongodbUse/"/>
      <url>2016/MongodbUse/</url>
      
        <content type="html"><![CDATA[<p>最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了</p><a id="more"></a><h3 id="一、mongodb的开启和关闭"><a href="#一、mongodb的开启和关闭" class="headerlink" title="一、mongodb的开启和关闭"></a>一、mongodb的开启和关闭</h3><h4 id="1-查找mongod是否可用"><a href="#1-查找mongod是否可用" class="headerlink" title="1. 查找mongod是否可用"></a>1. 查找mongod是否可用</h4><p><code>which mongod</code></p><h4 id="2-启动mongodb"><a href="#2-启动mongodb" class="headerlink" title="2. 启动mongodb"></a>2. 启动mongodb</h4><p> 指定path 和log日志<br><code>mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log</code></p><h4 id="3-关闭数据库"><a href="#3-关闭数据库" class="headerlink" title="3. 关闭数据库"></a>3. 关闭数据库</h4><p><code>mongod --shutdown</code></p><h3 id="二、mongodb的操作"><a href="#二、mongodb的操作" class="headerlink" title="二、mongodb的操作"></a>二、mongodb的操作</h3><h4 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h4><p><code>mongod 115.29.137.34:27017</code>  </p><h4 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2. 使用数据库"></a>2. 使用数据库</h4><p>(不存在的数据库也可以使用,插入数据之后会自动保存)<br><code>use mydb</code>  </p><h4 id="3-权限登陆"><a href="#3-权限登陆" class="headerlink" title="3. 权限登陆"></a>3. 权限登陆</h4><p><code>db.auth(&#39;username&#39;,&#39;password&#39;)</code></p><h4 id="4-展示数据库列表"><a href="#4-展示数据库列表" class="headerlink" title="4. 展示数据库列表"></a>4. 展示数据库列表</h4><p><code>show dbs</code></p><h4 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h4><p>(类似于mysql的表)<br><code>db.users.insert({&#39;name&#39;:&#39;xiaomo&#39;})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:25})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:24,&#39;sex&#39;:&#39;女&#39;})</code></p><h4 id="6-查询集合"><a href="#6-查询集合" class="headerlink" title="6. 查询集合"></a>6. 查询集合</h4><p>(前提是use了一个数据库)<br>有一个System.indexes 是索引<br><code>show collections</code></p><h4 id="7-不带条件查询"><a href="#7-不带条件查询" class="headerlink" title="7. 不带条件查询"></a>7. 不带条件查询</h4><p><code>db.users.find()</code>  </p><h4 id="8-带条件查询"><a href="#8-带条件查询" class="headerlink" title="8. 带条件查询"></a>8. 带条件查询</h4><p>(参数是一个对象)<br><code>db.users.find({&#39;name&#39;:&#39;xiaomo&#39;})</code>  </p><h4 id="9-更新数据"><a href="#9-更新数据" class="headerlink" title="9. 更新数据"></a>9. 更新数据</h4><p>(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}})</code>   修改满足条件的第一条数据<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}},{multi:true})</code>    修改所有满足条件的数据  </p><h4 id="10-保存数据"><a href="#10-保存数据" class="headerlink" title="10. 保存数据"></a>10. 保存数据</h4><p>(只有一个参数，必须要传id，后面是要修改的数据)<br><code>db.users.save({&#39;id&#39;:&#39;objectId(574710a97a3afd63cde56a49)&#39;,&#39;age&#39;:30})</code>  </p><h4 id="11-删除数据"><a href="#11-删除数据" class="headerlink" title="11. 删除数据"></a>11. 删除数据</h4><p>(1:条件 2 是否删除所有符合条件的)<br><code>db.users.remove({&#39;name&#39;:&#39;xiaomoing&#39;},true)</code>  </p><h4 id="12-删除集合"><a href="#12-删除集合" class="headerlink" title="12. 删除集合"></a>12. 删除集合</h4><p><code>db.users.drop()</code>  </p><h3 id="三、使用mongoose操作数据库"><a href="#三、使用mongoose操作数据库" class="headerlink" title="三、使用mongoose操作数据库"></a>三、使用mongoose操作数据库</h3><h4 id="1-模块的介绍"><a href="#1-模块的介绍" class="headerlink" title="1. 模块的介绍"></a>1. 模块的介绍</h4><p>连接mongdodb的驱动</p><h4 id="2-配置和链接"><a href="#2-配置和链接" class="headerlink" title="2. 配置和链接"></a>2. 配置和链接</h4><p><code>npm install --save mongoose</code>  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var mongoose = require('mongoose');</span><br><span class="line"><span class="comment">&lt;!-- var uri = 'mongodb://username:password@hostname:port/databasename'; --&gt;</span></span><br><span class="line">var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';</span><br><span class="line">mongoose.connect(uri);</span><br></pre></td></tr></table></figure><h4 id="3-Model-和Shema"><a href="#3-Model-和Shema" class="headerlink" title="3. Model 和Shema"></a>3. Model 和Shema</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// model.js</span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema,</span><br><span class="line">    ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BlogPost = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    author    : ObjectId,</span><br><span class="line">    title     : <span class="built_in">String</span>,</span><br><span class="line">    body      : <span class="built_in">String</span>,</span><br><span class="line">    date      : <span class="built_in">Date</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Model</span></span><br><span class="line">mongoose.model(<span class="string">'blog'</span>,Schema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Comment = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: &#123; <span class="keyword">type</span>: <span class="built_in">String</span>, <span class="keyword">default</span>: <span class="string">'hahaha'</span> &#125;,</span><br><span class="line">  age: &#123; <span class="keyword">type</span>: <span class="built_in">Number</span>, min: <span class="number">18</span>, index: <span class="literal">true</span> &#125;,</span><br><span class="line">  bio: &#123; <span class="keyword">type</span>: <span class="built_in">String</span>, match: <span class="regexp">/[a-z]/</span> &#125;,</span><br><span class="line">  date: &#123; <span class="keyword">type</span>: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a setter</span></span><br><span class="line">Comment.path(<span class="string">'name'</span>).set(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> capitalize(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware</span></span><br><span class="line">Comment.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  notify(<span class="keyword">this</span>.get(<span class="string">'email'</span>));</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-创建文档"><a href="#4-创建文档" class="headerlink" title="4. 创建文档"></a>4. 创建文档</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//insert.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose ＝ require(<span class="string">'mongoose'</span>);</span><br><span class="line">require(<span class="string">'./model.js'</span>); <span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> <span class="type">Blog</span>(&#123;</span><br><span class="line">    name:<span class="type"></span>'xiaomo<span class="string">',</span></span><br><span class="line"><span class="string">    age:25,</span></span><br><span class="line"><span class="string">    bio:'</span>don<span class="string">'t know'</span>,</span><br><span class="line">    date:<span class="type">new Date</span></span><br><span class="line"><span class="type">  </span>&#125;);</span><br><span class="line"></span><br><span class="line">book.save(<span class="function"><span class="keyword">function</span></span>(err)&#123;</span><br><span class="line">    console.log(<span class="string">'save status:'</span>+err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-删除文档"><a href="#5-删除文档" class="headerlink" title="5. 删除文档"></a>5. 删除文档</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.findOne(&#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">  doc.reomove();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6. 简单查询"></a>6. 简单查询</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.find(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>第一个满足条件的结果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.findOne(&#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="7-条件语句"><a href="#7-条件语句" class="headerlink" title="7. 条件语句"></a>7. 条件语句</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// condation.js</span></span><br><span class="line"> <span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"> <span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line"> <span class="comment">//名字是xiaomo或者xiaoming 可以用$or和$and</span></span><br><span class="line"> <span class="keyword">var</span> condation = &#123;</span><br><span class="line">   $or  $and:[</span><br><span class="line">   &#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,</span><br><span class="line">   &#123;<span class="string">'name'</span>:<span class="string">'xiaoming'</span>&#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line"> Blog.find(condation,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="三、在项目中使用mongoose"><a href="#三、在项目中使用mongoose" class="headerlink" title="三、在项目中使用mongoose"></a>三、在项目中使用mongoose</h3><h4 id="1-生成项目"><a href="#1-生成项目" class="headerlink" title="1. 生成项目"></a>1. 生成项目</h4><p><code>koa koatest -e koatest</code>  </p><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h4><p><code>cd koatest &amp;&amp; npm install</code></p><h4 id="3-安装mongoose"><a href="#3-安装mongoose" class="headerlink" title="3. 安装mongoose"></a>3. 安装mongoose</h4><p><code>npm install --save mongoose</code>  </p><h4 id="4-创建模型"><a href="#4-创建模型" class="headerlink" title="4. 创建模型"></a>4. 创建模型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// models/users.server.model.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    uid:<span class="built_in">Number</span>,</span><br><span class="line">    username:<span class="built_in">String</span>,</span><br><span class="line">    createTime:<span class="built_in">Date</span>,</span><br><span class="line">    lastLogin:<span class="built_in">Date</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>,UserSchema);</span><br></pre></td></tr></table></figure><h4 id="5-创建配置文件"><a href="#5-创建配置文件" class="headerlink" title="5. 创建配置文件"></a>5. 创建配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  mongodb:<span class="string">'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//config/mongoose.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> db = mongoose.connect(config.mongodb);</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./../models/users.server.model.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-操作mongdodb-代码"><a href="#6-操作mongdodb-代码" class="headerlink" title="6. 操作mongdodb 代码"></a>6. 操作mongdodb 代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//routers/users.js</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>);</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">      uid:</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="keyword">yield</span> User.find(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> koa </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa生成器,一键生成koa和koa2项目</title>
      <link href="2016/KoaGenerator/"/>
      <url>2016/KoaGenerator/</url>
      
        <content type="html"><![CDATA[<p>最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。</p><a id="more"></a><h3 id="一、一键生成koa项目特性"><a href="#一、一键生成koa项目特性" class="headerlink" title="一、一键生成koa项目特性##"></a>一、一键生成koa项目特性##</h3><ol><li>Express-style</li><li>Support koa 1.x（已支持）</li><li>Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）</li></ol><h3 id="二、使用说明"><a href="#二、使用说明" class="headerlink" title="二、使用说明##"></a>二、使用说明##</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><p> 一定要全局安装(koa1.2和koa2都己经支持)<br><code>npm install koa-generator -g</code><br>koa1.2  生成一个test项目,切到test目录并下载依赖<br><code>koa test &amp;&amp; cd test &amp;&amp; npm install</code><br>koa2    生成一个test项目,切到test目录并下载依赖<br><code>koa2 test &amp;&amp; cd test &amp;&amp; npm install</code></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><code>npm start</code><br>  访问 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000</a> 就可以看到项目效果   </p><h3 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数##"></a>三、参数##</h3><p>当然koa生成器功能没有这么弱啦,可以定制你想要的东西  </p><pre><code>-h, --help          帮助-V, --version       版本号-e, --ejs           添加ejs模板引擎支持(默认是jade)    --hbs           添加hbs模板引擎支持(默认是hbs)-H, --hogan         添加hogan.js支持-c, --css &lt;engine&gt;  添加css样式 支持 less sass styus css(默认是css)    --git           添加 .gitignore-f, --force         force on non-empty directory</code></pre><h3 id="四、项目地址"><a href="#四、项目地址" class="headerlink" title="四、项目地址##"></a>四、项目地址##</h3><p><a href="https://github.com/houko/node-koa" target="_blank" rel="noopener">https://github.com/houko/node-koa</a></p><h2 id="五、国际惯例-项目演示"><a href="#五、国际惯例-项目演示" class="headerlink" title="五、国际惯例-项目演示##"></a>五、国际惯例-项目演示##</h2><ol><li>安装koa-generator  </li><li>新建项目   </li><li>运行项目  </li><li>演示结束<br><img src="https://image.xiaomo.info/node/koa-generator.gif" alt="koa生成器"></li></ol><p>查看大图 <a href="https://image.xiaomo.info/node/koa-generator.gif" target="_blank" rel="noopener">koa生成器</a></p><h2 id="我的github地址"><a href="#我的github地址" class="headerlink" title="我的github地址"></a>我的github地址</h2><p><a href="https://github.com/houko" target="_blank" rel="noopener">https://github.com/houko</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> es6 </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs框架koa学习</title>
      <link href="2016/NodeKoa/"/>
      <url>2016/NodeKoa/</url>
      
        <content type="html"><![CDATA[<p>Koa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。</p><a id="more"></a><h3 id="一、国际惯例-hello-world"><a href="#一、国际惯例-hello-world" class="headerlink" title="一、国际惯例 hello world##"></a>一、国际惯例 hello world##</h3><h4 id="1-当前版本1-2"><a href="#1-当前版本1-2" class="headerlink" title="1. 当前版本1.2"></a>1. 当前版本1.2</h4><p><code>npm install --save koa</code>   </p><h4 id="2-代码撸起来"><a href="#2-代码撸起来" class="headerlink" title="2. 代码撸起来"></a>2. 代码撸起来</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">let</span> app = koa();</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">"hello xiaomo"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo<br>你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  </p><p>另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inc</span> () &#123;</span></span><br><span class="line"> let <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line"> yield <span class="built_in">number</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let test = inc()</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 0</span></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 1</span></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 2</span></span><br></pre></td></tr></table></figure><p>我分解一下这个程序：</p><p>inc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1<br>inc 函数被指派给了变量 test<br>inc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。<br>我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。</p><p>但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'hello world'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /404 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/404'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'page not found'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /500 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/500'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'internal server error'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，<a href="http://koajs.com/#context" target="_blank" rel="noopener">请点这里</a>。</p><p>让我们写一个将请求中的内容大写的中间件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa()</span><br><span class="line"></span><br><span class="line">app.use(upcaser())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upcaser</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> next</span><br><span class="line"><span class="keyword">this</span>.body = <span class="keyword">this</span>.body.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h3 id="我的github地址"><a href="#我的github地址" class="headerlink" title="我的github地址"></a>我的github地址</h3><p><a href="https://github.com/houko" target="_blank" rel="noopener">https://github.com/houko</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> es6 </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript学习笔记</title>
      <link href="2016/JavascriptSyntax/"/>
      <url>2016/JavascriptSyntax/</url>
      
        <content type="html"><![CDATA[<p>一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。</p><a id="more"></a><h3 id="一、一些不同"><a href="#一、一些不同" class="headerlink" title="一、一些不同"></a>一、一些不同</h3><h4 id="1-javscript没有块级作用域"><a href="#1-javscript没有块级作用域" class="headerlink" title="1. javscript没有块级作用域"></a>1. javscript没有块级作用域</h4><p>于是es6中有了let和var<br>模拟js的块级作用域    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure><h4 id="2-javascipt中this用法不同"><a href="#2-javascipt中this用法不同" class="headerlink" title="2. javascipt中this用法不同"></a>2. javascipt中this用法不同</h4><p>它指向调用它的那个对象</p><h4 id="3-闭包是指有权访问另一个函数作用域中的变量的函数。"><a href="#3-闭包是指有权访问另一个函数作用域中的变量的函数。" class="headerlink" title="3. 闭包是指有权访问另一个函数作用域中的变量的函数。"></a>3. 闭包是指有权访问另一个函数作用域中的变量的函数。</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是一个闭包'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h3><p><code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code> 、<code>object</code>、<code>function</code><br>它们有对应的方法<br><code>Boolean()</code>、<code>String()</code>、<code>Number()</code> 、<code>Object()</code>  </p><h4 id="1-undefined"><a href="#1-undefined" class="headerlink" title="1. undefined"></a>1. <code>undefined</code></h4><p>没有被定义就会返回<code>undefined</code>,是<code>null</code>衍生出来的,因些<code>undefined==null</code> 返回true</p><h4 id="2-null"><a href="#2-null" class="headerlink" title="2. null"></a>2. <code>null</code></h4><p>由于历史原因 <code>typeof null</code>返回<code>object</code></p><h4 id="3-boolean"><a href="#3-boolean" class="headerlink" title="3. boolean"></a>3. <code>boolean</code></h4><p><code>Boolean()</code><br>非0返回true<br>0、null、undefined返回false</p><h4 id="4-string"><a href="#4-string" class="headerlink" title="4. string"></a>4. <code>string</code></h4><p><code>String()</code><br>不管传入什么都会原样返回,但如果是<code>function</code>,会执行该方法并返回<code>undefined</code><br><code>toString(参数,进制)</code><br><code>toUpperCase()</code><br><code>toLowerCase()</code><br><code>substring(parm1,parm2)</code><br><code>substr()</code><br><code>charAt(1)</code><br><code>charCodeAt(2)</code><br><code>concat()</code><br><code>slice()</code><br><code>indexof()</code><br><code>lastIndexOf</code><br><code>trim()</code><br><code>search(pattern)</code>  //返回索引<br><code>replcae(&#39;原&#39;,&#39;新&#39;)</code> //第一个参数支持正则    第二个参数也可以是一个function<br><code>splice(&#39;,&#39;)</code>    //支持正则，支持指定长度<br>它只有length属性   </p><h4 id="5-number"><a href="#5-number" class="headerlink" title="5. number"></a>5. <code>number</code></h4><p><code>Number()</code>          true=&gt;1 false=&gt;0   null=&gt;0 undefined=&gt;NaN<br><code>Number.MAX_VALUE</code>  最大值<br><code>Number.MIN_VALUE</code>  最小值<br><code>NaN</code>  它是一个特例，不与任何值相等包括自己<br><code>parseInt()</code> //可以查找字符串中的数字并转换<br><code>parseFloat()</code> //可以查找字符串中的数字并转换<br><code>inFinite()</code> //是否在最大值和最小值之间<br><code>toFixed(小数点位数)</code><br>说明：它能够识别科学计数法 比如 2.15e5 =&gt; 215000   </p><h4 id="6-object"><a href="#6-object" class="headerlink" title="6. object"></a>6. <code>object</code></h4><p><code>constructor</code>  构造函数<br><code>obj.hasOwnProperty()</code> 是否具有自己的方法<br><code>obj.isProtoTypeOf(object)</code>  检查传入的对象是否是另一个对象的原型<br><code>ob.propertyIsEnumerable(propetyName)</code>  检查给定的属性能否使用for-in<br><code>obj.toLocaleString()</code> 返回执行地区对应的对象的字符串 =&gt;[‘Object’]<br><code>obj.toString()</code>    返回执行对象的字符串 =&gt;[‘Object’]<br><code>obj.valueOf()</code>   返回对象序列化之后的结果</p><h3 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h3><h4 id="1-大于和小于"><a href="#1-大于和小于" class="headerlink" title="1. 大于和小于"></a>1. 大于和小于</h4><p><code>&#39;23&#39;&lt;&#39;3&#39; </code>  //true,字符串的比较跟数字的比较不同<br><code>&#39;a&#39;&lt;3</code>   //false a会被转成NaN<br><code>特别注意</code>:NaN和任何数比都是false<br><code>NaN&gt;3</code> //false<br><code>NaN&lt;3</code> //false<br><code>&#39;23&#39;&lt;3</code> //false  ‘23’会被转成23再与3比较</p><h4 id="2-全等和不全等"><a href="#2-全等和不全等" class="headerlink" title="2. 全等和不全等"></a>2. 全等和不全等</h4><p><code>&#39;55&#39;==55</code> //true 不全等只判断值不判断类型<br><code>&#39;55&#39;===55</code> //false  全等不仅判断值还判断类型  </p><h3 id="四、条件控制语句"><a href="#四、条件控制语句" class="headerlink" title="四、条件控制语句"></a>四、条件控制语句</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(proertyName in global)</span></span>&#123;</span><br><span class="line">  console.log(proertyName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h3><p>注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。</p><h3 id="六、检测类型"><a href="#六、检测类型" class="headerlink" title="六、检测类型"></a>六、检测类型</h3><p><code>typeof xxx</code><br>// 返回数据类型</p><h3 id="七、引用类型"><a href="#七、引用类型" class="headerlink" title="七、引用类型"></a>七、引用类型</h3><h4 id="1-object"><a href="#1-object" class="headerlink" title="1. object"></a>1. <code>object</code></h4><p>声明对象的方法<br><code>var obj = new Object();</code><br><code>var obj = {};</code></p><p>赋值<br><code>obj.name=&#39;xiaomo&#39;;</code>   </p><p>使用对象的属性<br><code>obj.name</code><br><code>obj[&#39;name&#39;]</code>  </p><h4 id="2-Array"><a href="#2-Array" class="headerlink" title="2. Array"></a>2. <code>Array</code></h4><p>可以存任何类型    </p><p>声明<br><code>var arr = new Array();</code><br><code>var arr = new Array(3);</code><br><code>var arr = [];</code>  </p><p>添加对象<br><code>arr.push(&#39;a&#39;,b&#39;,1,3,4,true)</code><br>操作对象(删除、插入、替换)     </p><p><code>删除</code>：起始位置，要删除的个数<br><code>arr.splice(起始位置,删除的个数)</code><br>例子：<code>arr.splice(2,1)</code> //返回[1] 返回删除的那个数   </p><p><code>插入</code>：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(1,0,&#39;插入的值1&#39;,&#39;插入的值2&#39;,&#39;插入的值n&#39;)</code>  </p><p><code>替换</code>：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(0,2,&#39;test1&#39;,&#39;test2&#39;) </code>   </p><p>其他数组操作<br><code>arr.push(&#39;test&#39;)</code> 插入到数组的最后面<br><code>arr.unshift(&#39;xiaomo&#39;)</code> 插入到数组的最前面<br><code>arr.pop()</code>   //删除数组的最后一个值<br><code>arr.shift()</code> //删除数组第一个值</p><p>使用对象<br><code>arr[1]</code>   </p><p>数组自带的方法<br><code>arr.reverse();</code>   反转数组<br><code>arr.sort()</code>   默认升序排列<br><code>arr.sort((a,b)=&gt;{reutrn b-a})</code>  传入排序方法会按照自定义排序<br><code>arr.concat(另一个数组或者单个参数)</code>  如果传入数组也会被展开拿出来,不会影响原数组<br><code>arr.slice(0,3)</code>  会把选定的部分截取出来生成一个新的数组，不会影响原数组<br><code>arr.indexOf(4)</code>   返回该值存在的下标,不存在返回-1<br><code>arr.lastIndexOf(4)</code> 从倒数开始查找,返回该值存在的下标,不存在返回-1<br><code>arr.every(fn)</code>   对每个参数进行处理，全部符合返回true   </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(item,index,array)&#123;<span class="comment">//当前值、索引、该数组</span></span><br><span class="line">  <span class="keyword">return</span> item&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>arr.some(fn)</code>   对每个参数进行处理，有一个符合就返回true  </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(item,index,array)&#123;<span class="comment">//当前值、索引、该数组</span></span><br><span class="line">  <span class="keyword">return</span> item&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>arr.filter(fn)</code> 对每个参数进行处理，返回过滤后的数组   </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(item,index,array)&#123;<span class="comment">//当前值、索引、该数组</span></span><br><span class="line">  <span class="keyword">return</span> item&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>arr.map(fn)</code>    对每个参数进行处理，返回处理后的数组  </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(item,index,array)&#123;<span class="comment">//当前值、索引、该数组</span></span><br><span class="line">  <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>arr.forEach(fn)</code>  对每个参数进行处理，没有返回值<br><code>arr.reduce(fn)</code>    对每个参数进行处理，迭代返回最终结果    </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(prev,cur,index,array)&#123;<span class="comment">//前一个值、当前值、索引、数组</span></span><br><span class="line">  <span class="keyword">return</span> prev+cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>arr.reduceRight(fn)</code>  从右边对每个参数进行处理，迭代返回最终结果   </p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span></span>=(prev,cur,index,array)&#123;<span class="comment">//前一个值、当前值、索引、数组</span></span><br><span class="line">  <span class="keyword">return</span> prev+cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Date类型"><a href="#3-Date类型" class="headerlink" title="3. Date类型"></a>3. Date类型</h4><p>声明:<br><code>var date = new Date();</code>  创建当前时间 也可以接收参数<br><code>Date.parse(pattern)</code>    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳<br><code>new Date(Date.parse(pattern))</code>   //   将时间戳格式化为正常的时间<br><code>new Date(2016,5,19,20,49,15)</code>  //也可以用逗号 2016-05-19 20:49:15<br><code>Date.now()</code>  //当前时间的时间戳<br><code>toDateString()</code> //返回时间的字符串 星期、日、月、年<br><code>toTimeString()</code> //时、分、秒、时区<br><code>toLocaleDateString()</code>   特定时区的星期、日、月、年<br><code>toLocaleTimeString()</code>   特定时区的时、分、秒、时间    </p><p>时间格式   </p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">var</span> time = <span class="built_in">date</span>.getTime() <span class="comment">//当前时间的时间戳</span></span><br><span class="line"><span class="built_in">var</span> fullYear = <span class="built_in">date</span>.getFullYear(); <span class="comment">//2016</span></span><br><span class="line"><span class="built_in">var</span> year = <span class="built_in">date</span>.getYear();   <span class="comment">//116  </span></span><br><span class="line"><span class="built_in">var</span> month = <span class="built_in">date</span>.getMonth(); <span class="comment">//04 从0开始</span></span><br><span class="line"><span class="built_in">var</span> d = <span class="built_in">date</span>.getDate(); <span class="comment">//日  19</span></span><br><span class="line"><span class="built_in">var</span> day = <span class="built_in">date</span>.getDay();  <span class="comment">//4 返回星期几</span></span><br><span class="line"><span class="built_in">var</span> <span class="keyword">min</span> = <span class="built_in">date</span>.getMinitues(); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">var</span> sec = <span class="built_in">date</span>.getSeconds() <span class="comment">//秒</span></span><br><span class="line"><span class="built_in">var</span> mill = <span class="built_in">date</span>.getMilliSeconds() <span class="comment">//毫秒</span></span><br></pre></td></tr></table></figure><h4 id="4-正则-RegExp类型"><a href="#4-正则-RegExp类型" class="headerlink" title="4. 正则 RegExp类型"></a>4. 正则 RegExp类型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'pattern'</span>);</span><br><span class="line">re.test(parm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// exec 返回匹配的结果</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">'abcdef.js'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\.js$/</span></span><br><span class="line"><span class="keyword">var</span> matches = parrten.exec(test);</span><br><span class="line"><span class="built_in">console</span>.log(matches); <span class="comment">// '.js' ,index:6 input:'abcdef.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test 返回true/false</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'abcdef.js'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\.js$/</span></span><br><span class="line">pattern.test(text); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="5-方法-function"><a href="#5-方法-function" class="headerlink" title="5. 方法　function"></a>5. 方法　function</h4><p>方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法<br>每个方法都包含两个属性:<code>length</code>(参数个数)和<code>protoType</code>(原型链)   </p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>)    <span class="comment">//1</span></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是一个方法'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果是立即执行的函数则不行</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  function test()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;()</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>方法有两个特殊的内部属性和两个非继承来的方法 <code>call()</code>、<code>apply()</code>,以及其他方法 <code>toString()、valueOf()</code><br><code>arguments</code>和<code>this</code><br><code>arguments</code>是类数组,保存着参数。它有<code>arguments.callee()</code>方法   </p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">function <span class="built_in">factorial</span>(<span class="built_in">num</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="built_in">num</span> * arguments.callee(<span class="built_in">num</span>-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">5</span>); // <span class="number">5</span>! <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><p><code>this</code>在javascript中用法比较特殊,它指向它的调用者</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">color</span>=<span class="string">'green'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="built_in">color</span>=<span class="string">'pink'</span>;</span><br><span class="line">&#125;</span><br><span class="line">o.sayColor(); <span class="comment">//pink</span></span><br><span class="line">sayColor(); <span class="comment">//green</span></span><br></pre></td></tr></table></figure><p><code>protoType</code> 原型链    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call 参数1:运行函数的作用域 参数2 agruments或者Array</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum1</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,[num1,num2])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,num1,num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>encodeURIComponent()</code> //encode字符串<br><code>decodeURICopmonent()</code> //decode字符串<br><code>eval(express)</code> //解析字符串表达式<br><code>eval(&quot;console.log(&#39;我是被解析的表达式&#39;)&quot;)</code>   </p><h4 id="6-Math"><a href="#6-Math" class="headerlink" title="6. Math"></a>6. <code>Math</code></h4><p><code>Math.E</code> //e<br><code>Math.LN10</code> //10的自然对数<br><code>Math.LOG10E</code> //以10为底e的对数<br><code>Math.PI</code>  //PI<br><code>Math.SQRT2</code> //2的平方根<br><code>Math.SQRT1_2</code>  // 1/2的平方根   </p><p>方法：<br><code>Math.min(Array)</code><br><code>Math.max(Array)</code><br><code>Math.ceil(parm)</code> //向上取整<br><code>Math.floor(parm)</code> //向下取整<br><code>Math.round(parm)</code> //标准的四舍五入<br><code>Math.random()</code>  // 0-1之间的数<br><code>Math.abs(parm)</code> //绝对值</p><h3 id="八、面向对象的编程方法"><a href="#八、面向对象的编程方法" class="headerlink" title="八、面向对象的编程方法"></a>八、面向对象的编程方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name:<span class="string">'xiaomo'</span>,</span><br><span class="line">  age:<span class="number">25</span>，</span><br><span class="line">  sayHello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂模式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age= age;</span><br><span class="line">    o.job =job;</span><br><span class="line">    o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'xiaomo'</span>,<span class="number">25</span>,<span class="string">'programer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'xiaoming'</span>,<span class="number">20</span>,<span class="string">'it'</span>);</span><br></pre></td></tr></table></figure><p>构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age,</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'xiaomo'</span>,<span class="number">25</span>,<span class="string">'programer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'xiaoming'</span>,<span class="number">20</span>,<span class="string">'it'</span>);</span><br></pre></td></tr></table></figure><p>判断类型 <code>instanceof</code>  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">//true</span></span><br><span class="line">person1 <span class="keyword">instanceof</span> Person <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>原型模式    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//实际上隐式的创建一个构造函数constructor</span></span><br><span class="line">Person.prototype.name=<span class="string">'xiaomo'</span>;</span><br><span class="line">Person.prototype.age=<span class="number">25</span>;</span><br><span class="line">Person.prototype.job=<span class="string">'programmer'</span>;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前也可以这样</span></span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">  name=<span class="string">'xiaomo'</span>;</span><br><span class="line">  age=<span class="number">25</span>;</span><br><span class="line">  job=<span class="string">'programmer'</span>;</span><br><span class="line">  sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.isPrototypeOf(person1); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person1.name); <span class="comment">//xiaomo</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">'name'</span>) <span class="comment">//false 存在于protoType中，不存在于实例中</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> person1 <span class="comment">//true  虽然实例中没有,但是它的原型链有,所以返回true</span></span><br><span class="line"><span class="built_in">Object</span>.keys(person1) <span class="comment">//会枚举出实例中所有的属性</span></span><br></pre></td></tr></table></figure><h3 id="九、定时器和延迟执行"><a href="#九、定时器和延迟执行" class="headerlink" title="九、定时器和延迟执行"></a>九、定时器和延迟执行</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//延迟一秒执行fn函数，只执行一次</span></span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> timeoutId = setTimeout(fn,timeout)</span><br><span class="line">  <span class="comment">//清除间歇执行函数</span></span><br><span class="line">  clearTimeout(timeoutId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定时器，每秒执行fn函数，直到清除定时器</span></span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> intervalId = setInterval(fn,timout)</span><br><span class="line">  <span class="comment">//清除定时器</span></span><br><span class="line">  clearInterval(itervalId);</span><br></pre></td></tr></table></figure><h3 id="十、BOM-浏览器相关"><a href="#十、BOM-浏览器相关" class="headerlink" title="十、BOM(浏览器相关)"></a>十、BOM(浏览器相关)</h3><h4 id="1-系统对话框"><a href="#1-系统对话框" class="headerlink" title="1. 系统对话框"></a>1. 系统对话框</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(); <span class="comment">//弹出框</span></span><br><span class="line"></span><br><span class="line">confirm();<span class="comment">//确认框</span></span><br><span class="line"><span class="keyword">if</span>(confirm(<span class="string">'are you sure?'</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sure'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am not sure!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prompt();<span class="comment">//交互框</span></span><br><span class="line"><span class="keyword">var</span> result = promot(<span class="string">"what's up?"</span>，<span class="string">'默认值'</span>);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="literal">null</span>)&#123;</span><br><span class="line">  alert(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-location对象"><a href="#2-location对象" class="headerlink" title="2. location对象"></a>2. location对象</h4><p>参数</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span>.hash <span class="comment">//#contents url的hash值</span></span><br><span class="line"><span class="keyword">location</span>.host <span class="comment">// ip</span></span><br><span class="line"><span class="keyword">location</span>.hostname <span class="comment">//域名</span></span><br><span class="line"><span class="keyword">location</span>.href <span class="comment">//http域名</span></span><br><span class="line"><span class="keyword">location</span>.pathname <span class="comment">//url的目录</span></span><br><span class="line"><span class="keyword">location</span>.port <span class="comment">//8080</span></span><br><span class="line"><span class="keyword">location</span>.protocool <span class="comment">//协议</span></span><br><span class="line"><span class="keyword">location</span>.search <span class="comment">//?q=search</span></span><br><span class="line"><span class="keyword">location</span>.reload() <span class="comment">//可能从缓存加载</span></span><br><span class="line"><span class="keyword">location</span>.reload(<span class="literal">true</span>) <span class="comment">//重新加载</span></span><br></pre></td></tr></table></figure><h4 id="3-navigator对象"><a href="#3-navigator对象" class="headerlink" title="3. navigator对象"></a>3. navigator对象</h4><p> 检测浏览器属性    </p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">navigator.appCodeName <span class="comment">//浏览器的名字</span></span><br><span class="line">navigator.appName <span class="comment">//完整的浏览器名称</span></span><br><span class="line">navigator.appVersion <span class="comment">//浏览器的版本</span></span><br><span class="line">navigator.cookieEnabled <span class="comment">//cookie是否启用</span></span><br><span class="line">navigator.javaEnabled() <span class="comment">//java是否启用</span></span><br><span class="line">navigator.language <span class="comment">//主语言 zh-CH</span></span><br><span class="line">navigator.languages <span class="comment">//支持的语言</span></span><br><span class="line">navigator.onLine <span class="comment">//浏览器是否连接到了internet</span></span><br><span class="line">navigator.platofrm <span class="comment">//浏览器的平台 "Win32"</span></span><br><span class="line">navigator.plugins <span class="comment">//返回浏览器安装的插件的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">  name  = name.toLowerCase();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt;navigator.plugins.length;i++)&#123;</span><br><span class="line">    <span class="comment">// &gt;-1表示找到了</span></span><br><span class="line">    <span class="keyword">var</span> isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)&gt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(isTrue)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-history对象"><a href="#4-history对象" class="headerlink" title="4. history对象"></a>4. history对象</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">history</span>.go<span class="params">(-1)</span>;<span class="string">//</span>后退一页</span><br><span class="line"><span class="keyword">history</span>.back<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">history</span>.go<span class="params">(1)</span>;<span class="string">//</span>前进一页</span><br><span class="line"><span class="keyword">history</span>.forward<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">history</span>.go<span class="params">('xiaomo.info')</span><span class="string">//</span>跳转到最近访问过的该页面</span><br><span class="line"><span class="keyword">history</span>.length==0 <span class="string">//</span>表示这是用户打开浏览器的第一个页面</span><br></pre></td></tr></table></figure><h3 id="十一、表单"><a href="#十一、表单" class="headerlink" title="十一、表单"></a>十一、表单</h3><h4 id="1-表单属性"><a href="#1-表单属性" class="headerlink" title="1. 表单属性"></a>1. 表单属性</h4><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">acceptCharset 服务器能够处理的字符集</span><br><span class="line">action 接受请求的url</span><br><span class="line">elements 表单所有控件的集合</span><br><span class="line">enctype 请求的编码类型</span><br><span class="line">length 表单中控件的数量</span><br><span class="line"><span class="function"><span class="keyword">method</span> <span class="title">get</span>/<span class="title">post</span></span></span><br><span class="line"><span class="function"><span class="title">name</span> 表单的名字</span></span><br><span class="line"><span class="function"><span class="title">reset</span><span class="params">()</span> 重置</span></span><br><span class="line"><span class="function"><span class="title">submit</span><span class="params">()</span> 提交</span></span><br><span class="line"><span class="function"><span class="title">target</span></span></span><br></pre></td></tr></table></figure><p><code>document.forms</code> 可以取到表单的所有控件    </p><h4 id="2-控件"><a href="#2-控件" class="headerlink" title="2. 控件"></a>2. 控件</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">disabled 当前字段是否禁用</span><br><span class="line">form 指向当前字段所属表单的指针:只读</span><br><span class="line">name 当前字段的名字</span><br><span class="line">readOnly 当前字段只读</span><br><span class="line">tabIndex tab切换的序号</span><br><span class="line">type 当前字段的类型</span><br><span class="line">value 当前字段提交给服务器的值</span><br></pre></td></tr></table></figure><p>修改控件的值</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = document.getElementById(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">name</span>.value=<span class="string">'xiaomo'</span></span><br><span class="line"><span class="keyword">name</span>.focus(); <span class="comment">//把焦点设置到当前字段</span></span><br><span class="line"><span class="comment">//在控件中加入 autofocus="focus" 是一样的效果</span></span><br></pre></td></tr></table></figure><p>选择文本<br><code>element.select()</code>     </p><p>取得选中的文本</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">alertText</span>(<span class="params">username</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span><br><span class="line">    alert(getSelectText(username));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSelectText</span>(<span class="params">textbox</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// html</span></span><br><span class="line">&lt;input type=<span class="string">"input"</span> id=<span class="string">"username"</span> value=<span class="string">"我是测试文本，看一下能不能被选中"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"确定"</span> onclick=<span class="string">"alertText()"</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="3-剪贴板事件"><a href="#3-剪贴板事件" class="headerlink" title="3. 剪贴板事件"></a>3. 剪贴板事件</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">beforecopy</span><br><span class="line">copy</span><br><span class="line">cut</span><br><span class="line">beforepaste</span><br><span class="line">paste</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个公用方</span></span><br><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line"></span><br><span class="line">  getClipboardText:function(<span class="keyword">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData  = (<span class="keyword">event</span>.clipboardData || window.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">'text'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setClipboardText:function(<span class="keyword">event</span>,<span class="keyword">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">event</span>.clipboardData)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">event</span>.clipboardData.setData(<span class="string">"text/plain"</span>,<span class="keyword">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.clipboardData)&#123;</span><br><span class="line">      <span class="keyword">return</span> window.clipboardData.setData(<span class="string">"txt"</span>,<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHander(txtbox,<span class="string">"paste"</span>,function(<span class="keyword">event</span>))&#123;</span><br><span class="line">  <span class="keyword">event</span>  = EventUtil.getEvent(<span class="keyword">event</span>);</span><br><span class="line">  <span class="keyword">var</span> text = EventUtil.getClipboardText(<span class="keyword">event</span>);</span><br><span class="line">  <span class="keyword">if</span>(!/^\d*$/.test(text))&#123;</span><br><span class="line">    EventUtil.preventDefault(<span class="keyword">event</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/hykun/p/EventUtil.html" target="_blank" rel="noopener">EventUtil</a></p><p>自动切换焦点</p><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">function</span>()&#123;</span><br><span class="line">  function tabForward(<span class="name">event</span>)&#123;</span><br><span class="line">    event = EventUtil.getEvent(<span class="name">event</span>)<span class="comment">;</span></span><br><span class="line">    var target = EventUtil.getTarget(<span class="name">event</span>)<span class="comment">;</span></span><br><span class="line">    if(<span class="name">target.value.length</span> = target.maxLength)&#123;</span><br><span class="line">      var form = target.form<span class="comment">;</span></span><br><span class="line">      for( var i =0<span class="comment">; len = form.elements.length;i&lt;len;i++)&#123;</span></span><br><span class="line">        if(<span class="name">form.elements</span>[<span class="name">i</span>]==target)&#123;</span><br><span class="line">          if(<span class="name">form.elements</span>[<span class="name">i+1</span>])&#123;</span><br><span class="line">            form.elements[<span class="name">i+1</span>].focus()<span class="comment">;</span></span><br><span class="line">          &#125;</span><br><span class="line">          return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  var text1 = document.getElementById(<span class="symbol">'text1</span>')<span class="comment">;</span></span><br><span class="line">  var text2 = document.getElementById(<span class="symbol">'text2</span>')<span class="comment">;</span></span><br><span class="line">  var text3 = document.getElementById(<span class="symbol">'text3</span>')<span class="comment">;</span></span><br><span class="line">  EventUtil.addHander(<span class="name">text1</span>,<span class="symbol">'keyup</span>',tabForward)<span class="comment">;</span></span><br><span class="line">  EventUtil.addHander(<span class="name">text2</span>,<span class="symbol">'keyup</span>',tabForward</span><br><span class="line">  EventUtil.addHander(<span class="name">text3</span>,<span class="symbol">'keyup</span>',tabForward</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure><h4 id="4-下拉框-select"><a href="#4-下拉框-select" class="headerlink" title="4. 下拉框 select"></a>4. 下拉框 select</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span><span class="type">Option</span>,relOption) 插入一个option</span><br><span class="line"><span class="comment">//最佳做法(在列表最后插入一个option)</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Option</span> = <span class="keyword">new</span> <span class="type">Option</span>(<span class="string">"text"</span>,<span class="string">"value"</span>);</span><br><span class="line">selectBox.add(<span class="keyword">new</span><span class="type">Option</span>,undefined);</span><br><span class="line"></span><br><span class="line">multiple 是否允许多选</span><br><span class="line">options 控件中所有options的HTMLCollection</span><br><span class="line">remove(index) 移除指定位置的选项</span><br><span class="line"><span class="comment">//移除指定的选项(这里移除的是第一项)</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">selectBox.remove(selectBox.options[index])</span><br><span class="line">selectedIndex 基于<span class="number">0</span>的选中项的索引,没有选中项<span class="number">-1</span></span><br><span class="line">size 选择框中可见的行数</span><br><span class="line">text 选中项的文本内容</span><br><span class="line">value 选项的值</span><br><span class="line"><span class="comment">//移动一个选项到特定位置(将第2个选项移动到最后一个选项)</span></span><br><span class="line"><span class="keyword">var</span> optionToMove = selectBox.options[<span class="number">1</span>];</span><br><span class="line">selectBox.insertBefore(optionToMove,selectBox.options[optionToMove.index<span class="number">-1</span>])</span><br><span class="line">/添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)</span><br><span class="line">selectBox.appendChind(selectBox.options[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="5-表单序列化"><a href="#5-表单序列化" class="headerlink" title="5. 表单序列化"></a>5. 表单序列化</h4><p>原则：<br>对表单字段的名字和值进行url编码,使用&amp;分割<br>不发送禁用的表单字段<br>只发送勾选的单选按钮和复选框<br>不发送type为reset和button的按钮<br>多选框中的每选中的值单独一个条目<br>submit的时候,本按钮也会被提交<br>select发送的时候如果有value就发value的值 没有就发text内容  </p><p><code>form.serialize()</code>  </p><h4 id="6-富文本编辑器"><a href="#6-富文本编辑器" class="headerlink" title="6. 富文本编辑器"></a>6. 富文本编辑器</h4><p>只要加上<code>contenteditable</code>就可以让div可以编辑<br><code>&lt;div id=&quot;richedit&quot; contenteditable&gt;&lt;/div&gt;</code><br>也可以用js控制</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">var richedit = <span class="built_in">document</span>.getElementById(<span class="string">'richedit'</span>);</span><br><span class="line">richedit.contenteditable=<span class="string">"true"</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="literal">true</span> <span class="literal">false</span> inherit</span><br><span class="line"><span class="built_in">document</span>.exexCommand(命令,<span class="literal">false</span>,值);</span><br><span class="line">//<span class="built_in">document</span>.exexCommand(<span class="string">'bold'</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="十二、canvas"><a href="#十二、canvas" class="headerlink" title="十二、canvas"></a>十二、canvas</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个canvas   </span></span><br><span class="line">&lt;canvas id=<span class="string">"drawing"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;</span><br><span class="line">    您的浏览器不支持canvas</span><br><span class="line">&lt;/canvas&gt;</span><br><span class="line"><span class="comment">//获取canvas</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'drawing'</span>);</span><br><span class="line"><span class="keyword">if</span>(drawing.getContext)&#123;</span><br><span class="line">  <span class="keyword">var</span> context = drawing.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  context.fillReact(<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//画了一个正方形</span></span><br><span class="line">  context.fillStyle=<span class="string">'#fff'</span>; <span class="comment">//填充</span></span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>; <span class="comment">//描边</span></span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十三、html5脚本编程"><a href="#十三、html5脚本编程" class="headerlink" title="十三、html5脚本编程"></a>十三、html5脚本编程</h3><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨文档消息传送</span></span><br><span class="line">EventUtil.addHander(<span class="keyword">window</span>,<span class="string">"message"</span>,function(<span class="keyword">event</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">event</span>.origin=<span class="string">"http://www.wrox.com"</span>)&#123;<span class="comment">//发送消息的文档所在的域</span></span><br><span class="line">      <span class="comment">//接受参数</span></span><br><span class="line">      processMessage(<span class="keyword">event</span>.data);</span><br><span class="line">      <span class="comment">//可选:向窗口来源发送回执</span></span><br><span class="line">      <span class="keyword">event</span>.<span class="keyword">source</span>.postMessage(<span class="string">"Receiived"</span>,<span class="string">"http://xiaomo.info"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="十四、本地存储"><a href="#十四、本地存储" class="headerlink" title="十四、本地存储"></a>十四、本地存储</h3><h4 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1. cookie"></a>1. cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line"><span class="comment">//根据key读取cookie</span></span><br><span class="line">    <span class="keyword">get</span>: function (name)&#123;</span><br><span class="line">         <span class="comment">//注意对键编码</span></span><br><span class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">            cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">            cookieValue = <span class="literal">null</span>,</span><br><span class="line">            cookieEnd;</span><br><span class="line">        <span class="comment">//找到cookie键</span></span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="comment">//键后面第一个分号位置</span></span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>)&#123;</span><br><span class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cookie值解码</span></span><br><span class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置cookie</span></span><br><span class="line">    <span class="keyword">set</span>: function (name, value, expires, path, domain, secure) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        <span class="comment">//失效时间，GMT时间格式</span></span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">            cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">            cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">            cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可</span></span><br><span class="line">    unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用util方法   </p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CookieUtil.<span class="builtin-name">set</span>(<span class="string">'name'</span>,<span class="string">'xiaomo'</span>);</span><br><span class="line">CookieUtil.<span class="builtin-name">set</span>(<span class="string">'age'</span>,26);</span><br><span class="line"></span><br><span class="line">console.log(CookieUtil.<span class="builtin-name">get</span>(<span class="string">'name'</span>));</span><br><span class="line">console.log(CookieUtil.<span class="builtin-name">get</span>(<span class="string">'age'</span>));</span><br><span class="line"></span><br><span class="line">CookieUtil.unset(<span class="string">'name'</span>);</span><br><span class="line">CookieUtil.unset(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure><h4 id="2-localStorage"><a href="#2-localStorage" class="headerlink" title="2. localStorage"></a>2. localStorage</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">Window.localStorage.<span class="built_in">setItem</span>(<span class="built_in">key</span>,value);<span class="comment">//存储数据</span></span><br><span class="line">Window.localStorage.<span class="built_in">getItem</span>(<span class="built_in">key</span>);<span class="comment">//读取数据</span></span><br><span class="line">Window.localStorage.<span class="built_in">removeItem</span>(<span class="built_in">key</span>);<span class="comment">//删除数据项</span></span><br><span class="line">Window.localStorage.<span class="keyword">clear</span>();<span class="comment">//删除所有数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6语法快速上手</title>
      <link href="2016/Es6Syntax/"/>
      <url>2016/Es6Syntax/</url>
      
        <content type="html"><![CDATA[<p>随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了</p><a id="more"></a><h3 id="一、相关背景介绍"><a href="#一、相关背景介绍" class="headerlink" title="一、相关背景介绍"></a>一、相关背景介绍</h3><p>我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。</p><h3 id="二、babel-一个es6的解析器"><a href="#二、babel-一个es6的解析器" class="headerlink" title="二、babel 一个es6的解析器"></a>二、babel 一个es6的解析器</h3><p>在我们正式讲解ES6语法之前，我们得先了解下<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel。</a></p><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：</p><h3 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h3><p>最常用的ES6特性</p><p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code><br>这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。</p><h4 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1. let, const"></a>1. <code>let, const</code></h4><p>这两个的用途与<code>var</code>类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">name</span> = <span class="string">'zach'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    var <span class="built_in">name</span> = <span class="string">'obama'</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">name</span>)  <span class="comment">//obama</span></span><br><span class="line">    break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>)  <span class="comment">//obama</span></span><br></pre></td></tr></table></figure><p>使用<code>var</code> 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而<code>let</code>则实际上为<code>JavaScript</code>新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">var clickBoxs = document.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; clickBoxs.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    clickBoxs[<span class="built_in">i</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(<span class="built_in">i</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratorFactory</span><span class="params">(i)</span>&#123;</span></span><br><span class="line">    var onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span>&#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(<span class="built_in">i</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onclick;</span><br><span class="line">&#125;</span><br><span class="line">var clickBoxs = document.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; clickBoxs.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    clickBoxs[<span class="built_in">i</span>].onclick = iteratorFactory(<span class="built_in">i</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const</code>也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">PI</span> = Math.<span class="built_in">PI</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PI</span> = <span class="number">23</span> //<span class="keyword">Module</span> build failed: SyntaxError: /es6/app.js: <span class="string">"PI"</span> is read-only</span><br></pre></td></tr></table></figure><p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-class-extends-super"><a href="#2-class-extends-super" class="headerlink" title="2. class, extends, super"></a>2. <code>class</code>, <code>extends</code>, <code>super</code></h4><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p><p>有了ES6我们不再烦恼！</p><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">this</span><span class="class">.<span class="keyword">type</span> </span>= <span class="symbol">'anima</span>l'</span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        console.log(<span class="keyword">this</span><span class="class">.<span class="keyword">type</span> <span class="title">+</span> ' <span class="title">says</span> ' <span class="title">+</span> <span class="title">say</span>)</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">let</span> <span class="title">animal</span> </span>= <span class="keyword">new</span> <span class="type">Animal</span>()</span><br><span class="line">animal.says(<span class="symbol">'hell</span>o') <span class="comment">//animal says hello</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span><span class="class">.<span class="keyword">type</span> </span>= <span class="symbol">'ca</span>t'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let cat = <span class="keyword">new</span> <span class="type">Cat</span>()</span><br><span class="line">cat.says(<span class="symbol">'hell</span>o') <span class="comment">//cat says hello</span></span><br></pre></td></tr></table></figure><p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p><p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p><p><code>super</code>关键字，它指代父类的实例（即父类的this对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><p><code>ES6</code>的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用s<code>uper</code>方法），然后再用子类的构造函数修改<code>this</code>。</p><p>P.S 如果你写react的话，就会发现以上三个东西在最新版<code>React</code>中出现得很多。创建的每个component都是一个继承<code>React.Component</code>的类。<a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank" rel="noopener">详见react文档</a></p><h4 id="3-arrow-function"><a href="#3-arrow-function" class="headerlink" title="3. arrow function"></a>3. <code>arrow function</code></h4><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(i)</span></span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></span><br><span class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure><p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用<code>{}</code>把代码包起来：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(x, y)</span></span> &#123;</span><br><span class="line">    x++;</span><br><span class="line">    y<span class="comment">--;</span></span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">(x, y) =&gt; &#123;x++; y<span class="comment">--; return x+y&#125;</span></span><br></pre></td></tr></table></figure><p>除了看上去更简洁以外，<code>arrow function</code>还有一项超级无敌的功能！<br>长期以来，<code>JavaScript</code>语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//undefined says hi</span></span><br></pre></td></tr></table></figure><p>运行上面的代码会报错，这是因为<code>setTimeout</code>中的<code>this</code>指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p><ol><li>第一种是将this传给self,再用self来指代this</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">says(say)&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>第二种方法是用bind(this),即</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">says(say)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>但现在我们有了箭头函数，就不需要这么麻烦了：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></span><br></pre></td></tr></table></figure><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><h3 id="4-template-string"><a href="#4-template-string" class="headerlink" title="4. template string"></a>4. <code>template string</code></h3><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p><p>大家可以先看下面一段代码：</p><figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line"><span class="string">$(</span><span class="comment">"#result"</span>).append(</span><br><span class="line">  <span class="comment">"There are &lt;b&gt;"</span> + basket.count + <span class="comment">"&lt;/b&gt; "</span> +</span><br><span class="line">  <span class="comment">"items in your basket, "</span> +</span><br><span class="line">  <span class="comment">"&lt;em&gt;"</span> + basket.onSale +</span><br><span class="line">  <span class="comment">"&lt;/em&gt; are on sale!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">$("#result").append(`</span></span><br><span class="line"><span class="xml">  There are <span class="tag">&lt;<span class="name">b</span>&gt;</span>$</span><span class="template-variable">&#123;basket.count&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span> items</span></span><br><span class="line"><span class="xml">   in your basket, <span class="tag">&lt;<span class="name">em</span>&gt;</span>$</span><span class="template-variable">&#123;basket.onSale&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="xml">  are on sale!</span></span><br><span class="line"><span class="xml">`);</span></span><br></pre></td></tr></table></figure><p>用反引号（\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p><p>  <a href="https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js" target="_blank" rel="noopener">React Router</a>从第1.0.3版开始也使用ES6语法了，比如这个例子：</p><p><code>&lt;Link to={&#39;/taco/${taco.name}&#39;}&gt;{taco.name}&lt;/Link&gt;</code></p><h3 id="5-destructuring"><a href="#5-destructuring" class="headerlink" title="5. destructuring"></a>5. <code>destructuring</code></h3><p>  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p>看下面的例子：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">cat</span> = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="keyword">cat</span>, <span class="keyword">do</span><span class="variable">g:</span> dog&#125;</span><br><span class="line">console.<span class="built_in">log</span>(zoo)  //Object &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="string">"ken"</span>, <span class="keyword">do</span><span class="variable">g:</span> <span class="string">"lili"</span>&#125;</span><br></pre></td></tr></table></figure><p>用ES6完全可以像下面这么写：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">cat</span> = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="keyword">cat</span>, dog&#125;</span><br><span class="line">console.<span class="built_in">log</span>(zoo)  //Object &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="string">"ken"</span>, <span class="keyword">do</span><span class="variable">g:</span> <span class="string">"lili"</span>&#125;</span><br></pre></td></tr></table></figure><p>反过来可以这么写：</p><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = &#123;<span class="class"><span class="keyword">type</span>: '<span class="title">animal</span>', <span class="title">many</span>: 2&#125;</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="class"><span class="keyword">type</span>, <span class="title">many</span>&#125; </span>= dog</span><br><span class="line">console.log(<span class="class"><span class="keyword">type</span>, <span class="title">many</span>)   //<span class="title">animal</span> 2</span></span><br></pre></td></tr></table></figure><h3 id="6-default-rest"><a href="#6-default-rest" class="headerlink" title="6. default, rest"></a>6. <code>default</code>, <code>rest</code></h3><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’ 来指定默认值。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">function animal(type)&#123;</span><br><span class="line">   <span class="built_in"> type </span>=<span class="built_in"> type </span>|| <span class="string">'cat'</span>  </span><br><span class="line">    console.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure><p>如果用ES6我们而已直接这么写：</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span><span class="params">(<span class="keyword">type</span> = <span class="string">'cat'</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(type)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">animal</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>最后一个rest语法也很简单，直接看例子：</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span><span class="params">(<span class="rest_arg">...types</span>)</span></span>&#123;</span><br><span class="line">    console.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure><p>而如果不用ES6的话，我们则得使用ES5的<code>arguments</code>。</p><h3 id="7-import-export"><a href="#7-import-export" class="headerlink" title="7. import export"></a>7. <code>import export</code></h3><p>这两个家伙对应的就是<code>es6</code>自己的<code>module</code>功能。</p><p>我们之前写的<code>Javascript</code>一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p><p>这有可能导致两个问题：</p><ol><li>一方面js代码变得很臃肿，难以维护;</li><li>另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;<br>在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</li></ol><p>如果想了解更多AMD，尤其是require.js，可以参看这个教程<br><a href="http://requirejs.org/docs/why.html" target="_blank" rel="noopener">why modules on the web are useful and the mechanisms that can be used on the web today to enable them</a></p><p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</p><blockquote><p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p></blockquote><p>上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码…</p><p> 传统的写法<br>首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p><p>首先定义:</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line">define(<span class="string">'content.js'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'A cat'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后require:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'./content.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(animal);   <span class="comment">//A cat</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那CommonJS是怎么写的呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> animal = require(<span class="string">'./content.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure><p> ES6的写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure><p>以上我把三者都列出来了，妈妈再也不用担心我写混淆了…</p><h3 id="8-ES6-module的其他高级用法"><a href="#8-ES6-module的其他高级用法" class="headerlink" title="8. ES6 module的其他高级用法"></a>8. ES6 module的其他高级用法</h3><p>输出\输入多个变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span>    </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = <span class="string">'dog'</span></span><br></pre></td></tr></table></figure><p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; say, <span class="keyword">type</span> &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">type</span>&#125;</span> says <span class="subst">$&#123;says&#125;</span>`</span>)  <span class="comment">//The dog says Hello</span></span><br></pre></td></tr></table></figure><p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。</p><p>如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> animal, &#123; say, <span class="keyword">type</span> &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">type</span>&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure><h3 id="9-修改变量名"><a href="#9-修改变量名" class="headerlink" title="9. 修改变量名"></a>9. 修改变量名</h3><p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p><p>//index.js</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> animal, &#123; say, <span class="keyword">type</span> <span class="keyword">as</span> animalType &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;animalType&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure><h3 id="10-模块的整体加载"><a href="#10-模块的整体加载" class="headerlink" title="10. 模块的整体加载"></a>10. 模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> animal, * <span class="keyword">as</span> content <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = content.say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;content.<span class="keyword">type</span>&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure><p>通常星号*结合as一起使用比较合适。</p><ol start="11"><li>终极秘籍</li></ol><p>考虑下面的场景：<br>上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：</p><p><code>import { type } from &#39;./content&#39;</code></p><p>由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。</p><p>ES6帮我们实现了！</p><p>不过，目前无论是webpack还是browserify都还不支持这一功能…</p><p>如果你现在就想实现这一功能的话，可以尝试使用rollup.js</p><p>他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。</p><p>看看他们官方的解释吧：</p><blockquote><p>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It’s a revolution in how we use libraries in JavaScript, and it’s happening right now.</p></blockquote><p>希望更全面了解es6伙伴们可以去看阮一峰所著的电子书<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6入门</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶之loader篇</title>
      <link href="2016/WebpackLLink/"/>
      <url>2016/WebpackLLink/</url>
      
        <content type="html"><![CDATA[<p>webpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder</p><a id="more"></a><h3 id="一、loaders之-预处理"><a href="#一、loaders之-预处理" class="headerlink" title="一、loaders之 预处理"></a>一、loaders之 预处理</h3><ul><li>css-loader 处理css中路径引用等问题</li><li>style-loader 动态把样式写入css</li><li>sass-loader scss编译器</li><li>less-loader less编译器</li><li>postcss-loader scss再处理</li></ul><p><code>npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader</code>  </p><p>栗子:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.css$/, loader: <span class="string">"style!css?sourceMap!postcss"</span>&#125;,</span><br><span class="line">    &#123;<span class="attribute">test</span>: /\.less$/, loader: <span class="string">"style!css!less|postcss"</span>&#125;,</span><br><span class="line">    &#123;<span class="attribute">test</span>: /\.scss$/, loader: <span class="string">"style!css!sass|postcss"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、loaders之-js处理"><a href="#二、loaders之-js处理" class="headerlink" title="二、loaders之 js处理"></a>二、loaders之 js处理</h3><ul><li>babel-loader</li><li>jsx-loader</li></ul><p><code>npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader</code></p><p>栗子  </p><p>新建一个名字为<code>.babelrc</code>的文件</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"react"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>:[<span class="string">"antd"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个名字为<code>webpack.config.js</code>文件</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">module.exports =&#123;</span><br><span class="line"><span class="symbol"> entry:</span> <span class="string">'./entry.js'</span>,</span><br><span class="line"><span class="symbol"> output:</span> &#123; <span class="string">path:</span> __dirname,</span><br><span class="line"><span class="symbol"> filename:</span> <span class="string">'bundle.js'</span></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="symbol"> module:</span> &#123;</span><br><span class="line"><span class="string">loaders:</span> [</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/\.js$/</span>, <span class="string">loader:</span> <span class="string">"babel"</span>, <span class="string">exclude:</span> <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/\.jsx$/</span>, <span class="string">loader:</span> <span class="string">"jsx-loader"</span>&#125;</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/.css$/</span>, <span class="string">loader:</span> <span class="string">'style!css'</span>&#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、loaders之-图片处理"><a href="#三、loaders之-图片处理" class="headerlink" title="三、loaders之 图片处理"></a>三、loaders之 图片处理</h3><ul><li>url-loader</li></ul><p><code>npm install --save-dev url-loadr</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.(jpg|png)$/, loader: <span class="string">"url?limit=8192"</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、loaders之-文件处理"><a href="#四、loaders之-文件处理" class="headerlink" title="四、loaders之 文件处理"></a>四、loaders之 文件处理</h3><ul><li>file-loader</li></ul><p><code>npm install --save-dev file-loader</code></p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.(png|<span class="type">jpg</span>|<span class="type">jpeg</span>|<span class="type">gif</span>|<span class="type">svg</span>|<span class="type">woff</span>|<span class="type">woff2</span>|<span class="type">ttf</span>|<span class="type">eot</span>)$/,</span><br><span class="line">      loader: 'file'</span><br><span class="line">      &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、loaders之-json处理"><a href="#五、loaders之-json处理" class="headerlink" title="五、loaders之 json处理"></a>五、loaders之 json处理</h3><ul><li>json-loader</li></ul><p><code>npm install --save-dev json-loader</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.json$/,loader: <span class="string">'json'</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、loaders之-html处理"><a href="#六、loaders之-html处理" class="headerlink" title="六、loaders之 html处理"></a>六、loaders之 html处理</h3><ul><li>raw-loader</li></ul><p><code>npm install --save-dev raw-loader</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123; test: /\.html$/,loader: <span class="string">'raw'</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack相关命令参数</title>
      <link href="2016/WebpackParams/"/>
      <url>2016/WebpackParams/</url>
      
        <content type="html"><![CDATA[<p>使用webpack的同学，你真的熟练应用webpack么？其实直接<code>webpack --help</code>就可以看到，但是有很多人还是在网上到处搜相关参数</p><a id="more"></a><h3 id="一、webpack相关参数"><a href="#一、webpack相关参数" class="headerlink" title="一、webpack相关参数"></a>一、webpack相关参数</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">webpack <span class="params">--config</span> webpack.config.dev.js   <span class="string">//</span>使用另一份配置文件（比如webpack.config2.js）来打包</span><br><span class="line">webpack <span class="params">--watch</span>   <span class="string">//</span>监听变动并自动打包</span><br><span class="line">webpack <span class="string">//</span>执行一次开发时的编译</span><br><span class="line">webpack -p <span class="string">//</span>执行一次生成环境的编译（压缩）</span><br><span class="line">webpack <span class="params">--watch</span> <span class="string">//</span>在开发时持续监控增量编译（很快）</span><br><span class="line">webpack -d <span class="string">//</span>让他生成SourceMaps</span><br><span class="line">webpack <span class="params">--progress</span> <span class="string">//</span>显示编译进度</span><br><span class="line">webpack <span class="params">--colors</span> <span class="string">//</span>显示静态资源的颜色</span><br><span class="line">webpack <span class="params">--sort-modules-by</span>, <span class="params">--sort-chunks-by</span>, <span class="params">--sort-assets-by</span> <span class="string">//</span>将modules/chunks/assets进行列表排序</span><br><span class="line">webpack <span class="params">--display-chunks</span> <span class="string">//</span>展示编译后的分块</span><br><span class="line">webpack <span class="params">--display-reasons</span> <span class="string">//</span>显示更多引用模块原因</span><br><span class="line">webapck <span class="params">--display-error-details</span> <span class="string">//</span>显示更多报错信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶之插件篇</title>
      <link href="2016/WebpackPlugins/"/>
      <url>2016/WebpackPlugins/</url>
      
        <content type="html"><![CDATA[<p>上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了</p><a id="more"></a><h3 id="一、插件篇"><a href="#一、插件篇" class="headerlink" title="一、插件篇"></a>一、插件篇</h3><h4 id="1-自动补全css3前缀"><a href="#1-自动补全css3前缀" class="headerlink" title="1. 自动补全css3前缀"></a>1. 自动补全css3前缀</h4><p> autoprefixer  </p><blockquote><p>官方是这样说的：<code>Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website</code><br>，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  </p></blockquote><p>举个栗子：最新的弹性盒模型flux<br>实际代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:fullscreen</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件自动补充后</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。</p><p>使用方法:</p><p><code>cnpm install --save-dev autoprefixer postcss-loader</code></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  <span class="comment">//其他配置这里就不写了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>:&#123;</span><br><span class="line">    loaders:[</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">//在原有基础上加上一个postcss的loader就可以了</span></span><br><span class="line">      loaders:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss:[autoprefixer(&#123;browsers:[<span class="string">'last 2 versions'</span>]&#125;)]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-自动生成html插件"><a href="#2-自动生成html插件" class="headerlink" title="2. 自动生成html插件"></a>2. 自动生成html插件</h4><p>html-webpack-plugin</p><p><code>cnpm install html-webpack-plugin --save-dev</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span>=&#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用:它会在dist目录下自动生成一个index.html</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他配置参数:</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">entry</span>: <span class="string">'index.js'</span>,</span><br><span class="line">  <span class="attribute">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'dist'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">plugins</span>: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attribute">title</span>: <span class="string">'My App'</span>,</span><br><span class="line">      <span class="attribute">filename</span>: <span class="string">'admin.html'</span>,</span><br><span class="line">      <span class="attribute">template</span>:<span class="string">'header.html'</span>,</span><br><span class="line">      <span class="attribute">inject</span>: <span class="string">'body'</span>,</span><br><span class="line">      <span class="attribute">favicon</span>:<span class="string">'./images/favico.ico'</span>,</span><br><span class="line">      <span class="attribute">minify</span>:true,</span><br><span class="line">      <span class="attribute">hash</span>:true,</span><br><span class="line">      <span class="attribute">cache</span>:false,</span><br><span class="line">      <span class="attribute">showErrors</span>:false,</span><br><span class="line">      <span class="string">"chunks"</span>: &#123;</span><br><span class="line">      <span class="string">"head"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"assets/head_bundle.js"</span>,</span><br><span class="line">        <span class="string">"css"</span>: [ <span class="string">"main.css"</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">xhtml</span>:false</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">--- header.html ---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：   </p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">title:</span> 设置title的名字   </span><br><span class="line"><span class="string">filename:</span> 设置这个html的文件名   </span><br><span class="line"><span class="string">template:</span>要使用的模块的路径  </span><br><span class="line"><span class="string">inject:</span> 把模板注入到哪个标签后 <span class="string">'body'</span>,   </span><br><span class="line"><span class="string">favicon:</span> 给html添加一个favicon  <span class="string">'./images/favico.ico'</span>,   </span><br><span class="line"><span class="string">minify:</span>是否压缩  <span class="literal">true</span> <span class="literal">false</span>   </span><br><span class="line"><span class="string">hash:</span>是否hash化 <span class="literal">true</span> <span class="literal">false</span> ,     </span><br><span class="line"><span class="string">cache:</span>是否缓存,   </span><br><span class="line"><span class="string">showErrors:</span>是否显示错误,  </span><br><span class="line"><span class="string">chunks:</span>目前没太明白  </span><br><span class="line"><span class="string">xhtml:</span>是否自动毕业标签 默认<span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="3-提取样式插件"><a href="#3-提取样式插件" class="headerlink" title="3. 提取样式插件"></a>3. 提取样式插件</h4><p>extract-text-webpack-plugin  </p><blockquote><p>官网是这么解释的<code>Extract text from bundle into a file.</code>,把额外的数据加到编译好的文件中</p></blockquote><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: <span class="regexp">/\.css$/</span>, loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>) &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                template: <span class="string">'./src/public/index.html'</span>,</span><br><span class="line">                inject: <span class="string">'body'</span></span><br><span class="line">            &#125;),</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].[hash].css"</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：将css放到index.html的body上面</p><h4 id="4-拷贝资源插件"><a href="#4-拷贝资源插件" class="headerlink" title="4. 拷贝资源插件"></a>4. 拷贝资源插件</h4><p> copy-webpack-plugin   </p><blockquote><p>官方这样解释 <code>Copy files and directories in webpack</code>,在webpack中拷贝文件和文件夹</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> <span class="comment">--save-dev copy-webpack-plugin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">    <span class="keyword">from</span>: __dirname + <span class="string">'/src/public'</span></span><br><span class="line">&#125;]),</span><br></pre></td></tr></table></figure><blockquote><p>作用：把public 里面的内容全部拷贝到编译目录</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">作用</th><th align="center">其他说明</th></tr></thead><tbody><tr><td align="center">from</td><td align="center">定义要拷贝的源目录</td><td align="center">from: __dirname + ‘/src/public’</td></tr><tr><td align="center">to</td><td align="center">定义要烤盘膛的目标目录</td><td align="center">from: __dirname + ‘/dist’</td></tr><tr><td align="center">toType</td><td align="center"><code>file</code> 或者 <code>dir</code></td><td align="center">可选，默认是文件</td></tr><tr><td align="center">force</td><td align="center">强制覆盖先前的插件</td><td align="center">可选 默认false</td></tr><tr><td align="center">context</td><td align="center">不知道作用</td><td align="center">可选 默认 base context 可用  specific context</td></tr><tr><td align="center">flatten</td><td align="center">只拷贝文件不管文件夹</td><td align="center">默认是false</td></tr><tr><td align="center">ignore</td><td align="center">忽略拷贝指定的文件</td><td align="center">可以用模糊匹配</td></tr></tbody></table><h4 id="5-全局挂载插件"><a href="#5-全局挂载插件" class="headerlink" title="5. 全局挂载插件"></a>5. 全局挂载插件</h4><p>webpack.ProvidePlugin [webpack内置插件 ]    </p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    $: <span class="string">"jquery"</span>,</span><br><span class="line">    jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">    <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="built_in">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line"><span class="built_in">new</span> webpack.<span class="built_in">optimize</span>.DedupePlugin(),</span><br><span class="line"><span class="built_in">new</span> webpack.<span class="built_in">optimize</span>.UglifyJsPlugin(),</span><br><span class="line"><span class="built_in">new</span> webpack.<span class="built_in">optimize</span>.CommonsChunkPlugin('common.js')</span><br></pre></td></tr></table></figure><p>作用: 和上面5个一一对应  </p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">把一些需要的东西绑定到<span class="built_in">window</span>上，暴露出来 成为全局变量</span><br><span class="line">不显示错误插件</span><br><span class="line">具体不是太清楚，先记录着</span><br><span class="line">丑化js 混淆代码而用</span><br><span class="line">提取公共代码的插件</span><br></pre></td></tr></table></figure><h3 id="二、一个完整的栗子"><a href="#二、一个完整的栗子" class="headerlink" title="二、一个完整的栗子"></a>二、一个完整的栗子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modules</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Env</span></span><br><span class="line"><span class="comment"> * Get npm lifecycle event to identify the environment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> ENV = process.env.npm_lifecycle_event;</span><br><span class="line"><span class="keyword">var</span> isTest = ENV === <span class="string">'test'</span> || ENV === <span class="string">'test-watch'</span>;</span><br><span class="line"><span class="keyword">var</span> isProd = ENV === <span class="string">'build'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">makeWebpackConfig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    config.entry = isTest ? &#123;&#125; : &#123;</span><br><span class="line">        app: <span class="string">'./src/app/app.js'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    config.output = isTest ? &#123;&#125; : &#123;</span><br><span class="line">        <span class="comment">// Absolute output directory</span></span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line"></span><br><span class="line">        publicPath: isProd ? <span class="string">'/'</span> : <span class="string">'http://localhost:8080/'</span>,</span><br><span class="line"></span><br><span class="line">        filename: isProd ? <span class="string">'[name].[hash].js'</span> : <span class="string">'[name].bundle.js'</span>,</span><br><span class="line"></span><br><span class="line">        chunkFilename: isProd ? <span class="string">'[name].[hash].js'</span> : <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTest) &#123;</span><br><span class="line">        config.devtool = <span class="string">'inline-source-map'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">        config.devtool = <span class="string">'source-map'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config.devtool = <span class="string">'eval-source-map'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.module = &#123;</span><br><span class="line">        preLoaders: [],</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'babel'</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css/</span>,</span><br><span class="line">            loader: isTest ? <span class="string">'null'</span> : ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?sourceMap!postcss'</span>)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/</span>,</span><br><span class="line">            loader: <span class="string">'file'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">            loader: <span class="string">'json'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">            loader: <span class="string">'style!css!sass'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'raw'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (isTest) &#123;</span><br><span class="line">        config.module.preLoaders.push(&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: [</span><br><span class="line">                /node_modules/,</span><br><span class="line">                /\.spec\.js$/</span><br><span class="line">            ],</span><br><span class="line">            loader: <span class="string">'isparta-instrumenter'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.postcss = [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            browsers: [<span class="string">'last 2 version'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    config.plugins = [];</span><br><span class="line">    <span class="keyword">if</span> (!isTest) &#123;</span><br><span class="line">        config.plugins.push(</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                template: <span class="string">'./src/public/index.html'</span>,</span><br><span class="line">                inject: <span class="string">'body'</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[hash].css'</span>, &#123;<span class="attr">disable</span>: !isProd&#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">        config.plugins.push(</span><br><span class="line">            <span class="keyword">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.DedupePlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">                <span class="keyword">from</span>: __dirname + <span class="string">'/src/public'</span></span><br><span class="line">            &#125;]),</span><br><span class="line">            <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">                $: <span class="string">"jquery"</span>,</span><br><span class="line">                jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">                <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">            &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.devServer = &#123;</span><br><span class="line">        contentBase: <span class="string">'./src/public'</span>,</span><br><span class="line">        stats: <span class="string">'minimal'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="三、调试技巧"><a href="#三、调试技巧" class="headerlink" title="三、调试技巧"></a>三、调试技巧</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isTest) &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'inline-source-map'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'source-map'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'eval-source-map'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用: 使用source-map可以在debug的时候看到源代码，方便 查错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs的process模块</title>
      <link href="2016/NodeProcess/"/>
      <url>2016/NodeProcess/</url>
      
        <content type="html"><![CDATA[<p>我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。</p><a id="more"></a><h3 id="一、process属性。"><a href="#一、process属性。" class="headerlink" title="一、process属性。"></a>一、process属性。</h3><ul><li>process.pid：当前进程的进程号。</li><li>process.version：Node的版本，比如v0.10.18。</li><li>process.platform：当前系统平台，比如Linux。</li><li>process.title：默认值为“node”，可以自定义该值。</li><li>process.argv：当前进程的命令行参数数组。</li><li>process.env：指向当前shell的环境变量，比如process.env.HOME。</li><li>process.execPath：运行当前进程的可执行文件的绝对路径。</li><li>process.stdout：指向标准输出。</li><li>process.stdin：指向标准输入。</li><li>process.stderr：指向标准错误。</li></ul><p>下面是主要属性的介绍。</p><h4 id="1-stdout"><a href="#1-stdout" class="headerlink" title="1. stdout"></a>1. stdout</h4><p>process.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">exports.<span class="built_in">log</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">    process.<span class="built_in">stdout</span>.<span class="built_in">write</span>(<span class="built_in">format</span>.apply(this, arguments) + <span class="string">'\n'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-argv"><a href="#2-argv" class="headerlink" title="2. argv"></a>2. argv</h4><p>process.argv返回命令行脚本的各个参数组成的数组。</p><p>先新建一个脚本文件argv.js。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// argv.js</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"argv: "</span>,<span class="built_in">process</span>.argv);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"argc: "</span>,<span class="built_in">process</span>.argc);</span><br></pre></td></tr></table></figure><p>在命令行下调用这个脚本，会得到以下结果。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">node</span> <span class="selector-tag">argv</span><span class="selector-class">.js</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line"># <span class="selector-attr">[ <span class="string">'node'</span>, <span class="string">'/path/to/argv.js'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span></span><br></pre></td></tr></table></figure><p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// argv.js</span></span><br><span class="line">var myArgs = <span class="built_in">process</span>.argv.slice(<span class="number">2</span>);</span><br><span class="line">console.<span class="built_in">log</span>(myArgs);</span><br></pre></td></tr></table></figure><h4 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h4><ul><li>process对象提供以下方法：</li><li>process.cwd()：返回运行当前脚本的工作目录的路径。_</li><li>process.chdir()：改变工作目录。</li><li>process.exit()：退出当前进程。</li><li>process.nextTick()：将一个回调函数放在下次事件循环的顶部。</li></ul><p>process.chdir()改变工作目录的例子。  </p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"><span class="comment"># '/home/aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">process</span>.chdir(<span class="string">'/home/bbb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"><span class="comment"># '/home/bbb'</span></span><br></pre></td></tr></table></figure><p>process.nextTick()的例子，指定下次事件循环首先运行的任务。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Next event loop!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'Next event loop!'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="4-事件"><a href="#4-事件" class="headerlink" title="4. 事件"></a>4. 事件</h4><p>（1）exit事件<br>当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">process.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  fs.writeFileSync(<span class="string">'/tmp/myfile'</span>, <span class="string">'This MUST be saved on exit.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（2）uncaughtException事件<br>当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  </p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">process.<span class="keyword">on</span>('uncaughtException', function (<span class="keyword">err</span>) &#123;</span><br><span class="line">  console.<span class="keyword">error</span>('<span class="keyword">An</span> uncaught <span class="keyword">error</span> occurred!');</span><br><span class="line">  console.<span class="keyword">error</span>(<span class="keyword">err</span>.<span class="keyword">stack</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>摘自阮老师博客   <a href="http://javascript.ruanyifeng.com/nodejs/basic.html#toc22" target="_blank" rel="noopener">Node.js 概述</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack使用之基础篇</title>
      <link href="2016/WebpackBasicUse/"/>
      <url>2016/WebpackBasicUse/</url>
      
        <content type="html"><![CDATA[<p>说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。</p><a id="more"></a><h3 id="一、基本简介"><a href="#一、基本简介" class="headerlink" title="一、基本简介"></a>一、基本简介</h3><p>webpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比</p><h4 id="1-requirejs"><a href="#1-requirejs" class="headerlink" title="1. requirejs"></a>1. requirejs</h4><p>很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，<br>不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。</p><h4 id="2-browserify"><a href="#2-browserify" class="headerlink" title="2. browserify"></a>2. browserify</h4><p>是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。<br>并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。</p><h4 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3. webpack"></a>3. webpack</h4><p>支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，<br>包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？</p><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><h4 id="1-IDE推荐"><a href="#1-IDE推荐" class="headerlink" title="1. IDE推荐"></a>1. IDE推荐</h4><p> <code>IDEA</code>、<code>webstrom</code>、<code>sublime</code>、<code>atom</code>  都是很不错的编辑工具，<code>idea</code>大而全，<code>webstrom</code>是<code>idea</code>的简化版、<code>sublime</code>轻量但不失稳重、<code>atom</code>新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用<code>IDEA</code>、辅助<code>atom</code>。因为我是一个<code>java</code>党啊，少不了<code>IDEA</code>，<code>atom</code>的界面是我最喜欢的。</p><h4 id="2-开始建项目写配置"><a href="#2-开始建项目写配置" class="headerlink" title="2. 开始建项目写配置"></a>2. 开始建项目写配置</h4><p> a.新建项目 <code>mkdir webpack-study &amp;&amp; cd webpack-study</code><br> b.初始化环境 <code>npm init -y</code><br> c.安装工具(如果你没安装taobao源，把cnpm换成npm)  <code>npm install --save-dev webpack webpack-dev-server</code><br>说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server<br>d.新建配置文件  (名字一定不能换) <code>touch webpack.config.js</code><br>e. 配置webpack</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">module.exprots=&#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  <span class="built_in">output</span>:&#123;</span><br><span class="line">    <span class="built_in">path</span>:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p><h3 id="三、-写一个小测试"><a href="#三、-写一个小测试" class="headerlink" title="三、 写一个小测试"></a>三、 写一个小测试</h3><h4 id="1-新建入口文件并写入文件"><a href="#1-新建入口文件并写入文件" class="headerlink" title="1. 新建入口文件并写入文件"></a>1. 新建入口文件并写入文件</h4><p><code>vim index.js</code><br><code>document.write(&#39;Hello world&#39;);</code>  </p><h4 id="2-新建一个css"><a href="#2-新建一个css" class="headerlink" title="2. 新建一个css"></a>2. 新建一个css</h4><p><code>touch style.css</code>  </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-新建一个html"><a href="#3-新建一个html" class="headerlink" title="3.新建一个html"></a>3.新建一个html</h4><p><code>touch index.html</code><br>写下以下内容  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p><h3 id="三、-写一个小测试-1"><a href="#三、-写一个小测试-1" class="headerlink" title="三、 写一个小测试"></a>三、 写一个小测试</h3><h4 id="1-新建入口文件并写入文件-1"><a href="#1-新建入口文件并写入文件-1" class="headerlink" title="1. 新建入口文件并写入文件"></a>1. 新建入口文件并写入文件</h4><p><code>vim index.js</code>  <code>document.write(&#39;Hello world&#39;);</code>  </p><h4 id="2-新建一个css-1"><a href="#2-新建一个css-1" class="headerlink" title="2. 新建一个css"></a>2. 新建一个css</h4><p><code>touch style.css</code>  </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-新建一个html-1"><a href="#3-新建一个html-1" class="headerlink" title="3.新建一个html"></a>3.新建一个html</h4><p><code>touch index.html</code><br>写下以下内容  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-webpack的重头戏"><a href="#4-webpack的重头戏" class="headerlink" title="4.webpack的重头戏"></a>4.webpack的重头戏</h4><p>那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件<br>a.安装loaders<br><code>npm install style-loader css-loader </code><br>b.打开<code>webpack.config.js</code><br>添加模块</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">module</span>:&#123;</span><br><span class="line">  <span class="attribute">loaders</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    test:/\.css$/,</span><br><span class="line">    loaders:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个<br>一个对象就是一个loader，<code>test</code>用正则匹配文件后缀<br>loaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader<br><code>css-loader</code>处理css的一些url，包括相对的绝对的之类的东西<br><code>style-loader</code> 是将css文件采用js动态写入html页面<br>c.使用css<br>打开<code>index.js</code>  (因为我们这里没有用babel,所以就用es5来写)<br><code>require(&#39;./style.css&#39;);</code></p><h3 id="四、查看效果"><a href="#四、查看效果" class="headerlink" title="四、查看效果"></a>四、查看效果</h3><p>我们现在可以使用<code>webpack-dev-server</code>这个东西了<br>如果你己经全局安装了(<code>cnpm install -g webpack-dev-server</code>),直接命令<code>webpack-dev-server</code>就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"webpack-study"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line"><span class="attr">"start"</span>:<span class="string">"webpack-dev-server --progcess"</span>,</span><br><span class="line"><span class="attr">"build"</span>:<span class="string">"webpack --progress"</span>,</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"keywords"</span>: [],</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line"><span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line"><span class="attr">"css-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line"><span class="attr">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</span><br><span class="line"><span class="attr">"webpack"</span>: <span class="string">"^1.13.0"</span>,</span><br><span class="line"><span class="attr">"webpack-dev-server"</span>: <span class="string">"^1.14.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就可以使用<code>npm run build</code>来编译，使用<code>npm run start</code>来开启服务器  </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">webpack-study</span> <span class="string">git:(master)</span> <span class="string">✗</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="string">&gt;</span> <span class="string">webpack-study@1.0.0</span> <span class="string">build</span> <span class="string">/Users/xiaomo/workspace/webpack-study</span></span><br><span class="line"><span class="string">&gt;</span> <span class="string">webpack</span> <span class="string">--progress</span></span><br><span class="line"><span class="attr">Hash:</span> <span class="string">11ffef2911f2436a3948</span></span><br><span class="line"><span class="attr">Version:</span> <span class="string">webpack</span> <span class="number">1.13</span><span class="number">.0</span></span><br><span class="line"><span class="attr">Time:</span> <span class="string">64ms</span></span><br><span class="line">    <span class="string">Asset</span>     <span class="string">Size</span>  <span class="string">Chunks</span>             <span class="string">Chunk</span> <span class="string">Names</span></span><br><span class="line"><span class="string">bundle.js</span>  <span class="number">1.42</span> <span class="string">kB</span>       <span class="number">0</span>  <span class="string">[emitted]</span>  <span class="string">main</span></span><br><span class="line">   <span class="string">[0]</span> <span class="string">./index.js</span> <span class="number">30</span> <span class="string">bytes</span> <span class="string">&#123;0&#125;</span> <span class="string">[built]</span></span><br><span class="line">   <span class="string">➜</span>  <span class="string">webpack-study</span> <span class="string">git:(master)</span> <span class="string">✗</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line">   <span class="string">&gt;</span> <span class="string">webpack-study@1.0.0</span> <span class="string">start</span> <span class="string">/Users/xiaomo/workspace/webpack-study</span></span><br><span class="line">   <span class="string">&gt;</span> <span class="string">webpack-dev-server</span> <span class="string">--progcess</span></span><br><span class="line"></span><br><span class="line">   <span class="string">http://localhost:8080/webpack-dev-server/</span></span><br><span class="line">   <span class="string">webpack</span> <span class="string">result</span> <span class="string">is</span> <span class="string">served</span> <span class="string">from</span> <span class="string">/</span></span><br><span class="line">   <span class="string">content</span> <span class="string">is</span> <span class="string">served</span> <span class="string">from</span> <span class="string">/Users/xiaomo/workspace/webpack-study</span></span><br><span class="line">   <span class="attr">Hash:</span> <span class="string">11ffef2911f2436a3948</span></span><br><span class="line">   <span class="attr">Version:</span> <span class="string">webpack</span> <span class="number">1.13</span><span class="number">.0</span></span><br><span class="line">   <span class="attr">Time:</span> <span class="string">80ms</span></span><br><span class="line">       <span class="string">Asset</span>     <span class="string">Size</span>  <span class="string">Chunks</span>             <span class="string">Chunk</span> <span class="string">Names</span></span><br><span class="line">   <span class="string">bundle.js</span>  <span class="number">1.42</span> <span class="string">kB</span>       <span class="number">0</span>  <span class="string">[emitted]</span>  <span class="string">main</span></span><br><span class="line">   <span class="string">chunk</span>    <span class="string">&#123;0&#125;</span> <span class="string">bundle.js</span> <span class="string">(main)</span> <span class="number">30</span> <span class="string">bytes</span> <span class="string">[rendered]</span></span><br><span class="line">       <span class="string">[0]</span> <span class="string">./index.js</span> <span class="number">30</span> <span class="string">bytes</span> <span class="string">&#123;0&#125;</span> <span class="string">[built]</span></span><br><span class="line">   <span class="attr">webpack:</span> <span class="string">bundle</span> <span class="string">is</span> <span class="string">now</span> <span class="string">VALID.</span></span><br></pre></td></tr></table></figure><p>b.然后访问 <a href="http://locahost:8080/" target="_blank" rel="noopener">http://locahost:8080</a> 就可以看到效果了</p><h3 id="五、动态效果展示和总结"><a href="#五、动态效果展示和总结" class="headerlink" title="五、动态效果展示和总结"></a>五、动态效果展示和总结</h3><h4 id="1-总共有5个文件"><a href="#1-总共有5个文件" class="headerlink" title="1. 总共有5个文件"></a>1. 总共有5个文件</h4><p><code>webpack.config.ks</code>、<code>index.js</code>、<code>index.html</code>、<code>style.css</code>、<code>package.json</code>，编译好要使用的只有<code>index.html</code>和<code>dist/bundle.js</code>两个文件</p><h4 id="2-gif动画"><a href="#2-gif动画" class="headerlink" title="2. gif动画"></a>2. gif动画</h4><p>会展示一下5个文件的内容</p><h4 id="3-演示一下效果"><a href="#3-演示一下效果" class="headerlink" title="3. 演示一下效果"></a>3. 演示一下效果</h4><p><img src="https://image.xiaomo.info/banner/webpack.gif" alt="webpack的简单使用"><br>如果觉得图小可以点击下面链接查看大图<br><a href="https://image.xiaomo.info/webpack/webpack.gif" target="_blank" rel="noopener">webpack的简单使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nodejs搭建一个简易的即时聊天软件</title>
      <link href="2016/NodeOnlineChat/"/>
      <url>2016/NodeOnlineChat/</url>
      
        <content type="html"><![CDATA[<p>最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。</p><a id="more"></a><h3 id="一、搭建简易的服务器"><a href="#一、搭建简易的服务器" class="headerlink" title="一、搭建简易的服务器##"></a>一、搭建简易的服务器##</h3><p><code>vim server.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入node的net模块</span></span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"><span class="comment">//创建一个服务器</span></span><br><span class="line"><span class="keyword">var</span> chatServer = net.createServer();</span><br><span class="line"><span class="comment">//定义一个客户端列表</span></span><br><span class="line"><span class="keyword">var</span> clientList = [];</span><br><span class="line"><span class="comment">//监听连接...</span></span><br><span class="line">chatServer.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line"><span class="comment">//给客户端反馈</span></span><br><span class="line">client.name = client.remoteAddress+<span class="string">':'</span>+client.remotePort;</span><br><span class="line">client.write(<span class="string">'Hi!'</span>+client.name+<span class="string">',您己成功连接服务器，可以正常通讯了..\n'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(client.name+<span class="string">'加入了聊天...'</span>)</span><br><span class="line"><span class="comment">//将客户端放到客户端列表中</span></span><br><span class="line">clientList.push(client);</span><br><span class="line"><span class="comment">//监听客户端信信息并给出反馈</span></span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 把数据发送给所有客户端</span></span><br><span class="line">      broadcast(data,client);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听离线事件</span></span><br><span class="line">client.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(client.name+<span class="string">'quit...'</span>)</span><br><span class="line">    clientList.splice(clientList.indexOf(client),<span class="number">1</span>);</span><br><span class="line">    client.write(<span class="string">'用户:'</span>+client.name+<span class="string">'退出了当前服务\n'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//监听错误事件</span></span><br><span class="line">client.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  广播消息</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">message,client</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> cleanUp=[];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;clientList.length;i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(clientList[i]!==client[i])&#123;</span><br><span class="line">             <span class="keyword">if</span>(clientList[i].writable)&#123;</span><br><span class="line">             clientList[i].write(client.name+<span class="string">'说:'</span>+message);</span><br><span class="line">             &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                 cleanUp.push(clientList[i]);</span><br><span class="line">                 clientList[i].destroy();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//在写入循环中删除死节点，消除垃圾索引</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;cleanUp.length;i++)&#123;</span><br><span class="line">         clientList.splice(clientList.indexOf(cleanUp[i],i));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>开启服务器<br><code>node server.js</code><br><code>chatServer is running at port 9000...</code><br>此时服务己经成功开启</p><h3 id="二、客户端连接"><a href="#二、客户端连接" class="headerlink" title="二、客户端连接##"></a>二、客户端连接##</h3><p>格式： <code>telnet host port</code><br>例如我在本地再开启一个shell窗口<br> <code>telnet localhost 9000</code><br> Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..</p><h3 id="三、测试效果"><a href="#三、测试效果" class="headerlink" title="三、测试效果"></a>三、测试效果</h3><h4 id="1-开启服务器"><a href="#1-开启服务器" class="headerlink" title="1. 开启服务器"></a>1. 开启服务器</h4><h4 id="2-客户端连接"><a href="#2-客户端连接" class="headerlink" title="2. 客户端连接"></a>2. 客户端连接</h4><h4 id="3-测试通讯"><a href="#3-测试通讯" class="headerlink" title="3. 测试通讯"></a>3. 测试通讯</h4><p>下面是gif效果图<br><img src="https://image.xiaomo.info/linux/tcpServer.gif" alt="tcp在线聊天服务器"></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> linux </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下使用定时器跑任务</title>
      <link href="2016/LinuxCrontab/"/>
      <url>2016/LinuxCrontab/</url>
      
        <content type="html"><![CDATA[<p>我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。</p><a id="more"></a><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ol><li>选好一个目录放shell脚本</li><li>写一个shell,注意最好是echo一句话，方便测试</li><li>确保你的机器上装了crontab服务且处于开启状态</li></ol><h3 id="二、正式开工"><a href="#二、正式开工" class="headerlink" title="二、正式开工"></a>二、正式开工</h3><h4 id="1-检查crontab服务"><a href="#1-检查crontab服务" class="headerlink" title="1. 检查crontab服务"></a>1. 检查crontab服务</h4><p>键入命令 <code>/sbin/service crond status </code><br>返回结果:  <code>crond (pid  6621) is running...</code>  如果是运行状态就是可以的    </p><h4 id="2-写shell的目录"><a href="#2-写shell的目录" class="headerlink" title="2. 写shell的目录"></a>2. 写shell的目录</h4><p>切换到目标目录 <code>cd /data2/xiaomo.info/java/bin</code></p><h4 id="3-开始写shell"><a href="#3-开始写shell" class="headerlink" title="3. 开始写shell"></a>3. 开始写shell</h4><p>创建文件：<code>$: touch gitpull.sh</code><br>打开文件：<code>$: vim gitpull.sh </code><br>粘入以下内容  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /data2/xiaomo.info/myBlog</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'当前时间'</span>`date <span class="string">'+%Y-%m-%d %H:%M:%S'</span>`<span class="string">'执行git clone 命令'</span>;</span><br></pre></td></tr></table></figure><h4 id="4-写定时任务"><a href="#4-写定时任务" class="headerlink" title="4. 写定时任务"></a>4. 写定时任务</h4><p>查看定时任务 <code>$: crontab -l</code><br>创建定时任务 <code>$: crontab -e </code><br>粘入下面的内容   </p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#每分钟 执行git clone 命令</span></span><br><span class="line">*<span class="regexp">/1 * * * * /</span>bin<span class="regexp">/sh /</span>data2<span class="regexp">/xiaomo.info/</span>java<span class="regexp">/bin/gi</span>tpull.sh &gt;&gt;<span class="regexp">/data2/</span>xiaomo.info<span class="regexp">/java/</span>bin<span class="regexp">/git.log &amp;</span></span><br></pre></td></tr></table></figure><h3 id="三、验证设置的定时任务是否生效"><a href="#三、验证设置的定时任务是否生效" class="headerlink" title="三、验证设置的定时任务是否生效"></a>三、验证设置的定时任务是否生效</h3><p>说明：在定时任务中 使用 <code>&gt;&gt;</code> 可以将<code>echo</code>的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   </p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tail -f <span class="regexp">/data2/</span>xiaomo.info<span class="regexp">/java/</span>bin<span class="regexp">/git.log</span></span><br></pre></td></tr></table></figure><p>观察一下一分钟后是否有日志打出，有的话就代表执行成功！！</p><h3 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h3><blockquote><p><a href="http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html" target="_blank" rel="noopener">定时任务参考文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs键盘事件</title>
      <link href="2016/AngularKeyboardEvent/"/>
      <url>2016/AngularKeyboardEvent/</url>
      
        <content type="html"><![CDATA[<p> 使用angularjs的键盘事件来增强用户体验。</p><a id="more"></a><h3 id="一、绑定键盘事件"><a href="#一、绑定键盘事件" class="headerlink" title="一、绑定键盘事件"></a>一、绑定键盘事件</h3><p>（尤其注意：不能用a标签，不然会失效）</p><blockquote><p>推荐button</p></blockquote><h4 id="方法一：ng内置指令"><a href="#方法一：ng内置指令" class="headerlink" title="方法一：ng内置指令"></a>方法一：ng内置指令</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"login()"</span> <span class="attr">ng-keypress</span>=<span class="string">"todoSomething($event)"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-lg"</span> <span class="attr">ng-disabled</span>=<span class="string">"loginForm.$invalid"</span>&gt;</span></span><br><span class="line">    登录</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：在对应的控制器中的$scope上绑定一个todoSomething方法</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$scope.todoSomething=<span class="function"><span class="keyword">function</span><span class="params">($event)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($event.keyCode==<span class="number">13</span>)&#123;<span class="comment">//回车</span></span><br><span class="line">        login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：自定义指令"><a href="#方法二：自定义指令" class="headerlink" title="方法二：自定义指令"></a>方法二：自定义指令</h4><blockquote><p>html</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"login()"</span> <span class="attr">ng-enter</span>=<span class="string">"login()"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-lg"</span> <span class="attr">ng-disabled</span>=<span class="string">"loginForm.$invalid"</span>&gt;</span></span><br><span class="line">    登录</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>指令</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">myApp.directive(<span class="string">'ngEnter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(scope, element, attrs)</span> </span>&#123;</span><br><span class="line">            element.bind(<span class="string">"keydown keypress"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.which === <span class="number">13</span>) &#123;</span><br><span class="line">                    scope.$apply(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                        scope.$eval(attrs.ngEnter);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h3><p>两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低</p><blockquote><p>参考文档：<a href="https://segmentfault.com/a/1190000002634554#articleHeader8" target="_blank" rel="noopener">angularjs学习笔记—事件指令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> angularjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs复选框</title>
      <link href="2016/NgCheckbox/"/>
      <url>2016/NgCheckbox/</url>
      
        <content type="html"><![CDATA[<p>使用angularjs做复选框，这也是一个常见的需求。</p><a id="more"></a><h3 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h3><h4 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"tag in tags.content track by $index "</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span></span><br><span class="line"><span class="xml">               title="标签"</span></span><br><span class="line"><span class="xml">               class="btn "</span></span><br><span class="line"><span class="xml">               id="</span><span class="template-variable">&#123;&#123;tag.id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">               name="</span><span class="template-variable">&#123;&#123;tag.name&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">               ng-checked="isSelected(tag.id)" //动态 true false</span></span><br><span class="line"><span class="xml">               ng-click="updateSelection($event,tag.id)" //将id添加到Array中</span></span><br><span class="line"><span class="xml">               ng-model="tags"&gt;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;tag.name&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="2-controller"><a href="#2-controller" class="headerlink" title="2. controller"></a>2. controller</h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="variable">$scope</span>.selected = [];</span><br><span class="line"><span class="variable">$scope</span>.selectedTags = [];</span><br><span class="line"></span><br><span class="line">//实际操作数组的方法</span><br><span class="line">var updateSelected = <span class="keyword">function</span> (action,<span class="built_in"> id</span>,<span class="built_in"> name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'add'</span> &amp;&amp; <span class="variable">$scope</span>.selected.indexOf<span class="built_in">(id</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$scope</span>.selected.push<span class="built_in">(id</span>);</span><br><span class="line">        <span class="variable">$scope</span>.selectedTags.push<span class="built_in">(name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'remove'</span> &amp;&amp; <span class="variable">$scope</span>.selected.indexOf<span class="built_in">(id</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        var idx = <span class="variable">$scope</span>.selected.indexOf<span class="built_in">(id</span>);</span><br><span class="line">        <span class="variable">$scope</span>.selected.splice(idx, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$scope</span>.selectedTags.splice(idx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="variable">$scope</span>.selected);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//根据传入的动作和要操作<span class="built_in">的id</span>更新Array</span><br><span class="line"><span class="variable">$scope</span>.updateSelection = <span class="keyword">function</span> (<span class="variable">$event</span>,<span class="built_in"> id</span>) &#123;</span><br><span class="line">    var checkbox = <span class="variable">$event</span>.target;</span><br><span class="line">    var action = (checkbox.checked ? <span class="string">'add'</span> : <span class="string">'remove'</span>);</span><br><span class="line">    updateSelected(action,<span class="built_in"> id</span>, checkbox<span class="built_in">.name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//返<span class="built_in">回true</span><span class="built_in"> false</span></span><br><span class="line"><span class="variable">$scope</span>.isSelected = <span class="keyword">function</span> <span class="built_in">(id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$scope</span>.selected.indexOf<span class="built_in">(id</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h3><p><img src="https://image.xiaomo.info/angular/checkbox.gif" alt="checkbox效果图"></p><h3 id="三、参考文档"><a href="#三、参考文档" class="headerlink" title="三、参考文档"></a>三、参考文档</h3><blockquote><p><a href="http://www.cnblogs.com/CheeseZH/p/4517701.html" target="_blank" rel="noopener">ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示</a></p></blockquote><h3 id="四、-附上我github的地址"><a href="#四、-附上我github的地址" class="headerlink" title="四、 附上我github的地址"></a>四、 附上我github的地址</h3><p>   <a href="https://github.com/houko" target="_blank" rel="noopener">https://github.com/houko</a></p>]]></content>
      
      
      <categories>
          
          <category> angularjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2016/MarkdownSyntax/"/>
      <url>2016/MarkdownSyntax/</url>
      
        <content type="html"><![CDATA[<p>markdown的一些基本语法，大致够用了</p><a id="more"></a><h3 id="1-标题-h标签"><a href="#1-标题-h标签" class="headerlink" title="1.标题(h标签)"></a>1.标题(h标签)</h3><p>h1-h6对应1-6个#</p><h3 id="2-列表-li-gt-li"><a href="#2-列表-li-gt-li" class="headerlink" title="2.列表(li&gt;li)"></a>2.列表(li&gt;li)</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>1</span><br><span class="line"><span class="bullet">* </span>2</span><br><span class="line"><span class="bullet">* </span>3</span><br></pre></td></tr></table></figure><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><ul><li>1</li><li>2</li><li>3</li></ul><h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> <span class="number">2</span></span><br><span class="line"><span class="number">3.</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><ol><li>1</li><li>2</li><li>3</li></ol><h3 id="3-引用-blockquote"><a href="#3-引用-blockquote" class="headerlink" title="3.引用(blockquote)"></a>3.引用(blockquote)</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">这个是引用的内容</span></span><br></pre></td></tr></table></figure><h4 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h4><blockquote><p>这个是引用的内容</p></blockquote><h3 id="4-图片与链接"><a href="#4-图片与链接" class="headerlink" title="4.图片与链接"></a>4.图片与链接</h3><h4 id="1-图片"><a href="#1-图片" class="headerlink" title="1. 图片"></a>1. 图片</h4><p>名字、url</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">小莫</span>](<span class="link">http://mouapp.com/Mou_128.png</span>)</span><br></pre></td></tr></table></figure><h5 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h5><p><img src="http://mouapp.com/Mou_128.png" alt="小莫"></p><h4 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h4><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">小莫的主页</span>](<span class="link">http://www.xiaomo.info</span>)</span><br></pre></td></tr></table></figure><h5 id="效果图-4"><a href="#效果图-4" class="headerlink" title="效果图"></a>效果图</h5><p><a href="http://www.xiaomo.info/" target="_blank" rel="noopener">小莫的主页</a></p><h3 id="5-粗体与斜体"><a href="#5-粗体与斜体" class="headerlink" title="5.粗体与斜体"></a>5.粗体与斜体</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">*<span class="strong">*这里是粗体*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>这里是斜体<span class="strong">*</span></span><br></pre></td></tr></table></figure><h5 id="效果图-5"><a href="#效果图-5" class="headerlink" title="效果图"></a>效果图</h5><p><strong>这里是粗体</strong><br><em>这里是斜体</em></p><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h3><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">冒号控制居中样式 连续三根短横线表格</span><br><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| <span class="symbol">:-----------</span>: |<span class="symbol">:--------</span>:  | <span class="symbol">:---</span><span class="symbol">:|</span></span><br><span class="line">| col <span class="number">3</span> is      | right-aligned | <span class="variable">$1600</span> |</span><br><span class="line">| col <span class="number">2</span> is      | centered      |   <span class="variable">$12</span> |</span><br><span class="line">| zebra stripes | are neat      |    <span class="variable">$1</span> |</span><br></pre></td></tr></table></figure><h5 id="效果图-6"><a href="#效果图-6" class="headerlink" title="效果图"></a>效果图</h5><p>冒号控制居中样式 连续三根短横线表格<br>| Tables        | Are           | Cool  |<br>| :———–: |:——–:  | :—:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p><h3 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7.代码框"></a>7.代码框</h3><p>（一个tab即可,如果没效果用3个飘号[esc下面那个]）</p><pre><code>function Hello(){        console.log(&quot;hello&quot;);    }</code></pre><h3 id="8-分割线-hr"><a href="#8-分割线-hr" class="headerlink" title="8.分割线(hr)"></a>8.分割线(hr)</h3><p>三个或三个以上的星号、减号或者下划线</p><h3 id="9-换行、分段"><a href="#9-换行、分段" class="headerlink" title="9.换行、分段"></a>9.换行、分段</h3><p>行末加两个或以上个空格<br>分段：两个回车</p><h3 id="10-带url的目录"><a href="#10-带url的目录" class="headerlink" title="10. 带url的目录"></a>10. 带url的目录</h3><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">1. 安装</span>][<span class="symbol">1</span>]  </span><br><span class="line">[<span class="string">2. 目录结构</span>][<span class="symbol">2</span>]  </span><br><span class="line">[<span class="string">3. 配置说明</span>][<span class="symbol">3</span>]  </span><br><span class="line">[<span class="string">4. 编写博客</span>][<span class="symbol">4</span>]  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/install.html</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/config.html</span></span><br><span class="line">[<span class="symbol">4</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html</span></span><br></pre></td></tr></table></figure><h4 id="效果图-7"><a href="#效果图-7" class="headerlink" title="效果图"></a>效果图</h4><p><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/install.html" target="_blank" rel="noopener">1. 安装</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html" target="_blank" rel="noopener">2. 目录结构</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/config.html" target="_blank" rel="noopener">3. 配置说明</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html" target="_blank" rel="noopener">4. 编写博客</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
